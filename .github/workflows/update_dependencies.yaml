## Update Kaltura-player dependencies
name: Manual update of @playkit-js dependencies

on:
  workflow_dispatch:
    inputs:
      branch_name:
        default: master
        required: true
  # TODO: remove
  push:
    branches:
      - FEC-13477-update-dependenices-script

jobs:
  check_and_update_dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PLAYER_GITHUB_BOT_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.email ${{ secrets.PLAYER_BOT_EMAIL }}
          git config --global user.name ${{ secrets.PLAYER_BOT_USER }}

      - name: Install jq for JSON processing
        run: sudo apt-get -y install jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Check updates Kaltura dependencies
        run: |
          # Define dependencies
          kalturaDependencies=(
            '{"package": "@playkit-js/playkit-js"}'
            '{"package": "@playkit-js/playkit-js-dash"}'
            '{"package": "@playkit-js/playkit-js-hls"}'
            '{"package": "@playkit-js/playkit-js-providers"}'
            '{"package": "@playkit-js/playkit-js-ui"}'
          )

          # Check and update a dependency
          checkAndUpdateDependency() {
            local packageName="$1"
            local currentContent=$(cat package.json)
            local currentVersion=$(echo "$currentContent" | jq -r ".dependencies.\"$packageName\"")

            # Check if the dependency exists in package.json
            if [[ "$currentVersion" != "null" ]]; then
              # Get the latest version of the package using npm
              local latestVersion=$(npm view "$packageName" version)
              
              # Update the package.json file only if the version has changed
              if [[ "$currentVersion" != "$latestVersion" ]]; then
                echo "Update $packageName to version $latestVersion"
                yarn add $packageName@$latestVersion
                echo "COMMIT_REQUIRED=true" >> $GITHUB_ENV
              else
                echo "Dependency $packageName already has the latest version: $latestVersion"
              fi
            else
              echo "No $packageName dependency found in package.json"
            fi
          }

          for dependency in "${kalturaDependencies[@]}"; do
            packageName=$(echo "$dependency" | jq -r ".package")
            checkAndUpdateDependency "$packageName"
          done

      - name: Commit changes
        if: env.COMMIT_REQUIRED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'fix(FEC-00000): Upgrade Kaltura-player dependencies (automated)'
          secrets: inherit
          delete-branch: true
          branch: 'upgrade-npm-dependencies-automated'
          commit-message: 'Upgrade Kaltura-player dependencies (automated)'
