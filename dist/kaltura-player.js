(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd)
    define("KalturaPlayer", [], factory);
  else if (typeof exports === 'object')
    exports["KalturaPlayer"] = factory();
  else
    root["KalturaPlayer"] = factory();
})(this, function () {
  return /******/ (function (modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
      /******/
      /******/ 		// Check if module is in cache
      /******/
      if (installedModules[moduleId]) {
        /******/
        return installedModules[moduleId].exports;
        /******/
      }
      /******/ 		// Create a new module (and put it into the cache)
      /******/
      var module = installedModules[moduleId] = {
        /******/      i: moduleId,
        /******/      l: false,
        /******/      exports: {}
        /******/
      };
      /******/
      /******/ 		// Execute the module function
      /******/
      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/
      /******/ 		// Flag the module as loaded
      /******/
      module.l = true;
      /******/
      /******/ 		// Return the exports of the module
      /******/
      return module.exports;
      /******/
    }

    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
      /******/
      if (!__webpack_require__.o(exports, name)) {
        /******/
        Object.defineProperty(exports, name, {
          /******/        configurable: false,
          /******/        enumerable: true,
          /******/        get: getter
          /******/
        });
        /******/
      }
      /******/
    };
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
      /******/
      var getter = module && module.__esModule ?
        /******/      function getDefault() {
          return module['default'];
        } :
        /******/      function getModuleExports() {
          return module;
        };
      /******/
      __webpack_require__.d(getter, 'a', getter);
      /******/
      return getter;
      /******/
    };
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ 	// __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 132);
    /******/
  })
  /************************************************************************/
  /******/([
    /* 0 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var core = __webpack_require__(22);
      var hide = __webpack_require__(13);
      var redefine = __webpack_require__(14);
      var ctx = __webpack_require__(19);
      var PROTOTYPE = 'prototype';

      var $export = function (type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
        var key, own, out, exp;
        if (IS_GLOBAL) source = name;
        for (key in source) {
          // contains in native
          own = !IS_FORCED && target && target[key] !== undefined;
          // export native or passed
          out = (own ? target : source)[key];
          // bind timers to global for call from export context
          exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
          // extend global
          if (target) redefine(target, key, out, type & $export.U);
          // export
          if (exports[key] != out) hide(exports, key, exp);
          if (IS_PROTO && expProto[key] != out) expProto[key] = out;
        }
      };
      global.core = core;
// type bitmap
      $export.F = 1;   // forced
      $export.G = 2;   // global
      $export.S = 4;   // static
      $export.P = 8;   // proto
      $export.B = 16;  // bind
      $export.W = 32;  // wrap
      $export.U = 64;  // safe
      $export.R = 128; // real proto method for `library`
      module.exports = $export;


      /***/
    }),
    /* 1 */
    /***/ (function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(4);
      module.exports = function (it) {
        if (!isObject(it)) throw TypeError(it + ' is not an object!');
        return it;
      };


      /***/
    }),
    /* 2 */
    /***/ (function (module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
      var global = module.exports = typeof window != 'undefined' && window.Math == Math
        ? window : typeof self != 'undefined' && self.Math == Math ? self
          // eslint-disable-next-line no-new-func
          : Function('return this')();
      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


      /***/
    }),
    /* 3 */
    /***/ (function (module, exports) {

      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };


      /***/
    }),
    /* 4 */
    /***/ (function (module, exports) {

      module.exports = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
      };


      /***/
    }),
    /* 5 */
    /***/ (function (module, exports, __webpack_require__) {

      var store = __webpack_require__(51)('wks');
      var uid = __webpack_require__(34);
      var Symbol = __webpack_require__(2).Symbol;
      var USE_SYMBOL = typeof Symbol == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] =
          USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
      };

      $exports.store = store;


      /***/
    }),
    /* 6 */
    /***/ (function (module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
      module.exports = !__webpack_require__(3)(function () {
        return Object.defineProperty({}, 'a', {
          get: function () {
            return 7;
          }
        }).a != 7;
      });


      /***/
    }),
    /* 7 */
    /***/ (function (module, exports, __webpack_require__) {

      var anObject = __webpack_require__(1);
      var IE8_DOM_DEFINE = __webpack_require__(94);
      var toPrimitive = __webpack_require__(23);
      var dP = Object.defineProperty;

      exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return dP(O, P, Attributes);
        } catch (e) { /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };


      /***/
    }),
    /* 8 */
    /***/ (function (module, exports, __webpack_require__) {

// 7.1.15 ToLength
      var toInteger = __webpack_require__(25);
      var min = Math.min;
      module.exports = function (it) {
        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
      };


      /***/
    }),
    /* 9 */
    /***/ (function (module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
      var defined = __webpack_require__(24);
      module.exports = function (it) {
        return Object(defined(it));
      };


      /***/
    }),
    /* 10 */
    /***/ (function (module, exports) {

      module.exports = function (it) {
        if (typeof it != 'function') throw TypeError(it + ' is not a function!');
        return it;
      };


      /***/
    }),
    /* 11 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
      /* WEBPACK VAR INJECTION */
      (function (module) {
        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        !function (e, t) {
          "object" == ( false ? "undefined" : _typeof(exports)) && "object" == ( false ? "undefined" : _typeof(module)) ? module.exports = t() : true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
            __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
              (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.core = t() : (e.playkit = e.playkit || {}, e.playkit.core = t());
        }(undefined, function () {
          return function (e) {
            function t(i) {
              if (n[i]) return n[i].exports;
              var r = n[i] = {i: i, l: !1, exports: {}};
              return e[i].call(r.exports, r, r.exports, t), r.l = !0, r.exports;
            }

            var n = {};
            return t.m = e, t.c = n, t.d = function (e, n, i) {
              t.o(e, n) || Object.defineProperty(e, n, {configurable: !1, enumerable: !0, get: i});
            }, t.n = function (e) {
              var n = e && e.__esModule ? function () {
                return e.default;
              } : function () {
                return e;
              };
              return t.d(n, "a", n), n;
            }, t.o = function (e, t) {
              return Object.prototype.hasOwnProperty.call(e, t);
            }, t.p = "", t(t.s = 29);
          }([function (e, t, n) {
            "use strict";

            function i(e) {
              return e ? s.get(e) : s;
            }

            function r(e) {
              return i(e).getLevel();
            }

            function a(e, t) {
              i(t).setLevel(e);
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.setLogLevel = t.getLogLevel = t.LogLevel = void 0;
            var o = n(34),
              s = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(o),
              u = {DEBUG: s.DEBUG, INFO: s.INFO, TIME: s.TIME, WARN: s.WARN, ERROR: s.ERROR, OFF: s.OFF};
            s.useDefaults({defaultLevel: s.ERROR}), t.default = i, t.LogLevel = u, t.getLogLevel = r, t.setLogLevel = a;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e(t, n) {
                  i(this, e), this.bubbles = !1, this.cancelable = !1, this.defaultPrevented = !1, this.timeStamp = window.performance ? window.performance.now() : Date.now(), this.type = t, this.isTrusted = !1, this.currentTarget = null, this.target = null, this.stopped = !1, this.payload = n;
                }

                return r(e, [{
                  key: "preventDefault", value: function value() {
                  }
                }, {
                  key: "stopImmediatePropagation", value: function value() {
                    this.stopped = !0;
                  }
                }, {
                  key: "stopPropagation", value: function value() {
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              if (Array.isArray(e)) {
                for (var t = 0, n = Array(e.length); t < e.length; t++) {
                  n[t] = e[t];
                }
                return n;
              }
              return Array.from(e);
            }

            function r(e, t, n) {
              return t in e ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0
              }) : e[t] = n, e;
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                return typeof e === "undefined" ? "undefined" : _typeof(e);
              } : function (e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
              },
              o = {
                isNumber: function isNumber(e) {
                  return Number(e) === e;
                }, isInt: function isInt(e) {
                  return this.isNumber(e) && e % 1 == 0;
                }, isFloat: function isFloat(e) {
                  return this.isNumber(e) && e % 1 != 0;
                }
              },
              s = {
                capitlize: function capitlize(e) {
                  return "string" != typeof e ? e : e.charAt(0).toUpperCase() + e.slice(1);
                }, endsWith: function endsWith(e, t) {
                  return "string" == typeof e && "string" == typeof t && -1 != e.indexOf(t, e.length - t.length);
                }
              },
              u = {
                merge: function merge(e) {
                  var t = {},
                    n = !0,
                    i = !1,
                    r = void 0;
                  try {
                    for (var a, o = e[Symbol.iterator](); !(n = (a = o.next()).done); n = !0) {
                      var s = a.value;
                      Object.assign(t, s);
                    }
                  } catch (e) {
                    i = !0, r = e;
                  } finally {
                    try {
                      !n && o.return && o.return();
                    } finally {
                      if (i) throw r;
                    }
                  }
                  return t;
                }, isObject: function isObject(e) {
                  return e && "object" === (void 0 === e ? "undefined" : a(e)) && !Array.isArray(e);
                }, mergeDeep: function mergeDeep(e) {
                  for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++) {
                    n[a - 1] = arguments[a];
                  }
                  if (!n.length) return e;
                  var o = n.shift();
                  if (this.isObject(e) && this.isObject(o)) for (var s in o) {
                    this.isObject(o[s]) ? (e[s] || Object.assign(e, r({}, s, {})), this.mergeDeep(e[s], o[s])) : Object.assign(e, r({}, s, o[s]));
                  }
                  return this.mergeDeep.apply(this, [e].concat(i(n)));
                }, copyDeep: function copyDeep(e) {
                  var t = this,
                    n = void 0;
                  return Array.isArray(e) ? (n = e.length > 0 ? e.slice(0) : [], n.forEach(function (e, i) {
                    ("object" === (void 0 === e ? "undefined" : a(e)) && e !== {} || Array.isArray(e) && e.length > 0) && (n[i] = t.copyDeep(e));
                  })) : "object" === (void 0 === e ? "undefined" : a(e)) ? (n = Object.assign({}, e), Object.keys(n).forEach(function (e) {
                    ("object" === a(n[e]) && n[e] !== {} || Array.isArray(n[e]) && n[e].length > 0) && (n[e] = t.copyDeep(n[e]));
                  })) : n = e, n;
                }, isEmptyObject: function isEmptyObject(e) {
                  for (var t in e) {
                    if (e.hasOwnProperty(t)) return !1;
                  }
                  return !0;
                }, getPropertyPath: function getPropertyPath(e, t) {
                  return t.split(".").reduce(function (e, t) {
                    return void 0 === e || null === e ? e : e[t];
                  }, e);
                }, hasPropertyPath: function hasPropertyPath(e, t) {
                  if (!t) return !1;
                  for (var n = t.split("."), i = 0; i < n.length; i++) {
                    var r = n[i];
                    if (!e || !e.hasOwnProperty(r)) return !1;
                    e = e[r];
                  }
                  return !0;
                }, defer: function defer() {
                  var e = void 0,
                    t = void 0,
                    n = new Promise(function (n, i) {
                      e = n, t = i;
                    });
                  return n.resolve = e, n.reject = t, n;
                }, bind: function bind(e, t) {
                  return function () {
                    t.apply(e, arguments);
                  };
                }
              },
              l = {
                uniqueId: function uniqueId(e) {
                  var t = 2 + (!e || e < 0 ? 0 : e - 2);
                  return "_" + Math.random().toString(36).substr(2, t);
                }, guid: function guid() {
                  var e = function e() {
                    return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
                  };
                  return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e();
                }
              },
              c = {
                addClassName: function addClassName(e, t) {
                  e.classList ? e.classList.add(t) : c.hasClassName(e, t) || (e.className += t);
                }, removeClassName: function removeClassName(e, t) {
                  e.classList ? e.classList.remove(t) : c.hasClassName(e, t) && (e.className = e.className.replace(new RegExp("(\\s|^)" + t + "(\\s|$)"), " ").replace(/^\s+|\s+$/g, ""));
                }, hasClassName: function hasClassName(e, t) {
                  return e.className && new RegExp("(^|\\s)" + t + "(\\s|$)").test(e.className);
                }, setAttribute: function setAttribute(e, t, n) {
                  e.setAttribute(t, n);
                }, removeAttribute: function removeAttribute(e, t) {
                  e.removeAttribute(t);
                }, setStyle: function setStyle(e, t, n) {
                  void 0 !== e.style.getPropertyValue(t) && e.style.setProperty(t, n);
                }, appendChild: function appendChild(e, t) {
                  e && t && e.appendChild && e.appendChild(t);
                }, removeChild: function removeChild(e, t) {
                  e && t && e.removeChild && e.removeChild(t);
                }, prependTo: function prependTo(e, t) {
                  t.firstChild ? t.insertBefore(e, t.firstChild) : t.appendChild(e);
                }, getElementById: function getElementById(e) {
                  return document.getElementById(e);
                }, createElement: function createElement(e) {
                  return document.createElement(e);
                }, loadScriptAsync: function loadScriptAsync(e) {
                  var t = this;
                  return new Promise(function (n, i) {
                    var r = !1,
                      a = document.getElementsByTagName("script")[0],
                      o = t.createElement("script");
                    o.type = "text/javascript", o.src = e, o.async = !0, o.onload = o.onreadystatechange = function () {
                      r || this.readyState && "complete" !== this.readyState || (r = !0, n(this));
                    }, o.onerror = o.onabort = i, a && a.parentNode && a.parentNode.insertBefore(o, a);
                  });
                }
              },
              f = {
                execute: function execute(e, t) {
                  var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "POST",
                    i = arguments[3],
                    r = new XMLHttpRequest();
                  return new Promise(function (a, o) {
                    r.onreadystatechange = function () {
                      if (4 === r.readyState) if (200 === r.status) {
                        var e = JSON.parse(r.responseText);
                        a(e);
                      } else o(r.responseText);
                    }, r.open(n, e), i && i.forEach(function (e, t) {
                      r.setRequestHeader(t, e);
                    }), r.send(t);
                  });
                }
              };
            t.Number = o, t.String = s, t.Object = u, t.Generator = l, t.Dom = c, t.Http = f;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = n(0),
              o = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(a),
              s = n(37),
              u = n(38),
              l = n(39),
              c = "Error",
              f = function () {
                function e(t, n, r) {
                  var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                  i(this, e), this.severity = t, this.category = n, this.code = r, this.data = o, (0, a.getLogLevel)(c) === a.LogLevel.DEBUG && this._createReadableError(n, r, o);
                }

                return r(e, [{
                  key: "_createReadableError", value: function value(t, n) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                      r = this._getKey(e.Code, n),
                      a = this._getKey(e.Category, t);
                    e._logger.error("Player error " + a + "." + r, i);
                  }
                }, {
                  key: "_getKey", value: function value(e, t) {
                    for (var n in e) {
                      if (t === e[n]) return n;
                    }
                    return "UNKNOWN";
                  }
                }]), e;
              }();
            f.Severity = s.Severity, f.Category = l.Category, f.Code = u.Code, f._logger = (0, o.default)(c), t.default = f;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e() {
                  var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                  i(this, e), this._id = t.id, this._active = t.active, this._label = t.label, this._language = t.language, this._index = t.index;
                }

                return r(e, [{
                  key: "id", get: function get() {
                    return this._id;
                  }
                }, {
                  key: "active", get: function get() {
                    return this._active;
                  }, set: function set(e) {
                    this._active = e;
                  }
                }, {
                  key: "label", get: function get() {
                    return this._label;
                  }
                }, {
                  key: "language", get: function get() {
                    return this._language;
                  }
                }, {
                  key: "index", get: function get() {
                    return this._index;
                  }
                }], [{
                  key: "langComparer", value: function value(e, t) {
                    try {
                      return e = e.toLowerCase(), t = t.toLowerCase(), !!e && (e.startsWith(t) || t.startsWith(e));
                    } catch (e) {
                      return !1;
                    }
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(12),
              s = i(o),
              u = n(1),
              l = (i(u), function () {
                function e() {
                  r(this, e), this._bindingMap = new s.default();
                }

                return a(e, [{
                  key: "destroy", value: function value() {
                    return this.removeAll(), this._bindingMap = null, Promise.resolve();
                  }
                }, {
                  key: "listenOnce", value: function value(e, t, n) {
                    var i = this,
                      r = function r(a) {
                        i.unlisten(e, t, r), n.call(i, a);
                      };
                    this.listen(e, t, r);
                  }
                }, {
                  key: "listen", value: function value(e, t, n) {
                    var i = new c(e, t, n);
                    this._bindingMap && this._bindingMap.push(t, i);
                  }
                }, {
                  key: "unlisten", value: function value(e, t, n) {
                    if (this._bindingMap) for (var i = this._bindingMap.get(t), r = 0; r < i.length; ++r) {
                      var a = i[r];
                      a.target !== e || a.listener !== n && n || (a.unlisten(), this._bindingMap && this._bindingMap.remove(t, a));
                    }
                  }
                }, {
                  key: "removeAll", value: function value() {
                    if (this._bindingMap) {
                      var e = this._bindingMap.getAll(),
                        t = !0,
                        n = !1,
                        i = void 0;
                      try {
                        for (var r, a = e[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) {
                          r.value.unlisten();
                        }
                      } catch (e) {
                        n = !0, i = e;
                      } finally {
                        try {
                          !t && a.return && a.return();
                        } finally {
                          if (n) throw i;
                        }
                      }
                      this._bindingMap && this._bindingMap.clear();
                    }
                  }
                }]), e;
              }()),
              c = function () {
                function e(t, n, i) {
                  r(this, e), this.target = t, this.type = n, this.listener = i, this.target.addEventListener(n, i, !1);
                }

                return a(e, [{
                  key: "unlisten", value: function value() {
                    this.target && (this.target.removeEventListener(this.type, this.listener, !1), this.target = null, this.listener = null);
                  }
                }]), e;
              }();
            t.default = l;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.CUSTOM_EVENTS = t.HTML5_EVENTS = t.PLAYER_EVENTS = void 0;
            var i = n(2),
              r = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(i),
              a = {
                ABORT: "abort",
                CAN_PLAY: "canplay",
                CAN_PLAY_THROUGH: "canplaythrough",
                DURATION_CHANGE: "durationchange",
                EMPTIED: "emptied",
                ENDED: "ended",
                ERROR: "error",
                LOADED_DATA: "loadeddata",
                LOADED_METADATA: "loadedmetadata",
                LOAD_START: "loadstart",
                PAUSE: "pause",
                PLAY: "play",
                PLAYING: "playing",
                PROGRESS: "progress",
                RATE_CHANGE: "ratechange",
                SEEKED: "seeked",
                SEEKING: "seeking",
                STALLED: "stalled",
                SUSPEND: "suspend",
                TIME_UPDATE: "timeupdate",
                VOLUME_CHANGE: "volumechange",
                WAITING: "waiting"
              },
              o = {
                ENTER_FULLSCREEN: "enterfullscreen",
                EXIT_FULLSCREEN: "exitfullscreen",
                REQUESTED_ENTER_FULLSCREEN: "requestedenterfullscreen",
                REQUESTED_EXIT_FULLSCREEN: "requestedexitfullscreen",
                AUTOPLAY_FAILED: "autoplayfailed",
                FALLBACK_TO_MUTED_AUTOPLAY: "fallbacktomutedautoplay",
                CHANGE_SOURCE_STARTED: "changesourcestarted",
                CHANGE_SOURCE_ENDED: "changesourceended",
                MUTE_CHANGE: "mutechange",
                VIDEO_TRACK_CHANGED: "videotrackchanged",
                AUDIO_TRACK_CHANGED: "audiotrackchanged",
                TEXT_TRACK_CHANGED: "texttrackchanged",
                TEXT_CUE_CHANGED: "textcuechanged",
                TRACKS_CHANGED: "trackschanged",
                ABR_MODE_CHANGED: "abrmodechanged",
                PLAYER_STATE_CHANGED: "playerstatechanged",
                FIRST_PLAY: "firstplay",
                SOURCE_SELECTED: "sourceselected",
                TEXT_STYLE_CHANGED: "textstylechanged",
                AD_LOADED: "adloaded",
                AD_STARTED: "adstarted",
                AD_RESUMED: "adresumed",
                AD_PAUSED: "adpaused",
                AD_CLICKED: "adclicked",
                AD_SKIPPED: "adskipped",
                AD_COMPLETED: "adcompleted",
                AD_ERROR: "aderror",
                ALL_ADS_COMPLETED: "alladscompleted",
                AD_BREAK_START: "adbreakstart",
                AD_BREAK_END: "adbreakend",
                AD_FIRST_QUARTILE: "adfirstquartile",
                AD_MIDPOINT: "admidpoint",
                AD_THIRD_QUARTILE: "adthirdquartile",
                USER_CLOSED_AD: "userclosedad",
                AD_VOLUME_CHANGED: "advolumechanged",
                AD_MUTED: "admuted",
                AD_PROGRESS: "adprogress"
              },
              s = r.Object.merge([a, o]);
            t.PLAYER_EVENTS = s, t.HTML5_EVENTS = a, t.CUSTOM_EVENTS = o;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function r(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function a(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var o = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              s = n(4),
              u = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(s),
              l = function (e) {
                function t() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                  i(this, t);
                  var n = r(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                  return n._bandwidth = e.bandwidth, n._width = e.width, n._height = e.height, n;
                }

                return a(t, e), o(t, [{
                  key: "bandwidth", get: function get() {
                    return this._bandwidth;
                  }
                }, {
                  key: "width", get: function get() {
                    return this._width;
                  }
                }, {
                  key: "height", get: function get() {
                    return this._height;
                  }
                }]), t;
              }(u.default);
            t.default = l;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function r(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function a(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var o = n(4),
              s = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(o),
              u = function (e) {
                function t() {
                  return i(this, t), r(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
                }

                return a(t, e), t;
              }(s.default);
            t.default = u;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function r(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function a(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.TextTrack = void 0;
            var o = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              s = n(4),
              u = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(s),
              l = function (e) {
                function t() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                  i(this, t);
                  var n = r(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                  return n._kind = e.kind, n;
                }

                return a(t, e), o(t, [{
                  key: "kind", get: function get() {
                    return this._kind;
                  }
                }]), t;
              }(u.default);
            t.default = l, t.TextTrack = l;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function a(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function o(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var s = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                return typeof e === "undefined" ? "undefined" : _typeof(e);
              } : function (e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
              },
              u = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              l = n(11),
              c = i(l),
              f = n(5),
              d = i(f),
              A = n(32),
              h = i(A),
              _ = n(1),
              p = i(_),
              v = n(13),
              g = i(v),
              y = n(6),
              E = n(18),
              m = i(E),
              b = n(2),
              T = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(b),
              k = n(33),
              S = i(k),
              w = n(0),
              O = i(w),
              N = n(35),
              C = i(N),
              L = n(25),
              M = i(L),
              P = n(14),
              R = (i(P), n(46)),
              D = i(R),
              I = n(48),
              x = i(I),
              U = n(4),
              j = i(U),
              V = n(7),
              H = i(V),
              B = n(8),
              G = i(B),
              F = n(9),
              Y = i(F),
              K = n(26),
              W = i(K),
              X = (n(23), n(24)),
              z = n(49),
              Q = i(z),
              J = n(27),
              q = i(J);
            n(58);
            var Z = [.5, 1, 2, 4],
              $ = "off",
              ee = function (e) {
                function t() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                  r(this, t);
                  var n = a(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                  return n._activeTextCues = [], n._textDisplaySettings = {}, n._playbackAttributesState = {
                    muted: void 0,
                    volume: void 0,
                    rate: void 0,
                    audioLanguage: "",
                    textLanguage: ""
                  }, n._env = c.default, n._tracks = [], n._firstPlay = !0, n._fullscreen = !1, n._repositionCuesTimeout = !1, n._firstPlayInCurrentSession = !0, n._config = n.defaultConfig, n._eventManager = new d.default(), n._posterManager = new h.default(), n._stateManager = new D.default(n), n._pluginManager = new M.default(), n._playbackMiddleware = new Q.default(), n._textStyle = new W.default(), n._createReadyPromise(), n._createPlayerContainer(), n._appendPosterEl(), n.configure(e), n;
                }

                return o(t, e), u(t, null, [{
                  key: "runCapabilities", value: function value() {
                    t._logger.debug("Running player capabilities"), t._engines.forEach(function (e) {
                      return e.runCapabilities();
                    });
                  }
                }, {
                  key: "getCapabilities", value: function value(e) {
                    if (t._logger.debug("Get player capabilities", e), t._playerCapabilities) return e ? Promise.resolve(t._playerCapabilities[e]) : Promise.resolve(t._playerCapabilities);
                    var n = [];
                    return t._engines.forEach(function (e) {
                      return n.push(e.getCapabilities());
                    }), Promise.all(n).then(function (n) {
                      return t._playerCapabilities = {}, n.forEach(function (e) {
                        return Object.assign(t._playerCapabilities, e);
                      }), e ? Promise.resolve(t._playerCapabilities[e]) : Promise.resolve(t._playerCapabilities);
                    });
                  }
                }]), u(t, [{
                  key: "configure", value: function value(e) {
                    if (e.logLevel && w.LogLevel[e.logLevel] && (0, w.setLogLevel)(w.LogLevel[e.logLevel]), T.Object.mergeDeep(this._config, e), this._configureOrLoadPlugins(e.plugins), !T.Object.isEmptyObject(e.sources)) {
                      var n = !!this._engine;
                      n && (this._reset(), t._logger.debug("Change source started"), this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.CHANGE_SOURCE_STARTED))), this._selectEngineByPriority() && (this._appendEngineEl(), this._attachMedia(), this._handlePlaybackOptions(), this._posterManager.setSrc(this._config.metadata.poster), this._handleAutoPlay(), n && (t._logger.debug("Change source ended"), this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.CHANGE_SOURCE_ENDED))));
                    }
                  }
                }, {
                  key: "ready", value: function value() {
                    return this._readyPromise ? this._readyPromise : Promise.resolve();
                  }
                }, {
                  key: "load", value: function value() {
                    var e = this;
                    if (this._engine) {
                      var t = this._config.playback.startTime;
                      this._engine.load(t).then(function (t) {
                        e._tracks = t.tracks, e._addTextTrackOffOption(), e._setDefaultTracks(), e.dispatchEvent(new p.default(y.CUSTOM_EVENTS.TRACKS_CHANGED, {tracks: e._tracks}));
                      }).catch(function (t) {
                        e.dispatchEvent(new p.default(y.HTML5_EVENTS.ERROR, t));
                      });
                    }
                  }
                }, {
                  key: "play", value: function value() {
                    this._engine && this._playbackMiddleware.play(this._play.bind(this));
                  }
                }, {
                  key: "pause", value: function value() {
                    this._engine && this._playbackMiddleware.pause(this._pause.bind(this));
                  }
                }, {
                  key: "getView", value: function value() {
                    return this._el;
                  }
                }, {
                  key: "getVideoElement", value: function value() {
                    if (this._engine) return this._engine.getVideoElement();
                  }
                }, {
                  key: "destroy", value: function value() {
                    this._engine && this._engine.destroy(), this._posterManager.destroy(), this._eventManager.destroy(), this._pluginManager.destroy(), this._stateManager.destroy(), this._activeTextCues = [], this._textDisplaySettings = {}, this._config = {}, this._tracks = [], this._engineType = "", this._streamType = "", this._readyPromise = null, this._firstPlay = !0, this._playbackAttributesState = {}, this._el && T.Dom.removeChild(this._el.parentNode, this._el);
                  }
                }, {
                  key: "isLive", value: function value() {
                    return !!("Live" === this._config.type || this._engine && this._engine.isLive());
                  }
                }, {
                  key: "isDvr", value: function value() {
                    return this.isLive() && this._config.dvr;
                  }
                }, {
                  key: "seekToLiveEdge", value: function value() {
                    this._engine && this.isLive() && this._engine.seekToLiveEdge();
                  }
                }, {
                  key: "getTracks", value: function value(e) {
                    return this._getTracksByType(e);
                  }
                }, {
                  key: "getActiveTracks", value: function value() {
                    return {
                      video: this._getTracksByType(x.default.VIDEO).find(function (e) {
                        return e.active;
                      }), audio: this._getTracksByType(x.default.AUDIO).find(function (e) {
                        return e.active;
                      }), text: this._getTracksByType(x.default.TEXT).find(function (e) {
                        return e.active;
                      })
                    };
                  }
                }, {
                  key: "selectTrack", value: function value(e) {
                    this._engine && (e instanceof H.default ? this._engine.selectVideoTrack(e) : e instanceof G.default ? this._engine.selectAudioTrack(e) : e instanceof Y.default && (e.language === $ ? (this.hideTextTrack(), this._playbackAttributesState.textLanguage = $) : this._engine.selectTextTrack(e)));
                  }
                }, {
                  key: "hideTextTrack", value: function value() {
                    if (this._engine) {
                      this._engine.hideTextTrack(), this._updateTextDisplay([]);
                      var e = this._getTracksByType(x.default.TEXT);
                      e.map(function (e) {
                        return e.active = !1;
                      });
                      var t = e.find(function (e) {
                        return e.language === $;
                      });
                      t && (t.active = !0, this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.TEXT_TRACK_CHANGED, {selectedTextTrack: t})));
                    }
                  }
                }, {
                  key: "enableAdaptiveBitrate", value: function value() {
                    this._engine && this._engine.enableAdaptiveBitrate();
                  }
                }, {
                  key: "isAdaptiveBitrateEnabled", value: function value() {
                    return !!this._engine && this._engine.isAdaptiveBitrateEnabled();
                  }
                }, {
                  key: "setTextDisplaySettings", value: function value(e) {
                    this._textDisplaySettings = e, this._updateCueDisplaySettings();
                    for (var t = 0; t < this._activeTextCues.length; t++) {
                      this._activeTextCues[t].hasBeenReset = !0;
                    }
                    this._updateTextDisplay(this._activeTextCues);
                  }
                }, {
                  key: "skipAd", value: function value() {
                    var e = this._pluginManager.get("ima");
                    e && "function" == typeof e.skipAd && e.skipAd();
                  }
                }, {
                  key: "playAdNow", value: function value(e) {
                    var t = this._pluginManager.get("ima");
                    t && "function" == typeof t.playAdNow && t.playAdNow(e);
                  }
                }, {
                  key: "isFullscreen", value: function value() {
                    return this._fullscreen;
                  }
                }, {
                  key: "notifyEnterFullscreen", value: function value() {
                    this._fullscreen || (this._fullscreen = !0, this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.ENTER_FULLSCREEN)));
                  }
                }, {
                  key: "notifyExitFullscreen", value: function value() {
                    this._fullscreen && (this._fullscreen = !1, this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.EXIT_FULLSCREEN)));
                  }
                }, {
                  key: "enterFullscreen", value: function value() {
                    this._fullscreen || this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.REQUESTED_ENTER_FULLSCREEN));
                  }
                }, {
                  key: "exitFullscreen", value: function value() {
                    this._fullscreen && this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.REQUESTED_EXIT_FULLSCREEN));
                  }
                }, {
                  key: "getLogLevel", value: function value(e) {
                    return (0, w.getLogLevel)(e);
                  }
                }, {
                  key: "setLogLevel", value: function value(e, t) {
                    (0, w.setLogLevel)(e, t);
                  }
                }, {
                  key: "_createPlayerContainer", value: function value() {
                    var e = this._el = T.Dom.createElement("div");
                    T.Dom.addClassName(e, "playkit-container"), this._playerId = T.Generator.uniqueId(5), T.Dom.setAttribute(e, "id", this._playerId), T.Dom.setAttribute(e, "tabindex", "-1");
                  }
                }, {
                  key: "_appendPosterEl", value: function value() {
                    if (this._el) {
                      var e = this._posterManager.getElement();
                      T.Dom.addClassName(e, "playkit-poster"), T.Dom.appendChild(this._el, e);
                    }
                  }
                }, {
                  key: "_appendEngineEl", value: function value() {
                    if (this._el && this._engine) {
                      var e = this._engine.getVideoElement();
                      T.Dom.addClassName(e, "playkit-engine");
                      var t = "playkit-engine-" + this._engine.id;
                      T.Dom.addClassName(e, t), T.Dom.prependTo(e, this._el);
                    }
                  }
                }, {
                  key: "_configureOrLoadPlugins", value: function value() {
                    var e = this,
                      t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    t && Object.keys(t).forEach(function (n) {
                      var i = e._pluginManager.get(n);
                      if (i) i.updateConfig(t[n]), e._config.plugins[n] = i.getConfig(); else if (e._engine) delete e._config.plugins[n]; else {
                        e._pluginManager.load(n, e, t[n]);
                        var r = e._pluginManager.get(n);
                        r && (e._config.plugins[n] = r.getConfig(), "function" == typeof r.getMiddlewareImpl && e._playbackMiddleware.use(r.getMiddlewareImpl()));
                      }
                    });
                  }
                }, {
                  key: "_createReadyPromise", value: function value() {
                    var e = this;
                    this._readyPromise = new Promise(function (t, n) {
                      e._eventManager.listen(e, y.CUSTOM_EVENTS.TRACKS_CHANGED, t), e._eventManager.listen(e, y.HTML5_EVENTS.ERROR, n);
                    }).catch(function () {
                    });
                  }
                }, {
                  key: "_selectEngineByPriority", value: function value() {
                    var e = this,
                      n = this._config.playback.streamPriority,
                      i = this._config.playback.preferNative,
                      r = this._config.sources,
                      a = !0,
                      o = !1,
                      u = void 0;
                    try {
                      for (var l, c = n[Symbol.iterator](); !(a = (l = c.next()).done); a = !0) {
                        var f = function () {
                          var n = l.value,
                            a = "string" == typeof n.engine ? n.engine.toLowerCase() : "",
                            o = "string" == typeof n.format ? n.format.toLowerCase() : "",
                            s = t._engines.find(function (e) {
                              return e.id === a;
                            });
                          if (s) {
                            var u = r[o];
                            if (u && u.length > 0) {
                              var c = u[0];
                              if (s.canPlaySource(c, i[o])) return t._logger.debug("Source selected: ", u), e._loadEngine(s, c), e._engineType = a, e._streamType = o, e.dispatchEvent(new p.default(y.CUSTOM_EVENTS.SOURCE_SELECTED, {selectedSource: u})), {v: !0};
                            }
                          }
                        }();
                        if ("object" === (void 0 === f ? "undefined" : s(f))) return f.v;
                      }
                    } catch (e) {
                      o = !0, u = e;
                    } finally {
                      try {
                        !a && c.return && c.return();
                      } finally {
                        if (o) throw u;
                      }
                    }
                    return t._logger.warn("No playable engines was found to play the given sources"), !1;
                  }
                }, {
                  key: "_loadEngine", value: function value(e, t) {
                    this._engine ? this._engine.id === e.id ? this._engine.restore(t, this._config) : (this._engine.destroy(), this._engine = e.createEngine(t, this._config)) : this._engine = e.createEngine(t, this._config);
                  }
                }, {
                  key: "_attachMedia", value: function value() {
                    var e = this;
                    this._engine && (Object.keys(y.HTML5_EVENTS).forEach(function (t) {
                      e._eventManager.listen(e._engine, y.HTML5_EVENTS[t], function (t) {
                        return e.dispatchEvent(t);
                      });
                    }), this._eventManager.listen(this._engine, y.HTML5_EVENTS.SEEKED, function () {
                      var t = e._env.browser.name;
                      "Edge" !== t && "IE" !== t || e._removeTextCuePatch();
                    }), this._eventManager.listen(this._engine, y.CUSTOM_EVENTS.VIDEO_TRACK_CHANGED, function (t) {
                      return e._markActiveTrack(t.payload.selectedVideoTrack), e.dispatchEvent(t);
                    }), this._eventManager.listen(this._engine, y.CUSTOM_EVENTS.AUDIO_TRACK_CHANGED, function (t) {
                      return e._playbackAttributesState.audioLanguage = t.payload.selectedAudioTrack.language, e._markActiveTrack(t.payload.selectedAudioTrack), e.dispatchEvent(t);
                    }), this._eventManager.listen(this._engine, y.CUSTOM_EVENTS.TEXT_TRACK_CHANGED, function (t) {
                      return e._playbackAttributesState.textLanguage = t.payload.selectedTextTrack.language, e._markActiveTrack(t.payload.selectedTextTrack), e.dispatchEvent(t);
                    }), this._eventManager.listen(this._engine, y.CUSTOM_EVENTS.TEXT_CUE_CHANGED, function (t) {
                      return e._onCueChange(t);
                    }), this._eventManager.listen(this._engine, y.CUSTOM_EVENTS.ABR_MODE_CHANGED, function (t) {
                      return e.dispatchEvent(t);
                    }), this._eventManager.listen(this._engine, y.CUSTOM_EVENTS.AUTOPLAY_FAILED, function (t) {
                      e.pause(), e.dispatchEvent(t);
                    }), this._eventManager.listen(this, y.HTML5_EVENTS.PLAY, this._onPlay.bind(this)), this._eventManager.listen(this, y.HTML5_EVENTS.ENDED, this._onEnded.bind(this)), this._eventManager.listen(this, y.CUSTOM_EVENTS.MUTE_CHANGE, function () {
                      e._playbackAttributesState.muted = e.muted;
                    }), this._eventManager.listen(this, y.HTML5_EVENTS.VOLUME_CHANGE, function () {
                      e._playbackAttributesState.volume = e.volume;
                    }), this._eventManager.listen(this, y.HTML5_EVENTS.RATE_CHANGE, function () {
                      e._playbackAttributesState.rate = e.playbackRate;
                    }), this._eventManager.listen(this, y.CUSTOM_EVENTS.ENTER_FULLSCREEN, function () {
                      e._resetTextCuesAndReposition();
                    }), this._eventManager.listen(this, y.CUSTOM_EVENTS.EXIT_FULLSCREEN, function () {
                      e._resetTextCuesAndReposition();
                    }));
                  }
                }, {
                  key: "_resetTextCuesAndReposition", value: function value() {
                    var e = this;
                    this._updateTextDisplay([]);
                    for (var t = 0; t < this._activeTextCues.length; t++) {
                      this._activeTextCues[t].hasBeenReset = !0;
                    }
                    this._repositionCuesTimeout && clearTimeout(this._repositionCuesTimeout), this._repositionCuesTimeout = setTimeout(function () {
                      (0, X.processCues)(window, e._activeTextCues, e._textDisplayEl), e._repositionCuesTimeout = !1;
                    }, 1e3);
                  }
                }, {
                  key: "_removeTextCuePatch", value: function value() {
                    var e = this,
                      t = this._activeTextCues.filter(function (t) {
                        var n = t._endTime,
                          i = t._startTime,
                          r = e.currentTime;
                        if (r < n && r > i) return t;
                      });
                    this._updateTextDisplay(t);
                  }
                }, {
                  key: "_handlePlaybackOptions", value: function value() {
                    this._config.playback = this._config.playback || {}, "boolean" == typeof this._playbackAttributesState.muted ? this.muted = this._playbackAttributesState.muted : "boolean" == typeof this._config.playback.muted && (this.muted = this._config.playback.muted), "number" == typeof this._playbackAttributesState.volume ? this.volume = this._playbackAttributesState.volume : "number" == typeof this._config.playback.volume && (this.volume = this._config.playback.volume), "boolean" == typeof this._config.playback.playsinline && (this.playsinline = this._config.playback.playsinline), this._canPreload() && this.load();
                  }
                }, {
                  key: "_canPreload", value: function value() {
                    return !this._config.playback.autoplay && "auto" === this._config.playback.preload && this._config.plugins && !this._config.plugins.ima;
                  }
                }, {
                  key: "_handleAutoPlay", value: function value() {
                    var e = this;
                    if (!0 === this._config.playback.autoplay) {
                      if (this.muted || !this._firstPlayInCurrentSession) this.play(); else {
                        var n = this._config.playback.allowMutedAutoPlay;
                        t.getCapabilities(this.engineType).then(function (i) {
                          i.autoplay ? (t._logger.debug("Start autoplay"), e.play()) : n ? (t._logger.debug("Fallback to muted autoplay"), e.muted = !0, e.play(), e.dispatchEvent(new p.default(y.CUSTOM_EVENTS.FALLBACK_TO_MUTED_AUTOPLAY))) : (t._logger.warn("Autoplay failed, pause player"), e._posterManager.show(), e.load(), e.ready().then(function () {
                            return e.pause();
                          }), e.dispatchEvent(new p.default(y.CUSTOM_EVENTS.AUTOPLAY_FAILED)));
                        });
                      }
                    } else this._posterManager.show();
                  }
                }, {
                  key: "_play", value: function value() {
                    var e = this;
                    this._engine.src ? (this.isLive() && !this.isDvr() && this.seekToLiveEdge(), this._engine.play()) : (this.load(), this.ready().then(function () {
                      e._engine.play();
                    }).catch(function (t) {
                      e.dispatchEvent(new p.default(y.HTML5_EVENTS.ERROR, t));
                    }));
                  }
                }, {
                  key: "_pause", value: function value() {
                    this._engine.pause();
                  }
                }, {
                  key: "_onPlay", value: function value() {
                    this._firstPlay && (this._firstPlay = !1, this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.FIRST_PLAY)), this._posterManager.hide(), "number" == typeof this._playbackAttributesState.rate && (this.playbackRate = this._playbackAttributesState.rate));
                  }
                }, {
                  key: "_onEnded", value: function value() {
                    this.paused || this._pause();
                  }
                }, {
                  key: "_reset", value: function value() {
                    this.pause(), this._posterManager.reset(), this._stateManager.reset(), this._pluginManager.reset(), this._eventManager.removeAll(), this._activeTextCues = [], this._updateTextDisplay([]), this._tracks = [], this._firstPlay = !0, this._firstPlayInCurrentSession = !1, this._engineType = "", this._streamType = "", this._createReadyPromise();
                  }
                }, {
                  key: "_getTracksByType", value: function value(e) {
                    return e ? this._tracks.filter(function (t) {
                      return e === x.default.VIDEO ? t instanceof H.default : e === x.default.AUDIO ? t instanceof G.default : e !== x.default.TEXT || t instanceof Y.default;
                    }) : this._tracks;
                  }
                }, {
                  key: "_markActiveTrack", value: function value(e) {
                    var t = void 0;
                    if (e instanceof H.default ? t = x.default.VIDEO : e instanceof G.default ? t = x.default.AUDIO : e instanceof Y.default && (t = x.default.TEXT), t) for (var n = this.getTracks(t), i = 0; i < n.length; i++) {
                      n[i].active = e.index === i;
                    }
                  }
                }, {
                  key: "_onCueChange", value: function value(e) {
                    t._logger.debug("Text cue changed", e.payload.cues), this._activeTextCues = e.payload.cues, this._updateCueDisplaySettings(), this._updateTextDisplay(this._activeTextCues);
                  }
                }, {
                  key: "_updateCueDisplaySettings", value: function value() {
                    for (var e = this._activeTextCues, t = this._textDisplaySettings, n = 0; n < e.length; n++) {
                      var i = e[n];
                      for (var r in t) {
                        i[r] = t[r];
                      }
                    }
                  }
                }, {
                  key: "_updateTextDisplay", value: function value(e) {
                    void 0 === this._textDisplayEl && (this._textDisplayEl = T.Dom.createElement("div"), T.Dom.addClassName(this._textDisplayEl, "playkit-subtitles"), T.Dom.appendChild(this._el, this._textDisplayEl)), (0, X.processCues)(window, e, this._textDisplayEl);
                  }
                }, {
                  key: "_addTextTrackOffOption", value: function value() {
                    var e = this.getTracks(x.default.TEXT);
                    e && e.length && this._tracks.push(new Y.default({
                      active: !1,
                      index: e.length,
                      kind: "subtitles",
                      label: "Off",
                      language: $
                    }));
                  }
                }, {
                  key: "_setDefaultTracks", value: function value() {
                    var e = this.getActiveTracks(),
                      t = this.config.playback,
                      n = this._getTracksByType(x.default.TEXT).find(function (e) {
                        return Y.default.langComparer($, e.language);
                      });
                    this.hideTextTrack();
                    var i = this._playbackAttributesState.textLanguage || this._getLanguage(t.textLanguage, e.text, x.default.TEXT),
                      r = this._playbackAttributesState.audioLanguage || t.audioLanguage;
                    this._setDefaultTrack(x.default.TEXT, i, n), this._setDefaultTrack(x.default.AUDIO, r, e.audio);
                  }
                }, {
                  key: "_getLanguage", value: function value(e, t, n) {
                    var i = e;
                    if ("auto" === i) {
                      var r = this._getTracksByType(n),
                        a = r.find(function (e) {
                          return j.default.langComparer(S.default.language, e.language);
                        });
                      a ? i = a.language : t && t.language !== $ ? i = t.language : r && r.length > 0 && (i = r[0].language);
                    }
                    return i;
                  }
                }, {
                  key: "_setDefaultTrack", value: function value(e, t, n) {
                    var i = this._getTracksByType(e).find(function (e) {
                      return j.default.langComparer(t, e.language);
                    });
                    i ? this.selectTrack(i) : this.selectTrack(n);
                  }
                }, {
                  key: "buffered", get: function get() {
                    if (this._engine) return this._engine.buffered;
                  }
                }, {
                  key: "currentTime", set: function set(e) {
                    if (this._engine && T.Number.isNumber(e)) {
                      var t = e;
                      e < 0 && (t = 0), t > this._engine.duration - .1 && (t = this._engine.duration - .1), this._engine.currentTime = t;
                    }
                  }, get: function get() {
                    if (this._engine) return this._engine.currentTime;
                  }
                }, {
                  key: "duration", get: function get() {
                    if (this._engine) return this._engine.duration;
                  }
                }, {
                  key: "volume", set: function set(e) {
                    if (this._engine && (T.Number.isFloat(e) || 0 === e || 1 === e)) {
                      var t = e;
                      t < 0 && (t = 0), t > 1 && (t = 1), this._engine.volume = t;
                    }
                  }, get: function get() {
                    if (this._engine) return this._engine.volume;
                  }
                }, {
                  key: "paused", get: function get() {
                    if (this._engine) return this._engine.paused;
                  }
                }, {
                  key: "seeking", get: function get() {
                    if (this._engine) return this._engine.seeking;
                  }
                }, {
                  key: "playsinline", set: function set(e) {
                    this._engine && (this._engine.playsinline = e);
                  }, get: function get() {
                    if (this._engine) return this._engine.playsinline;
                  }
                }, {
                  key: "muted", set: function set(e) {
                    this._engine && (this._engine.muted = e, this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.MUTE_CHANGE, {mute: e})));
                  }, get: function get() {
                    if (this._engine) return this._engine.muted;
                  }
                }, {
                  key: "src", get: function get() {
                    if (this._engine) return this._engine.src;
                  }
                }, {
                  key: "dimensions", get: function get() {
                    return {width: this._el.clientWidth, height: this._el.clientHeight};
                  }
                }, {
                  key: "poster", get: function get() {
                    return this._posterManager.src;
                  }
                }, {
                  key: "playbackRate", set: function set(e) {
                    this._engine && (this._engine.playbackRate = e);
                  }, get: function get() {
                    if (this._engine) return this._engine.playbackRate;
                  }
                }, {
                  key: "playbackRates", get: function get() {
                    return Z;
                  }
                }, {
                  key: "defaultPlaybackRate", get: function get() {
                    return 1;
                  }
                }, {
                  key: "engineType", get: function get() {
                    return this._engineType;
                  }
                }, {
                  key: "streamType", get: function get() {
                    return this._streamType;
                  }
                }, {
                  key: "env", get: function get() {
                    return this._env;
                  }
                }, {
                  key: "config", get: function get() {
                    return T.Object.mergeDeep({}, this._config);
                  }
                }, {
                  key: "sessionId", set: function set(e) {
                    this._config.session = this._config.session || {}, this._config.session.id = e;
                  }
                }, {
                  key: "textStyle", set: function set(e) {
                    if (!(e instanceof W.default)) throw new Error("Style must be instance of TextStyle");
                    var n = T.Dom.getElementById("playkit-subtitles-style");
                    n || (n = T.Dom.createElement("style"), T.Dom.setAttribute(n, "id", "playkit-subtitles-style"), T.Dom.appendChild(document.head, n));
                    for (var i = n.sheet; i.cssRules.length;) {
                      i.deleteRule(0);
                    }
                    try {
                      this._config.playback.useNativeTextTrack ? i.insertRule("video.playkit-engine::cue { " + e.toCSS() + " }", 0) : i.insertRule("#" + this._playerId + " .playkit-subtitles > div > div > div { " + e.toCSS() + " }", 0), this._textStyle = e, this.dispatchEvent(new p.default(y.CUSTOM_EVENTS.TEXT_STYLE_CHANGED));
                    } catch (e) {
                      t._logger.error(e.message);
                    }
                  }, get: function get() {
                    return this._textStyle.clone();
                  }
                }, {
                  key: "defaultConfig", get: function get() {
                    return new q.default().toJSON();
                  }
                }, {
                  key: "Event", get: function get() {
                    return y.PLAYER_EVENTS;
                  }
                }, {
                  key: "TextStyle", get: function get() {
                    return W.default;
                  }
                }, {
                  key: "State", get: function get() {
                    return m.default;
                  }
                }, {
                  key: "Track", get: function get() {
                    return x.default;
                  }
                }, {
                  key: "LogLevel", get: function get() {
                    return w.LogLevel;
                  }
                }]), t;
              }(g.default);
            ee._logger = (0, O.default)("Player"), ee._engines = [C.default], t.default = ee;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            var i = n(30),
              r = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(i),
              a = new r.default().getResult();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e() {
                  i(this, e), this._map = new Map();
                }

                return r(e, [{
                  key: "push", value: function value(e, t) {
                    if (this._map.has(e)) {
                      var n = this._map.get(e);
                      Array.isArray(n) && (n.push(t), this._map.set(e, n));
                    } else this._map.set(e, [t]);
                  }
                }, {
                  key: "set", value: function value(e, t) {
                    this._map.set(e, t);
                  }
                }, {
                  key: "has", value: function value(e) {
                    return this._map.has(e);
                  }
                }, {
                  key: "get", value: function value(e) {
                    var t = this._map.get(e);
                    return t ? t.slice() : [];
                  }
                }, {
                  key: "getAll", value: function value() {
                    var e = [],
                      t = !0,
                      n = !1,
                      i = void 0;
                    try {
                      for (var r, a = this._map.values()[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) {
                        var o = r.value;
                        e = e.concat(o);
                      }
                    } catch (e) {
                      n = !0, i = e;
                    } finally {
                      try {
                        !t && a.return && a.return();
                      } finally {
                        if (n) throw i;
                      }
                    }
                    return e;
                  }
                }, {
                  key: "remove", value: function value(e, t) {
                    if (this._map.has(e)) {
                      var n = this._map.get(e);
                      if (Array.isArray(n)) for (var i = 0; i < n.length; ++i) {
                        n[i] == t && (n.splice(i, 1), --i);
                      }
                    }
                  }
                }, {
                  key: "keys", value: function value() {
                    return this._map.keys();
                  }
                }, {
                  key: "clear", value: function value() {
                    this._map.clear();
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(1),
              s = (i(o), n(12)),
              u = i(s),
              l = function () {
                function e() {
                  r(this, e), this._listeners = new u.default(), this.dispatchTarget = this;
                }

                return a(e, [{
                  key: "addEventListener", value: function value(e, t) {
                    this._listeners.push(e, t);
                  }
                }, {
                  key: "removeEventListener", value: function value(e, t) {
                    this._listeners.remove(e, t);
                  }
                }, {
                  key: "dispatchEvent", value: function value(e) {
                    for (var t = this._listeners.get(e.type) || [], n = 0; n < t.length; ++n) {
                      e.target = this.dispatchTarget, e.currentTarget = this.dispatchTarget;
                      var i = t[n];
                      try {
                        i.handleEvent ? i.handleEvent(e) : i.call(this, e);
                      } catch (e) {
                      }
                      if (e.stopped) break;
                    }
                    return e.defaultPrevented;
                  }
                }]), e;
              }();
            t.default = l;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(10),
              s = (i(o), n(0)),
              u = i(s),
              l = n(2),
              c = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(l),
              f = n(5),
              d = i(f),
              A = n(3),
              h = i(A),
              _ = n(1),
              p = i(_),
              v = function () {
                function e(t, n, i) {
                  r(this, e), this.name = t, this.player = n, this.eventManager = new d.default(), this.logger = (0, u.default)(c.String.capitlize(this.name)), this.config = {}, c.Object.mergeDeep(this.config, this.constructor.defaultConfig, i);
                }

                return a(e, null, [{
                  key: "createPlugin", value: function value(e, t) {
                    return new this(e, t, arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {});
                  }
                }, {
                  key: "isValid", value: function value() {
                    throw new h.default(h.default.Severity.CRITICAL, h.default.Category.PLAYER, h.default.Code.RUNTIME_ERROR_METHOD_NOT_IMPLEMENTED, "isValid()");
                  }
                }]), a(e, [{
                  key: "getConfig", value: function value(e) {
                    return e ? c.Object.copyDeep(this.config[e]) : c.Object.copyDeep(this.config);
                  }
                }, {
                  key: "updateConfig", value: function value(e) {
                    c.Object.mergeDeep(this.config, e);
                  }
                }, {
                  key: "destroy", value: function value() {
                  }
                }, {
                  key: "reset", value: function value() {
                  }
                }, {
                  key: "getName", value: function value() {
                    return this.name;
                  }
                }, {
                  key: "dispatchEvent", value: function value(e, t) {
                    this.logger.debug("Fire event: " + e, t), this.player.dispatchEvent(new p.default(e, t));
                  }
                }]), e;
              }();
            v.defaultConfig = {}, t.default = v;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e() {
                  i(this, e);
                }

                return r(e, [{
                  key: "callNext", value: function value(e) {
                    e && e();
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = (t.EngineName = {
                HTML5: "html5",
                FLASH: "flash",
                SILVERLIGHT: "silverlight"
              }, t.FormatName = {HLS: "hls", DASH: "dash", PROGRESSIVE: "progressive"}, function () {
                function e(t, n) {
                  i(this, e), this._engine = t, this._format = n;
                }

                return r(e, [{
                  key: "engine", get: function get() {
                    return this._engine;
                  }
                }, {
                  key: "format", get: function get() {
                    return this._format;
                  }
                }]), r(e, [{
                  key: "toJSON", value: function value() {
                    return {engine: this.engine, format: this.format};
                  }
                }]), e;
              }());
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = n(28),
              o = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(a),
              s = function () {
                function e(t, n, r) {
                  i(this, e), this._url = n, this._mimetype = t, r && (this._id = r);
                }

                return r(e, [{
                  key: "url", get: function get() {
                    return this._url;
                  }
                }, {
                  key: "mimetype", get: function get() {
                    return this._mimetype;
                  }
                }, {
                  key: "id", get: function get() {
                    return this._id;
                  }, set: function set(e) {
                    this._id = e;
                  }
                }, {
                  key: "bandwidth", get: function get() {
                    return this._bandwidth;
                  }, set: function set(e) {
                    this._bandwidth = e;
                  }
                }, {
                  key: "width", get: function get() {
                    return this._width;
                  }, set: function set(e) {
                    this._width = e;
                  }
                }, {
                  key: "height", get: function get() {
                    return this._height;
                  }, set: function set(e) {
                    this._height = e;
                  }
                }, {
                  key: "drmData", get: function get() {
                    return this._drmData;
                  }, set: function set(e) {
                    var t = this;
                    this._drmData = [], e.forEach(function (e) {
                      return t._drmData.push(new o.default(e.scheme, e.licenseUrl, e.certificate));
                    });
                  }
                }]), r(e, [{
                  key: "toJSON", value: function value() {
                    var e = {mimetype: this.mimetype, url: this.url};
                    return this.id && (e.id = this.id), this.bandwidth && (e.bandwidth = this.bandwidth), this.width && (e.width = this.width), this.height && (e.height = this.height), this.drmData && (e.drmData = [], this.drmData.forEach(function (t) {
                      e.drmData && e.drmData.push(t.toJSON());
                    })), e;
                  }
                }]), e;
              }();
            t.default = s;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            var i = {IDLE: "idle", LOADING: "loading", PLAYING: "playing", PAUSED: "paused", BUFFERING: "buffering"};
            t.default = i;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.registerMediaSourceAdapter = void 0;
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(36),
              s = i(o),
              u = n(0),
              l = i(u),
              c = function () {
                function e() {
                  r(this, e);
                }

                return a(e, null, [{
                  key: "register", value: function value(t) {
                    t && (e._mediaSourceAdapters.includes(t) ? e._logger.debug("Adapter <" + t.id + "> is already registered, do not register again") : (e._logger.debug("Adapter <" + t.id + "> has been registered successfully"), e._mediaSourceAdapters.push(t)));
                  }
                }, {
                  key: "unRegister", value: function value(t) {
                    var n = e._mediaSourceAdapters.indexOf(t);
                    n > -1 && (e._logger.debug("Unregistered <" + t.id + "> adapter"), e._mediaSourceAdapters.splice(n, 1));
                  }
                }, {
                  key: "canPlaySource", value: function value(t) {
                    var n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    e._orderMediaSourceAdapters(n);
                    var i = e._mediaSourceAdapters;
                    if (t && t.mimetype) for (var r = 0; r < i.length; r++) {
                      if (i[r].canPlayType(t.mimetype) && (!t.drmData || i[r].canPlayDrm(t.drmData))) return e._selectedAdapter = i[r], e._logger.debug("Selected adapter is <" + e._selectedAdapter.id + ">"), !0;
                    }
                    return !1;
                  }
                }, {
                  key: "_orderMediaSourceAdapters", value: function value(t) {
                    e._mediaSourceAdapters = e._mediaSourceAdapters.filter(function (e) {
                      return "NativeAdapter" !== e.id;
                    }), t ? e._mediaSourceAdapters.unshift(s.default) : e._mediaSourceAdapters.push(s.default);
                  }
                }, {
                  key: "getMediaSourceAdapter", value: function value(t, n, i) {
                    return t && n && i ? (e._selectedAdapter || e.canPlaySource(n, !0), e._selectedAdapter ? e._selectedAdapter.createAdapter(t, n, i) : null) : null;
                  }
                }, {
                  key: "destroy", value: function value() {
                    e._selectedAdapter = null;
                  }
                }]), e;
              }();
            c._logger = (0, l.default)("MediaSourceProvider"), c._mediaSourceAdapters = [s.default], c._selectedAdapter = null, t.default = c;
            var f = c.register;
            t.registerMediaSourceAdapter = f;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function a(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function o(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var s = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              u = n(1),
              l = i(u),
              c = n(13),
              f = i(c),
              d = n(3),
              A = i(d),
              h = n(6),
              _ = n(0),
              p = i(_),
              v = n(4),
              g = (i(v), n(7)),
              y = i(g),
              E = n(8),
              m = i(E),
              b = n(9),
              T = i(b),
              k = function (e) {
                function t(e, n) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                  r(this, t);
                  var o = a(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                  return o._videoElement = e, o._sourceObj = n, o._config = i, o;
                }

                return o(t, e), s(t, null, [{
                  key: "isSupported", value: function value() {
                    return !0;
                  }
                }]), s(t, [{
                  key: "destroy", value: function value() {
                    return this._sourceObj = null, this._config = null, Promise.resolve();
                  }
                }, {
                  key: "_onTrackChanged", value: function value(e) {
                    e instanceof y.default ? this._trigger(t.CustomEvents.VIDEO_TRACK_CHANGED, {selectedVideoTrack: e}) : e instanceof m.default ? this._trigger(t.CustomEvents.AUDIO_TRACK_CHANGED, {selectedAudioTrack: e}) : e instanceof T.default && this._trigger(t.CustomEvents.TEXT_TRACK_CHANGED, {selectedTextTrack: e});
                  }
                }, {
                  key: "_trigger", value: function value(e, t) {
                    this.dispatchEvent(new l.default(e, t));
                  }
                }, {
                  key: "load", value: function value() {
                    return t._throwNotImplementedError("load");
                  }
                }, {
                  key: "selectVideoTrack", value: function value(e) {
                    return t._throwNotImplementedError("selectVideoTrack");
                  }
                }, {
                  key: "selectAudioTrack", value: function value(e) {
                    t._throwNotImplementedError("selectAudioTrack");
                  }
                }, {
                  key: "selectTextTrack", value: function value(e) {
                    t._throwNotImplementedError("selectTextTrack");
                  }
                }, {
                  key: "hideTextTrack", value: function value() {
                    t._throwNotImplementedError("hideTextTrack");
                  }
                }, {
                  key: "enableAdaptiveBitrate", value: function value() {
                    t._throwNotImplementedError("enableAdaptiveBitrate");
                  }
                }, {
                  key: "isAdaptiveBitrateEnabled", value: function value() {
                    return t._throwNotImplementedError("isAdaptiveBitrateEnabled");
                  }
                }, {
                  key: "seekToLiveEdge", value: function value() {
                    t._throwNotImplementedError("seekToLiveEdge");
                  }
                }, {
                  key: "isLive", value: function value() {
                    return t._throwNotImplementedError("isLive");
                  }
                }, {
                  key: "src", get: function get() {
                    return t._throwNotImplementedError("get src");
                  }
                }, {
                  key: "currentTime", get: function get() {
                    return this._videoElement.currentTime;
                  }, set: function set(e) {
                    this._videoElement.currentTime = e;
                  }
                }, {
                  key: "duration", get: function get() {
                    return this._videoElement.duration;
                  }
                }], [{
                  key: "canPlayType", value: function value(e, n) {
                    return t._throwNotImplementedError("static canPlayType");
                  }
                }, {
                  key: "_throwNotImplementedError", value: function value(e) {
                    throw new A.default(A.default.Severity.CRITICAL, A.default.Category.PLAYER, A.default.Code.RUNTIME_ERROR_METHOD_NOT_IMPLEMENTED, e);
                  }
                }]), t;
              }(f.default);
            k.CustomEvents = h.CUSTOM_EVENTS, k.Html5Events = h.HTML5_EVENTS, k.getLogger = p.default, t.default = k;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(0),
              s = i(o),
              u = n(3),
              l = i(u),
              c = n(42),
              f = i(c),
              d = n(22),
              A = function () {
                function e() {
                  r(this, e);
                }

                return a(e, null, [{
                  key: "canPlayDrm", value: function value(e) {
                    throw new l.default(l.default.Severity.CRITICAL, l.default.Category.PLAYER, l.default.Code.RUNTIME_ERROR_METHOD_NOT_IMPLEMENTED, "static canPlayDrm");
                  }
                }, {
                  key: "setDrmPlayback", value: function value() {
                    throw new l.default(l.default.Severity.CRITICAL, l.default.Category.PLAYER, l.default.Code.RUNTIME_ERROR_METHOD_NOT_IMPLEMENTED, "static setDrmPlayback");
                  }
                }, {
                  key: "destroy", value: function value() {
                  }
                }]), e;
              }();
            A.getLogger = s.default, A.DrmSupport = f.default, A.DrmScheme = d.DrmScheme, t.default = A;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            t.DrmScheme = {
              WIDEVINE: "com.widevine.alpha",
              PLAYREADY: "com.microsoft.playready",
              FAIRPLAY: "com.apple.fairplay"
            };
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function r(e) {
              return "string" == typeof e && !!u[e.toLowerCase()] && e.toLowerCase();
            }

            function a(e) {
              return "string" == typeof e && !!l[e.toLowerCase()] && e.toLowerCase();
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.Cue = void 0;
            var o = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              s = n(24),
              u = {"": !0, lr: !0, rl: !0},
              l = {start: !0, middle: !0, end: !0, left: !0, right: !0},
              c = function () {
                function e(t, n, r) {
                  i(this, e), this.hasBeenReset = !1, this.displayState = void 0, this._id = "", this._pauseOnExit = !1, this._region = null, this._vertical = "", this._snapToLines = !0, this._line = "auto", this._lineAlign = "start", this._position = 50, this._positionAlign = "middle", this._size = 50, this._align = "middle", this._startTime = t, this._endTime = n, this._text = r;
                }

                return o(e, [{
                  key: "resetCue", value: function value() {
                    this.hasBeenReset = !0;
                  }
                }, {
                  key: "getCueAsHTML", value: function value() {
                    return (0, s.convertCueToDOMTree)(window, this.text);
                  }
                }, {
                  key: "id", get: function get() {
                    return this._id;
                  }, set: function set(e) {
                    this._id = "" + e;
                  }
                }, {
                  key: "pauseOnExit", get: function get() {
                    return this._pauseOnExit;
                  }, set: function set(e) {
                    this._pauseOnExit = e;
                  }
                }, {
                  key: "startTime", get: function get() {
                    return this._endTime;
                  }, set: function set(e) {
                    if ("number" != typeof e) throw new TypeError("Start time must be set to a number.");
                    this._endTime = e, this.resetCue();
                  }
                }, {
                  key: "endTime", get: function get() {
                    return this._endTime;
                  }, set: function set(e) {
                    if ("number" != typeof e) throw new TypeError("End time must be set to a number.");
                    this._endTime = e, this.resetCue();
                  }
                }, {
                  key: "text", get: function get() {
                    return this._text;
                  }, set: function set(e) {
                    this._text = "" + e, this.resetCue();
                  }
                }, {
                  key: "region", get: function get() {
                    return this._region;
                  }, set: function set(e) {
                    this._region = e, this.resetCue();
                  }
                }, {
                  key: "vertical", get: function get() {
                    return this._vertical;
                  }, set: function set(e) {
                    var t = r(e);
                    if (!1 === t) throw new SyntaxError("An invalid or illegal string was specified.");
                    "string" == typeof t && (this._vertical = t, this.resetCue());
                  }
                }, {
                  key: "snapToLines", get: function get() {
                    return this._snapToLines;
                  }, set: function set(e) {
                    this._snapToLines = e, this.resetCue();
                  }
                }, {
                  key: "line", get: function get() {
                    return this._line;
                  }, set: function set(e) {
                    if ("number" != typeof e && "auto" !== e) throw new SyntaxError("An invalid number or illegal string was specified.");
                    this._line = e, this.resetCue();
                  }
                }, {
                  key: "lineAlign", get: function get() {
                    return this._lineAlign;
                  }, set: function set(e) {
                    var t = a(e);
                    if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                    "string" == typeof t && (this._lineAlign = t, this.resetCue());
                  }
                }, {
                  key: "position", get: function get() {
                    return this._position;
                  }, set: function set(e) {
                    if (e < 0 || e > 100) throw new Error("Position must be between 0 and 100.");
                    this._position = e, this.resetCue();
                  }
                }, {
                  key: "positionAlign", get: function get() {
                    return this._positionAlign;
                  }, set: function set(e) {
                    var t = a(e);
                    if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                    "string" == typeof t && (this._positionAlign = t, this.resetCue());
                  }
                }, {
                  key: "size", get: function get() {
                    return this._size;
                  }, set: function set(e) {
                    if (e < 0 || e > 100) throw new Error("Size must be between 0 and 100.");
                    this._size = e, this.resetCue();
                  }
                }, {
                  key: "align", get: function get() {
                    return this._align;
                  }, set: function set(e) {
                    var t = a(e);
                    if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                    "string" == typeof t && (this._align = t, this.resetCue());
                  }
                }]), e;
              }(),
              f = void 0;
            "undefined" != typeof window && window.VTTCue ? t.Cue = f = window.VTTCue : t.Cue = f = c, t.Cue = f;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function r(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            function a(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function o(e) {
              function t(e, t, n, i) {
                return 3600 * (0 | e) + 60 * (0 | t) + (0 | n) + (0 | i) / 1e3;
              }

              var n = e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
              return n ? n[3] ? t(n[1], n[2], n[3].replace(":", ""), n[4]) : n[1] > 59 ? t(n[1], n[2], 0, n[4]) : t(0, n[1], n[2], n[4]) : null;
            }

            function s(e, t) {
              function n(e) {
                return p[e];
              }

              for (var i = e.document.createElement("div"), r = i, a = void 0, s = []; null !== (a = function () {
                if (!t) return null;
                var e = t.match(/^([^<]*)(<[^>]+>?)?/);
                return function (e) {
                  return t = t.substr(e.length), e;
                }(e[1] ? e[1] : e[2]);
              }());) {
                if ("<" !== a[0]) r.appendChild(e.document.createTextNode(function (e) {
                  for (var t = void 0; t = e.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);) {
                    e = e.replace(t[0], n);
                  }
                  return e;
                }(a))); else {
                  if ("/" === a[1]) {
                    s.length && s[s.length - 1] === a.substr(2).replace(">", "") && (s.pop(), r = r.parentNode);
                    continue;
                  }
                  var u = o(a.substr(1, a.length - 2)),
                    l = void 0;
                  if (u) {
                    l = e.document.createProcessingInstruction("timestamp", u), r.appendChild(l);
                    continue;
                  }
                  var c = a.match(/^<([^.\s\/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                  if (!c) continue;
                  if (!(l = function (t, n) {
                      var i = v[t];
                      if (!i) return null;
                      var r = e.document.createElement(i);
                      r.localName = i;
                      var a = g[t];
                      return a && n && (r[a] = n.trim()), r;
                    }(c[1], c[3]))) continue;
                  if (!function (e, t) {
                      return !y[t.localName] || y[t.localName] === e.localName;
                    }(r, l)) continue;
                  c[2] && (l.className = c[2].substr(1).replace(".", " ")), s.push(c[1]), r.appendChild(l), r = l;
                }
              }
              return i;
            }

            function u(e) {
              for (var t = 0; t < E.length; t++) {
                var n = E[t];
                if (e >= n[0] && e <= n[1]) return !0;
              }
              return !1;
            }

            function l(e) {
              function t(e, t) {
                for (var n = t.childNodes.length - 1; n >= 0; n--) {
                  e.push(t.childNodes[n]);
                }
              }

              function n(e) {
                if (!e || !e.length) return null;
                var i = e.pop(),
                  r = i.textContent || i.innerText;
                if (r) {
                  var a = r.match(/^.*(\n|\r)/);
                  return a ? (e.length = 0, a[0]) : r;
                }
                return "ruby" === i.tagName ? n(e) : i.childNodes ? (t(e, i), n(e)) : void 0;
              }

              var i = [],
                r = "",
                a = void 0;
              if (!e || !e.childNodes) return "ltr";
              for (t(i, e); r = n(i);) {
                for (var o = 0; o < r.length; o++) {
                  if (a = r.charCodeAt(o), u(a)) return "rtl";
                }
              }
              return "ltr";
            }

            function c(e) {
              if ("number" == typeof e.line && (e.snapToLines || e.line >= 0 && e.line <= 100)) return e.line;
              if (!e.track || !e.track.textTrackList || !e.track.textTrackList.mediaElement) return -1;
              for (var t = e.track, n = t.textTrackList, i = 0, r = 0; r < n.length && n[r] !== t; r++) {
                "showing" === n[r].mode && i++;
              }
              return -1 * ++i;
            }

            function f(e, t, n) {
              var i = new T(e),
                r = e.cue,
                a = c(r),
                o = [];
              if (r.snapToLines) {
                var s = void 0;
                switch (r.vertical) {
                  case "":
                    o = ["+y", "-y"], s = "height";
                    break;
                  case "rl":
                    o = ["+x", "-x"], s = "width";
                    break;
                  case "lr":
                    o = ["-x", "+x"], s = "width";
                }
                var u = i.lineHeight,
                  l = u * Math.round(a),
                  f = t[s] + u,
                  d = o[0];
                Math.abs(l) > f && (l = l < 0 ? -1 : 1, l *= Math.ceil(f / u) * u), a < 0 && (l += "" === r.vertical ? t.height : t.width, o = o.reverse()), i.move(d, l);
              } else {
                var A = i.lineHeight / t.height * 100;
                switch (r.lineAlign) {
                  case "middle":
                    a -= A / 2;
                    break;
                  case "end":
                    a -= A;
                }
                switch (r.vertical) {
                  case "":
                    e.applyStyles({top: e.formatStyle(a, "%")});
                    break;
                  case "rl":
                    e.applyStyles({left: e.formatStyle(a, "%")});
                    break;
                  case "lr":
                    e.applyStyles({right: e.formatStyle(a, "%")});
                }
                o = ["+y", "-x", "+x", "-y"], i = new T(e);
              }
              var h = function (e, i) {
                for (var r = void 0, a = new T(e), o = 1, s = 0; s < i.length; s++) {
                  for (; e.overlapsOppositeAxis(t, i[s]) || e.within(t) && e.overlapsAny(n);) {
                    e.move(i[s]);
                  }
                  if (e.within(t)) return e;
                  var u = e.intersectPercentage(t);
                  o > u && (r = new T(e), o = u), e = new T(a);
                }
                return r || a;
              }(i, o);
              e.move(h.toCSSCompatValues(t));
            }

            function d(e, t) {
              return e && t ? s(e, t) : null;
            }

            function A(e, t, n) {
              if (!e || !t || !n) return null;
              for (; n.firstChild;) {
                n.removeChild(n.firstChild);
              }
              var i = e.document.createElement("div");
              if (i.style.position = "absolute", i.style.left = "0", i.style.right = "0", i.style.top = "0", i.style.bottom = "0", i.style.margin = w, n.appendChild(i), function (e) {
                  for (var t = 0; t < e.length; t++) {
                    if (e[t].hasBeenReset || !e[t].displayState) return !0;
                  }
                  return !1;
                }(t)) {
                var r = [],
                  a = T.getSimpleBoxPosition(i),
                  o = Math.round(a.height * k * 100) / 100,
                  s = {font: o * _ + "px " + S};
                !function () {
                  for (var n = void 0, o = void 0, u = 0; u < t.length; u++) {
                    o = t[u], n = new b(e, o, s), i.appendChild(n.div), f(n, a, r), o.displayState = n.div, r.push(T.getSimpleBoxPosition(n));
                  }
                }();
              } else for (var u = 0; u < t.length; u++) {
                i.appendChild(t[u].displayState);
              }
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var h = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              _ = 1,
              p = {"&amp;": "&", "&lt;": "<", "&gt;": ">", "&lrm;": "‎", "&rlm;": "‏", "&nbsp;": " "},
              v = {c: "span", i: "i", b: "b", u: "u", ruby: "ruby", rt: "rt", v: "span", lang: "span"},
              g = {v: "title", lang: "lang"},
              y = {rt: "ruby"},
              E = [[1470, 1470], [1472, 1472], [1475, 1475], [1478, 1478], [1488, 1514], [1520, 1524], [1544, 1544], [1547, 1547], [1549, 1549], [1563, 1563], [1566, 1610], [1645, 1647], [1649, 1749], [1765, 1766], [1774, 1775], [1786, 1805], [1807, 1808], [1810, 1839], [1869, 1957], [1969, 1969], [1984, 2026], [2036, 2037], [2042, 2042], [2048, 2069], [2074, 2074], [2084, 2084], [2088, 2088], [2096, 2110], [2112, 2136], [2142, 2142], [2208, 2208], [2210, 2220], [8207, 8207], [64285, 64285], [64287, 64296], [64298, 64310], [64312, 64316], [64318, 64318], [64320, 64321], [64323, 64324], [64326, 64449], [64467, 64829], [64848, 64911], [64914, 64967], [65008, 65020], [65136, 65140], [65142, 65276], [67584, 67589], [67592, 67592], [67594, 67637], [67639, 67640], [67644, 67644], [67647, 67669], [67671, 67679], [67840, 67867], [67872, 67897], [67903, 67903], [67968, 68023], [68030, 68031], [68096, 68096], [68112, 68115], [68117, 68119], [68121, 68147], [68160, 68167], [68176, 68184], [68192, 68223], [68352, 68405], [68416, 68437], [68440, 68466], [68472, 68479], [68608, 68680], [126464, 126467], [126469, 126495], [126497, 126498], [126500, 126500], [126503, 126503], [126505, 126514], [126516, 126519], [126521, 126521], [126523, 126523], [126530, 126530], [126535, 126535], [126537, 126537], [126539, 126539], [126541, 126543], [126545, 126546], [126548, 126548], [126551, 126551], [126553, 126553], [126555, 126555], [126557, 126557], [126559, 126559], [126561, 126562], [126564, 126564], [126567, 126570], [126572, 126578], [126580, 126583], [126585, 126588], [126590, 126590], [126592, 126601], [126603, 126619], [126625, 126627], [126629, 126633], [126635, 126651], [1114109, 1114109]],
              m = function () {
                function e() {
                  a(this, e);
                }

                return h(e, [{
                  key: "applyStyles", value: function value(e, t) {
                    t = t || this.div;
                    for (var n in e) {
                      e.hasOwnProperty(n) && (t.style[n] = e[n]);
                    }
                  }
                }, {
                  key: "formatStyle", value: function value(e, t) {
                    return 0 === e ? 0 : e + t;
                  }
                }]), e;
              }(),
              b = function (e) {
                function t(e, n, r) {
                  a(this, t);
                  var o = i(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this)),
                    u = "undefined" != typeof navigator && /MSIE\s8\.0/.test(navigator.userAgent),
                    c = "rgba(255, 255, 255, 1)",
                    f = "rgba(0, 0, 0, 0.8)",
                    d = "";
                  "undefined" != typeof WebVTTSet && (c = WebVTTSet.fontSet, f = WebVTTSet.backgroundSet, d = WebVTTSet.edgeSet), u && (c = "rgb(255, 255, 255)", f = "rgb(0, 0, 0)"), o.cue = n, o.cueDiv = s(e, n.text);
                  var A = {
                    color: c,
                    backgroundColor: f,
                    textShadow: d,
                    position: "relative",
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                    display: "inline"
                  };
                  u || (A.writingMode = "" === n.vertical ? "horizontal-tb" : "lr" === n.vertical ? "vertical-lr" : "vertical-rl", A.unicodeBidi = "plaintext"), o.applyStyles(A, o.cueDiv), o.div = e.document.createElement("div"), A = {
                    textAlign: "middle" === n.align ? "center" : n.align,
                    font: r.font,
                    whiteSpace: "pre-line",
                    position: "absolute"
                  }, u || (A.direction = l(o.cueDiv), A.writingMode = "" === n.vertical ? "horizontal-tb" : "lr" === n.vertical ? "vertical-lr" : "vertical-rl".stylesunicodeBidi = "plaintext"), o.applyStyles(A), o.div.appendChild(o.cueDiv);
                  var h = 0;
                  switch (n.positionAlign) {
                    case "start":
                      h = n.position;
                      break;
                    case "middle":
                      h = n.position - n.size / 2;
                      break;
                    case "end":
                      h = n.position - n.size;
                  }
                  return "" === n.vertical ? o.applyStyles({
                    left: o.formatStyle(h, "%"),
                    width: o.formatStyle(n.size, "%")
                  }) : o.applyStyles({
                    top: o.formatStyle(h, "%"),
                    height: o.formatStyle(n.size, "%")
                  }), o.move = function (e) {
                    this.applyStyles({
                      top: this.formatStyle(e.top, "px"),
                      bottom: this.formatStyle(e.bottom, "px"),
                      left: this.formatStyle(e.left, "px"),
                      right: this.formatStyle(e.right, "px"),
                      height: this.formatStyle(e.height, "px"),
                      width: this.formatStyle(e.width, "px")
                    });
                  }, o;
                }

                return r(t, e), t;
              }(m),
              T = function () {
                function e(t) {
                  a(this, e), this.overlaps = function (e) {
                    return this.left < e.right && this.right > e.left && this.top < e.bottom && this.bottom > e.top;
                  };
                  var n = "undefined" != typeof navigator && /MSIE\s8\.0/.test(navigator.userAgent),
                    i = void 0,
                    r = void 0,
                    o = void 0,
                    s = void 0;
                  if (t.div) {
                    r = t.div.offsetHeight, o = t.div.offsetWidth, s = t.div.offsetTop;
                    var u = (u = t.div.childNodes) && (u = u[0]) && u.getClientRects && u.getClientRects();
                    t = t.div.getBoundingClientRect(), i = u ? Math.max(u[0] && u[0].height || 0, t.height / u.length) : 0;
                  }
                  this.left = t.left, this.right = t.right, this.top = t.top || s, this.height = t.height || r, this.bottom = t.bottom || s + (t.height || r), this.width = t.width || o, this.lineHeight = void 0 !== i ? i : t.lineHeight, n && !this.lineHeight && (this.lineHeight = 13);
                }

                return h(e, [{
                  key: "move", value: function value(e, t) {
                    switch (t = void 0 !== t ? t : this.lineHeight, e) {
                      case "+x":
                        this.left += t, this.right += t;
                        break;
                      case "-x":
                        this.left -= t, this.right -= t;
                        break;
                      case "+y":
                        this.top += t, this.bottom += t;
                        break;
                      case "-y":
                        this.top -= t, this.bottom -= t;
                    }
                  }
                }, {
                  key: "overlapsAny", value: function value(e) {
                    for (var t = 0; t < e.length; t++) {
                      if (this.overlaps(e[t])) return !0;
                    }
                    return !1;
                  }
                }, {
                  key: "within", value: function value(e) {
                    return this.top >= e.top && this.bottom <= e.bottom && this.left >= e.left && this.right <= e.right;
                  }
                }, {
                  key: "overlapsOppositeAxis", value: function value(e, t) {
                    switch (t) {
                      case "+x":
                        return this.left < e.left;
                      case "-x":
                        return this.right > e.right;
                      case "+y":
                        return this.top < e.top;
                      case "-y":
                        return this.bottom > e.bottom;
                    }
                  }
                }, {
                  key: "intersectPercentage", value: function value(e) {
                    return Math.max(0, Math.min(this.right, e.right) - Math.max(this.left, e.left)) * Math.max(0, Math.min(this.bottom, e.bottom) - Math.max(this.top, e.top)) / (this.height * this.width);
                  }
                }, {
                  key: "toCSSCompatValues", value: function value(e) {
                    return {
                      top: this.top - e.top,
                      bottom: e.bottom - this.bottom,
                      left: this.left - e.left,
                      right: e.right - this.right,
                      height: this.height,
                      width: this.width
                    };
                  }
                }], [{
                  key: "getSimpleBoxPosition", value: function value(e) {
                    var t = e.div ? e.div.offsetHeight : e.tagName ? e.offsetHeight : 0,
                      n = e.div ? e.div.offsetWidth : e.tagName ? e.offsetWidth : 0,
                      i = e.div ? e.div.offsetTop : e.tagName ? e.offsetTop : 0;
                    return e = e.div ? e.div.getBoundingClientRect() : e.tagName ? e.getBoundingClientRect() : e, {
                      left: e.left,
                      right: e.right,
                      top: e.top || i,
                      height: e.height || t,
                      bottom: e.bottom || i + (e.height || t),
                      width: e.width || n
                    };
                  }
                }]), e;
              }(),
              k = .05,
              S = "sans-serif",
              w = "1.5%";
            t.processCues = A, t.convertCueToDOMTree = d;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.registerPlugin = void 0;
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(14),
              s = i(o),
              u = n(3),
              l = i(u),
              c = n(10),
              f = (i(c), n(0)),
              d = i(f),
              A = (0, d.default)("PluginManager"),
              h = function () {
                function e() {
                  r(this, e), this._plugins = new Map();
                }

                return a(e, [{
                  key: "load", value: function value(t, n) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    if (!e._registry.has(t)) throw new l.default(l.default.Severity.CRITICAL, l.default.Category.PLAYER, l.default.Code.RUNTIME_ERROR_NOT_REGISTERED_PLUGIN, t);
                    var r = e._registry.get(t);
                    return r && r.isValid() ? (this._plugins.set(t, r.createPlugin(t, n, i)), A.debug("Plugin <" + t + "> has been loaded"), !0) : (A.debug("Plugin <" + t + "> isn't loaded, isValid()=false"), !1);
                  }
                }, {
                  key: "destroy", value: function value() {
                    this._plugins.forEach(this._destroy.bind(this));
                  }
                }, {
                  key: "reset", value: function value() {
                    this._plugins.forEach(function (e) {
                      e.reset();
                    });
                  }
                }, {
                  key: "_destroy", value: function value(e, t) {
                    e.destroy(), this._plugins.delete(t);
                  }
                }, {
                  key: "get", value: function value(e) {
                    return this._plugins.get(e);
                  }
                }], [{
                  key: "register", value: function value(t, n) {
                    if ("function" != typeof n || n.prototype instanceof s.default == !1) throw new l.default(l.default.Severity.CRITICAL, l.default.Category.PLAYER, l.default.Code.RUNTIME_ERROR_NOT_VALID_HANDLER, t);
                    return e._registry.has(t) ? (A.debug("Plugin <" + t + "> is already registered, do not register again"), !1) : (e._registry.set(t, n), A.debug("Plugin <" + t + "> has been registered successfully"), !0);
                  }
                }, {
                  key: "unRegister", value: function value(t) {
                    e._registry.has(t) && (e._registry.delete(t), A.debug("Unregistered <" + t + "> plugin."));
                  }
                }]), e;
              }();
            h._registry = new Map(), t.default = h;
            var _ = h.register;
            t.registerPlugin = _;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e() {
                  i(this, e), this.fontSize = "100%", this.fontFamily = e.FontFamily.SANS_SERIF, this.fontColor = e.StandardColors.WHITE, this.fontOpacity = e.StandardOpacities.OPAQUE, this.backgroundColor = e.StandardColors.BLACK, this.backgroundOpacity = e.StandardOpacities.OPAQUE, this.fontEdge = e.EdgeStyles.NONE;
                }

                return r(e, [{
                  key: "toCSS", value: function value() {
                    var t = [];
                    t.push("font-family: " + this.fontFamily), t.push("font-size: " + this.fontSize), t.push("color: " + e._toRGBA(this.fontColor, this.fontOpacity)), t.push("background-color: " + e._toRGBA(this.backgroundColor, this.backgroundOpacity));
                    for (var n = [], i = 0; i < this.fontEdge.length; i++) {
                      var r = this.fontEdge[i].slice(0, 3),
                        a = this.fontEdge[i].slice(3, 6);
                      n.push(e._toRGBA(r, this.fontOpacity) + " " + a.join("px ") + "px");
                    }
                    return t.push("text-shadow: " + n.join(",")), t.join("!important; ");
                  }
                }, {
                  key: "clone", value: function value() {
                    var t = new e();
                    return t.fontEdge = this.fontEdge, t.fontSize = this.fontSize, t.fontColor = this.fontColor, t.fontOpacity = this.fontOpacity, t.backgroundColor = this.backgroundColor, t.backgroundOpacity = this.backgroundOpacity, t;
                  }
                }], [{
                  key: "_toRGBA", value: function value(e, t) {
                    return "rgba(" + e.concat(t).join(",") + ")";
                  }
                }]), e;
              }();
            a.FontFamily = {
              ARIAL: "Arial",
              HELVETICA: "Helvetica",
              VERDANA: "Verdana",
              SANS_SERIF: "sans-serif"
            }, a.StandardColors = {
              WHITE: [255, 255, 255],
              BLACK: [0, 0, 0],
              RED: [255, 0, 0],
              GREEN: [0, 255, 0],
              BLUE: [0, 0, 255],
              YELLOW: [255, 255, 0],
              MAGENTA: [255, 0, 255],
              CYAN: [0, 255, 255]
            }, a.StandardOpacities = {
              OPAQUE: 1,
              SEMI_HIGH: .75,
              SEMI_LOW: .25,
              TRANSPARENT: 0
            }, a.EdgeStyles = {
              NONE: [],
              RAISED: [[34, 34, 34, 1, 1, 0], [34, 34, 34, 2, 2, 0], [34, 34, 34, 3, 3, 0]],
              DEPRESSED: [[204, 204, 204, 1, 1, 0], [204, 204, 204, 0, 1, 0], [34, 34, 34, -1, -1, 0], [34, 34, 34, 0, -1, 0]],
              UNIFORM: [[34, 34, 34, 0, 0, 4], [34, 34, 34, 0, 0, 4], [34, 34, 34, 0, 0, 4], [34, 34, 34, 0, 0, 4]],
              DROP: [[34, 34, 34, 2, 2, 3], [34, 34, 34, 2, 2, 4], [34, 34, 34, 2, 2, 5]]
            }, a.FontSizes = ["50%", "75%", "100%", "200%", "300%", "400%"], t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(51),
              s = i(o),
              u = n(54),
              l = i(u),
              c = n(56),
              f = i(c),
              d = n(57),
              A = i(d),
              h = n(0),
              _ = function () {
                function e(t) {
                  r(this, e), this._playback = new s.default(t && t.playback), this._sources = new l.default(t && t.sources), this._metadata = new f.default(t && t.metadata), this._plugins = new A.default(t && t.plugins), this._logLevel = t && t.logLevel || "ERROR";
                }

                return a(e, [{
                  key: "logLevel", get: function get() {
                    return this._logLevel;
                  }, set: function set(e) {
                    h.LogLevel[e] && (this._logLevel = e);
                  }
                }, {
                  key: "playback", get: function get() {
                    return this._playback;
                  }, set: function set(e) {
                    e.audioLanguage && (this.playback.audioLanguage = e.audioLanguage), e.textLanguage && (this.playback.textLanguage = e.textLanguage), e.volume && (this.playback.volume = e.volume), e.playsinline && (this.playback.playsinline = e.playsinline), e.preload && (this.playback.preload = e.preload), e.autoplay && (this.playback.autoplay = e.autoplay), e.allowMutedAutoPlay && (this.playback.allowMutedAutoPlay = e.allowMutedAutoPlay), e.muted && (this.playback.muted = e.muted), e.streamPriority && (this.playback.streamPriority = e.streamPriority);
                  }
                }, {
                  key: "sources", get: function get() {
                    return this._sources;
                  }, set: function set(e) {
                    e.hls && (this.sources.hls = e.hls), e.dash && (this.sources.dash = e.dash), e.progressive && (this.sources.progressive = e.progressive);
                  }
                }, {
                  key: "metadata", get: function get() {
                    return this._metadata;
                  }, set: function set(e) {
                    e.poster && (this.metadata.poster = e.poster), e.description && (this.metadata.description = e.description);
                  }
                }, {
                  key: "plugins", get: function get() {
                    return this._plugins.map;
                  }, set: function set(e) {
                    this._plugins.map = e;
                  }
                }]), a(e, [{
                  key: "toJSON", value: function value() {
                    return {
                      logLevel: this._logLevel,
                      playback: this._playback.toJSON(),
                      sources: this._sources.toJSON(),
                      metadata: this._metadata.toJSON(),
                      plugins: this._plugins.toJSON()
                    };
                  }
                }]), e;
              }();
            t.default = _;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e(t, n, r) {
                  i(this, e), this._scheme = t, this._licenseUrl = n, r && (this._certificate = r);
                }

                return r(e, [{
                  key: "licenseUrl", get: function get() {
                    return this._licenseUrl;
                  }
                }, {
                  key: "scheme", get: function get() {
                    return this._scheme;
                  }
                }, {
                  key: "certificate", get: function get() {
                    return this._certificate;
                  }, set: function set(e) {
                    this._certificate = e;
                  }
                }]), r(e, [{
                  key: "toJSON", value: function value() {
                    var e = {licenseUrl: this.licenseUrl, scheme: this.scheme};
                    return this.certificate && (e.certificate = this.certificate), e;
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e) {
              return e = e || new x.default(), new o.default(e.toJSON());
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.getCapabilities = t.BaseDrmProtocol = t.Env = t.PLAYER_NAME = t.VERSION = t.FakeEvent = t.Error = t.Utils = t.TextStyle = t.TextTrack = t.AudioTrack = t.VideoTrack = t.Track = t.BaseMiddleware = t.BasePlugin = t.registerPlugin = t.BaseMediaSourceAdapter = t.registerMediaSourceAdapter = t.DrmData = t.StreamPriority = t.MediaSource = t.PlayerOptions = void 0, t.loadPlayer = r;
            var a = n(10),
              o = i(a),
              s = n(20),
              u = i(s),
              l = n(19),
              c = n(25),
              f = n(21),
              d = i(f),
              A = n(15),
              h = i(A),
              _ = n(14),
              p = i(_),
              v = n(4),
              g = i(v),
              y = n(7),
              E = i(y),
              m = n(8),
              b = i(m),
              T = n(9),
              k = i(T),
              S = n(26),
              w = i(S),
              O = n(11),
              N = i(O),
              C = n(2),
              L = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(C),
              M = n(3),
              P = i(M),
              R = n(1),
              D = i(R),
              I = n(27),
              x = i(I),
              U = n(16),
              j = i(U),
              V = n(17),
              H = i(V),
              B = n(28),
              G = i(B);
            o.default.runCapabilities(), t.PlayerOptions = x.default, t.MediaSource = H.default, t.StreamPriority = j.default, t.DrmData = G.default, t.registerMediaSourceAdapter = l.registerMediaSourceAdapter, t.BaseMediaSourceAdapter = u.default, t.registerPlugin = c.registerPlugin, t.BasePlugin = p.default, t.BaseMiddleware = h.default, t.Track = g.default, t.VideoTrack = E.default, t.AudioTrack = b.default, t.TextTrack = k.default, t.TextStyle = w.default, t.Utils = L, t.Error = P.default, t.FakeEvent = D.default, t.VERSION = "0.19.1", t.PLAYER_NAME = "playkit-js", t.Env = N.default, t.BaseDrmProtocol = d.default;
            var F = o.default.getCapabilities;
            t.getCapabilities = F, t.default = r;
          }, function (e, t, n) {
            var i;
            !function (r, a) {
              "use strict";
              var o = "model",
                s = "name",
                u = "type",
                l = "vendor",
                c = "version",
                f = "mobile",
                d = "tablet",
                A = {
                  extend: function extend(e, t) {
                    var n = {};
                    for (var i in e) {
                      t[i] && t[i].length % 2 == 0 ? n[i] = t[i].concat(e[i]) : n[i] = e[i];
                    }
                    return n;
                  }, has: function has(e, t) {
                    return "string" == typeof e && -1 !== t.toLowerCase().indexOf(e.toLowerCase());
                  }, lowerize: function lowerize(e) {
                    return e.toLowerCase();
                  }, major: function major(e) {
                    return "string" == typeof e ? e.replace(/[^\d\.]/g, "").split(".")[0] : void 0;
                  }, trim: function trim(e) {
                    return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
                  }
                },
                h = {
                  rgx: function rgx(e, t) {
                    for (var n, i, r, a, o, s, u = 0; u < t.length && !o;) {
                      var l = t[u],
                        c = t[u + 1];
                      for (n = i = 0; n < l.length && !o;) {
                        if (o = l[n++].exec(e)) for (r = 0; r < c.length; r++) {
                          s = o[++i], a = c[r], "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && a.length > 0 ? 2 == a.length ? "function" == typeof a[1] ? this[a[0]] = a[1].call(this, s) : this[a[0]] = a[1] : 3 == a.length ? "function" != typeof a[1] || a[1].exec && a[1].test ? this[a[0]] = s ? s.replace(a[1], a[2]) : void 0 : this[a[0]] = s ? a[1].call(this, s, a[2]) : void 0 : 4 == a.length && (this[a[0]] = s ? a[3].call(this, s.replace(a[1], a[2])) : void 0) : this[a] = s || void 0;
                        }
                      }
                      u += 2;
                    }
                  }, str: function str(e, t) {
                    for (var n in t) {
                      if ("object" == _typeof(t[n]) && t[n].length > 0) {
                        for (var i = 0; i < t[n].length; i++) {
                          if (A.has(t[n][i], e)) return "?" === n ? void 0 : n;
                        }
                      } else if (A.has(t[n], e)) return "?" === n ? void 0 : n;
                    }
                    return e;
                  }
                },
                _ = {
                  browser: {
                    oldsafari: {
                      version: {
                        "1.0": "/8",
                        1.2: "/1",
                        1.3: "/3",
                        "2.0": "/412",
                        "2.0.2": "/416",
                        "2.0.3": "/417",
                        "2.0.4": "/419",
                        "?": "/"
                      }
                    }
                  },
                  device: {
                    amazon: {model: {"Fire Phone": ["SD", "KF"]}},
                    sprint: {model: {"Evo Shift 4G": "7373KT"}, vendor: {HTC: "APA", Sprint: "Sprint"}}
                  },
                  os: {
                    windows: {
                      version: {
                        ME: "4.90",
                        "NT 3.11": "NT3.51",
                        "NT 4.0": "NT4.0",
                        2000: "NT 5.0",
                        XP: ["NT 5.1", "NT 5.2"],
                        Vista: "NT 6.0",
                        7: "NT 6.1",
                        8: "NT 6.2",
                        8.1: "NT 6.3",
                        10: ["NT 6.4", "NT 10.0"],
                        RT: "ARM"
                      }
                    }
                  }
                },
                p = {
                  browser: [[/(opera\smini)\/([\w\.-]+)/i, /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i, /(opera).+version\/([\w\.]+)/i, /(opera)[\/\s]+([\w\.]+)/i], [s, c], [/(opios)[\/\s]+([\w\.]+)/i], [[s, "Opera Mini"], c], [/\s(opr)\/([\w\.]+)/i], [[s, "Opera"], c], [/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i, /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i, /(?:ms|\()(ie)\s([\w\.]+)/i, /(rekonq)\/([\w\.]+)*/i, /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser)\/([\w\.-]+)/i], [s, c], [/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i], [[s, "IE"], c], [/(edge)\/((\d+)?[\w\.]+)/i], [s, c], [/(yabrowser)\/([\w\.]+)/i], [[s, "Yandex"], c], [/(puffin)\/([\w\.]+)/i], [[s, "Puffin"], c], [/(uc\s?browser)[\/\s]?([\w\.]+)/i, /ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i, /juc.+(ucweb)[\/\s]?([\w\.]+)/i, /(ucbrowser)\/([\w\.]+)/i], [[s, "UCBrowser"], c], [/(comodo_dragon)\/([\w\.]+)/i], [[s, /_/g, " "], c], [/(micromessenger)\/([\w\.]+)/i], [[s, "WeChat"], c], [/m?(qqbrowser)[\/\s]?([\w\.]+)/i], [s, c], [/xiaomi\/miuibrowser\/([\w\.]+)/i], [c, [s, "MIUI Browser"]], [/;fbav\/([\w\.]+);/i], [c, [s, "Facebook"]], [/(headlesschrome) ([\w\.]+)/i], [c, [s, "Chrome Headless"]], [/\swv\).+(chrome)\/([\w\.]+)/i], [[s, /(.+)/, "$1 WebView"], c], [/android.+samsungbrowser\/([\w\.]+)/i, /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i], [c, [s, "Android Browser"]], [/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i], [s, c], [/(dolfin)\/([\w\.]+)/i], [[s, "Dolphin"], c], [/((?:android.+)crmo|crios)\/([\w\.]+)/i], [[s, "Chrome"], c], [/(coast)\/([\w\.]+)/i], [[s, "Opera Coast"], c], [/fxios\/([\w\.-]+)/i], [c, [s, "Firefox"]], [/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i], [c, [s, "Mobile Safari"]], [/version\/([\w\.]+).+?(mobile\s?safari|safari)/i], [c, s], [/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i], [s, [c, h.str, _.browser.oldsafari.version]], [/(konqueror)\/([\w\.]+)/i, /(webkit|khtml)\/([\w\.]+)/i], [s, c], [/(navigator|netscape)\/([\w\.-]+)/i], [[s, "Netscape"], c], [/(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i, /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i, /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i, /(links)\s\(([\w\.]+)/i, /(gobrowser)\/?([\w\.]+)*/i, /(ice\s?browser)\/v?([\w\._]+)/i, /(mosaic)[\/\s]([\w\.]+)/i], [s, c]],
                  cpu: [[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i], [["architecture", "amd64"]], [/(ia32(?=;))/i], [["architecture", A.lowerize]], [/((?:i[346]|x)86)[;\)]/i], [["architecture", "ia32"]], [/windows\s(ce|mobile);\sppc;/i], [["architecture", "arm"]], [/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i], [["architecture", /ower/, "", A.lowerize]], [/(sun4\w)[;\)]/i], [["architecture", "sparc"]], [/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i], [["architecture", A.lowerize]]],
                  device: [[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i], [o, l, [u, d]], [/applecoremedia\/[\w\.]+ \((ipad)/], [o, [l, "Apple"], [u, d]], [/(apple\s{0,1}tv)/i], [[o, "Apple TV"], [l, "Apple"]], [/(archos)\s(gamepad2?)/i, /(hp).+(touchpad)/i, /(hp).+(tablet)/i, /(kindle)\/([\w\.]+)/i, /\s(nook)[\w\s]+build\/(\w+)/i, /(dell)\s(strea[kpr\s\d]*[\dko])/i], [l, o, [u, d]], [/(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i], [o, [l, "Amazon"], [u, d]], [/(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i], [[o, h.str, _.device.amazon.model], [l, "Amazon"], [u, f]], [/\((ip[honed|\s\w*]+);.+(apple)/i], [o, l, [u, f]], [/\((ip[honed|\s\w*]+);/i], [o, [l, "Apple"], [u, f]], [/(blackberry)[\s-]?(\w+)/i, /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i, /(hp)\s([\w\s]+\w)/i, /(asus)-?(\w+)/i], [l, o, [u, f]], [/\(bb10;\s(\w+)/i], [o, [l, "BlackBerry"], [u, f]], [/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i], [o, [l, "Asus"], [u, d]], [/(sony)\s(tablet\s[ps])\sbuild\//i, /(sony)?(?:sgp.+)\sbuild\//i], [[l, "Sony"], [o, "Xperia Tablet"], [u, d]], [/(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i], [[l, "Sony"], [o, "Xperia Phone"], [u, f]], [/\s(ouya)\s/i, /(nintendo)\s([wids3u]+)/i], [l, o, [u, "console"]], [/android.+;\s(shield)\sbuild/i], [o, [l, "Nvidia"], [u, "console"]], [/(playstation\s[34portablevi]+)/i], [o, [l, "Sony"], [u, "console"]], [/(sprint\s(\w+))/i], [[l, h.str, _.device.sprint.vendor], [o, h.str, _.device.sprint.model], [u, f]], [/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i], [l, o, [u, d]], [/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i, /(zte)-(\w+)*/i, /(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i], [l, [o, /_/g, " "], [u, f]], [/(nexus\s9)/i], [o, [l, "HTC"], [u, d]], [/(nexus\s6p)/i], [o, [l, "Huawei"], [u, f]], [/(microsoft);\s(lumia[\s\w]+)/i], [l, o, [u, f]], [/[\s\(;](xbox(?:\sone)?)[\s\);]/i], [o, [l, "Microsoft"], [u, "console"]], [/(kin\.[onetw]{3})/i], [[o, /\./g, " "], [l, "Microsoft"], [u, f]], [/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i, /mot[\s-]?(\w+)*/i, /(XT\d{3,4}) build\//i, /(nexus\s6)/i], [o, [l, "Motorola"], [u, f]], [/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i], [o, [l, "Motorola"], [u, d]], [/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i], [[l, A.trim], [o, A.trim], [u, "smarttv"]], [/hbbtv.+maple;(\d+)/i], [[o, /^/, "SmartTV"], [l, "Samsung"], [u, "smarttv"]], [/\(dtv[\);].+(aquos)/i], [o, [l, "Sharp"], [u, "smarttv"]], [/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i, /((SM-T\w+))/i], [[l, "Samsung"], o, [u, d]], [/smart-tv.+(samsung)/i], [l, [u, "smarttv"], o], [/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i, /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i, /sec-((sgh\w+))/i], [[l, "Samsung"], o, [u, f]], [/sie-(\w+)*/i], [o, [l, "Siemens"], [u, f]], [/(maemo|nokia).*(n900|lumia\s\d+)/i, /(nokia)[\s_-]?([\w-]+)*/i], [[l, "Nokia"], o, [u, f]], [/android\s3\.[\s\w;-]{10}(a\d{3})/i], [o, [l, "Acer"], [u, d]], [/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i], [[l, "LG"], o, [u, d]], [/(lg) netcast\.tv/i], [l, o, [u, "smarttv"]], [/(nexus\s[45])/i, /lg[e;\s\/-]+(\w+)*/i], [o, [l, "LG"], [u, f]], [/android.+(ideatab[a-z0-9\-\s]+)/i], [o, [l, "Lenovo"], [u, d]], [/linux;.+((jolla));/i], [l, o, [u, f]], [/((pebble))app\/[\d\.]+\s/i], [l, o, [u, "wearable"]], [/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i], [l, o, [u, f]], [/crkey/i], [[o, "Chromecast"], [l, "Google"]], [/android.+;\s(glass)\s\d/i], [o, [l, "Google"], [u, "wearable"]], [/android.+;\s(pixel c)\s/i], [o, [l, "Google"], [u, d]], [/android.+;\s(pixel xl|pixel)\s/i], [o, [l, "Google"], [u, f]], [/android.+(\w+)\s+build\/hm\1/i, /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i, /android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i], [[o, /_/g, " "], [l, "Xiaomi"], [u, f]], [/android.+a000(1)\s+build/i], [o, [l, "OnePlus"], [u, f]], [/\s(tablet)[;\/]/i, /\s(mobile)(?:[;\/]|\ssafari)/i], [[u, A.lowerize], l, o]],
                  engine: [[/windows.+\sedge\/([\w\.]+)/i], [c, [s, "EdgeHTML"]], [/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i, /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i, /(icab)[\/\s]([23]\.[\d\.]+)/i], [s, c], [/rv\:([\w\.]+).*(gecko)/i], [c, s]],
                  os: [[/microsoft\s(windows)\s(vista|xp)/i], [s, c], [/(windows)\snt\s6\.2;\s(arm)/i, /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i, /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i], [s, [c, h.str, _.os.windows.version]], [/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i], [[s, "Windows"], [c, h.str, _.os.windows.version]], [/\((bb)(10);/i], [[s, "BlackBerry"], c], [/(blackberry)\w*\/?([\w\.]+)*/i, /(tizen)[\/\s]([\w\.]+)/i, /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i, /linux;.+(sailfish);/i], [s, c], [/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i], [[s, "Symbian"], c], [/\((series40);/i], [s], [/mozilla.+\(mobile;.+gecko.+firefox/i], [[s, "Firefox OS"], c], [/(nintendo|playstation)\s([wids34portablevu]+)/i, /(mint)[\/\s\(]?(\w+)*/i, /(mageia|vectorlinux)[;\s]/i, /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]+)*/i, /(hurd|linux)\s?([\w\.]+)*/i, /(gnu)\s?([\w\.]+)*/i], [s, c], [/(cros)\s[\w]+\s([\w\.]+\w)/i], [[s, "Chromium OS"], c], [/(sunos)\s?([\w\.]+\d)*/i], [[s, "Solaris"], c], [/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i], [s, c], [/(haiku)\s(\w+)/i], [s, c], [/(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i], [[s, "iOS"], [c, /_/g, "."]], [/(mac\sos\sx)\s?([\w\s\.]+\w)*/i, /(macintosh|mac(?=_powerpc)\s)/i], [[s, "Mac OS"], [c, /_/g, "."]], [/((?:open)?solaris)[\/\s-]?([\w\.]+)*/i, /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i, /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i, /(unix)\s?([\w\.]+)*/i], [s, c]]
                },
                v = function v(e, t) {
                  this[s] = e, this[c] = t;
                },
                g = function g(e) {
                  this.architecture = e;
                },
                y = function y(e, t, n) {
                  this[l] = e, this[o] = t, this[u] = n;
                },
                E = v,
                m = v,
                b = function b(e, t) {
                  if (!(this instanceof b)) return new b(e, t).getResult();
                  var n = e || (r && r.navigator && r.navigator.userAgent ? r.navigator.userAgent : ""),
                    i = t ? A.extend(p, t) : p,
                    a = new v(),
                    o = new g(),
                    s = new y(),
                    u = new E(),
                    l = new m();
                  return this.getBrowser = function () {
                    return h.rgx.call(a, n, i.browser), a.major = A.major(a.version), a;
                  }, this.getCPU = function () {
                    return h.rgx.call(o, n, i.cpu), o;
                  }, this.getDevice = function () {
                    return h.rgx.call(s, n, i.device), s;
                  }, this.getEngine = function () {
                    return h.rgx.call(u, n, i.engine), u;
                  }, this.getOS = function () {
                    return h.rgx.call(l, n, i.os), l;
                  }, this.getResult = function () {
                    return {
                      ua: this.getUA(),
                      browser: this.getBrowser(),
                      engine: this.getEngine(),
                      os: this.getOS(),
                      device: this.getDevice(),
                      cpu: this.getCPU()
                    };
                  }, this.getUA = function () {
                    return n;
                  }, this.setUA = function (e) {
                    return n = e, a = new v(), o = new g(), s = new y(), u = new E(), l = new m(), this;
                  }, this;
                };
              b.VERSION = "0.7.13", b.BROWSER = {
                NAME: s,
                MAJOR: "major",
                VERSION: c
              }, b.CPU = {ARCHITECTURE: "architecture"}, b.DEVICE = {
                MODEL: o,
                VENDOR: l,
                TYPE: u,
                CONSOLE: "console",
                MOBILE: f,
                SMARTTV: "smarttv",
                TABLET: d,
                WEARABLE: "wearable",
                EMBEDDED: "embedded"
              }, b.ENGINE = {NAME: s, VERSION: c}, b.OS = {
                NAME: s,
                VERSION: c
              }, void 0 !== t ? (void 0 !== e && e.exports && (t = e.exports = b), t.UAParser = b) : n(31) ? void 0 !== (i = function () {
                return b;
              }.call(t, n, t, e)) && (e.exports = i) : r.UAParser = b;
              var T = r.jQuery || r.Zepto;
              if (void 0 !== T) {
                var k = new b();
                T.ua = k.getResult(), T.ua.get = function () {
                  return k.getUA();
                }, T.ua.set = function (e) {
                  k.setUA(e);
                  var t = k.getResult();
                  for (var n in t) {
                    T.ua[n] = t[n];
                  }
                };
              }
            }("object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) ? window : this);
          }, function (e, t) {
            (function (t) {
              e.exports = t;
            }).call(t, {});
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = n(2),
              o = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(a),
              s = function () {
                function e() {
                  i(this, e), this._createEl();
                }

                return r(e, [{
                  key: "setSrc", value: function value(e) {
                    e && (this._posterUrl = e, o.Dom.setStyle(this._el, "background-image", 'url("' + this._posterUrl + '")'), this.hide());
                  }
                }, {
                  key: "getElement", value: function value() {
                    return this._el;
                  }
                }, {
                  key: "_createEl", value: function value() {
                    if (!this._el) {
                      var e = this._el = o.Dom.createElement("div");
                      o.Dom.setAttribute(e, "id", o.Generator.uniqueId(5)), o.Dom.setAttribute(e, "tabindex", "-1");
                    }
                  }
                }, {
                  key: "_removeEl", value: function value() {
                    this._el && o.Dom.removeChild(this._el.parentNode, this._el);
                  }
                }, {
                  key: "show", value: function value() {
                    o.Dom.setStyle(this._el, "display", "");
                  }
                }, {
                  key: "hide", value: function value() {
                    o.Dom.setStyle(this._el, "display", "none");
                  }
                }, {
                  key: "reset", value: function value() {
                    this._posterUrl = "", o.Dom.setStyle(this._el, "background-image", "");
                  }
                }, {
                  key: "destroy", value: function value() {
                    this.reset(), this._removeEl();
                  }
                }, {
                  key: "src", get: function get() {
                    return this._posterUrl;
                  }
                }]), e;
              }();
            t.default = s;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e() {
                  i(this, e);
                }

                return r(e, null, [{
                  key: "language", get: function get() {
                    var e = void 0;
                    return e = navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.userLanguage ? navigator.userLanguage : navigator.language, e && e.match("-") && (e = e.split("-")[0]), e;
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            var i, r;
            /*!
              * js-logger - http://github.com/jonnyreeves/js-logger
              * Jonny Reeves, http://jonnyreeves.co.uk/
              * js-logger may be freely distributed under the MIT license.
              */
            !function (a) {
              "use strict";
              var o = {};
              o.VERSION = "1.4.1";
              var s,
                u = {},
                l = function l(e, t) {
                  return function () {
                    return t.apply(e, arguments);
                  };
                },
                c = function c() {
                  var e,
                    t,
                    n = arguments,
                    i = n[0];
                  for (t = 1; t < n.length; t++) {
                    for (e in n[t]) {
                      e in i || !n[t].hasOwnProperty(e) || (i[e] = n[t][e]);
                    }
                  }
                  return i;
                },
                f = function f(e, t) {
                  return {value: e, name: t};
                };
              o.DEBUG = f(1, "DEBUG"), o.INFO = f(2, "INFO"), o.TIME = f(3, "TIME"), o.WARN = f(4, "WARN"), o.ERROR = f(8, "ERROR"), o.OFF = f(99, "OFF");
              var d = function d(e) {
                this.context = e, this.setLevel(e.filterLevel), this.log = this.info;
              };
              d.prototype = {
                setLevel: function setLevel(e) {
                  e && "value" in e && (this.context.filterLevel = e);
                }, getLevel: function getLevel() {
                  return this.context.filterLevel;
                }, enabledFor: function enabledFor(e) {
                  var t = this.context.filterLevel;
                  return e.value >= t.value;
                }, debug: function debug() {
                  this.invoke(o.DEBUG, arguments);
                }, info: function info() {
                  this.invoke(o.INFO, arguments);
                }, warn: function warn() {
                  this.invoke(o.WARN, arguments);
                }, error: function error() {
                  this.invoke(o.ERROR, arguments);
                }, time: function time(e) {
                  "string" == typeof e && e.length > 0 && this.invoke(o.TIME, [e, "start"]);
                }, timeEnd: function timeEnd(e) {
                  "string" == typeof e && e.length > 0 && this.invoke(o.TIME, [e, "end"]);
                }, invoke: function invoke(e, t) {
                  s && this.enabledFor(e) && s(t, c({level: e}, this.context));
                }
              };
              var A = new d({filterLevel: o.OFF});
              !function () {
                var e = o;
                e.enabledFor = l(A, A.enabledFor), e.debug = l(A, A.debug), e.time = l(A, A.time), e.timeEnd = l(A, A.timeEnd), e.info = l(A, A.info), e.warn = l(A, A.warn), e.error = l(A, A.error), e.log = e.info;
              }(), o.setHandler = function (e) {
                s = e;
              }, o.setLevel = function (e) {
                A.setLevel(e);
                for (var t in u) {
                  u.hasOwnProperty(t) && u[t].setLevel(e);
                }
              }, o.getLevel = function () {
                return A.getLevel();
              }, o.get = function (e) {
                return u[e] || (u[e] = new d(c({name: e}, A.context)));
              }, o.createDefaultHandler = function (e) {
                e = e || {}, e.formatter = e.formatter || function (e, t) {
                  t.name && e.unshift("[" + t.name + "]");
                };
                var t = {},
                  n = function n(e, t) {
                    Function.prototype.apply.call(e, console, t);
                  };
                return "undefined" == typeof console ? function () {
                } : function (i, r) {
                  i = Array.prototype.slice.call(i);
                  var a,
                    s = console.log;
                  r.level === o.TIME ? (a = (r.name ? "[" + r.name + "] " : "") + i[0], "start" === i[1] ? console.time ? console.time(a) : t[a] = new Date().getTime() : console.timeEnd ? console.timeEnd(a) : n(s, [a + ": " + (new Date().getTime() - t[a]) + "ms"])) : (r.level === o.WARN && console.warn ? s = console.warn : r.level === o.ERROR && console.error ? s = console.error : r.level === o.INFO && console.info ? s = console.info : r.level === o.DEBUG && console.debug && (s = console.debug), e.formatter(i, r), n(s, i));
                };
              }, o.useDefaults = function (e) {
                o.setLevel(e && e.defaultLevel || o.DEBUG), o.setHandler(o.createDefaultHandler(e));
              }, i = o, void 0 !== (r = "function" == typeof i ? i.call(t, n, t, e) : i) && (e.exports = r);
            }();
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t, n) {
              return t in e ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0
              }) : e[t] = n, e;
            }

            function a(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function o(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function s(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var u = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              l = n(13),
              c = i(l),
              f = n(1),
              d = i(f),
              A = n(5),
              h = i(A),
              _ = n(6),
              p = n(19),
              v = i(p),
              g = n(7),
              y = (i(g), n(8)),
              E = (i(y), n(9), n(23)),
              m = n(2),
              b = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(m),
              T = n(43),
              k = i(T),
              S = n(45),
              w = i(S),
              O = n(3),
              N = i(O),
              C = function (e) {
                function t(e, n) {
                  a(this, t);
                  var i = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                  return i._showTextTrackFirstTime = {}, i._eventManager = new h.default(), i._createVideoElement(), i._init(e, n), i;
                }

                return s(t, e), u(t, null, [{
                  key: "createEngine", value: function value(e, t) {
                    return new this(e, t);
                  }
                }, {
                  key: "canPlaySource", value: function value(e, t) {
                    return v.default.canPlaySource(e, t);
                  }
                }, {
                  key: "runCapabilities", value: function value() {
                    t._capabilities.forEach(function (e) {
                      return e.runCapability();
                    });
                  }
                }, {
                  key: "getCapabilities", value: function value() {
                    var e = [];
                    return t._capabilities.forEach(function (t) {
                      return e.push(t.getCapability());
                    }), Promise.all(e).then(function (e) {
                      var n = {};
                      return e.forEach(function (e) {
                        return Object.assign(n, e);
                      }), r({}, t.id, n);
                    });
                  }
                }]), u(t, [{
                  key: "restore", value: function value(e, t) {
                    this.detach(), this._eventManager.removeAll(), this._el && b.Dom.removeAttribute(this._el, "src"), this._init(e, t);
                  }
                }, {
                  key: "destroy", value: function value() {
                    this.detach(), this._el && (this.pause(), b.Dom.removeAttribute(this._el, "src"), b.Dom.removeChild(this._el.parentNode, this._el)), this._showTextTrackFirstTime = {}, this._eventManager.destroy(), v.default.destroy(), this._mediaSourceAdapter = null;
                  }
                }, {
                  key: "attach", value: function value() {
                    var e = this;
                    Object.keys(_.HTML5_EVENTS).forEach(function (t) {
                      e._eventManager.listen(e._el, _.HTML5_EVENTS[t], function () {
                        _.HTML5_EVENTS[t] === _.HTML5_EVENTS.ERROR ? e._handleVideoError() : e.dispatchEvent(new d.default(_.HTML5_EVENTS[t]));
                      });
                    }), this._mediaSourceAdapter && (this._eventManager.listen(this._mediaSourceAdapter, _.CUSTOM_EVENTS.VIDEO_TRACK_CHANGED, function (t) {
                      return e.dispatchEvent(t);
                    }), this._eventManager.listen(this._mediaSourceAdapter, _.CUSTOM_EVENTS.AUDIO_TRACK_CHANGED, function (t) {
                      return e.dispatchEvent(t);
                    }), this._eventManager.listen(this._mediaSourceAdapter, _.CUSTOM_EVENTS.TEXT_TRACK_CHANGED, function (t) {
                      return e.dispatchEvent(t);
                    }), this._eventManager.listen(this._mediaSourceAdapter, _.CUSTOM_EVENTS.ABR_MODE_CHANGED, function (t) {
                      return e.dispatchEvent(t);
                    }), this._eventManager.listen(this._mediaSourceAdapter, _.CUSTOM_EVENTS.TEXT_CUE_CHANGED, function (t) {
                      return e.dispatchEvent(t);
                    }), this._eventManager.listen(this._mediaSourceAdapter, _.HTML5_EVENTS.ERROR, function (t) {
                      return e.dispatchEvent(t);
                    }));
                  }
                }, {
                  key: "_handleVideoError", value: function value() {
                    if (this._el.error) {
                      var e = this._el.error.code;
                      if (1 != e) {
                        var t = this._getMsExtendedError(),
                          n = this._el.error.message,
                          i = new N.default(N.default.Severity.CRITICAL, N.default.Category.MEDIA, N.default.Code.VIDEO_ERROR, {
                            code: e,
                            extended: t,
                            message: n
                          });
                        this.dispatchEvent(new d.default(_.HTML5_EVENTS.ERROR, i));
                      }
                    }
                  }
                }, {
                  key: "_getMsExtendedError", value: function value() {
                    var e = this._el.error.msExtendedCode;
                    return e && (e < 0 && (e += Math.pow(2, 32)), e = e.toString(16)), e;
                  }
                }, {
                  key: "detach", value: function value() {
                    var e = this;
                    Object.keys(_.HTML5_EVENTS).forEach(function (t) {
                      e._eventManager.unlisten(e._el, _.HTML5_EVENTS[t]);
                    }), this._mediaSourceAdapter && (this._eventManager.unlisten(this._mediaSourceAdapter, _.CUSTOM_EVENTS.VIDEO_TRACK_CHANGED), this._eventManager.unlisten(this._mediaSourceAdapter, _.CUSTOM_EVENTS.AUDIO_TRACK_CHANGED), this._eventManager.unlisten(this._mediaSourceAdapter, _.CUSTOM_EVENTS.TEXT_TRACK_CHANGED), this._eventManager.unlisten(this._mediaSourceAdapter, _.CUSTOM_EVENTS.TEXT_CUE_CHANGED));
                  }
                }, {
                  key: "getVideoElement", value: function value() {
                    return this._el;
                  }
                }, {
                  key: "selectVideoTrack", value: function value(e) {
                    this._mediaSourceAdapter && this._mediaSourceAdapter.selectVideoTrack(e);
                  }
                }, {
                  key: "selectAudioTrack", value: function value(e) {
                    this._mediaSourceAdapter && this._mediaSourceAdapter.selectAudioTrack(e);
                  }
                }, {
                  key: "selectTextTrack", value: function value(e) {
                    this._removeCueChangeListener(), this._mediaSourceAdapter && this._mediaSourceAdapter.selectTextTrack(e), this._addCueChangeListener(e);
                  }
                }, {
                  key: "hideTextTrack", value: function value() {
                    this._mediaSourceAdapter && this._mediaSourceAdapter.hideTextTrack(), this._removeCueChangeListener();
                  }
                }, {
                  key: "enableAdaptiveBitrate", value: function value() {
                    this._mediaSourceAdapter && this._mediaSourceAdapter.enableAdaptiveBitrate();
                  }
                }, {
                  key: "isAdaptiveBitrateEnabled", value: function value() {
                    return !!this._mediaSourceAdapter && this._mediaSourceAdapter.isAdaptiveBitrateEnabled();
                  }
                }, {
                  key: "seekToLiveEdge", value: function value() {
                    this._mediaSourceAdapter && this._mediaSourceAdapter.seekToLiveEdge();
                  }
                }, {
                  key: "isLive", value: function value() {
                    return !!this._mediaSourceAdapter && this._mediaSourceAdapter.isLive();
                  }
                }, {
                  key: "play", value: function value() {
                    var e = this,
                      t = this._el.play();
                    t && t.catch(function () {
                      return e.dispatchEvent(new d.default(_.CUSTOM_EVENTS.AUTOPLAY_FAILED));
                    });
                  }
                }, {
                  key: "pause", value: function value() {
                    return this._el.pause();
                  }
                }, {
                  key: "load", value: function value(e) {
                    var t = this;
                    return this._el.load(), this._canLoadMediaSourceAdapterPromise.then(function () {
                      return t._mediaSourceAdapter ? t._mediaSourceAdapter.load(e).catch(function (e) {
                        return Promise.reject(e);
                      }) : Promise.resolve({});
                    }).catch(function (e) {
                      return Promise.reject(e);
                    });
                  }
                }, {
                  key: "ready", value: function value() {
                  }
                }, {
                  key: "_init", value: function value(e, t) {
                    this._config = t, this._canLoadMediaSourceAdapterPromise = this._mediaSourceAdapter ? this._mediaSourceAdapter.destroy() : Promise.resolve(), this._mediaSourceAdapter = null, this._loadMediaSourceAdapter(e), this.attach();
                  }
                }, {
                  key: "_createVideoElement", value: function value() {
                    this._el = b.Dom.createElement("video"), this._el.id = b.Generator.uniqueId(5), this._el.controls = !1;
                  }
                }, {
                  key: "_loadMediaSourceAdapter", value: function value(e) {
                    this._mediaSourceAdapter = v.default.getMediaSourceAdapter(this.getVideoElement(), e, this._config);
                  }
                }, {
                  key: "_addCueChangeListener", value: function value(e) {
                    var t = this,
                      n = this._getSelectedTextTrackElement();
                    n && (this._config.playback.useNativeTextTrack ? n.mode = "showing" : (n.oncuechange = function (e) {
                      return t._onCueChange(e);
                    }, n.mode = this._showTextTrackFirstTime[e.index] ? "hidden" : "showing", this._showTextTrackFirstTime[e.index] = !0));
                  }
                }, {
                  key: "_removeCueChangeListener", value: function value() {
                    var e = this._getSelectedTextTrackElement();
                    e && (e.oncuechange = null);
                  }
                }, {
                  key: "_onCueChange", value: function value(e) {
                    var t = e.currentTarget,
                      n = [];
                    t.mode = "hidden";
                    var i = !0,
                      r = !1,
                      a = void 0;
                    try {
                      for (var o, s = t.activeCues[Symbol.iterator](); !(i = (o = s.next()).done); i = !0) {
                        var u = o.value;
                        if (window.VTTCue && u instanceof window.VTTCue) n.push(u); else if (window.TextTrackCue && u instanceof window.TextTrackCue) try {
                          n.push(new E.Cue(u.startTime, u.endTime, u.text));
                        } catch (e) {
                          new N.default(N.default.Severity.RECOVERABLE, N.default.Category.TEXT, N.default.Code.UNABLE_TO_CREATE_TEXT_CUE, e);
                        }
                      }
                    } catch (e) {
                      r = !0, a = e;
                    } finally {
                      try {
                        !i && s.return && s.return();
                      } finally {
                        if (r) throw a;
                      }
                    }
                    this.dispatchEvent(new d.default(_.CUSTOM_EVENTS.TEXT_CUE_CHANGED, {cues: n}));
                  }
                }, {
                  key: "_getSelectedTextTrackElement", value: function value() {
                    var e = this._el.textTracks;
                    for (var t in e) {
                      if (e.hasOwnProperty(t)) {
                        var n = e[parseInt(t)];
                        if (n && "disabled" !== n.mode) return n;
                      }
                    }
                    return null;
                  }
                }, {
                  key: "id", get: function get() {
                    return t.id;
                  }
                }, {
                  key: "src", set: function set(e) {
                    this._el.src = e;
                  }, get: function get() {
                    return this._mediaSourceAdapter ? this._mediaSourceAdapter.src : "";
                  }
                }, {
                  key: "currentTime", get: function get() {
                    return this._mediaSourceAdapter ? this._mediaSourceAdapter.currentTime : 0;
                  }, set: function set(e) {
                    this._mediaSourceAdapter && (this._mediaSourceAdapter.currentTime = e);
                  }
                }, {
                  key: "duration", get: function get() {
                    return this._mediaSourceAdapter ? this._mediaSourceAdapter.duration : NaN;
                  }
                }, {
                  key: "volume", set: function set(e) {
                    this._el.volume = e;
                  }, get: function get() {
                    return this._el.volume;
                  }
                }, {
                  key: "paused", get: function get() {
                    return this._el.paused;
                  }
                }, {
                  key: "seeking", get: function get() {
                    return this._el.seeking;
                  }
                }, {
                  key: "seekable", get: function get() {
                    return this._el.seekable;
                  }
                }, {
                  key: "played", get: function get() {
                    return this._el.played;
                  }
                }, {
                  key: "buffered", get: function get() {
                    return this._el.buffered;
                  }
                }, {
                  key: "muted", set: function set(e) {
                    this._el.muted = e;
                  }, get: function get() {
                    return this._el.muted;
                  }
                }, {
                  key: "defaultMuted", get: function get() {
                    return this._el.defaultMuted;
                  }
                }, {
                  key: "poster", set: function set(e) {
                    this._el.poster = e;
                  }, get: function get() {
                    return this._el.poster;
                  }
                }, {
                  key: "preload", set: function set(e) {
                    this._el.preload = e;
                  }, get: function get() {
                    return this._el.preload;
                  }
                }, {
                  key: "autoplay", set: function set(e) {
                    this._el.autoplay = e;
                  }, get: function get() {
                    return this._el.autoplay;
                  }
                }, {
                  key: "loop", set: function set(e) {
                    this._el.loop = e;
                  }, get: function get() {
                    return this._el.loop;
                  }
                }, {
                  key: "controls", set: function set(e) {
                    this._el.controls = e;
                  }, get: function get() {
                    return this._el.controls;
                  }
                }, {
                  key: "playbackRate", set: function set(e) {
                    this._el.playbackRate = e;
                  }, get: function get() {
                    return this._el.playbackRate;
                  }
                }, {
                  key: "defaultPlaybackRate", set: function set(e) {
                    this._el.defaultPlaybackRate = e;
                  }, get: function get() {
                    return this._el.defaultPlaybackRate;
                  }
                }, {
                  key: "ended", get: function get() {
                    return this._el.ended;
                  }
                }, {
                  key: "error", get: function get() {
                    return this._el.error;
                  }
                }, {
                  key: "networkState", get: function get() {
                    return this._el.networkState;
                  }
                }, {
                  key: "readyState", get: function get() {
                    return this._el.readyState;
                  }
                }, {
                  key: "videoHeight", get: function get() {
                    return this._el.videoHeight;
                  }
                }, {
                  key: "videoWidth", get: function get() {
                    return this._el.videoWidth;
                  }
                }, {
                  key: "playsinline", set: function set(e) {
                    e ? this._el.setAttribute("playsinline", "") : this._el.removeAttribute("playsinline");
                  }, get: function get() {
                    return "" === this._el.getAttribute("playsinline");
                  }
                }]), t;
              }(c.default);
            C._capabilities = [k.default, w.default], C.id = "html5", t.default = C;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function a(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function o(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var s = function e(t, n, i) {
                null === t && (t = Function.prototype);
                var r = Object.getOwnPropertyDescriptor(t, n);
                if (void 0 === r) {
                  var a = Object.getPrototypeOf(t);
                  return null === a ? void 0 : e(a, n, i);
                }
                if ("value" in r) return r.value;
                var o = r.get;
                if (void 0 !== o) return o.call(i);
              },
              u = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              l = n(5),
              c = i(l),
              f = n(6),
              d = n(4),
              A = (i(d), n(7)),
              h = i(A),
              _ = n(8),
              p = i(_),
              v = n(9),
              g = n(20),
              y = i(g),
              E = n(40),
              m = n(2),
              b = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(m),
              T = n(41),
              k = i(T),
              S = n(11),
              w = i(S),
              O = n(1),
              N = (i(O), n(3)),
              C = i(N),
              L = function (e) {
                function t(e, n, i) {
                  r(this, t), t._logger.debug("Creating adapter");
                  var o = a(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, n));
                  return o._eventManager = new c.default(), o._maybeSetDrmPlayback(), o._progressiveSources = i.sources.progressive, o;
                }

                return o(t, e), u(t, null, [{
                  key: "canPlayType", value: function value(e) {
                    var n = !1;
                    return "string" == typeof e && (n = !!t.TEST_VIDEO.canPlayType(e.toLowerCase())), t._logger.debug("canPlayType result for mimeType:" + e + " is " + n.toString()), n;
                  }
                }, {
                  key: "canPlayDrm", value: function value(e) {
                    var n = !1,
                      i = !0,
                      r = !1,
                      a = void 0;
                    try {
                      for (var o, s = t._drmProtocols[Symbol.iterator](); !(i = (o = s.next()).done); i = !0) {
                        var u = o.value;
                        if (u.canPlayDrm(e)) {
                          t._drmProtocol = u, n = !0;
                          break;
                        }
                      }
                    } catch (e) {
                      r = !0, a = e;
                    } finally {
                      try {
                        !i && s.return && s.return();
                      } finally {
                        if (r) throw a;
                      }
                    }
                    return t._logger.debug("canPlayDrm result is " + n.toString(), e), n;
                  }
                }, {
                  key: "createAdapter", value: function value(e, t, n) {
                    return new this(e, t, n);
                  }
                }]), u(t, [{
                  key: "_dispatchErrorCallback", value: function value(e) {
                    this._trigger(f.HTML5_EVENTS.ERROR, e);
                  }
                }, {
                  key: "_maybeSetDrmPlayback", value: function value() {
                    var e = this;
                    t._drmProtocol && this._sourceObj && this._sourceObj.drmData && t._drmProtocol.setDrmPlayback(this._videoElement, this._sourceObj.drmData, function (t) {
                      return e._dispatchErrorCallback(t);
                    });
                  }
                }, {
                  key: "_setProgressiveSource", value: function value() {
                    var e = (0, E.getSuitableSourceForResolution)(this._progressiveSources, this._videoElement.offsetWidth, this._videoElement.offsetHeight);
                    e && (this._sourceObj = e);
                  }
                }, {
                  key: "_isProgressivePlayback", value: function value() {
                    return !!this._sourceObj && "video/mp4" === this._sourceObj.mimetype;
                  }
                }, {
                  key: "load", value: function value(e) {
                    var t = this;
                    return this._loadPromise || (this._loadPromise = new Promise(function (n, i) {
                      t._eventManager.listenOnce(t._videoElement, f.HTML5_EVENTS.LOADED_DATA, t._onLoadedData.bind(t, n)), t._eventManager.listenOnce(t._videoElement, f.HTML5_EVENTS.ERROR, t._onError.bind(t, i)), t._isProgressivePlayback() && t._setProgressiveSource(), t._sourceObj && t._sourceObj.url && (t._videoElement.src = t._sourceObj.url, t._trigger(y.default.CustomEvents.ABR_MODE_CHANGED, {mode: t._isProgressivePlayback() ? "manual" : "auto"})), e && (t._videoElement.currentTime = e), t._videoElement.load();
                    })), this._loadPromise;
                  }
                }, {
                  key: "_onLoadedData", value: function value(e) {
                    var n = this,
                      i = function i() {
                        n._playerTracks = n._getParsedTracks(), n._addNativeAudioTrackChangeListener(), n._addNativeTextTrackChangeListener(), t._logger.debug("The source has been loaded successfully"), e({tracks: n._playerTracks});
                      };
                    this._videoElement.textTracks.length > 0 ? i() : this._eventManager.listenOnce(this._videoElement, f.HTML5_EVENTS.CAN_PLAY, i.bind(this));
                  }
                }, {
                  key: "_onError", value: function value(e, t) {
                    e(new C.default(C.default.Severity.CRITICAL, C.default.Category.MEDIA, C.default.Code.NATIVE_ADAPTER_LOAD_FAILED, t.payload));
                  }
                }, {
                  key: "destroy", value: function value() {
                    var e = this;
                    return t._logger.debug("destroy"), s(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "destroy", this).call(this).then(function () {
                      e._eventManager.destroy(), e._progressiveSources = [], e._loadPromise = null, t._drmProtocol && (t._drmProtocol.destroy(), t._drmProtocol = null);
                    });
                  }
                }, {
                  key: "_getParsedTracks", value: function value() {
                    var e = this._getParsedVideoTracks(),
                      t = this._getParsedAudioTracks(),
                      n = this._getParsedTextTracks();
                    return e.concat(t).concat(n);
                  }
                }, {
                  key: "_getParsedVideoTracks", value: function value() {
                    return this._isProgressivePlayback() ? this._getParsedProgressiveVideoTracks() : this._getParsedAdaptiveVideoTracks();
                  }
                }, {
                  key: "_getParsedProgressiveVideoTracks", value: function value() {
                    var e = this._progressiveSources,
                      t = [];
                    if (e) for (var n = 0; n < e.length; n++) {
                      var i = {
                        id: e[n].id,
                        bandwidth: e[n].bandwidth,
                        width: e[n].width,
                        height: e[n].height,
                        active: !!this._sourceObj && e[n].id === this._sourceObj.id,
                        index: n
                      };
                      t.push(new h.default(i));
                    }
                    return t;
                  }
                }, {
                  key: "_getParsedAdaptiveVideoTracks", value: function value() {
                    var e = this._videoElement.videoTracks,
                      t = [];
                    if (e) for (var n = 0; n < e.length; n++) {
                      var i = {
                        id: e[n].id,
                        active: e[n].selected,
                        label: e[n].label,
                        language: e[n].language,
                        index: n
                      };
                      t.push(new h.default(i));
                    }
                    return t;
                  }
                }, {
                  key: "_getParsedAudioTracks", value: function value() {
                    var e = this._videoElement.audioTracks,
                      t = [];
                    if (e) for (var n = 0; n < e.length; n++) {
                      var i = {id: e[n].id, active: e[n].enabled, label: e[n].label, language: e[n].language, index: n};
                      t.push(new p.default(i));
                    }
                    return t;
                  }
                }, {
                  key: "_getParsedTextTracks", value: function value() {
                    var e = this._videoElement.textTracks,
                      t = [];
                    if (e) for (var n = 0; n < e.length; n++) {
                      var i = {
                        kind: e[n].kind,
                        active: "showing" === e[n].mode,
                        label: e[n].label,
                        language: e[n].language,
                        index: n
                      };
                      (i.language || i.label) && t.push(new v.TextTrack(i));
                    }
                    return t;
                  }
                }, {
                  key: "selectVideoTrack", value: function value(e) {
                    this._isProgressivePlayback() ? this._selectProgressiveVideoTrack(e) : this.selectAdaptiveVideoTrack(e);
                  }
                }, {
                  key: "_selectProgressiveVideoTrack", value: function value(e) {
                    var t = this,
                      n = this._progressiveSources;
                    if (e instanceof h.default && n && n[e.index]) {
                      var i = this._videoElement.currentTime,
                        r = this._videoElement.paused;
                      this._sourceObj = n[e.index], this._eventManager.listenOnce(this._videoElement, f.HTML5_EVENTS.LOADED_DATA, function () {
                        "Android Browser" === w.default.browser.name ? (t._eventManager.listenOnce(t._videoElement, f.HTML5_EVENTS.DURATION_CHANGE, function () {
                          t._videoElement.currentTime = i;
                        }), t._eventManager.listenOnce(t._videoElement, f.HTML5_EVENTS.SEEKED, function () {
                          t._onTrackChanged(e), r && t._videoElement.pause();
                        }), t._videoElement.play()) : (t._eventManager.listenOnce(t._videoElement, f.HTML5_EVENTS.SEEKED, function () {
                          t._onTrackChanged(e);
                        }), t._videoElement.currentTime = i, r || t._videoElement.play());
                      }), this._videoElement.src = this._sourceObj ? this._sourceObj.url : "";
                    }
                  }
                }, {
                  key: "selectAdaptiveVideoTrack", value: function value(e) {
                    var t = this._videoElement.videoTracks;
                    e instanceof h.default && t && t[e.index] && (this._disableVideoTracks(), t[e.index].selected = !0, this._onTrackChanged(e));
                  }
                }, {
                  key: "selectAudioTrack", value: function value(e) {
                    var t = this._videoElement.audioTracks;
                    e instanceof p.default && t && t[e.index] && (this._removeNativeAudioTrackChangeListener(), this._disableAudioTracks(), t[e.index].enabled = !0, this._onTrackChanged(e), this._addNativeAudioTrackChangeListener());
                  }
                }, {
                  key: "_removeNativeAudioTrackChangeListener", value: function value() {
                    this._videoElement.audioTracks && this._eventManager.unlisten(this._videoElement.audioTracks, "change");
                  }
                }, {
                  key: "_addNativeAudioTrackChangeListener", value: function value() {
                    var e = this;
                    this._videoElement.audioTracks && this._eventManager.listen(this._videoElement.audioTracks, "change", function () {
                      return e._onNativeAudioTrackChange();
                    });
                  }
                }, {
                  key: "_onNativeAudioTrackChange", value: function value() {
                    var e = this,
                      n = this._playerTracks.filter(function (e) {
                        return e instanceof p.default;
                      });
                    t._logger.debug("Video element audio track change");
                    var i = function () {
                        for (var t = 0; t < e._videoElement.audioTracks.length; t++) {
                          if (e._videoElement.audioTracks[t].enabled) return t;
                        }
                        return -1;
                      }(),
                      r = function () {
                        var e = n.find(function (e) {
                          return !0 === e.active;
                        });
                        return e ? e.index : -1;
                      }();
                    if (i !== r) {
                      var a = n.find(function (e) {
                        return e.index === i;
                      });
                      a && (t._logger.debug("Native selection of track, update the player audio track (" + r + " -> " + i + ")"), this._onTrackChanged(a));
                    }
                  }
                }, {
                  key: "selectTextTrack", value: function value(e) {
                    var n = this._videoElement.textTracks;
                    e instanceof v.TextTrack && ("subtitles" === e.kind || "captions" === e.kind) && n && n[e.index] && (this._removeNativeTextTrackChangeListener(), this._disableTextTracks(), n[e.index].mode = "hidden", t._logger.debug("Text track changed", e), this._onTrackChanged(e), this._addNativeTextTrackChangeListener());
                  }
                }, {
                  key: "_removeNativeTextTrackChangeListener", value: function value() {
                    this._videoElement.textTracks && this._eventManager.unlisten(this._videoElement.textTracks, "change");
                  }
                }, {
                  key: "_addNativeTextTrackChangeListener", value: function value() {
                    var e = this;
                    this._videoElement.textTracks && this._eventManager.listen(this._videoElement.textTracks, "change", function () {
                      return e._onNativeTextTrackChange();
                    });
                  }
                }, {
                  key: "_onNativeTextTrackChange", value: function value() {
                    var e = this,
                      n = this._playerTracks.filter(function (e) {
                        return e instanceof v.TextTrack;
                      }),
                      i = n.find(function (e) {
                        return "off" === e.language;
                      });
                    t._logger.debug("Video element text track change");
                    var r = function () {
                        for (var t = 0; t < e._videoElement.textTracks.length; t++) {
                          if ("showing" === e._videoElement.textTracks[t].mode) return t;
                        }
                        return -1;
                      }(),
                      a = function () {
                        var e = n.find(function (e) {
                          return !0 === e.active;
                        });
                        return e ? e.index : -1;
                      }();
                    if (r !== a) if (-1 == r) i && (t._logger.debug("Native selection of track, update the player text track (" + a + " -> off)"), this._onTrackChanged(i)); else {
                      var o = n.find(function (e) {
                        return e.index === r;
                      });
                      o && (t._logger.debug("Native selection of track, update the player text track (" + a + " -> " + r + ")"), this._onTrackChanged(o));
                    }
                  }
                }, {
                  key: "hideTextTrack", value: function value() {
                    this._disableTextTracks();
                  }
                }, {
                  key: "enableAdaptiveBitrate", value: function value() {
                    t._logger.warn("Enabling adaptive bitrate is not supported for native playback");
                  }
                }, {
                  key: "isAdaptiveBitrateEnabled", value: function value() {
                    return !this._isProgressivePlayback();
                  }
                }, {
                  key: "_disableVideoTracks", value: function value() {
                    var e = this._videoElement.videoTracks;
                    if (e) for (var t = 0; t < e.length; t++) {
                      e[t].selected = !1;
                    }
                  }
                }, {
                  key: "_disableAudioTracks", value: function value() {
                    var e = this._videoElement.audioTracks;
                    if (e) for (var t = 0; t < e.length; t++) {
                      e[t].enabled = !1;
                    }
                  }
                }, {
                  key: "_disableTextTracks", value: function value() {
                    var e = this._videoElement.textTracks;
                    if (e) for (var t = 0; t < e.length; t++) {
                      e[t].mode = "disabled";
                    }
                  }
                }, {
                  key: "_getLiveEdge", value: function value() {
                    return this._videoElement.seekable.length ? this._videoElement.seekable.end(this._videoElement.seekable.length - 1) : this._videoElement.buffered.length ? this._videoElement.buffered.end(this._videoElement.buffered.length - 1) : this._videoElement.duration;
                  }
                }, {
                  key: "seekToLiveEdge", value: function value() {
                    try {
                      this._videoElement.currentTime = this._getLiveEdge();
                    } catch (e) {
                      return;
                    }
                  }
                }, {
                  key: "isLive", value: function value() {
                    return this._videoElement.duration === 1 / 0;
                  }
                }, {
                  key: "src", get: function get() {
                    return this._videoElement.src;
                  }
                }, {
                  key: "duration", get: function get() {
                    return this.isLive() ? this._getLiveEdge() : s(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "duration", this);
                  }
                }]), t;
              }(y.default);
            L.id = "NativeAdapter", L._logger = y.default.getLogger(L.id), L.TEST_VIDEO = b.Dom.createElement("video"), L._drmProtocols = [k.default], L._drmProtocol = null, t.default = L;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            var i = {RECOVERABLE: 1, CRITICAL: 2};
            t.Severity = i;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            var i = {
              UNSUPPORTED_SCHEME: 1e3,
              BAD_HTTP_STATUS: 1001,
              HTTP_ERROR: 1002,
              TIMEOUT: 1003,
              MALFORMED_DATA_URI: 1004,
              UNKNOWN_DATA_URI_ENCODING: 1005,
              REQUEST_FILTER_ERROR: 1006,
              RESPONSE_FILTER_ERROR: 1007,
              INVALID_TEXT_HEADER: 2e3,
              INVALID_TEXT_CUE: 2001,
              UNABLE_TO_DETECT_ENCODING: 2003,
              BAD_ENCODING: 2004,
              INVALID_XML: 2005,
              INVALID_MP4_TTML: 2007,
              INVALID_MP4_VTT: 2008,
              UNABLE_TO_CREATE_TEXT_CUE: 2009,
              DASH_ADAPTER_ERROR_PARSE_ISSUE: 2010,
              BUFFER_READ_OUT_OF_BOUNDS: 3e3,
              JS_INTEGER_OVERFLOW: 3001,
              EBML_OVERFLOW: 3002,
              EBML_BAD_FLOATING_POINT_SIZE: 3003,
              MP4_SIDX_WRONG_BOX_TYPE: 3004,
              MP4_SIDX_INVALID_TIMESCALE: 3005,
              MP4_SIDX_TYPE_NOT_SUPPORTED: 3006,
              WEBM_CUES_ELEMENT_MISSING: 3007,
              WEBM_EBML_HEADER_ELEMENT_MISSING: 3008,
              WEBM_SEGMENT_ELEMENT_MISSING: 3009,
              WEBM_INFO_ELEMENT_MISSING: 3010,
              WEBM_DURATION_ELEMENT_MISSING: 3011,
              WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING: 3012,
              WEBM_CUE_TIME_ELEMENT_MISSING: 3013,
              MEDIA_SOURCE_OPERATION_FAILED: 3014,
              MEDIA_SOURCE_OPERATION_THREW: 3015,
              VIDEO_ERROR: 3016,
              QUOTA_EXCEEDED_ERROR: 3017,
              HLS_FATAL_MEDIA_ERROR: 3018,
              HLS_FRAG_PARSING_ERROR: 3019,
              HLS_BUFFER_APPEND_ISSUE: 3020,
              HLS_BUFFER_APPENDING_ISSUE: 3021,
              NATIVE_ADAPTER_LOAD_FAILED: 3022,
              HLS_BUFFER_STALLED_ERROR: 3023,
              UNABLE_TO_GUESS_MANIFEST_TYPE: 4e3,
              DASH_INVALID_XML: 4001,
              DASH_NO_SEGMENT_INFO: 4002,
              DASH_EMPTY_ADAPTATION_SET: 4003,
              DASH_EMPTY_PERIOD: 4004,
              DASH_WEBM_MISSING_INIT: 4005,
              DASH_UNSUPPORTED_CONTAINER: 4006,
              DASH_PSSH_BAD_ENCODING: 4007,
              DASH_NO_COMMON_KEY_SYSTEM: 4008,
              DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED: 4009,
              DASH_CONFLICTING_KEY_IDS: 4010,
              UNPLAYABLE_PERIOD: 4011,
              RESTRICTIONS_CANNOT_BE_MET: 4012,
              NO_PERIODS: 4014,
              HLS_PLAYLIST_HEADER_MISSING: 4015,
              INVALID_HLS_TAG: 4016,
              HLS_INVALID_PLAYLIST_HIERARCHY: 4017,
              DASH_DUPLICATE_REPRESENTATION_ID: 4018,
              HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND: 4020,
              HLS_COULD_NOT_GUESS_MIME_TYPE: 4021,
              HLS_MASTER_PLAYLIST_NOT_PROVIDED: 4022,
              HLS_REQUIRED_ATTRIBUTE_MISSING: 4023,
              HLS_REQUIRED_TAG_MISSING: 4024,
              HLS_COULD_NOT_GUESS_CODECS: 4025,
              HLS_KEYFORMATS_NOT_SUPPORTED: 4026,
              DASH_UNSUPPORTED_XLINK_ACTUATE: 4027,
              DASH_XLINK_DEPTH_LIMIT: 4028,
              HLS_LIVE_CONTENT_NOT_SUPPORTED: 4029,
              HLSJS_CANNOT_PARSE: 4030,
              INVALID_STREAMS_CHOSEN: 5005,
              NO_RECOGNIZED_KEY_SYSTEMS: 6e3,
              REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE: 6001,
              FAILED_TO_CREATE_CDM: 6002,
              FAILED_TO_ATTACH_TO_VIDEO: 6003,
              INVALID_SERVER_CERTIFICATE: 6004,
              FAILED_TO_CREATE_SESSION: 6005,
              FAILED_TO_GENERATE_LICENSE_REQUEST: 6006,
              LICENSE_REQUEST_FAILED: 6007,
              LICENSE_RESPONSE_REJECTED: 6008,
              ENCRYPTED_CONTENT_WITHOUT_DRM_INFO: 6010,
              NO_LICENSE_SERVER_GIVEN: 6012,
              OFFLINE_SESSION_REMOVED: 6013,
              EXPIRED: 6014,
              BAD_FAIRPLAY_RESPONSE: 6015,
              COULD_NOT_CREATE_MEDIA_KEYS: 6016,
              COULD_NOT_CREATE_KEY_SESSION: 6017,
              LOAD_INTERRUPTED: 7e3,
              BITRATE_SWITCH_ISSUE: 7001,
              LOAD_FAILED: 7002,
              RUNTIME_ERROR_NOT_REGISTERED_PLUGIN: 7003,
              RUNTIME_ERROR_METHOD_NOT_IMPLEMENTED: 7004,
              RUNTIME_ERROR_NOT_VALID_HANDLER: 7005,
              CAST_API_UNAVAILABLE: 8e3,
              NO_CAST_RECEIVERS: 8001,
              ALREADY_CASTING: 8002,
              UNEXPECTED_CAST_ERROR: 8003,
              CAST_CANCELED_BY_USER: 8004,
              CAST_CONNECTION_TIMED_OUT: 8005,
              CAST_RECEIVER_APP_UNAVAILABLE: 8006,
              STORAGE_NOT_SUPPORTED: 9e3,
              INDEXED_DB_ERROR: 9001,
              OPERATION_ABORTED: 9002,
              REQUESTED_ITEM_NOT_FOUND: 9003,
              MALFORMED_OFFLINE_URI: 9004,
              CANNOT_STORE_LIVE_OFFLINE: 9005,
              STORE_ALREADY_IN_PROGRESS: 9006,
              NO_INIT_DATA_FOR_OFFLINE: 9007,
              LOCAL_PLAYER_INSTANCE_REQUIRED: 9008,
              CONTENT_UNSUPPORTED_BY_BROWSER: 9009
            };
            t.Code = i;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            var i = {NETWORK: 1, TEXT: 2, MEDIA: 3, MANIFEST: 4, STREAMING: 5, DRM: 6, PLAYER: 7, ADS: 8, STORAGE: 9};
            t.Category = i;
          }, function (e, t, n) {
            "use strict";

            function i(e, t, n) {
              var i = null;
              if (n && e) {
                var r = [],
                  a = 1 / 0,
                  o = !0,
                  s = !1,
                  u = void 0;
                try {
                  for (var l, c = e[Symbol.iterator](); !(o = (l = c.next()).done); o = !0) {
                    var f = l.value,
                      d = Math.abs(f.width - t);
                    d < a ? (a = d, r = [f]) : d === a && r.push(f);
                  }
                } catch (e) {
                  s = !0, u = e;
                } finally {
                  try {
                    !o && c.return && c.return();
                  } finally {
                    if (s) throw u;
                  }
                }
                var A = t / n,
                  h = r,
                  _ = 1 / 0,
                  p = !0,
                  v = !1,
                  g = void 0;
                try {
                  for (var y, E = r[Symbol.iterator](); !(p = (y = E.next()).done); p = !0) {
                    var m = y.value;
                    if (m.height) {
                      var b = Math.abs(m.width / m.height - A);
                      b < _ ? (_ = b, h = [m]) : b === _ && h.push(m);
                    }
                  }
                } catch (e) {
                  v = !0, g = e;
                } finally {
                  try {
                    !p && E.return && E.return();
                  } finally {
                    if (v) throw g;
                  }
                }
                var T = 0,
                  k = !0,
                  S = !1,
                  w = void 0;
                try {
                  for (var O, N = h[Symbol.iterator](); !(k = (O = N.next()).done); k = !0) {
                    var C = O.value;
                    (C.bandwidth > T || !C.bandwidth) && (T = C.bandwidth || T, i = C);
                  }
                } catch (e) {
                  S = !0, w = e;
                } finally {
                  try {
                    !k && N.return && N.return();
                  } finally {
                    if (S) throw w;
                  }
                }
              }
              return i;
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.getSuitableSourceForResolution = i;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function a(e, t) {
              if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
            }

            function o(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var s = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              u = n(21),
              l = i(u),
              c = n(3),
              f = i(c),
              d = function (e) {
                function t() {
                  return r(this, t), a(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
                }

                return o(t, e), s(t, null, [{
                  key: "canPlayDrm", value: function value(e) {
                    return t._logger.debug("Can play DRM scheme of: " + l.default.DrmScheme.FAIRPLAY), l.default.DrmSupport.isProtocolSupported(l.default.DrmScheme.FAIRPLAY, e);
                  }
                }, {
                  key: "setDrmPlayback", value: function value(e) {
                    var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
                      i = arguments[2];
                    t._logger.debug("Sets DRM playback"), e.addEventListener(t._WebkitEvents.NEED_KEY, t._onWebkitNeedKey.bind(null, n), !1), t._errorCallback = i;
                  }
                }, {
                  key: "_onWebkitNeedKey", value: function value(e, n) {
                    t._logger.debug("Webkit need key triggered");
                    var i = e.find(function (e) {
                      return e.scheme === l.default.DrmScheme.FAIRPLAY;
                    });
                    if (i && !t._keySession) {
                      var r = i.certificate,
                        a = n.target,
                        o = n.initData,
                        s = t._extractContentId(o),
                        u = t._base64DecodeUint8Array(r);
                      if (o = t._concatInitDataIdAndCertificate(o, s, u), !a.webkitKeys) {
                        var c = t._selectKeySystem();
                        t._logger.debug("Sets media keys"), a.webkitSetMediaKeys(new window.WebKitMediaKeys(c));
                      }
                      a.webkitKeys || t._onError(f.default.Code.COULD_NOT_CREATE_MEDIA_KEYS), t._logger.debug("Creates session"), t._keySession = a.webkitKeys.createSession("video/mp4", o), t._keySession || t._onError(f.default.Code.COULD_NOT_CREATE_KEY_SESSION), t._keySession.contentId = s, t._keySession.addEventListener(t._WebkitEvents.KEY_MESSAGE, t._onWebkitKeyMessage.bind(null, i), !1), t._keySession.addEventListener(t._WebkitEvents.KEY_ADDED, t._onWebkitKeyAdded, !1), t._keySession.addEventListener(t._WebkitEvents.KEY_ERROR, t._onWebkitKeyError, !1);
                    }
                  }
                }, {
                  key: "destroy", value: function value() {
                    t._keySession = null;
                  }
                }, {
                  key: "_onWebkitKeyMessage", value: function value(e, n) {
                    t._logger.debug("Webkit key message triggered");
                    var i = n.message,
                      r = new XMLHttpRequest();
                    r.responseType = "text", r.addEventListener("load", t._licenseRequestLoaded, !1), r.addEventListener("error", function () {
                      return t._onError(f.default.Code.LICENSE_REQUEST_FAILED);
                    }, !1);
                    var a = t._base64EncodeUint8Array(i);
                    r.open("POST", e.licenseUrl, !0), r.setRequestHeader("Content-type", "application/json"), t._logger.debug("Ready for license request"), r.send(a);
                  }
                }, {
                  key: "_onWebkitKeyAdded", value: function value() {
                    t._logger.debug("Decryption key was added to session");
                  }
                }, {
                  key: "_onWebkitKeyError", value: function value() {
                    t._logger.error("A decryption key error was encountered");
                  }
                }, {
                  key: "_licenseRequestLoaded", value: function value(e) {
                    t._logger.debug("License request loaded");
                    var n = e.target,
                      i = n.responseText.trim(),
                      r = {};
                    try {
                      r = JSON.parse(i);
                    } catch (e) {
                      t._onError(f.default.Code.BAD_FAIRPLAY_RESPONSE, e);
                    }
                    var a = t._validateResponse(r);
                    if (a.valid) {
                      var o = t._base64DecodeUint8Array(r.ckc);
                      t._keySession.update(o);
                    } else t._onError(f.default.Code.BAD_FAIRPLAY_RESPONSE, a);
                  }
                }, {
                  key: "_onError", value: function value(e, n) {
                    t._errorCallback(new f.default(f.default.Severity.CRITICAL, f.default.Category.DRM, e, n));
                  }
                }, {
                  key: "_validateResponse", value: function value(e) {
                    return e.message && e.message.indexOf("error") > 0 || null === e.reference || 500 === e.status_code ? {
                      valid: !1,
                      details: "internal server error"
                    } : "" === e.ckc ? {valid: !1, details: "ckc is missing"} : {valid: !0};
                  }
                }, {
                  key: "_extractContentId", value: function value(e) {
                    var n = document.createElement("a");
                    return n.href = t._arrayToString(e), n.hostname;
                  }
                }, {
                  key: "_selectKeySystem", value: function value() {
                    var e = null;
                    return window.WebKitMediaKeys.isTypeSupported(t._KeySystem, "video/mp4") ? e = t._KeySystem : t._logger.warn("Key System not supported"), e;
                  }
                }, {
                  key: "_arrayToString", value: function value(e) {
                    return String.fromCharCode.apply(null, new Uint16Array(e.buffer));
                  }
                }, {
                  key: "_base64DecodeUint8Array", value: function value(e) {
                    for (var t = window.atob(e), n = t.length, i = new Uint8Array(new ArrayBuffer(n)), r = 0; r < n; r++) {
                      i[r] = t.charCodeAt(r);
                    }
                    return i;
                  }
                }, {
                  key: "_concatInitDataIdAndCertificate", value: function value(e, n, i) {
                    "string" == typeof n && (n = t._stringToArray(n));
                    var r = 0,
                      a = new ArrayBuffer(e.byteLength + 4 + n.byteLength + 4 + i.byteLength),
                      o = new DataView(a);
                    new Uint8Array(a, r, e.byteLength).set(e), r += e.byteLength, o.setUint32(r, n.byteLength, !0), r += 4;
                    var s = new Uint8Array(a, r, n.byteLength);
                    return s.set(n), r += s.byteLength, o.setUint32(r, i.byteLength, !0), r += 4, new Uint8Array(a, r, i.byteLength).set(i), new Uint8Array(a, 0, a.byteLength);
                  }
                }, {
                  key: "_stringToArray", value: function value(e) {
                    for (var t = new ArrayBuffer(2 * e.length), n = new Uint16Array(t), i = 0, r = e.length; i < r; i++) {
                      n[i] = e.charCodeAt(i);
                    }
                    return n;
                  }
                }, {
                  key: "_base64EncodeUint8Array", value: function value(e) {
                    for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", n = "", i = void 0, r = void 0, a = void 0, o = void 0, s = void 0, u = void 0, l = void 0, c = 0; c < e.length;) {
                      i = e[c++], r = c < e.length ? e[c++] : Number.NaN, a = c < e.length ? e[c++] : Number.NaN, o = i >> 2, s = (3 & i) << 4 | r >> 4, u = (15 & r) << 2 | a >> 6, l = 63 & a, isNaN(r) ? u = l = 64 : isNaN(a) && (l = 64), n += t.charAt(o) + t.charAt(s) + t.charAt(u) + t.charAt(l);
                    }
                    return n;
                  }
                }]), t;
              }(l.default);
            d._logger = l.default.getLogger("FairPlay"), d._KeySystem = "com.apple.fps.1_0", d._WebkitEvents = {
              NEED_KEY: "webkitneedkey",
              KEY_MESSAGE: "webkitkeymessage",
              KEY_ADDED: "webkitkeyadded",
              KEY_ERROR: "webkitkeyerror"
            }, t.default = d;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(11),
              s = i(o),
              u = n(0),
              l = i(u),
              c = n(22),
              f = "not_supported_drm_playback",
              d = function () {
                function e() {
                  r(this, e);
                }

                return a(e, null, [{
                  key: "isProtocolSupported", value: function value(t, n) {
                    var i = s.default.browser.name;
                    if ("function" == typeof e._Browsers[i]) {
                      var r = e._Browsers[i]();
                      return e._logger.debug("Supported DRM scheme for current environment is: " + r), r === t && !!n.find(function (e) {
                        return e.scheme === t;
                      });
                    }
                    return !1;
                  }
                }]), e;
              }();
            d._logger = (0, l.default)("DrmSupport"), d._Browsers = {
              Safari: function Safari() {
                var e = s.default.device.type,
                  t = s.default.os.name;
                return e || "Mac OS" !== t ? f : c.DrmScheme.FAIRPLAY;
              }, Chrome: function Chrome() {
                var e = s.default.device.type,
                  t = s.default.os.name;
                return e && "Android" !== t ? f : c.DrmScheme.WIDEVINE;
              }, Firefox: function Firefox() {
                return s.default.device.type ? f : c.DrmScheme.WIDEVINE;
              }, Edge: function Edge() {
                return s.default.device.type ? f : c.DrmScheme.PLAYREADY;
              }, IE: function IE() {
                var e = s.default.device.type,
                  t = s.default.os.name,
                  n = s.default.os.version;
                return !e && "Windows" === t && Number.parseFloat(n) >= 8.1 ? c.DrmScheme.PLAYREADY : f;
              }
            }, t.default = d;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              if (e && e.__esModule) return e;
              var t = {};
              if (null != e) for (var n in e) {
                Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
              }
              return t.default = e, t;
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(2),
              s = i(o),
              u = n(44),
              l = i(u),
              c = function () {
                function e() {
                  r(this, e);
                }

                return a(e, null, [{
                  key: "runCapability", value: function value() {
                    try {
                      e._vid.src = l.Base64Mp4Source, e._promise = e._vid.play() || Promise.resolve();
                    } catch (t) {
                      e._promise = Promise.reject();
                    }
                  }
                }, {
                  key: "getCapability", value: function value() {
                    return e._promise.then(function () {
                      return {autoplay: !0};
                    }).catch(function () {
                      return {autoplay: !1};
                    });
                  }
                }]), e;
              }();
            c._vid = s.Dom.createElement("video"), t.default = c;
          }, function (e, t) {
            e.exports = {Base64Mp4Source: "data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAC721kYXQhEAUgpBv/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3pwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcCEQBSCkG//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADengAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAsJtb292AAAAbG12aGQAAAAAAAAAAAAAAAAAAAPoAAAALwABAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAB7HRyYWsAAABcdGtoZAAAAAMAAAAAAAAAAAAAAAIAAAAAAAAALwAAAAAAAAAAAAAAAQEAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAACRlZHRzAAAAHGVsc3QAAAAAAAAAAQAAAC8AAAAAAAEAAAAAAWRtZGlhAAAAIG1kaGQAAAAAAAAAAAAAAAAAAKxEAAAIAFXEAAAAAAAtaGRscgAAAAAAAAAAc291bgAAAAAAAAAAAAAAAFNvdW5kSGFuZGxlcgAAAAEPbWluZgAAABBzbWhkAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAADTc3RibAAAAGdzdHNkAAAAAAAAAAEAAABXbXA0YQAAAAAAAAABAAAAAAAAAAAAAgAQAAAAAKxEAAAAAAAzZXNkcwAAAAADgICAIgACAASAgIAUQBUAAAAAAfQAAAHz+QWAgIACEhAGgICAAQIAAAAYc3R0cwAAAAAAAAABAAAAAgAABAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAIAAAABAAAAHHN0c3oAAAAAAAAAAAAAAAIAAAFzAAABdAAAABRzdGNvAAAAAAAAAAEAAAAsAAAAYnVkdGEAAABabWV0YQAAAAAAAAAhaGRscgAAAAAAAAAAbWRpcmFwcGwAAAAAAAAAAAAAAAAtaWxzdAAAACWpdG9vAAAAHWRhdGEAAAABAAAAAExhdmY1Ni40MC4xMDE="};
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = n(2),
              o = function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e) for (var n in e) {
                  Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                }
                return t.default = e, t;
              }(a),
              s = function () {
                function e() {
                  i(this, e);
                }

                return r(e, null, [{
                  key: "runCapability", value: function value() {
                    try {
                      e._vid.volume = .5, e._result = !!e._vid.canPlayType;
                    } catch (t) {
                      e._result = !1;
                    }
                  }
                }, {
                  key: "getCapability", value: function value() {
                    return Promise.resolve({isSupported: e._result});
                  }
                }]), e;
              }();
            s._vid = o.Dom.createElement("video"), t.default = s;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t, n) {
              return t in e ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0
              }) : e[t] = n, e;
            }

            function a(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var o = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              s = n(10),
              u = (i(s), n(5)),
              l = i(u),
              c = n(47),
              f = i(c),
              d = n(18),
              A = i(d),
              h = n(6),
              _ = n(1),
              p = i(_),
              v = n(0),
              g = i(v),
              y = function () {
                function e(t) {
                  var n,
                    i,
                    o,
                    s,
                    u,
                    c,
                    d = this;
                  a(this, e), this._transitions = (c = {}, r(c, A.default.IDLE, (n = {}, r(n, h.HTML5_EVENTS.LOAD_START, function () {
                    d._updateState(A.default.LOADING), d._dispatchEvent();
                  }), r(n, h.HTML5_EVENTS.PLAY, function () {
                    d._updateState(A.default.BUFFERING), d._dispatchEvent();
                  }), n)), r(c, A.default.LOADING, (i = {}, r(i, h.HTML5_EVENTS.LOADED_METADATA, function () {
                    d._updateState(A.default.PAUSED), d._dispatchEvent();
                  }), r(i, h.HTML5_EVENTS.ERROR, function () {
                    d._updateState(A.default.IDLE), d._dispatchEvent();
                  }), i)), r(c, A.default.PAUSED, (o = {}, r(o, h.HTML5_EVENTS.PLAY, function () {
                    d._updateState(A.default.PLAYING), d._dispatchEvent();
                  }), r(o, h.HTML5_EVENTS.PLAYING, function () {
                    d._updateState(A.default.PLAYING), d._dispatchEvent();
                  }), r(o, h.HTML5_EVENTS.ENDED, function () {
                    d._updateState(A.default.IDLE), d._dispatchEvent();
                  }), o)), r(c, A.default.PLAYING, (s = {}, r(s, h.HTML5_EVENTS.PAUSE, function () {
                    d._updateState(A.default.PAUSED), d._dispatchEvent();
                  }), r(s, h.HTML5_EVENTS.WAITING, function () {
                    d._updateState(A.default.BUFFERING), d._dispatchEvent();
                  }), r(s, h.HTML5_EVENTS.ENDED, function () {
                    d._updateState(A.default.IDLE), d._dispatchEvent();
                  }), r(s, h.HTML5_EVENTS.ERROR, function () {
                    d._updateState(A.default.IDLE), d._dispatchEvent();
                  }), s)), r(c, A.default.BUFFERING, (u = {}, r(u, h.HTML5_EVENTS.PLAYING, function () {
                    d._updateState(A.default.PLAYING), d._dispatchEvent();
                  }), r(u, h.HTML5_EVENTS.PAUSE, function () {
                    d._updateState(A.default.PAUSED), d._dispatchEvent();
                  }), r(u, h.HTML5_EVENTS.SEEKED, function () {
                    d._prevState && d._prevState.type === A.default.PLAYING && (d._updateState(A.default.PLAYING), d._dispatchEvent());
                  }), u)), c), this._player = t, this._logger = (0, g.default)("StateManager"), this._eventManager = new l.default(), this._history = [], this._prevState = null, this._curState = new f.default(A.default.IDLE), this._attachListeners();
                }

                return o(e, [{
                  key: "_attachListeners", value: function value() {
                    this._eventManager.listen(this._player, h.HTML5_EVENTS.ERROR, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.ENDED, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.PLAY, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.LOAD_START, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.PLAYING, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.LOADED_METADATA, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.PAUSE, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.WAITING, this._doTransition.bind(this)), this._eventManager.listen(this._player, h.HTML5_EVENTS.SEEKED, this._doTransition.bind(this));
                  }
                }, {
                  key: "_doTransition", value: function value(e) {
                    this._logger.debug("Do transition request", e.type);
                    var t = this._transitions[this._curState.type];
                    "function" == typeof t[e.type] && t[e.type]();
                  }
                }, {
                  key: "_updateState", value: function value(e) {
                    this._curState.type !== e && (this._curState.duration = Date.now() / 1e3, this._history.push(this._curState), this._prevState = this._curState, this._curState = new f.default(e), this._logger.debug("Switch player state: from " + this._prevState.type + " to " + this._curState.type));
                  }
                }, {
                  key: "_dispatchEvent", value: function value() {
                    var e = new p.default(h.CUSTOM_EVENTS.PLAYER_STATE_CHANGED, {
                      oldState: this._prevState,
                      newState: this._curState
                    });
                    this._player.dispatchEvent(e);
                  }
                }, {
                  key: "destroy", value: function value() {
                    this._history = [], this._eventManager.destroy();
                  }
                }, {
                  key: "reset", value: function value() {
                    this._history = [];
                  }
                }, {
                  key: "currentState", get: function get() {
                    return this._curState;
                  }
                }, {
                  key: "previousState", get: function get() {
                    return this._prevState;
                  }
                }, {
                  key: "history", get: function get() {
                    return this._history;
                  }
                }]), e;
              }();
            t.default = y;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e(t) {
                  i(this, e), this.type = t, this._duration = 0, this._timestamp = Date.now() / 1e3;
                }

                return r(e, [{
                  key: "duration", get: function get() {
                    return this._duration;
                  }, set: function set(e) {
                    this._duration = e - this._timestamp;
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0});
            var i = {VIDEO: "video", AUDIO: "audio", TEXT: "text"};
            t.default = i;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(50),
              s = i(o),
              u = n(15),
              l = (i(u), function () {
                function e() {
                  r(this, e), this._middleware = new s.default(e.Actions);
                }

                return a(e, [{
                  key: "use", value: function value(e) {
                    this._middleware.use(e);
                  }
                }, {
                  key: "play", value: function value(t) {
                    this._middleware.run(e.Actions.PLAY, t);
                  }
                }, {
                  key: "pause", value: function value(t) {
                    this._middleware.run(e.Actions.PAUSE, t);
                  }
                }]), e;
              }());
            l.Actions = {PLAY: "play", PAUSE: "pause"}, t.default = l;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(12),
              s = i(o),
              u = n(15),
              l = (i(u), n(0)),
              c = i(l),
              f = function () {
                function e(t) {
                  r(this, e), this._actions = t, this._middlewares = new s.default(), this._logger = (0, c.default)("Middleware");
                }

                return a(e, [{
                  key: "use", value: function value(e) {
                    for (var t in this._actions) {
                      var n = this._actions[t];
                      "function" == typeof e[n] && (this._logger.debug("Register <" + e.id + "> for action " + n), this._middlewares.push(n, e[n].bind(e)));
                    }
                  }
                }, {
                  key: "run", value: function value(e, t) {
                    var n = this;
                    this._logger.debug("Start middleware chain for action " + e);
                    var i = this._middlewares.get(e);
                    this._executeMiddleware(i, function () {
                      n._logger.debug("Finish middleware chain for action " + e), t();
                    });
                  }
                }, {
                  key: "_executeMiddleware", value: function value(e, t) {
                    e.reduceRight(function (e, t) {
                      return function (n) {
                        t(e);
                      };
                    }, t)();
                  }
                }]), e;
              }();
            t.default = f;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0}), t.Preload = void 0;
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(52),
              s = i(o),
              u = n(16),
              l = i(u),
              c = n(53),
              f = i(c),
              d = t.Preload = {NONE: "none", AUTO: "auto"},
              A = function () {
                function e(t) {
                  r(this, e), this._streamPriority = new s.default(), this._preferNative = new f.default(), this.audioLanguage = t && t.audioLanguage || "", this.textLanguage = t && t.textLanguage || "", this.useNativeTextTrack = t && t.useNativeTextTrack || !1, this.volume = t && t.volume || 1, this.playsinline = t && t.playsinline || !0, this.preload = t && t.preload || d.NONE, this.autoplay = t && t.autoplay || !1, this.allowMutedAutoPlay = t && t.allowMutedAutoPlay || !0, this.muted = t && t.muted || !1, t && t.preferNative && (this.preferNative = t.preferNative), t && t.streamPriority ? this.streamPriority = t.streamPriority : (this._streamPriority.list.push(new l.default(u.EngineName.HTML5, u.FormatName.HLS)), this._streamPriority.list.push(new l.default(u.EngineName.HTML5, u.FormatName.DASH)), this._streamPriority.list.push(new l.default(u.EngineName.HTML5, u.FormatName.PROGRESSIVE)));
                }

                return a(e, [{
                  key: "audioLanguage", get: function get() {
                    return this._audioLanguage;
                  }, set: function set(e) {
                    "string" == typeof e && (this._audioLanguage = e);
                  }
                }, {
                  key: "textLanguage", get: function get() {
                    return this._textLanguage;
                  }, set: function set(e) {
                    "string" == typeof e && (this._textLanguage = e);
                  }
                }, {
                  key: "useNativeTextTrack", get: function get() {
                    return this._useNativeTextTrack;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._useNativeTextTrack = e);
                  }
                }, {
                  key: "volume", get: function get() {
                    return this._volume;
                  }, set: function set(e) {
                    "number" == typeof e && (this._volume = e);
                  }
                }, {
                  key: "playsinline", get: function get() {
                    return this._playsinline;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._playsinline = e);
                  }
                }, {
                  key: "preload", get: function get() {
                    return this._preload;
                  }, set: function set(e) {
                    "string" != typeof e || e !== d.NONE && e !== d.AUTO || (this._preload = e);
                  }
                }, {
                  key: "autoplay", get: function get() {
                    return this._autoplay;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._autoplay = e);
                  }
                }, {
                  key: "allowMutedAutoPlay", get: function get() {
                    return this._allowMutedAutoPlay;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._allowMutedAutoPlay = e);
                  }
                }, {
                  key: "muted", get: function get() {
                    return this._muted;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._muted = e);
                  }
                }, {
                  key: "streamPriority", get: function get() {
                    return this._streamPriority.list;
                  }, set: function set(e) {
                    this._streamPriority.list = e;
                  }
                }, {
                  key: "preferNative", get: function get() {
                    return this._preferNative;
                  }, set: function set(e) {
                    "boolean" == typeof e.dash && (this._preferNative.dash = e.dash), "boolean" == typeof e.hls && (this._preferNative.hls = e.hls);
                  }
                }]), a(e, [{
                  key: "toJSON", value: function value() {
                    return {
                      audioLanguage: this.audioLanguage,
                      textLanguage: this.textLanguage,
                      useNativeTextTrack: this.useNativeTextTrack,
                      volume: this.volume,
                      playsinline: this.playsinline,
                      preload: this.preload,
                      autoplay: this.autoplay,
                      allowMutedAutoPlay: this.allowMutedAutoPlay,
                      muted: this.muted,
                      streamPriority: this._streamPriority.toJSON(),
                      preferNative: this._preferNative.toJSON()
                    };
                  }
                }]), e;
              }();
            t.default = A;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = n(16),
              o = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(a),
              s = function () {
                function e() {
                  i(this, e), this._list = [];
                }

                return r(e, [{
                  key: "toJSON", value: function value() {
                    var e = [];
                    return this._list.forEach(function (t) {
                      return e.push(t.toJSON());
                    }), e;
                  }
                }, {
                  key: "list", get: function get() {
                    return this._list;
                  }, set: function set(e) {
                    var t = this;
                    this._list = [], e.forEach(function (e) {
                      return t._list.push(new o.default(e.engine, e.format));
                    });
                  }
                }]), e;
              }();
            t.default = s;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e() {
                  i(this, e), this._hls = !1, this._dash = !1;
                }

                return r(e, [{
                  key: "hls", get: function get() {
                    return this._hls;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._hls = e);
                  }
                }, {
                  key: "dash", get: function get() {
                    return this._dash;
                  }, set: function set(e) {
                    "boolean" == typeof e && (this._dash = e);
                  }
                }]), r(e, [{
                  key: "toJSON", value: function value() {
                    return {hls: this.hls, dash: this.dash};
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e) {
              return e && e.__esModule ? e : {default: e};
            }

            function r(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var a = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              o = n(55),
              s = i(o),
              u = n(17),
              l = (i(u), function () {
                function e(t) {
                  r(this, e), this._hls = new s.default(), this._dash = new s.default(), this._progressive = new s.default(), t && t.hls && (this.hls = t.hls), t && t.dash && (this.dash = t.dash), t && t.progressive && (this.progressive = t.progressive);
                }

                return a(e, [{
                  key: "hls", get: function get() {
                    return this._hls.list;
                  }, set: function set(e) {
                    this._hls.list = e;
                  }
                }, {
                  key: "dash", get: function get() {
                    return this._dash.list;
                  }, set: function set(e) {
                    this._dash.list = e;
                  }
                }, {
                  key: "progressive", get: function get() {
                    return this._progressive.list;
                  }, set: function set(e) {
                    this._progressive.list = e;
                  }
                }]), a(e, [{
                  key: "toJSON", value: function value() {
                    return {
                      hls: this._hls.toJSON(),
                      dash: this._dash.toJSON(),
                      progressive: this._progressive.toJSON()
                    };
                  }
                }]), e;
              }());
            t.default = l;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = n(17),
              o = function (e) {
                return e && e.__esModule ? e : {default: e};
              }(a),
              s = function () {
                function e() {
                  i(this, e), this._list = [];
                }

                return r(e, [{
                  key: "toJSON", value: function value() {
                    var e = [];
                    return this._list.forEach(function (t) {
                      return e.push(t.toJSON());
                    }), e;
                  }
                }, {
                  key: "list", get: function get() {
                    return this._list;
                  }, set: function set(e) {
                    var t = this;
                    this._list = [], e.forEach(function (e) {
                      var n = new o.default(e.mimetype, e.url, e.id);
                      e.bandwidth && (n.bandwidth = e.bandwidth), e.width && (n.width = e.width), e.height && (n.height = e.height), e.drmData && (n.drmData = e.drmData), t._list.push(n);
                    });
                  }
                }]), e;
              }();
            t.default = s;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e(t) {
                  i(this, e), this.poster = t && t.poster || "", this.description = t && t.description || "";
                }

                return r(e, [{
                  key: "poster", get: function get() {
                    return this._poster;
                  }, set: function set(e) {
                    this._poster = e;
                  }
                }, {
                  key: "description", get: function get() {
                    return this._description;
                  }, set: function set(e) {
                    this._description = e;
                  }
                }]), r(e, [{
                  key: "toJSON", value: function value() {
                    return {poster: this.poster, description: this.description};
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            "use strict";

            function i(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            Object.defineProperty(t, "__esModule", {value: !0});
            var r = function () {
                function e(e, t) {
                  for (var n = 0; n < t.length; n++) {
                    var i = t[n];
                    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                  }
                }

                return function (t, n, i) {
                  return n && e(t.prototype, n), i && e(t, i), t;
                };
              }(),
              a = function () {
                function e(t) {
                  i(this, e), this._map = new Map(), t && (this.map = t);
                }

                return r(e, [{
                  key: "map", get: function get() {
                    return this._map;
                  }, set: function set(e) {
                    var t = this;
                    e instanceof Map ? this._map = e : e instanceof Object && (this._map.clear(), Object.keys(e).forEach(function (n) {
                      return t._map.set(n, e[n]);
                    }));
                  }
                }]), r(e, [{
                  key: "toJSON", value: function value() {
                    var e = {};
                    return this._map.forEach(function (t, n) {
                      return e[n] = t;
                    }), e;
                  }
                }]), e;
              }();
            t.default = a;
          }, function (e, t, n) {
            var i = n(59);
            "string" == typeof i && (i = [[e.i, i, ""]]);
            var r = {};
            r.transform = void 0;
            n(61)(i, r);
            i.locals && (e.exports = i.locals);
          }, function (e, t, n) {
            t = e.exports = n(60)(void 0), t.push([e.i, ".playkit-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  color: #fff;\n  outline: none;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.playkit-engine {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  object-fit: contain;\n}\n\n.playkit-engine video::-webkit-media-controls-panel,\n.playkit-engine video::-webkit-media-controls-panel-container,\n.playkit-engine video::-webkit-media-controls-start-playback-button,\n.playkit-engine video::-webkit-media-controls-play-button {\n  display: none;\n  -webkit-appearance: none\n}\n\n.playkit-poster {\n  position: absolute;\n  display: block;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-size: contain;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-color: #000;\n}\n\n.playkit-subtitles {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n}\n\n", ""]);
          }, function (e, t) {
            function n(e, t) {
              var n = e[1] || "",
                r = e[3];
              if (!r) return n;
              if (t && "function" == typeof btoa) {
                var a = i(r);
                return [n].concat(r.sources.map(function (e) {
                  return "/*# sourceURL=" + r.sourceRoot + e + " */";
                })).concat([a]).join("\n");
              }
              return [n].join("\n");
            }

            function i(e) {
              return "/*# sourceMappingURL=data:application/json;charset=utf-8;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(e)))) + " */";
            }

            e.exports = function (e) {
              var t = [];
              return t.toString = function () {
                return this.map(function (t) {
                  var i = n(t, e);
                  return t[2] ? "@media " + t[2] + "{" + i + "}" : i;
                }).join("");
              }, t.i = function (e, n) {
                "string" == typeof e && (e = [[null, e, ""]]);
                for (var i = {}, r = 0; r < this.length; r++) {
                  var a = this[r][0];
                  "number" == typeof a && (i[a] = !0);
                }
                for (r = 0; r < e.length; r++) {
                  var o = e[r];
                  "number" == typeof o[0] && i[o[0]] || (n && !o[2] ? o[2] = n : n && (o[2] = "(" + o[2] + ") and (" + n + ")"), t.push(o));
                }
              }, t;
            };
          }, function (e, t, n) {
            function i(e, t) {
              for (var n = 0; n < e.length; n++) {
                var i = e[n],
                  r = h[i.id];
                if (r) {
                  r.refs++;
                  for (var a = 0; a < r.parts.length; a++) {
                    r.parts[a](i.parts[a]);
                  }
                  for (; a < i.parts.length; a++) {
                    r.parts.push(c(i.parts[a], t));
                  }
                } else {
                  for (var o = [], a = 0; a < i.parts.length; a++) {
                    o.push(c(i.parts[a], t));
                  }
                  h[i.id] = {id: i.id, refs: 1, parts: o};
                }
              }
            }

            function r(e, t) {
              for (var n = [], i = {}, r = 0; r < e.length; r++) {
                var a = e[r],
                  o = t.base ? a[0] + t.base : a[0],
                  s = a[1],
                  u = a[2],
                  l = a[3],
                  c = {css: s, media: u, sourceMap: l};
                i[o] ? i[o].parts.push(c) : n.push(i[o] = {id: o, parts: [c]});
              }
              return n;
            }

            function a(e, t) {
              var n = p(e.insertInto);
              if (!n) throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
              var i = y[y.length - 1];
              if ("top" === e.insertAt) i ? i.nextSibling ? n.insertBefore(t, i.nextSibling) : n.appendChild(t) : n.insertBefore(t, n.firstChild), y.push(t); else {
                if ("bottom" !== e.insertAt) throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
                n.appendChild(t);
              }
            }

            function o(e) {
              if (null === e.parentNode) return !1;
              e.parentNode.removeChild(e);
              var t = y.indexOf(e);
              t >= 0 && y.splice(t, 1);
            }

            function s(e) {
              var t = document.createElement("style");
              return e.attrs.type = "text/css", l(t, e.attrs), a(e, t), t;
            }

            function u(e) {
              var t = document.createElement("link");
              return e.attrs.type = "text/css", e.attrs.rel = "stylesheet", l(t, e.attrs), a(e, t), t;
            }

            function l(e, t) {
              Object.keys(t).forEach(function (n) {
                e.setAttribute(n, t[n]);
              });
            }

            function c(e, t) {
              var n, i, r, a;
              if (t.transform && e.css) {
                if (!(a = t.transform(e.css))) return function () {
                };
                e.css = a;
              }
              if (t.singleton) {
                var l = g++;
                n = v || (v = s(t)), i = f.bind(null, n, l, !1), r = f.bind(null, n, l, !0);
              } else e.sourceMap && "function" == typeof URL && "function" == typeof URL.createObjectURL && "function" == typeof URL.revokeObjectURL && "function" == typeof Blob && "function" == typeof btoa ? (n = u(t), i = A.bind(null, n, t), r = function r() {
                o(n), n.href && URL.revokeObjectURL(n.href);
              }) : (n = s(t), i = d.bind(null, n), r = function r() {
                o(n);
              });
              return i(e), function (t) {
                if (t) {
                  if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;
                  i(e = t);
                } else r();
              };
            }

            function f(e, t, n, i) {
              var r = n ? "" : i.css;
              if (e.styleSheet) e.styleSheet.cssText = m(t, r); else {
                var a = document.createTextNode(r),
                  o = e.childNodes;
                o[t] && e.removeChild(o[t]), o.length ? e.insertBefore(a, o[t]) : e.appendChild(a);
              }
            }

            function d(e, t) {
              var n = t.css,
                i = t.media;
              if (i && e.setAttribute("media", i), e.styleSheet) e.styleSheet.cssText = n; else {
                for (; e.firstChild;) {
                  e.removeChild(e.firstChild);
                }
                e.appendChild(document.createTextNode(n));
              }
            }

            function A(e, t, n) {
              var i = n.css,
                r = n.sourceMap,
                a = void 0 === t.convertToAbsoluteUrls && r;
              (t.convertToAbsoluteUrls || a) && (i = E(i)), r && (i += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(r)))) + " */");
              var o = new Blob([i], {type: "text/css"}),
                s = e.href;
              e.href = URL.createObjectURL(o), s && URL.revokeObjectURL(s);
            }

            var h = {},
              _ = function (e) {
                var t;
                return function () {
                  return void 0 === t && (t = e.apply(this, arguments)), t;
                };
              }(function () {
                return window && document && document.all && !window.atob;
              }),
              p = function (e) {
                var t = {};
                return function (n) {
                  return void 0 === t[n] && (t[n] = e.call(this, n)), t[n];
                };
              }(function (e) {
                return document.querySelector(e);
              }),
              v = null,
              g = 0,
              y = [],
              E = n(62);
            e.exports = function (e, t) {
              if ("undefined" != typeof DEBUG && DEBUG && "object" != (typeof document === "undefined" ? "undefined" : _typeof(document))) throw new Error("The style-loader cannot be used in a non-browser environment");
              t = t || {}, t.attrs = "object" == _typeof(t.attrs) ? t.attrs : {}, t.singleton || (t.singleton = _()), t.insertInto || (t.insertInto = "head"), t.insertAt || (t.insertAt = "bottom");
              var n = r(e, t);
              return i(n, t), function (e) {
                for (var a = [], o = 0; o < n.length; o++) {
                  var s = n[o],
                    u = h[s.id];
                  u.refs--, a.push(u);
                }
                if (e) {
                  i(r(e, t), t);
                }
                for (var o = 0; o < a.length; o++) {
                  var u = a[o];
                  if (0 === u.refs) {
                    for (var l = 0; l < u.parts.length; l++) {
                      u.parts[l]();
                    }
                    delete h[u.id];
                  }
                }
              };
            };
            var m = function () {
              var e = [];
              return function (t, n) {
                return e[t] = n, e.filter(Boolean).join("\n");
              };
            }();
          }, function (e, t) {
            e.exports = function (e) {
              var t = "undefined" != typeof window && window.location;
              if (!t) throw new Error("fixUrls requires window.location");
              if (!e || "string" != typeof e) return e;
              var n = t.protocol + "//" + t.host,
                i = n + t.pathname.replace(/\/[^\/]*$/, "/");
              return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (e, t) {
                var r = t.trim().replace(/^"(.*)"$/, function (e, t) {
                  return t;
                }).replace(/^'(.*)'$/, function (e, t) {
                  return t;
                });
                if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r)) return e;
                var a;
                return a = 0 === r.indexOf("//") ? r : 0 === r.indexOf("/") ? n + r : i + r.replace(/^\.\//, ""), "url(" + JSON.stringify(a) + ")";
              });
            };
          }]);
        });
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(128)(module)))

      /***/
    }),
    /* 12 */
    /***/ (function (module, exports) {

      var hasOwnProperty = {}.hasOwnProperty;
      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };


      /***/
    }),
    /* 13 */
    /***/ (function (module, exports, __webpack_require__) {

      var dP = __webpack_require__(7);
      var createDesc = __webpack_require__(33);
      module.exports = __webpack_require__(6) ? function (object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };


      /***/
    }),
    /* 14 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var hide = __webpack_require__(13);
      var has = __webpack_require__(12);
      var SRC = __webpack_require__(34)('src');
      var TO_STRING = 'toString';
      var $toString = Function[TO_STRING];
      var TPL = ('' + $toString).split(TO_STRING);

      __webpack_require__(22).inspectSource = function (it) {
        return $toString.call(it);
      };

      (module.exports = function (O, key, val, safe) {
        var isFunction = typeof val == 'function';
        if (isFunction) has(val, 'name') || hide(val, 'name', key);
        if (O[key] === val) return;
        if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
        if (O === global) {
          O[key] = val;
        } else if (!safe) {
          delete O[key];
          hide(O, key, val);
        } else if (O[key]) {
          O[key] = val;
        } else {
          hide(O, key, val);
        }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
      })(Function.prototype, TO_STRING, function toString() {
        return typeof this == 'function' && this[SRC] || $toString.call(this);
      });


      /***/
    }),
    /* 15 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var fails = __webpack_require__(3);
      var defined = __webpack_require__(24);
      var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
      var createHTML = function (string, tag, attribute, value) {
        var S = String(defined(string));
        var p1 = '<' + tag;
        if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
        return p1 + '>' + S + '</' + tag + '>';
      };
      module.exports = function (NAME, exec) {
        var O = {};
        O[NAME] = exec(createHTML);
        $export($export.P + $export.F * fails(function () {
          var test = ''[NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        }), 'String', O);
      };


      /***/
    }),
    /* 16 */
    /***/ (function (module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
      var IObject = __webpack_require__(48);
      var defined = __webpack_require__(24);
      module.exports = function (it) {
        return IObject(defined(it));
      };


      /***/
    }),
    /* 17 */
    /***/ (function (module, exports, __webpack_require__) {

      var pIE = __webpack_require__(49);
      var createDesc = __webpack_require__(33);
      var toIObject = __webpack_require__(16);
      var toPrimitive = __webpack_require__(23);
      var has = __webpack_require__(12);
      var IE8_DOM_DEFINE = __webpack_require__(94);
      var gOPD = Object.getOwnPropertyDescriptor;

      exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return gOPD(O, P);
        } catch (e) { /* empty */
        }
        if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
      };


      /***/
    }),
    /* 18 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      var has = __webpack_require__(12);
      var toObject = __webpack_require__(9);
      var IE_PROTO = __webpack_require__(68)('IE_PROTO');
      var ObjectProto = Object.prototype;

      module.exports = Object.getPrototypeOf || function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }
        return O instanceof Object ? ObjectProto : null;
      };


      /***/
    }),
    /* 19 */
    /***/ (function (module, exports, __webpack_require__) {

// optional / simple context binding
      var aFunction = __webpack_require__(10);
      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;
        switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };
          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };
          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }
        return function (/* ...args */) {
          return fn.apply(that, arguments);
        };
      };


      /***/
    }),
    /* 20 */
    /***/ (function (module, exports) {

      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };


      /***/
    }),
    /* 21 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var fails = __webpack_require__(3);

      module.exports = function (method, arg) {
        return !!method && fails(function () {
          // eslint-disable-next-line no-useless-call
          arg ? method.call(null, function () { /* empty */
          }, 1) : method.call(null);
        });
      };


      /***/
    }),
    /* 22 */
    /***/ (function (module, exports) {

      var core = module.exports = {version: '2.5.1'};
      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


      /***/
    }),
    /* 23 */
    /***/ (function (module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
      var isObject = __webpack_require__(4);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };


      /***/
    }),
    /* 24 */
    /***/ (function (module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
      };


      /***/
    }),
    /* 25 */
    /***/ (function (module, exports) {

// 7.1.4 ToInteger
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = function (it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };


      /***/
    }),
    /* 26 */
    /***/ (function (module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
      var $export = __webpack_require__(0);
      var core = __webpack_require__(22);
      var fails = __webpack_require__(3);
      module.exports = function (KEY, exec) {
        var fn = (core.Object || {})[KEY] || Object[KEY];
        var exp = {};
        exp[KEY] = exec(fn);
        $export($export.S + $export.F * fails(function () {
          fn(1);
        }), 'Object', exp);
      };


      /***/
    }),
    /* 27 */
    /***/ (function (module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
      var ctx = __webpack_require__(19);
      var IObject = __webpack_require__(48);
      var toObject = __webpack_require__(9);
      var toLength = __webpack_require__(8);
      var asc = __webpack_require__(85);
      module.exports = function (TYPE, $create) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        var create = $create || asc;
        return function ($this, callbackfn, that) {
          var O = toObject($this);
          var self = IObject(O);
          var f = ctx(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
          var val, res;
          for (; length > index; index++) if (NO_HOLES || index in self) {
            val = self[index];
            res = f(val, index, O);
            if (TYPE) {
              if (IS_MAP) result[index] = res;   // map
              else if (res) switch (TYPE) {
                case 3:
                  return true;             // some
                case 5:
                  return val;              // find
                case 6:
                  return index;            // findIndex
                case 2:
                  result.push(val);        // filter
              } else if (IS_EVERY) return false; // every
            }
          }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
        };
      };


      /***/
    }),
    /* 28 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      if (__webpack_require__(6)) {
        var LIBRARY = __webpack_require__(35);
        var global = __webpack_require__(2);
        var fails = __webpack_require__(3);
        var $export = __webpack_require__(0);
        var $typed = __webpack_require__(61);
        var $buffer = __webpack_require__(91);
        var ctx = __webpack_require__(19);
        var anInstance = __webpack_require__(41);
        var propertyDesc = __webpack_require__(33);
        var hide = __webpack_require__(13);
        var redefineAll = __webpack_require__(43);
        var toInteger = __webpack_require__(25);
        var toLength = __webpack_require__(8);
        var toIndex = __webpack_require__(120);
        var toAbsoluteIndex = __webpack_require__(37);
        var toPrimitive = __webpack_require__(23);
        var has = __webpack_require__(12);
        var classof = __webpack_require__(50);
        var isObject = __webpack_require__(4);
        var toObject = __webpack_require__(9);
        var isArrayIter = __webpack_require__(82);
        var create = __webpack_require__(38);
        var getPrototypeOf = __webpack_require__(18);
        var gOPN = __webpack_require__(39).f;
        var getIterFn = __webpack_require__(84);
        var uid = __webpack_require__(34);
        var wks = __webpack_require__(5);
        var createArrayMethod = __webpack_require__(27);
        var createArrayIncludes = __webpack_require__(52);
        var speciesConstructor = __webpack_require__(59);
        var ArrayIterators = __webpack_require__(87);
        var Iterators = __webpack_require__(46);
        var $iterDetect = __webpack_require__(56);
        var setSpecies = __webpack_require__(40);
        var arrayFill = __webpack_require__(86);
        var arrayCopyWithin = __webpack_require__(110);
        var $DP = __webpack_require__(7);
        var $GOPD = __webpack_require__(17);
        var dP = $DP.f;
        var gOPD = $GOPD.f;
        var RangeError = global.RangeError;
        var TypeError = global.TypeError;
        var Uint8Array = global.Uint8Array;
        var ARRAY_BUFFER = 'ArrayBuffer';
        var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
        var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
        var PROTOTYPE = 'prototype';
        var ArrayProto = Array[PROTOTYPE];
        var $ArrayBuffer = $buffer.ArrayBuffer;
        var $DataView = $buffer.DataView;
        var arrayForEach = createArrayMethod(0);
        var arrayFilter = createArrayMethod(2);
        var arraySome = createArrayMethod(3);
        var arrayEvery = createArrayMethod(4);
        var arrayFind = createArrayMethod(5);
        var arrayFindIndex = createArrayMethod(6);
        var arrayIncludes = createArrayIncludes(true);
        var arrayIndexOf = createArrayIncludes(false);
        var arrayValues = ArrayIterators.values;
        var arrayKeys = ArrayIterators.keys;
        var arrayEntries = ArrayIterators.entries;
        var arrayLastIndexOf = ArrayProto.lastIndexOf;
        var arrayReduce = ArrayProto.reduce;
        var arrayReduceRight = ArrayProto.reduceRight;
        var arrayJoin = ArrayProto.join;
        var arraySort = ArrayProto.sort;
        var arraySlice = ArrayProto.slice;
        var arrayToString = ArrayProto.toString;
        var arrayToLocaleString = ArrayProto.toLocaleString;
        var ITERATOR = wks('iterator');
        var TAG = wks('toStringTag');
        var TYPED_CONSTRUCTOR = uid('typed_constructor');
        var DEF_CONSTRUCTOR = uid('def_constructor');
        var ALL_CONSTRUCTORS = $typed.CONSTR;
        var TYPED_ARRAY = $typed.TYPED;
        var VIEW = $typed.VIEW;
        var WRONG_LENGTH = 'Wrong length!';

        var $map = createArrayMethod(1, function (O, length) {
          return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
        });

        var LITTLE_ENDIAN = fails(function () {
          // eslint-disable-next-line no-undef
          return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
        });

        var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
          new Uint8Array(1).set({});
        });

        var toOffset = function (it, BYTES) {
          var offset = toInteger(it);
          if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
          return offset;
        };

        var validate = function (it) {
          if (isObject(it) && TYPED_ARRAY in it) return it;
          throw TypeError(it + ' is not a typed array!');
        };

        var allocate = function (C, length) {
          if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
            throw TypeError('It is not a typed array constructor!');
          }
          return new C(length);
        };

        var speciesFromList = function (O, list) {
          return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
        };

        var fromList = function (C, list) {
          var index = 0;
          var length = list.length;
          var result = allocate(C, length);
          while (length > index) result[index] = list[index++];
          return result;
        };

        var addGetter = function (it, key, internal) {
          dP(it, key, {
            get: function () {
              return this._d[internal];
            }
          });
        };

        var $from = function from(source /* , mapfn, thisArg */) {
          var O = toObject(source);
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : undefined;
          var mapping = mapfn !== undefined;
          var iterFn = getIterFn(O);
          var i, length, values, result, step, iterator;
          if (iterFn != undefined && !isArrayIter(iterFn)) {
            for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
              values.push(step.value);
            }
            O = values;
          }
          if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
          for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
            result[i] = mapping ? mapfn(O[i], i) : O[i];
          }
          return result;
        };

        var $of = function of(/* ...items */) {
          var index = 0;
          var length = arguments.length;
          var result = allocate(this, length);
          while (length > index) result[index] = arguments[index++];
          return result;
        };

        // iOS Safari 6.x fails here
        var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
          arrayToLocaleString.call(new Uint8Array(1));
        });

        var $toLocaleString = function toLocaleString() {
          return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
        };

        var proto = {
          copyWithin: function copyWithin(target, start /* , end */) {
            return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
          },
          every: function every(callbackfn /* , thisArg */) {
            return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          },
          fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
            return arrayFill.apply(validate(this), arguments);
          },
          filter: function filter(callbackfn /* , thisArg */) {
            return speciesFromList(this, arrayFilter(validate(this), callbackfn,
              arguments.length > 1 ? arguments[1] : undefined));
          },
          find: function find(predicate /* , thisArg */) {
            return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
          },
          findIndex: function findIndex(predicate /* , thisArg */) {
            return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
          },
          forEach: function forEach(callbackfn /* , thisArg */) {
            arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          },
          indexOf: function indexOf(searchElement /* , fromIndex */) {
            return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
          },
          includes: function includes(searchElement /* , fromIndex */) {
            return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
          },
          join: function join(separator) { // eslint-disable-line no-unused-vars
            return arrayJoin.apply(validate(this), arguments);
          },
          lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
            return arrayLastIndexOf.apply(validate(this), arguments);
          },
          map: function map(mapfn /* , thisArg */) {
            return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
          },
          reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
            return arrayReduce.apply(validate(this), arguments);
          },
          reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
            return arrayReduceRight.apply(validate(this), arguments);
          },
          reverse: function reverse() {
            var that = this;
            var length = validate(that).length;
            var middle = Math.floor(length / 2);
            var index = 0;
            var value;
            while (index < middle) {
              value = that[index];
              that[index++] = that[--length];
              that[length] = value;
            }
            return that;
          },
          some: function some(callbackfn /* , thisArg */) {
            return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          },
          sort: function sort(comparefn) {
            return arraySort.call(validate(this), comparefn);
          },
          subarray: function subarray(begin, end) {
            var O = validate(this);
            var length = O.length;
            var $begin = toAbsoluteIndex(begin, length);
            return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
              O.buffer,
              O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
              toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
            );
          }
        };

        var $slice = function slice(start, end) {
          return speciesFromList(this, arraySlice.call(validate(this), start, end));
        };

        var $set = function set(arrayLike /* , offset */) {
          validate(this);
          var offset = toOffset(arguments[1], 1);
          var length = this.length;
          var src = toObject(arrayLike);
          var len = toLength(src.length);
          var index = 0;
          if (len + offset > length) throw RangeError(WRONG_LENGTH);
          while (index < len) this[offset + index] = src[index++];
        };

        var $iterators = {
          entries: function entries() {
            return arrayEntries.call(validate(this));
          },
          keys: function keys() {
            return arrayKeys.call(validate(this));
          },
          values: function values() {
            return arrayValues.call(validate(this));
          }
        };

        var isTAIndex = function (target, key) {
          return isObject(target)
            && target[TYPED_ARRAY]
            && typeof key != 'symbol'
            && key in target
            && String(+key) == String(key);
        };
        var $getDesc = function getOwnPropertyDescriptor(target, key) {
          return isTAIndex(target, key = toPrimitive(key, true))
            ? propertyDesc(2, target[key])
            : gOPD(target, key);
        };
        var $setDesc = function defineProperty(target, key, desc) {
          if (isTAIndex(target, key = toPrimitive(key, true))
            && isObject(desc)
            && has(desc, 'value')
            && !has(desc, 'get')
            && !has(desc, 'set')
            // TODO: add validation descriptor w/o calling accessors
            && !desc.configurable
            && (!has(desc, 'writable') || desc.writable)
            && (!has(desc, 'enumerable') || desc.enumerable)
          ) {
            target[key] = desc.value;
            return target;
          }
          return dP(target, key, desc);
        };

        if (!ALL_CONSTRUCTORS) {
          $GOPD.f = $getDesc;
          $DP.f = $setDesc;
        }

        $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
          getOwnPropertyDescriptor: $getDesc,
          defineProperty: $setDesc
        });

        if (fails(function () {
            arrayToString.call({});
          })) {
          arrayToString = arrayToLocaleString = function toString() {
            return arrayJoin.call(this);
          };
        }

        var $TypedArrayPrototype$ = redefineAll({}, proto);
        redefineAll($TypedArrayPrototype$, $iterators);
        hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
        redefineAll($TypedArrayPrototype$, {
          slice: $slice,
          set: $set,
          constructor: function () { /* noop */
          },
          toString: arrayToString,
          toLocaleString: $toLocaleString
        });
        addGetter($TypedArrayPrototype$, 'buffer', 'b');
        addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
        addGetter($TypedArrayPrototype$, 'byteLength', 'l');
        addGetter($TypedArrayPrototype$, 'length', 'e');
        dP($TypedArrayPrototype$, TAG, {
          get: function () {
            return this[TYPED_ARRAY];
          }
        });

        // eslint-disable-next-line max-statements
        module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
          CLAMPED = !!CLAMPED;
          var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
          var GETTER = 'get' + KEY;
          var SETTER = 'set' + KEY;
          var TypedArray = global[NAME];
          var Base = TypedArray || {};
          var TAC = TypedArray && getPrototypeOf(TypedArray);
          var FORCED = !TypedArray || !$typed.ABV;
          var O = {};
          var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
          var getter = function (that, index) {
            var data = that._d;
            return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
          };
          var setter = function (that, index, value) {
            var data = that._d;
            if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
            data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
          };
          var addElement = function (that, index) {
            dP(that, index, {
              get: function () {
                return getter(this, index);
              },
              set: function (value) {
                return setter(this, index, value);
              },
              enumerable: true
            });
          };
          if (FORCED) {
            TypedArray = wrapper(function (that, data, $offset, $length) {
              anInstance(that, TypedArray, NAME, '_d');
              var index = 0;
              var offset = 0;
              var buffer, byteLength, length, klass;
              if (!isObject(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new $ArrayBuffer(byteLength);
              } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                buffer = data;
                offset = toOffset($offset, BYTES);
                var $len = data.byteLength;
                if ($length === undefined) {
                  if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                  byteLength = $len - offset;
                  if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
                }
                length = byteLength / BYTES;
              } else if (TYPED_ARRAY in data) {
                return fromList(TypedArray, data);
              } else {
                return $from.call(TypedArray, data);
              }
              hide(that, '_d', {
                b: buffer,
                o: offset,
                l: byteLength,
                e: length,
                v: new $DataView(buffer)
              });
              while (index < length) addElement(that, index++);
            });
            TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
            hide(TypedArrayPrototype, 'constructor', TypedArray);
          } else if (!fails(function () {
              TypedArray(1);
            }) || !fails(function () {
              new TypedArray(-1); // eslint-disable-line no-new
            }) || !$iterDetect(function (iter) {
              new TypedArray(); // eslint-disable-line no-new
              new TypedArray(null); // eslint-disable-line no-new
              new TypedArray(1.5); // eslint-disable-line no-new
              new TypedArray(iter); // eslint-disable-line no-new
            }, true)) {
            TypedArray = wrapper(function (that, data, $offset, $length) {
              anInstance(that, TypedArray, NAME);
              var klass;
              // `ws` module bug, temporarily remove validation length for Uint8Array
              // https://github.com/websockets/ws/pull/645
              if (!isObject(data)) return new Base(toIndex(data));
              if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                return $length !== undefined
                  ? new Base(data, toOffset($offset, BYTES), $length)
                  : $offset !== undefined
                    ? new Base(data, toOffset($offset, BYTES))
                    : new Base(data);
              }
              if (TYPED_ARRAY in data) return fromList(TypedArray, data);
              return $from.call(TypedArray, data);
            });
            arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
              if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
            });
            TypedArray[PROTOTYPE] = TypedArrayPrototype;
            if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
          }
          var $nativeIterator = TypedArrayPrototype[ITERATOR];
          var CORRECT_ITER_NAME = !!$nativeIterator
            && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
          var $iterator = $iterators.values;
          hide(TypedArray, TYPED_CONSTRUCTOR, true);
          hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
          hide(TypedArrayPrototype, VIEW, true);
          hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

          if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
            dP(TypedArrayPrototype, TAG, {
              get: function () {
                return NAME;
              }
            });
          }

          O[NAME] = TypedArray;

          $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

          $export($export.S, NAME, {
            BYTES_PER_ELEMENT: BYTES
          });

          $export($export.S + $export.F * fails(function () {
            Base.of.call(TypedArray, 1);
          }), NAME, {
            from: $from,
            of: $of
          });

          if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

          $export($export.P, NAME, proto);

          setSpecies(NAME);

          $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

          $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

          if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

          $export($export.P + $export.F * fails(function () {
            new TypedArray(1).slice();
          }), NAME, {slice: $slice});

          $export($export.P + $export.F * (fails(function () {
            return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
          }) || !fails(function () {
            TypedArrayPrototype.toLocaleString.call([1, 2]);
          })), NAME, {toLocaleString: $toLocaleString});

          Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
          if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
        };
      } else module.exports = function () { /* empty */
      };


      /***/
    }),
    /* 29 */
    /***/ (function (module, exports, __webpack_require__) {

      var Map = __webpack_require__(115);
      var $export = __webpack_require__(0);
      var shared = __webpack_require__(51)('metadata');
      var store = shared.store || (shared.store = new (__webpack_require__(118))());

      var getOrCreateMetadataMap = function (target, targetKey, create) {
        var targetMetadata = store.get(target);
        if (!targetMetadata) {
          if (!create) return undefined;
          store.set(target, targetMetadata = new Map());
        }
        var keyMetadata = targetMetadata.get(targetKey);
        if (!keyMetadata) {
          if (!create) return undefined;
          targetMetadata.set(targetKey, keyMetadata = new Map());
        }
        return keyMetadata;
      };
      var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
        var metadataMap = getOrCreateMetadataMap(O, P, false);
        return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
      };
      var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
        var metadataMap = getOrCreateMetadataMap(O, P, false);
        return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
      };
      var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
        getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
      };
      var ordinaryOwnMetadataKeys = function (target, targetKey) {
        var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
        var keys = [];
        if (metadataMap) metadataMap.forEach(function (_, key) {
          keys.push(key);
        });
        return keys;
      };
      var toMetaKey = function (it) {
        return it === undefined || typeof it == 'symbol' ? it : String(it);
      };
      var exp = function (O) {
        $export($export.S, 'Reflect', O);
      };

      module.exports = {
        store: store,
        map: getOrCreateMetadataMap,
        has: ordinaryHasOwnMetadata,
        get: ordinaryGetOwnMetadata,
        set: ordinaryDefineOwnMetadata,
        keys: ordinaryOwnMetadataKeys,
        key: toMetaKey,
        exp: exp
      };


      /***/
    }),
    /* 30 */
    /***/ (function (module, exports, __webpack_require__) {

      var META = __webpack_require__(34)('meta');
      var isObject = __webpack_require__(4);
      var has = __webpack_require__(12);
      var setDesc = __webpack_require__(7).f;
      var id = 0;
      var isExtensible = Object.isExtensible || function () {
        return true;
      };
      var FREEZE = !__webpack_require__(3)(function () {
        return isExtensible(Object.preventExtensions({}));
      });
      var setMeta = function (it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id, // object ID
            w: {}          // weak collections IDs
          }
        });
      };
      var fastKey = function (it, create) {
        // return primitive with prefix
        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F';
          // not necessary to add metadata
          if (!create) return 'E';
          // add missing metadata
          setMeta(it);
          // return object ID
        }
        return it[META].i;
      };
      var getWeak = function (it, create) {
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true;
          // not necessary to add metadata
          if (!create) return false;
          // add missing metadata
          setMeta(it);
          // return hash weak collections IDs
        }
        return it[META].w;
      };
// add metadata on freeze-family methods calling
      var onFreeze = function (it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
        return it;
      };
      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };


      /***/
    }),
    /* 31 */
    /***/ (function (module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
      var UNSCOPABLES = __webpack_require__(5)('unscopables');
      var ArrayProto = Array.prototype;
      if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(13)(ArrayProto, UNSCOPABLES, {});
      module.exports = function (key) {
        ArrayProto[UNSCOPABLES][key] = true;
      };


      /***/
    }),
    /* 32 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";


      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.setLogLevel = exports.getLogLevel = exports.LogLevel = undefined;

      var _jsLogger = __webpack_require__(133);

      var JsLogger = _interopRequireWildcard(_jsLogger);

      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }

      var LogLevel = {
        "DEBUG": JsLogger.DEBUG,
        "INFO": JsLogger.INFO,
        "TIME": JsLogger.TIME,
        "WARN": JsLogger.WARN,
        "ERROR": JsLogger.ERROR,
        "OFF": JsLogger.OFF
      };


      JsLogger.useDefaults({defaultLevel: JsLogger.ERROR});

      /**
       * get a logger
       * @param {?string} name - the logger name
       * @returns {Object} - the logger class
       */
      function getLogger(name) {
        if (!name) {
          return JsLogger;
        }
        return JsLogger.get(name);
      }

      /**
       * get the log level
       * @param {?string} name - the logger name
       * @returns {LogLevelType} - the log level
       */
      function getLogLevel(name) {
        return getLogger(name).getLevel();
      }

      /**
       * sets the logger level
       * @param {LogLevelType} level - the log level
       * @param {?string} name - the logger name
       * @returns {void}
       */
      function setLogLevel(level, name) {
        getLogger(name).setLevel(level);
      }

      exports.default = getLogger;
      exports.LogLevel = LogLevel;
      exports.getLogLevel = getLogLevel;
      exports.setLogLevel = setLogLevel;

      /***/
    }),
    /* 33 */
    /***/ (function (module, exports) {

      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };


      /***/
    }),
    /* 34 */
    /***/ (function (module, exports) {

      var id = 0;
      var px = Math.random();
      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
      };


      /***/
    }),
    /* 35 */
    /***/ (function (module, exports) {

      module.exports = false;


      /***/
    }),
    /* 36 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
      var $keys = __webpack_require__(96);
      var enumBugKeys = __webpack_require__(69);

      module.exports = Object.keys || function keys(O) {
        return $keys(O, enumBugKeys);
      };


      /***/
    }),
    /* 37 */
    /***/ (function (module, exports, __webpack_require__) {

      var toInteger = __webpack_require__(25);
      var max = Math.max;
      var min = Math.min;
      module.exports = function (index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };


      /***/
    }),
    /* 38 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      var anObject = __webpack_require__(1);
      var dPs = __webpack_require__(97);
      var enumBugKeys = __webpack_require__(69);
      var IE_PROTO = __webpack_require__(68)('IE_PROTO');
      var Empty = function () { /* empty */
      };
      var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
      var createDict = function () {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = __webpack_require__(66)('iframe');
        var i = enumBugKeys.length;
        var lt = '<';
        var gt = '>';
        var iframeDocument;
        iframe.style.display = 'none';
        __webpack_require__(70).appendChild(iframe);
        iframe.src = 'javascript:'; // eslint-disable-line no-script-url
        // createDict = iframe.contentWindow.Object;
        // html.removeChild(iframe);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
        iframeDocument.close();
        createDict = iframeDocument.F;
        while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
        return createDict();
      };

      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null;
          // add "__proto__" for Object.getPrototypeOf polyfill
          result[IE_PROTO] = O;
        } else result = createDict();
        return Properties === undefined ? result : dPs(result, Properties);
      };


      /***/
    }),
    /* 39 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
      var $keys = __webpack_require__(96);
      var hiddenKeys = __webpack_require__(69).concat('length', 'prototype');

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return $keys(O, hiddenKeys);
      };


      /***/
    }),
    /* 40 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var global = __webpack_require__(2);
      var dP = __webpack_require__(7);
      var DESCRIPTORS = __webpack_require__(6);
      var SPECIES = __webpack_require__(5)('species');

      module.exports = function (KEY) {
        var C = global[KEY];
        if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
          configurable: true,
          get: function () {
            return this;
          }
        });
      };


      /***/
    }),
    /* 41 */
    /***/ (function (module, exports) {

      module.exports = function (it, Constructor, name, forbiddenField) {
        if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
          throw TypeError(name + ': incorrect invocation!');
        }
        return it;
      };


      /***/
    }),
    /* 42 */
    /***/ (function (module, exports, __webpack_require__) {

      var ctx = __webpack_require__(19);
      var call = __webpack_require__(108);
      var isArrayIter = __webpack_require__(82);
      var anObject = __webpack_require__(1);
      var toLength = __webpack_require__(8);
      var getIterFn = __webpack_require__(84);
      var BREAK = {};
      var RETURN = {};
      var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function () {
          return iterable;
        } : getIterFn(iterable);
        var f = ctx(fn, that, entries ? 2 : 1);
        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
        // fast case for arrays with default iterator
        if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
          result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
          if (result === BREAK || result === RETURN) return result;
        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
          result = call(iterator, f, step.value, entries);
          if (result === BREAK || result === RETURN) return result;
        }
      };
      exports.BREAK = BREAK;
      exports.RETURN = RETURN;


      /***/
    }),
    /* 43 */
    /***/ (function (module, exports, __webpack_require__) {

      var redefine = __webpack_require__(14);
      module.exports = function (target, src, safe) {
        for (var key in src) redefine(target, key, src[key], safe);
        return target;
      };


      /***/
    }),
    /* 44 */
    /***/ (function (module, exports, __webpack_require__) {

      var def = __webpack_require__(7).f;
      var has = __webpack_require__(12);
      var TAG = __webpack_require__(5)('toStringTag');

      module.exports = function (it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {configurable: true, value: tag});
      };


      /***/
    }),
    /* 45 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var defined = __webpack_require__(24);
      var fails = __webpack_require__(3);
      var spaces = __webpack_require__(72);
      var space = '[' + spaces + ']';
      var non = '\u200b\u0085';
      var ltrim = RegExp('^' + space + space + '*');
      var rtrim = RegExp(space + space + '*$');

      var exporter = function (KEY, exec, ALIAS) {
        var exp = {};
        var FORCE = fails(function () {
          return !!spaces[KEY]() || non[KEY]() != non;
        });
        var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
        if (ALIAS) exp[ALIAS] = fn;
        $export($export.P + $export.F * FORCE, 'String', exp);
      };

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
      var trim = exporter.trim = function (string, TYPE) {
        string = String(defined(string));
        if (TYPE & 1) string = string.replace(ltrim, '');
        if (TYPE & 2) string = string.replace(rtrim, '');
        return string;
      };

      module.exports = exporter;


      /***/
    }),
    /* 46 */
    /***/ (function (module, exports) {

      module.exports = {};


      /***/
    }),
    /* 47 */
    /***/ (function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(4);
      module.exports = function (it, TYPE) {
        if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
        return it;
      };


      /***/
    }),
    /* 48 */
    /***/ (function (module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
      var cof = __webpack_require__(20);
// eslint-disable-next-line no-prototype-builtins
      module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
        return cof(it) == 'String' ? it.split('') : Object(it);
      };


      /***/
    }),
    /* 49 */
    /***/ (function (module, exports) {

      exports.f = {}.propertyIsEnumerable;


      /***/
    }),
    /* 50 */
    /***/ (function (module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
      var cof = __webpack_require__(20);
      var TAG = __webpack_require__(5)('toStringTag');
// ES3 wrong here
      var ARG = cof(function () {
        return arguments;
      }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
      var tryGet = function (it, key) {
        try {
          return it[key];
        } catch (e) { /* empty */
        }
      };

      module.exports = function (it) {
        var O, T, B;
        return it === undefined ? 'Undefined' : it === null ? 'Null'
          // @@toStringTag case
          : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
            // builtinTag case
            : ARG ? cof(O)
              // ES3 arguments fallback
              : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
      };


      /***/
    }),
    /* 51 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || (global[SHARED] = {});
      module.exports = function (key) {
        return store[key] || (store[key] = {});
      };


      /***/
    }),
    /* 52 */
    /***/ (function (module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
      var toIObject = __webpack_require__(16);
      var toLength = __webpack_require__(8);
      var toAbsoluteIndex = __webpack_require__(37);
      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare
          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++];
            // eslint-disable-next-line no-self-compare
            if (value != value) return true;
            // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };


      /***/
    }),
    /* 53 */
    /***/ (function (module, exports) {

      exports.f = Object.getOwnPropertySymbols;


      /***/
    }),
    /* 54 */
    /***/ (function (module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
      var cof = __webpack_require__(20);
      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == 'Array';
      };


      /***/
    }),
    /* 55 */
    /***/ (function (module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
      var isObject = __webpack_require__(4);
      var cof = __webpack_require__(20);
      var MATCH = __webpack_require__(5)('match');
      module.exports = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
      };


      /***/
    }),
    /* 56 */
    /***/ (function (module, exports, __webpack_require__) {

      var ITERATOR = __webpack_require__(5)('iterator');
      var SAFE_CLOSING = false;

      try {
        var riter = [7][ITERATOR]();
        riter['return'] = function () {
          SAFE_CLOSING = true;
        };
        // eslint-disable-next-line no-throw-literal
        Array.from(riter, function () {
          throw 2;
        });
      } catch (e) { /* empty */
      }

      module.exports = function (exec, skipClosing) {
        if (!skipClosing && !SAFE_CLOSING) return false;
        var safe = false;
        try {
          var arr = [7];
          var iter = arr[ITERATOR]();
          iter.next = function () {
            return {done: safe = true};
          };
          arr[ITERATOR] = function () {
            return iter;
          };
          exec(arr);
        } catch (e) { /* empty */
        }
        return safe;
      };


      /***/
    }),
    /* 57 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 21.2.5.3 get RegExp.prototype.flags
      var anObject = __webpack_require__(1);
      module.exports = function () {
        var that = anObject(this);
        var result = '';
        if (that.global) result += 'g';
        if (that.ignoreCase) result += 'i';
        if (that.multiline) result += 'm';
        if (that.unicode) result += 'u';
        if (that.sticky) result += 'y';
        return result;
      };


      /***/
    }),
    /* 58 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var hide = __webpack_require__(13);
      var redefine = __webpack_require__(14);
      var fails = __webpack_require__(3);
      var defined = __webpack_require__(24);
      var wks = __webpack_require__(5);

      module.exports = function (KEY, length, exec) {
        var SYMBOL = wks(KEY);
        var fns = exec(defined, SYMBOL, ''[KEY]);
        var strfn = fns[0];
        var rxfn = fns[1];
        if (fails(function () {
            var O = {};
            O[SYMBOL] = function () {
              return 7;
            };
            return ''[KEY](O) != 7;
          })) {
          redefine(String.prototype, KEY, strfn);
          hide(RegExp.prototype, SYMBOL, length == 2
            // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
            // 21.2.5.11 RegExp.prototype[@@split](string, limit)
            ? function (string, arg) {
              return rxfn.call(string, this, arg);
            }
            // 21.2.5.6 RegExp.prototype[@@match](string)
            // 21.2.5.9 RegExp.prototype[@@search](string)
            : function (string) {
              return rxfn.call(string, this);
            }
          );
        }
      };


      /***/
    }),
    /* 59 */
    /***/ (function (module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
      var anObject = __webpack_require__(1);
      var aFunction = __webpack_require__(10);
      var SPECIES = __webpack_require__(5)('species');
      module.exports = function (O, D) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
      };


      /***/
    }),
    /* 60 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var global = __webpack_require__(2);
      var $export = __webpack_require__(0);
      var redefine = __webpack_require__(14);
      var redefineAll = __webpack_require__(43);
      var meta = __webpack_require__(30);
      var forOf = __webpack_require__(42);
      var anInstance = __webpack_require__(41);
      var isObject = __webpack_require__(4);
      var fails = __webpack_require__(3);
      var $iterDetect = __webpack_require__(56);
      var setToStringTag = __webpack_require__(44);
      var inheritIfRequired = __webpack_require__(73);

      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global[NAME];
        var C = Base;
        var ADDER = IS_MAP ? 'set' : 'add';
        var proto = C && C.prototype;
        var O = {};
        var fixMethod = function (KEY) {
          var fn = proto[KEY];
          redefine(proto, KEY,
            KEY == 'delete' ? function (a) {
              return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
            } : KEY == 'has' ? function has(a) {
              return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
            } : KEY == 'get' ? function get(a) {
              return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
            } : KEY == 'add' ? function add(a) {
                fn.call(this, a === 0 ? 0 : a);
                return this;
              }
              : function set(a, b) {
                fn.call(this, a === 0 ? 0 : a, b);
                return this;
              }
          );
        };
        if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
            new C().entries().next();
          }))) {
          // create collection constructor
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
          meta.NEED = true;
        } else {
          var instance = new C();
          // early implementations not supports chaining
          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
          // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
          var THROWS_ON_PRIMITIVES = fails(function () {
            instance.has(1);
          });
          // most early implementations doesn't supports iterables, most modern - not close it correctly
          var ACCEPT_ITERABLES = $iterDetect(function (iter) {
            new C(iter);
          }); // eslint-disable-line no-new
          // for early implementations -0 and +0 not the same
          var BUGGY_ZERO = !IS_WEAK && fails(function () {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new C();
            var index = 5;
            while (index--) $instance[ADDER](index, index);
            return !$instance.has(-0);
          });
          if (!ACCEPT_ITERABLES) {
            C = wrapper(function (target, iterable) {
              anInstance(target, C, NAME);
              var that = inheritIfRequired(new Base(), target, C);
              if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
              return that;
            });
            C.prototype = proto;
            proto.constructor = C;
          }
          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
          }
          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
          // weak collections should not contains .clear method
          if (IS_WEAK && proto.clear) delete proto.clear;
        }

        setToStringTag(C, NAME);

        O[NAME] = C;
        $export($export.G + $export.W + $export.F * (C != Base), O);

        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

        return C;
      };


      /***/
    }),
    /* 61 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var hide = __webpack_require__(13);
      var uid = __webpack_require__(34);
      var TYPED = uid('typed_array');
      var VIEW = uid('view');
      var ABV = !!(global.ArrayBuffer && global.DataView);
      var CONSTR = ABV;
      var i = 0;
      var l = 9;
      var Typed;

      var TypedArrayConstructors = (
        'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
      ).split(',');

      while (i < l) {
        if (Typed = global[TypedArrayConstructors[i++]]) {
          hide(Typed.prototype, TYPED, true);
          hide(Typed.prototype, VIEW, true);
        } else CONSTR = false;
      }

      module.exports = {
        ABV: ABV,
        CONSTR: CONSTR,
        TYPED: TYPED,
        VIEW: VIEW
      };


      /***/
    }),
    /* 62 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// Forced replacement prototype accessors methods
      module.exports = __webpack_require__(35) || !__webpack_require__(3)(function () {
        var K = Math.random();
        // In FF throws only define methods
        // eslint-disable-next-line no-undef, no-useless-call
        __defineSetter__.call(null, K, function () { /* empty */
        });
        delete __webpack_require__(2)[K];
      });


      /***/
    }),
    /* 63 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://tc39.github.io/proposal-setmap-offrom/
      var $export = __webpack_require__(0);

      module.exports = function (COLLECTION) {
        $export($export.S, COLLECTION, {
          of: function of() {
            var length = arguments.length;
            var A = Array(length);
            while (length--) A[length] = arguments[length];
            return new this(A);
          }
        });
      };


      /***/
    }),
    /* 64 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://tc39.github.io/proposal-setmap-offrom/
      var $export = __webpack_require__(0);
      var aFunction = __webpack_require__(10);
      var ctx = __webpack_require__(19);
      var forOf = __webpack_require__(42);

      module.exports = function (COLLECTION) {
        $export($export.S, COLLECTION, {
          from: function from(source /* , mapFn, thisArg */) {
            var mapFn = arguments[1];
            var mapping, A, n, cb;
            aFunction(this);
            mapping = mapFn !== undefined;
            if (mapping) aFunction(mapFn);
            if (source == undefined) return new this();
            A = [];
            if (mapping) {
              n = 0;
              cb = ctx(mapFn, arguments[2], 2);
              forOf(source, false, function (nextItem) {
                A.push(cb(nextItem, n++));
              });
            } else {
              forOf(source, false, A.push, A);
            }
            return new this(A);
          }
        });
      };


      /***/
    }),
    /* 65 */
    /***/ (function (module, exports) {

      var g;

// This works in non-strict mode
      g = (function () {
        return this;
      })();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === "object")
          g = window;
      }

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

      module.exports = g;


      /***/
    }),
    /* 66 */
    /***/ (function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(4);
      var document = __webpack_require__(2).document;
// typeof document.createElement is 'object' in old IE
      var is = isObject(document) && isObject(document.createElement);
      module.exports = function (it) {
        return is ? document.createElement(it) : {};
      };


      /***/
    }),
    /* 67 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var core = __webpack_require__(22);
      var LIBRARY = __webpack_require__(35);
      var wksExt = __webpack_require__(95);
      var defineProperty = __webpack_require__(7).f;
      module.exports = function (name) {
        var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
        if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {value: wksExt.f(name)});
      };


      /***/
    }),
    /* 68 */
    /***/ (function (module, exports, __webpack_require__) {

      var shared = __webpack_require__(51)('keys');
      var uid = __webpack_require__(34);
      module.exports = function (key) {
        return shared[key] || (shared[key] = uid(key));
      };


      /***/
    }),
    /* 69 */
    /***/ (function (module, exports) {

// IE 8- don't enum bug keys
      module.exports = (
        'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
      ).split(',');


      /***/
    }),
    /* 70 */
    /***/ (function (module, exports, __webpack_require__) {

      var document = __webpack_require__(2).document;
      module.exports = document && document.documentElement;


      /***/
    }),
    /* 71 */
    /***/ (function (module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
      /* eslint-disable no-proto */
      var isObject = __webpack_require__(4);
      var anObject = __webpack_require__(1);
      var check = function (O, proto) {
        anObject(O);
        if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
      };
      module.exports = {
        set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
          function (test, buggy, set) {
            try {
              set = __webpack_require__(19)(Function.call, __webpack_require__(17).f(Object.prototype, '__proto__').set, 2);
              set(test, []);
              buggy = !(test instanceof Array);
            } catch (e) {
              buggy = true;
            }
            return function setPrototypeOf(O, proto) {
              check(O, proto);
              if (buggy) O.__proto__ = proto;
              else set(O, proto);
              return O;
            };
          }({}, false) : undefined),
        check: check
      };


      /***/
    }),
    /* 72 */
    /***/ (function (module, exports) {

      module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
        '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


      /***/
    }),
    /* 73 */
    /***/ (function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(4);
      var setPrototypeOf = __webpack_require__(71).set;
      module.exports = function (that, target, C) {
        var S = target.constructor;
        var P;
        if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
          setPrototypeOf(that, P);
        }
        return that;
      };


      /***/
    }),
    /* 74 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var toInteger = __webpack_require__(25);
      var defined = __webpack_require__(24);

      module.exports = function repeat(count) {
        var str = String(defined(this));
        var res = '';
        var n = toInteger(count);
        if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
        for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
        return res;
      };


      /***/
    }),
    /* 75 */
    /***/ (function (module, exports) {

// 20.2.2.28 Math.sign(x)
      module.exports = Math.sign || function sign(x) {
        // eslint-disable-next-line no-self-compare
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };


      /***/
    }),
    /* 76 */
    /***/ (function (module, exports) {

// 20.2.2.14 Math.expm1(x)
      var $expm1 = Math.expm1;
      module.exports = (!$expm1
        // Old FF bug
        || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
        // Tor Browser bug
        || $expm1(-2e-17) != -2e-17
      ) ? function expm1(x) {
        return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
      } : $expm1;


      /***/
    }),
    /* 77 */
    /***/ (function (module, exports, __webpack_require__) {

      var toInteger = __webpack_require__(25);
      var defined = __webpack_require__(24);
// true  -> String#at
// false -> String#codePointAt
      module.exports = function (TO_STRING) {
        return function (that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
          a = s.charCodeAt(i);
          return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
            ? TO_STRING ? s.charAt(i) : a
            : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
        };
      };


      /***/
    }),
    /* 78 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var LIBRARY = __webpack_require__(35);
      var $export = __webpack_require__(0);
      var redefine = __webpack_require__(14);
      var hide = __webpack_require__(13);
      var has = __webpack_require__(12);
      var Iterators = __webpack_require__(46);
      var $iterCreate = __webpack_require__(79);
      var setToStringTag = __webpack_require__(44);
      var getPrototypeOf = __webpack_require__(18);
      var ITERATOR = __webpack_require__(5)('iterator');
      var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
      var FF_ITERATOR = '@@iterator';
      var KEYS = 'keys';
      var VALUES = 'values';

      var returnThis = function () {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);
        var getMethod = function (kind) {
          if (!BUGGY && kind in proto) return proto[kind];
          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }
          return function entries() {
            return new Constructor(this, kind);
          };
        };
        var TAG = NAME + ' Iterator';
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
        var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype;
        // Fix native
        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true);
            // fix for some old engines
            if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
          }
        }
        // fix Array#{values, @@iterator}.name in V8 / FF
        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;
          $default = function values() {
            return $native.call(this);
          };
        }
        // Define iterator
        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        }
        // Plug for library
        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;
        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }
        return methods;
      };


      /***/
    }),
    /* 79 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var create = __webpack_require__(38);
      var descriptor = __webpack_require__(33);
      var setToStringTag = __webpack_require__(44);
      var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
      __webpack_require__(13)(IteratorPrototype, __webpack_require__(5)('iterator'), function () {
        return this;
      });

      module.exports = function (Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
        setToStringTag(Constructor, NAME + ' Iterator');
      };


      /***/
    }),
    /* 80 */
    /***/ (function (module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
      var isRegExp = __webpack_require__(55);
      var defined = __webpack_require__(24);

      module.exports = function (that, searchString, NAME) {
        if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
        return String(defined(that));
      };


      /***/
    }),
    /* 81 */
    /***/ (function (module, exports, __webpack_require__) {

      var MATCH = __webpack_require__(5)('match');
      module.exports = function (KEY) {
        var re = /./;
        try {
          '/./'[KEY](re);
        } catch (e) {
          try {
            re[MATCH] = false;
            return !'/./'[KEY](re);
          } catch (f) { /* empty */
          }
        }
        return true;
      };


      /***/
    }),
    /* 82 */
    /***/ (function (module, exports, __webpack_require__) {

// check on default Array iterator
      var Iterators = __webpack_require__(46);
      var ITERATOR = __webpack_require__(5)('iterator');
      var ArrayProto = Array.prototype;

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
      };


      /***/
    }),
    /* 83 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $defineProperty = __webpack_require__(7);
      var createDesc = __webpack_require__(33);

      module.exports = function (object, index, value) {
        if (index in object) $defineProperty.f(object, index, createDesc(0, value));
        else object[index] = value;
      };


      /***/
    }),
    /* 84 */
    /***/ (function (module, exports, __webpack_require__) {

      var classof = __webpack_require__(50);
      var ITERATOR = __webpack_require__(5)('iterator');
      var Iterators = __webpack_require__(46);
      module.exports = __webpack_require__(22).getIteratorMethod = function (it) {
        if (it != undefined) return it[ITERATOR]
          || it['@@iterator']
          || Iterators[classof(it)];
      };


      /***/
    }),
    /* 85 */
    /***/ (function (module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
      var speciesConstructor = __webpack_require__(226);

      module.exports = function (original, length) {
        return new (speciesConstructor(original))(length);
      };


      /***/
    }),
    /* 86 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

      var toObject = __webpack_require__(9);
      var toAbsoluteIndex = __webpack_require__(37);
      var toLength = __webpack_require__(8);
      module.exports = function fill(value /* , start = 0, end = @length */) {
        var O = toObject(this);
        var length = toLength(O.length);
        var aLen = arguments.length;
        var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
        var end = aLen > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
        while (endPos > index) O[index++] = value;
        return O;
      };


      /***/
    }),
    /* 87 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var addToUnscopables = __webpack_require__(31);
      var step = __webpack_require__(111);
      var Iterators = __webpack_require__(46);
      var toIObject = __webpack_require__(16);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
      module.exports = __webpack_require__(78)(Array, 'Array', function (iterated, kind) {
        this._t = toIObject(iterated); // target
        this._i = 0;                   // next index
        this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;
        if (!O || index >= O.length) {
          this._t = undefined;
          return step(1);
        }
        if (kind == 'keys') return step(0, index);
        if (kind == 'values') return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
      Iterators.Arguments = Iterators.Array;

      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');


      /***/
    }),
    /* 88 */
    /***/ (function (module, exports, __webpack_require__) {

      var ctx = __webpack_require__(19);
      var invoke = __webpack_require__(101);
      var html = __webpack_require__(70);
      var cel = __webpack_require__(66);
      var global = __webpack_require__(2);
      var process = global.process;
      var setTask = global.setImmediate;
      var clearTask = global.clearImmediate;
      var MessageChannel = global.MessageChannel;
      var Dispatch = global.Dispatch;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = 'onreadystatechange';
      var defer, channel, port;
      var run = function () {
        var id = +this;
        // eslint-disable-next-line no-prototype-builtins
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };
      var listener = function (event) {
        run.call(event.data);
      };
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
      if (!setTask || !clearTask) {
        setTask = function setImmediate(fn) {
          var args = [];
          var i = 1;
          while (arguments.length > i) args.push(arguments[i++]);
          queue[++counter] = function () {
            // eslint-disable-next-line no-new-func
            invoke(typeof fn == 'function' ? fn : Function(fn), args);
          };
          defer(counter);
          return counter;
        };
        clearTask = function clearImmediate(id) {
          delete queue[id];
        };
        // Node.js 0.8-
        if (__webpack_require__(20)(process) == 'process') {
          defer = function (id) {
            process.nextTick(ctx(run, id, 1));
          };
          // Sphere (JS game engine) Dispatch API
        } else if (Dispatch && Dispatch.now) {
          defer = function (id) {
            Dispatch.now(ctx(run, id, 1));
          };
          // Browsers with MessageChannel, includes WebWorkers
        } else if (MessageChannel) {
          channel = new MessageChannel();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = ctx(port.postMessage, port, 1);
          // Browsers with postMessage, skip WebWorkers
          // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
          defer = function (id) {
            global.postMessage(id + '', '*');
          };
          global.addEventListener('message', listener, false);
          // IE8-
        } else if (ONREADYSTATECHANGE in cel('script')) {
          defer = function (id) {
            html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
              html.removeChild(this);
              run.call(id);
            };
          };
          // Rest old browsers
        } else {
          defer = function (id) {
            setTimeout(ctx(run, id, 1), 0);
          };
        }
      }
      module.exports = {
        set: setTask,
        clear: clearTask
      };


      /***/
    }),
    /* 89 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var macrotask = __webpack_require__(88).set;
      var Observer = global.MutationObserver || global.WebKitMutationObserver;
      var process = global.process;
      var Promise = global.Promise;
      var isNode = __webpack_require__(20)(process) == 'process';

      module.exports = function () {
        var head, last, notify;

        var flush = function () {
          var parent, fn;
          if (isNode && (parent = process.domain)) parent.exit();
          while (head) {
            fn = head.fn;
            head = head.next;
            try {
              fn();
            } catch (e) {
              if (head) notify();
              else last = undefined;
              throw e;
            }
          }
          last = undefined;
          if (parent) parent.enter();
        };

        // Node.js
        if (isNode) {
          notify = function () {
            process.nextTick(flush);
          };
          // browsers with MutationObserver
        } else if (Observer) {
          var toggle = true;
          var node = document.createTextNode('');
          new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
          notify = function () {
            node.data = toggle = !toggle;
          };
          // environments with maybe non-completely correct, but existent Promise
        } else if (Promise && Promise.resolve) {
          var promise = Promise.resolve();
          notify = function () {
            promise.then(flush);
          };
          // for other environments - macrotask based on:
          // - setImmediate
          // - MessageChannel
          // - window.postMessag
          // - onreadystatechange
          // - setTimeout
        } else {
          notify = function () {
            // strange IE + webpack dev server bug - use .call(global)
            macrotask.call(global, flush);
          };
        }

        return function (fn) {
          var task = {fn: fn, next: undefined};
          if (last) last.next = task;
          if (!head) {
            head = task;
            notify();
          }
          last = task;
        };
      };


      /***/
    }),
    /* 90 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 25.4.1.5 NewPromiseCapability(C)
      var aFunction = __webpack_require__(10);

      function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
          if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }

      module.exports.f = function (C) {
        return new PromiseCapability(C);
      };


      /***/
    }),
    /* 91 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var global = __webpack_require__(2);
      var DESCRIPTORS = __webpack_require__(6);
      var LIBRARY = __webpack_require__(35);
      var $typed = __webpack_require__(61);
      var hide = __webpack_require__(13);
      var redefineAll = __webpack_require__(43);
      var fails = __webpack_require__(3);
      var anInstance = __webpack_require__(41);
      var toInteger = __webpack_require__(25);
      var toLength = __webpack_require__(8);
      var toIndex = __webpack_require__(120);
      var gOPN = __webpack_require__(39).f;
      var dP = __webpack_require__(7).f;
      var arrayFill = __webpack_require__(86);
      var setToStringTag = __webpack_require__(44);
      var ARRAY_BUFFER = 'ArrayBuffer';
      var DATA_VIEW = 'DataView';
      var PROTOTYPE = 'prototype';
      var WRONG_LENGTH = 'Wrong length!';
      var WRONG_INDEX = 'Wrong index!';
      var $ArrayBuffer = global[ARRAY_BUFFER];
      var $DataView = global[DATA_VIEW];
      var Math = global.Math;
      var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
      var Infinity = global.Infinity;
      var BaseBuffer = $ArrayBuffer;
      var abs = Math.abs;
      var pow = Math.pow;
      var floor = Math.floor;
      var log = Math.log;
      var LN2 = Math.LN2;
      var BUFFER = 'buffer';
      var BYTE_LENGTH = 'byteLength';
      var BYTE_OFFSET = 'byteOffset';
      var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
      var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
      var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
      function packIEEE754(value, mLen, nBytes) {
        var buffer = Array(nBytes);
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var i = 0;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        var e, m, c;
        value = abs(value);
        // eslint-disable-next-line no-self-compare
        if (value != value || value === Infinity) {
          // eslint-disable-next-line no-self-compare
          m = value != value ? 1 : 0;
          e = eMax;
        } else {
          e = floor(log(value) / LN2);
          if (value * (c = pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * pow(2, eBias - 1) * pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) ;
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) ;
        buffer[--i] |= s * 128;
        return buffer;
      }

      function unpackIEEE754(buffer, mLen, nBytes) {
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = eLen - 7;
        var i = nBytes - 1;
        var s = buffer[i--];
        var e = s & 127;
        var m;
        s >>= 7;
        for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) ;
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) ;
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : s ? -Infinity : Infinity;
        } else {
          m = m + pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * pow(2, e - mLen);
      }

      function unpackI32(bytes) {
        return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
      }

      function packI8(it) {
        return [it & 0xff];
      }

      function packI16(it) {
        return [it & 0xff, it >> 8 & 0xff];
      }

      function packI32(it) {
        return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
      }

      function packF64(it) {
        return packIEEE754(it, 52, 8);
      }

      function packF32(it) {
        return packIEEE754(it, 23, 4);
      }

      function addGetter(C, key, internal) {
        dP(C[PROTOTYPE], key, {
          get: function () {
            return this[internal];
          }
        });
      }

      function get(view, bytes, index, isLittleEndian) {
        var numIndex = +index;
        var intIndex = toIndex(numIndex);
        if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
        var store = view[$BUFFER]._b;
        var start = intIndex + view[$OFFSET];
        var pack = store.slice(start, start + bytes);
        return isLittleEndian ? pack : pack.reverse();
      }

      function set(view, bytes, index, conversion, value, isLittleEndian) {
        var numIndex = +index;
        var intIndex = toIndex(numIndex);
        if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
        var store = view[$BUFFER]._b;
        var start = intIndex + view[$OFFSET];
        var pack = conversion(+value);
        for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
      }

      if (!$typed.ABV) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
          var byteLength = toIndex(length);
          this._b = arrayFill.call(Array(byteLength), 0);
          this[$LENGTH] = byteLength;
        };

        $DataView = function DataView(buffer, byteOffset, byteLength) {
          anInstance(this, $DataView, DATA_VIEW);
          anInstance(buffer, $ArrayBuffer, DATA_VIEW);
          var bufferLength = buffer[$LENGTH];
          var offset = toInteger(byteOffset);
          if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
          byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
          if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
          this[$BUFFER] = buffer;
          this[$OFFSET] = offset;
          this[$LENGTH] = byteLength;
        };

        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
          addGetter($DataView, BUFFER, '_b');
          addGetter($DataView, BYTE_LENGTH, '_l');
          addGetter($DataView, BYTE_OFFSET, '_o');
        }

        redefineAll($DataView[PROTOTYPE], {
          getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset /* , littleEndian */) {
            var bytes = get(this, 2, byteOffset, arguments[1]);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset /* , littleEndian */) {
            var bytes = get(this, 2, byteOffset, arguments[1]);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset /* , littleEndian */) {
            return unpackI32(get(this, 4, byteOffset, arguments[1]));
          },
          getUint32: function getUint32(byteOffset /* , littleEndian */) {
            return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
          },
          getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packI8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packI8, value);
          },
          setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
            set(this, 2, byteOffset, packI16, value, arguments[2]);
          },
          setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
            set(this, 2, byteOffset, packI16, value, arguments[2]);
          },
          setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
            set(this, 4, byteOffset, packI32, value, arguments[2]);
          },
          setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
            set(this, 4, byteOffset, packI32, value, arguments[2]);
          },
          setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
            set(this, 4, byteOffset, packF32, value, arguments[2]);
          },
          setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
            set(this, 8, byteOffset, packF64, value, arguments[2]);
          }
        });
      } else {
        if (!fails(function () {
            $ArrayBuffer(1);
          }) || !fails(function () {
            new $ArrayBuffer(-1); // eslint-disable-line no-new
          }) || fails(function () {
            new $ArrayBuffer(); // eslint-disable-line no-new
            new $ArrayBuffer(1.5); // eslint-disable-line no-new
            new $ArrayBuffer(NaN); // eslint-disable-line no-new
            return $ArrayBuffer.name != ARRAY_BUFFER;
          })) {
          $ArrayBuffer = function ArrayBuffer(length) {
            anInstance(this, $ArrayBuffer);
            return new BaseBuffer(toIndex(length));
          };
          var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
          for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
            if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
          }
          if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
        }
        // iOS Safari 7.x bug
        var view = new $DataView(new $ArrayBuffer(2));
        var $setInt8 = $DataView[PROTOTYPE].setInt8;
        view.setInt8(0, 2147483648);
        view.setInt8(1, 2147483649);
        if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
          setInt8: function setInt8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
          },
          setUint8: function setUint8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
          }
        }, true);
      }
      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      hide($DataView[PROTOTYPE], $typed.VIEW, true);
      exports[ARRAY_BUFFER] = $ArrayBuffer;
      exports[DATA_VIEW] = $DataView;


      /***/
    }),
    /* 92 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
      /* WEBPACK VAR INJECTION */
      (function (module) {
        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        (function webpackUniversalModuleDefinition(root, factory) {
          if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory(__webpack_require__(11)); else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
            __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
              (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports["ui"] = factory(require("playkit-js")); else root["playkit"] = root["playkit"] || {}, root["playkit"]["ui"] = factory(root["Playkit"]);
        })(undefined, function (__WEBPACK_EXTERNAL_MODULE_43__) {
          return (/******/function (modules) {// webpackBootstrap
            /******/// The module cache
            /******/
            var installedModules = {};
            /******/
            /******/// The require function
            /******/
            function __webpack_require__(moduleId) {/******/
              /******/// Check if module is in cache
              /******/
              if (installedModules[moduleId]) {/******/
                return installedModules[moduleId].exports;
                /******/
              }
              /******/// Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                i: moduleId, /******/
                l: false, /******/
                exports: {}/******/
              };
              /******/
              /******/// Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
              /******/
              /******/// Flag the module as loaded
              /******/
              module.l = true;
              /******/
              /******/// Return the exports of the module
              /******/
              return module.exports;
              /******/
            }

            /******/
            /******/
            /******/// expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;
            /******/
            /******/// expose the module cache
            /******/
            __webpack_require__.c = installedModules;
            /******/
            /******/// define getter function for harmony exports
            /******/
            __webpack_require__.d = function (exports, name, getter) {/******/
              if (!__webpack_require__.o(exports, name)) {/******/
                Object.defineProperty(exports, name, {
                  /******/
                  configurable: false, /******/
                  enumerable: true, /******/
                  get: getter/******/
                });
                /******/
              }
              /******/
            };
            /******/
            /******/// getDefaultExport function for compatibility with non-harmony modules
            /******/
            __webpack_require__.n = function (module) {/******/
              var getter = module && module.__esModule ? /******/function getDefault() {
                return module['default'];
              } : /******/function getModuleExports() {
                return module;
              };
              /******/
              __webpack_require__.d(getter, 'a', getter);
              /******/
              return getter;
              /******/
            };
            /******/
            /******/// Object.prototype.hasOwnProperty.call
            /******/
            __webpack_require__.o = function (object, property) {
              return Object.prototype.hasOwnProperty.call(object, property);
            };
            /******/
            /******/// __webpack_public_path__
            /******/
            __webpack_require__.p = "";
            /******/
            /******/// Load entry module and return exports
            /******/
            return __webpack_require__(__webpack_require__.s = 59);
            /******/
          }(/************************************************************************//******/[/* 0 *//***/function (module, exports, __webpack_require__) {
            !function () {
              'use strict';

              function VNode() {
              }

              function h(nodeName, attributes) {
                var lastSimple, child, simple, i, children = EMPTY_CHILDREN;
                for (i = arguments.length; i-- > 2;) {
                  stack.push(arguments[i]);
                }
                if (attributes && null != attributes.children) {
                  if (!stack.length) stack.push(attributes.children);
                  delete attributes.children;
                }
                while (stack.length) {
                  if ((child = stack.pop()) && void 0 !== child.pop) for (i = child.length; i--;) {
                    stack.push(child[i]);
                  } else {
                    if (child === !0 || child === !1) child = null;
                    if (simple = 'function' != typeof nodeName) if (null == child) child = ''; else if ('number' == typeof child) child = String(child); else if ('string' != typeof child) simple = !1;
                    if (simple && lastSimple) children[children.length - 1] += child; else if (children === EMPTY_CHILDREN) children = [child]; else children.push(child);
                    lastSimple = simple;
                  }
                }
                var p = new VNode();
                p.nodeName = nodeName;
                p.children = children;
                p.attributes = null == attributes ? void 0 : attributes;
                p.key = null == attributes ? void 0 : attributes.key;
                if (void 0 !== options.vnode) options.vnode(p);
                return p;
              }

              function extend(obj, props) {
                for (var i in props) {
                  obj[i] = props[i];
                }
                return obj;
              }

              function cloneElement(vnode, props) {
                return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
              }

              function enqueueRender(component) {
                if (!component.__d && (component.__d = !0) && 1 == items.push(component)) (options.debounceRendering || setTimeout)(rerender);
              }

              function rerender() {
                var p, list = items;
                items = [];
                while (p = list.pop()) {
                  if (p.__d) renderComponent(p);
                }
              }

              function isSameNodeType(node, vnode, hydrating) {
                if ('string' == typeof vnode || 'number' == typeof vnode) return void 0 !== node.splitText;
                if ('string' == typeof vnode.nodeName) return !node._componentConstructor && isNamedNode(node, vnode.nodeName); else return hydrating || node._componentConstructor === vnode.nodeName;
              }

              function isNamedNode(node, nodeName) {
                return node.__n === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
              }

              function getNodeProps(vnode) {
                var props = extend({}, vnode.attributes);
                props.children = vnode.children;
                var defaultProps = vnode.nodeName.defaultProps;
                if (void 0 !== defaultProps) for (var i in defaultProps) {
                  if (void 0 === props[i]) props[i] = defaultProps[i];
                }
                return props;
              }

              function createNode(nodeName, isSvg) {
                var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);
                node.__n = nodeName;
                return node;
              }

              function removeNode(node) {
                if (node.parentNode) node.parentNode.removeChild(node);
              }

              function setAccessor(node, name, old, value, isSvg) {
                if ('className' === name) name = 'class';
                if ('key' === name) ; else if ('ref' === name) {
                  if (old) old(null);
                  if (value) value(node);
                } else if ('class' === name && !isSvg) node.className = value || ''; else if ('style' === name) {
                  if (!value || 'string' == typeof value || 'string' == typeof old) node.style.cssText = value || '';
                  if (value && 'object' == (typeof value === 'undefined' ? 'undefined' : _typeof2(value))) {
                    if ('string' != typeof old) for (var i in old) {
                      if (!(i in value)) node.style[i] = '';
                    }
                    for (var i in value) {
                      node.style[i] = 'number' == typeof value[i] && IS_NON_DIMENSIONAL.test(i) === !1 ? value[i] + 'px' : value[i];
                    }
                  }
                } else if ('dangerouslySetInnerHTML' === name) {
                  if (value) node.innerHTML = value.__html || '';
                } else if ('o' == name[0] && 'n' == name[1]) {
                  var useCapture = name !== (name = name.replace(/Capture$/, ''));
                  name = name.toLowerCase().substring(2);
                  if (value) {
                    if (!old) node.addEventListener(name, eventProxy, useCapture);
                  } else node.removeEventListener(name, eventProxy, useCapture);
                  (node.__l || (node.__l = {}))[name] = value;
                } else if ('list' !== name && 'type' !== name && !isSvg && name in node) {
                  setProperty(node, name, null == value ? '' : value);
                  if (null == value || value === !1) node.removeAttribute(name);
                } else {
                  var ns = isSvg && name !== (name = name.replace(/^xlink\:?/, ''));
                  if (null == value || value === !1) {
                    if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase()); else node.removeAttribute(name);
                  } else if ('function' != typeof value) if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value); else node.setAttribute(name, value);
                }
              }

              function setProperty(node, name, value) {
                try {
                  node[name] = value;
                } catch (e) {
                }
              }

              function eventProxy(e) {
                return this.__l[e.type](options.event && options.event(e) || e);
              }

              function flushMounts() {
                var c;
                while (c = mounts.pop()) {
                  if (options.afterMount) options.afterMount(c);
                  if (c.componentDidMount) c.componentDidMount();
                }
              }

              function diff(dom, vnode, context, mountAll, parent, componentRoot) {
                if (!diffLevel++) {
                  isSvgMode = null != parent && void 0 !== parent.ownerSVGElement;
                  hydrating = null != dom && !('__preactattr_' in dom);
                }
                var ret = idiff(dom, vnode, context, mountAll, componentRoot);
                if (parent && ret.parentNode !== parent) parent.appendChild(ret);
                if (!--diffLevel) {
                  hydrating = !1;
                  if (!componentRoot) flushMounts();
                }
                return ret;
              }

              function idiff(dom, vnode, context, mountAll, componentRoot) {
                var out = dom, prevSvgMode = isSvgMode;
                if (null == vnode) vnode = '';
                if ('string' == typeof vnode) {
                  if (dom && void 0 !== dom.splitText && dom.parentNode && (!dom._component || componentRoot)) {
                    if (dom.nodeValue != vnode) dom.nodeValue = vnode;
                  } else {
                    out = document.createTextNode(vnode);
                    if (dom) {
                      if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
                      recollectNodeTree(dom, !0);
                    }
                  }
                  out.__preactattr_ = !0;
                  return out;
                }
                if ('function' == typeof vnode.nodeName) return buildComponentFromVNode(dom, vnode, context, mountAll);
                isSvgMode = 'svg' === vnode.nodeName ? !0 : 'foreignObject' === vnode.nodeName ? !1 : isSvgMode;
                if (!dom || !isNamedNode(dom, String(vnode.nodeName))) {
                  out = createNode(String(vnode.nodeName), isSvgMode);
                  if (dom) {
                    while (dom.firstChild) {
                      out.appendChild(dom.firstChild);
                    }
                    if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
                    recollectNodeTree(dom, !0);
                  }
                }
                var fc = out.firstChild, props = out.__preactattr_ || (out.__preactattr_ = {}),
                  vchildren = vnode.children;
                if (!hydrating && vchildren && 1 === vchildren.length && 'string' == typeof vchildren[0] && null != fc && void 0 !== fc.splitText && null == fc.nextSibling) {
                  if (fc.nodeValue != vchildren[0]) fc.nodeValue = vchildren[0];
                } else if (vchildren && vchildren.length || null != fc) innerDiffNode(out, vchildren, context, mountAll, hydrating || null != props.dangerouslySetInnerHTML);
                diffAttributes(out, vnode.attributes, props);
                isSvgMode = prevSvgMode;
                return out;
              }

              function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
                var j, c, vchild, child, originalChildren = dom.childNodes, children = [], keyed = {}, keyedLen = 0,
                  min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren ? vchildren.length : 0;
                if (0 !== len) for (var i = 0; i < len; i++) {
                  var _child = originalChildren[i], props = _child.__preactattr_,
                    key = vlen && props ? _child._component ? _child._component.__k : props.key : null;
                  if (null != key) {
                    keyedLen++;
                    keyed[key] = _child;
                  } else if (props || (void 0 !== _child.splitText ? isHydrating ? _child.nodeValue.trim() : !0 : isHydrating)) children[childrenLen++] = _child;
                }
                if (0 !== vlen) for (var i = 0; i < vlen; i++) {
                  vchild = vchildren[i];
                  child = null;
                  var key = vchild.key;
                  if (null != key) {
                    if (keyedLen && void 0 !== keyed[key]) {
                      child = keyed[key];
                      keyed[key] = void 0;
                      keyedLen--;
                    }
                  } else if (!child && min < childrenLen) for (j = min; j < childrenLen; j++) {
                    if (void 0 !== children[j] && isSameNodeType(c = children[j], vchild, isHydrating)) {
                      child = c;
                      children[j] = void 0;
                      if (j === childrenLen - 1) childrenLen--;
                      if (j === min) min++;
                      break;
                    }
                  }
                  child = idiff(child, vchild, context, mountAll);
                  if (child && child !== dom) if (i >= len) dom.appendChild(child); else if (child !== originalChildren[i]) if (child === originalChildren[i + 1]) removeNode(originalChildren[i]); else dom.insertBefore(child, originalChildren[i] || null);
                }
                if (keyedLen) for (var i in keyed) {
                  if (void 0 !== keyed[i]) recollectNodeTree(keyed[i], !1);
                }
                while (min <= childrenLen) {
                  if (void 0 !== (child = children[childrenLen--])) recollectNodeTree(child, !1);
                }
              }

              function recollectNodeTree(node, unmountOnly) {
                var component = node._component;
                if (component) unmountComponent(component); else {
                  if (null != node.__preactattr_ && node.__preactattr_.ref) node.__preactattr_.ref(null);
                  if (unmountOnly === !1 || null == node.__preactattr_) removeNode(node);
                  removeChildren(node);
                }
              }

              function removeChildren(node) {
                node = node.lastChild;
                while (node) {
                  var next = node.previousSibling;
                  recollectNodeTree(node, !0);
                  node = next;
                }
              }

              function diffAttributes(dom, attrs, old) {
                var name;
                for (name in old) {
                  if ((!attrs || null == attrs[name]) && null != old[name]) setAccessor(dom, name, old[name], old[name] = void 0, isSvgMode);
                }
                for (name in attrs) {
                  if (!('children' === name || 'innerHTML' === name || name in old && attrs[name] === ('value' === name || 'checked' === name ? dom[name] : old[name]))) setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
                }
              }

              function collectComponent(component) {
                var name = component.constructor.name;
                (components[name] || (components[name] = [])).push(component);
              }

              function createComponent(Ctor, props, context) {
                var inst, list = components[Ctor.name];
                if (Ctor.prototype && Ctor.prototype.render) {
                  inst = new Ctor(props, context);
                  Component.call(inst, props, context);
                } else {
                  inst = new Component(props, context);
                  inst.constructor = Ctor;
                  inst.render = doRender;
                }
                if (list) for (var i = list.length; i--;) {
                  if (list[i].constructor === Ctor) {
                    inst.__b = list[i].__b;
                    list.splice(i, 1);
                    break;
                  }
                }
                return inst;
              }

              function doRender(props, state, context) {
                return this.constructor(props, context);
              }

              function setComponentProps(component, props, opts, context, mountAll) {
                if (!component.__x) {
                  component.__x = !0;
                  if (component.__r = props.ref) delete props.ref;
                  if (component.__k = props.key) delete props.key;
                  if (!component.base || mountAll) {
                    if (component.componentWillMount) component.componentWillMount();
                  } else if (component.componentWillReceiveProps) component.componentWillReceiveProps(props, context);
                  if (context && context !== component.context) {
                    if (!component.__c) component.__c = component.context;
                    component.context = context;
                  }
                  if (!component.__p) component.__p = component.props;
                  component.props = props;
                  component.__x = !1;
                  if (0 !== opts) if (1 === opts || options.syncComponentUpdates !== !1 || !component.base) renderComponent(component, 1, mountAll); else enqueueRender(component);
                  if (component.__r) component.__r(component);
                }
              }

              function renderComponent(component, opts, mountAll, isChild) {
                if (!component.__x) {
                  var rendered, inst, cbase, props = component.props, state = component.state,
                    context = component.context, previousProps = component.__p || props,
                    previousState = component.__s || state, previousContext = component.__c || context,
                    isUpdate = component.base, nextBase = component.__b, initialBase = isUpdate || nextBase,
                    initialChildComponent = component._component, skip = !1;
                  if (isUpdate) {
                    component.props = previousProps;
                    component.state = previousState;
                    component.context = previousContext;
                    if (2 !== opts && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === !1) skip = !0; else if (component.componentWillUpdate) component.componentWillUpdate(props, state, context);
                    component.props = props;
                    component.state = state;
                    component.context = context;
                  }
                  component.__p = component.__s = component.__c = component.__b = null;
                  component.__d = !1;
                  if (!skip) {
                    rendered = component.render(props, state, context);
                    if (component.getChildContext) context = extend(extend({}, context), component.getChildContext());
                    var toUnmount, base, childComponent = rendered && rendered.nodeName;
                    if ('function' == typeof childComponent) {
                      var childProps = getNodeProps(rendered);
                      inst = initialChildComponent;
                      if (inst && inst.constructor === childComponent && childProps.key == inst.__k) setComponentProps(inst, childProps, 1, context, !1); else {
                        toUnmount = inst;
                        component._component = inst = createComponent(childComponent, childProps, context);
                        inst.__b = inst.__b || nextBase;
                        inst.__u = component;
                        setComponentProps(inst, childProps, 0, context, !1);
                        renderComponent(inst, 1, mountAll, !0);
                      }
                      base = inst.base;
                    } else {
                      cbase = initialBase;
                      toUnmount = initialChildComponent;
                      if (toUnmount) cbase = component._component = null;
                      if (initialBase || 1 === opts) {
                        if (cbase) cbase._component = null;
                        base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, !0);
                      }
                    }
                    if (initialBase && base !== initialBase && inst !== initialChildComponent) {
                      var baseParent = initialBase.parentNode;
                      if (baseParent && base !== baseParent) {
                        baseParent.replaceChild(base, initialBase);
                        if (!toUnmount) {
                          initialBase._component = null;
                          recollectNodeTree(initialBase, !1);
                        }
                      }
                    }
                    if (toUnmount) unmountComponent(toUnmount);
                    component.base = base;
                    if (base && !isChild) {
                      var componentRef = component, t = component;
                      while (t = t.__u) {
                        (componentRef = t).base = base;
                      }
                      base._component = componentRef;
                      base._componentConstructor = componentRef.constructor;
                    }
                  }
                  if (!isUpdate || mountAll) mounts.unshift(component); else if (!skip) {
                    flushMounts();
                    if (component.componentDidUpdate) component.componentDidUpdate(previousProps, previousState, previousContext);
                    if (options.afterUpdate) options.afterUpdate(component);
                  }
                  if (null != component.__h) while (component.__h.length) {
                    component.__h.pop().call(component);
                  }
                  if (!diffLevel && !isChild) flushMounts();
                }
              }

              function buildComponentFromVNode(dom, vnode, context, mountAll) {
                var c = dom && dom._component, originalComponent = c, oldDom = dom,
                  isDirectOwner = c && dom._componentConstructor === vnode.nodeName, isOwner = isDirectOwner,
                  props = getNodeProps(vnode);
                while (c && !isOwner && (c = c.__u)) {
                  isOwner = c.constructor === vnode.nodeName;
                }
                if (c && isOwner && (!mountAll || c._component)) {
                  setComponentProps(c, props, 3, context, mountAll);
                  dom = c.base;
                } else {
                  if (originalComponent && !isDirectOwner) {
                    unmountComponent(originalComponent);
                    dom = oldDom = null;
                  }
                  c = createComponent(vnode.nodeName, props, context);
                  if (dom && !c.__b) {
                    c.__b = dom;
                    oldDom = null;
                  }
                  setComponentProps(c, props, 1, context, mountAll);
                  dom = c.base;
                  if (oldDom && dom !== oldDom) {
                    oldDom._component = null;
                    recollectNodeTree(oldDom, !1);
                  }
                }
                return dom;
              }

              function unmountComponent(component) {
                if (options.beforeUnmount) options.beforeUnmount(component);
                var base = component.base;
                component.__x = !0;
                if (component.componentWillUnmount) component.componentWillUnmount();
                component.base = null;
                var inner = component._component;
                if (inner) unmountComponent(inner); else if (base) {
                  if (base.__preactattr_ && base.__preactattr_.ref) base.__preactattr_.ref(null);
                  component.__b = base;
                  removeNode(base);
                  collectComponent(component);
                  removeChildren(base);
                }
                if (component.__r) component.__r(null);
              }

              function Component(props, context) {
                this.__d = !0;
                this.context = context;
                this.props = props;
                this.state = this.state || {};
              }

              function render(vnode, parent, merge) {
                return diff(merge, vnode, {}, !1, parent, !1);
              }

              var options = {};
              var stack = [];
              var EMPTY_CHILDREN = [];
              var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
              var items = [];
              var mounts = [];
              var diffLevel = 0;
              var isSvgMode = !1;
              var hydrating = !1;
              var components = {};
              extend(Component.prototype, {
                setState: function setState(state, callback) {
                  var s = this.state;
                  if (!this.__s) this.__s = extend({}, s);
                  extend(s, 'function' == typeof state ? state(s, this.props) : state);
                  if (callback) (this.__h = this.__h || []).push(callback);
                  enqueueRender(this);
                }, forceUpdate: function forceUpdate(callback) {
                  if (callback) (this.__h = this.__h || []).push(callback);
                  renderComponent(this, 2);
                }, render: function render() {
                }
              });
              var preact = {
                h: h,
                createElement: h,
                cloneElement: cloneElement,
                Component: Component,
                render: render,
                rerender: rerender,
                options: options
              };
              if (true) module.exports = preact; else self.preact = preact;
            }();//# sourceMappingURL=preact.js.map
            /***/
          }, /* 1 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            Object.defineProperty(__webpack_exports__, "__esModule", {value: true});
            /* WEBPACK VAR INJECTION */
            (function (global) {/* harmony export (binding) */
              __webpack_require__.d(__webpack_exports__, "Provider", function () {
                return Provider;
              });
              /* harmony export (binding) */
              __webpack_require__.d(__webpack_exports__, "connect", function () {
                return connect;
              });
              /* harmony export (binding) */
              __webpack_require__.d(__webpack_exports__, "connectAdvanced", function () {
                return connectAdvanced;
              });
              /* harmony import */
              var __WEBPACK_IMPORTED_MODULE_0_preact__ = __webpack_require__(0);
              /* harmony import */
              var __WEBPACK_IMPORTED_MODULE_0_preact___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_preact__);
              /* harmony import */
              var __WEBPACK_IMPORTED_MODULE_1_redux__ = __webpack_require__(11);
              var Children = {
                only: function only(children) {
                  return children && children[0] || null;
                }
              };

              function proptype() {
              }

              proptype.isRequired = proptype;
              var PropTypes = {
                element: proptype, func: proptype, shape: function shape() {
                  return proptype;
                }, instanceOf: function instanceOf() {
                  return proptype;
                }
              };
              var subscriptionShape = PropTypes.shape({
                trySubscribe: PropTypes.func.isRequired,
                tryUnsubscribe: PropTypes.func.isRequired,
                notifyNestedSubs: PropTypes.func.isRequired,
                isSubscribed: PropTypes.func.isRequired
              });
              var storeShape = PropTypes.shape({
                subscribe: PropTypes.func.isRequired,
                dispatch: PropTypes.func.isRequired,
                getState: PropTypes.func.isRequired
              });

              /**
               * Prints a warning in the console if it exists.
               *
               * @param {String} message The warning message.
               * @returns {void}
               */function warning(message) {/* eslint-disable no-console */
                if (typeof console !== 'undefined' && typeof console.error === 'function') {
                  console.error(message);
                }
                /* eslint-enable no-console */
                try {// This error was thrown as a convenience so that if you enable
// "break on all exceptions" in your console,
// it would pause the execution at this line.
                  throw new Error(message);
                  /* eslint-disable no-empty */
                } catch (e) {
                }
                /* eslint-enable no-empty */
              }

              var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
                return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
              } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
              };
              var classCallCheck = function classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              };
              var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              var inherits = function inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              };
              var objectWithoutProperties = function objectWithoutProperties(obj, keys) {
                var target = {};
                for (var i in obj) {
                  if (keys.indexOf(i) >= 0) continue;
                  if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                  target[i] = obj[i];
                }
                return target;
              };
              var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
              };
              var didWarnAboutReceivingStore = false;

              function warnAboutReceivingStore() {
                if (didWarnAboutReceivingStore) {
                  return;
                }
                didWarnAboutReceivingStore = true;
                warning('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
              }

              function createProvider() {
                var _Provider$childContex;
                var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
                var subKey = arguments[1];
                var subscriptionKey = subKey || storeKey + 'Subscription';
                var Provider = function (_Component) {
                  inherits(Provider, _Component);
                  Provider.prototype.getChildContext = function getChildContext() {
                    var _ref;
                    return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
                  };

                  function Provider(props, context) {
                    classCallCheck(this, Provider);
                    var _this = possibleConstructorReturn(this, _Component.call(this, props, context));
                    _this[storeKey] = props.store;
                    return _this;
                  }

                  Provider.prototype.render = function render() {
                    return Children.only(this.props.children);
                  };
                  return Provider;
                }(__WEBPACK_IMPORTED_MODULE_0_preact__["Component"]);
                {
                  Provider.prototype.componentWillReceiveProps = function (nextProps) {
                    if (this[storeKey] !== nextProps.store) {
                      warnAboutReceivingStore();
                    }
                  };
                }
                Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);
                Provider.displayName = 'Provider';
                return Provider;
              }

              var Provider = createProvider();
              /**
               * Copyright 2015, Yahoo! Inc.
               * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
               */var REACT_STATICS = {
                childContextTypes: true,
                contextTypes: true,
                defaultProps: true,
                displayName: true,
                getDefaultProps: true,
                mixins: true,
                propTypes: true,
                type: true
              };
              var KNOWN_STATICS = {
                name: true,
                length: true,
                prototype: true,
                caller: true,
                arguments: true,
                arity: true
              };
              var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
              var index$1 = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
                if (typeof sourceComponent !== 'string') {// don't hoist over string (html) components
                  var keys = Object.getOwnPropertyNames(sourceComponent);
                  /* istanbul ignore else */
                  if (isGetOwnPropertySymbolsAvailable) {
                    keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
                  }
                  for (var i = 0; i < keys.length; ++i) {
                    if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                      try {
                        targetComponent[keys[i]] = sourceComponent[keys[i]];
                      } catch (error) {
                      }
                    }
                  }
                }
                return targetComponent;
              };
              var invariant = function invariant() {
              };// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants
              var CLEARED = null;
              var nullListeners = {
                notify: function notify() {
                }
              };

              function createListenerCollection() {// the current/next pattern is copied from redux's createStore code.
// TODO: refactor+expose that code to be reusable here?
                var current = [];
                var next = [];
                return {
                  clear: function clear() {
                    next = CLEARED;
                    current = CLEARED;
                  }, notify: function notify() {
                    var listeners = current = next;
                    for (var i = 0; i < listeners.length; i++) {
                      listeners[i]();
                    }
                  }, subscribe: function subscribe(listener) {
                    var isSubscribed = true;
                    if (next === current) next = current.slice();
                    next.push(listener);
                    return function unsubscribe() {
                      if (!isSubscribed || current === CLEARED) return;
                      isSubscribed = false;
                      if (next === current) next = current.slice();
                      next.splice(next.indexOf(listener), 1);
                    };
                  }
                };
              }

              var Subscription = function () {
                function Subscription(store, parentSub, onStateChange) {
                  classCallCheck(this, Subscription);
                  this.store = store;
                  this.parentSub = parentSub;
                  this.onStateChange = onStateChange;
                  this.unsubscribe = null;
                  this.listeners = nullListeners;
                }

                Subscription.prototype.addNestedSub = function addNestedSub(listener) {
                  this.trySubscribe();
                  return this.listeners.subscribe(listener);
                };
                Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
                  this.listeners.notify();
                };
                Subscription.prototype.isSubscribed = function isSubscribed() {
                  return Boolean(this.unsubscribe);
                };
                Subscription.prototype.trySubscribe = function trySubscribe() {
                  if (!this.unsubscribe) {
                    this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
                    this.listeners = createListenerCollection();
                  }
                };
                Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
                  if (this.unsubscribe) {
                    this.unsubscribe();
                    this.unsubscribe = null;
                    this.listeners.clear();
                    this.listeners = nullListeners;
                  }
                };
                return Subscription;
              }();
              var hotReloadingVersion = 0;
              var dummyState = {};

              function noop() {
              }

              function makeSelectorStateful(sourceSelector, store) {// wrap the selector in an object that tracks its results between runs.
                var selector = {
                  run: function runComponentSelector(props) {
                    try {
                      var nextProps = sourceSelector(store.getState(), props);
                      if (nextProps !== selector.props || selector.error) {
                        selector.shouldComponentUpdate = true;
                        selector.props = nextProps;
                        selector.error = null;
                      }
                    } catch (error) {
                      selector.shouldComponentUpdate = true;
                      selector.error = error;
                    }
                  }
                };
                return selector;
              }

              function connectAdvanced(/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/selectorFactory) {
                var _contextTypes, _childContextTypes;
                var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var _ref$getDisplayName = _ref.getDisplayName,
                  getDisplayName = _ref$getDisplayName === undefined ? function (name) {
                    return 'ConnectAdvanced(' + name + ')';
                  } : _ref$getDisplayName, _ref$methodName = _ref.methodName,
                  methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
                  _ref$renderCountProp = _ref.renderCountProp,
                  renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
                  _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
                  shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
                  _ref$storeKey = _ref.storeKey, storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
                  _ref$withRef = _ref.withRef, withRef = _ref$withRef === undefined ? false : _ref$withRef,
                  connectOptions = objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);
                var subscriptionKey = storeKey + 'Subscription';
                var version = hotReloadingVersion++;
                var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);
                var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);
                return function wrapWithConnect(WrappedComponent) {
                  invariant(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));
                  var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
                  var displayName = getDisplayName(wrappedComponentName);
                  var selectorFactoryOptions = _extends({}, connectOptions, {
                    getDisplayName: getDisplayName,
                    methodName: methodName,
                    renderCountProp: renderCountProp,
                    shouldHandleStateChanges: shouldHandleStateChanges,
                    storeKey: storeKey,
                    withRef: withRef,
                    displayName: displayName,
                    wrappedComponentName: wrappedComponentName,
                    WrappedComponent: WrappedComponent
                  });
                  var Connect = function (_Component) {
                    inherits(Connect, _Component);

                    function Connect(props, context) {
                      classCallCheck(this, Connect);
                      var _this = possibleConstructorReturn(this, _Component.call(this, props, context));
                      _this.version = version;
                      _this.state = {};
                      _this.renderCount = 0;
                      _this.store = props[storeKey] || context[storeKey];
                      _this.propsMode = Boolean(props[storeKey]);
                      _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);
                      invariant(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));
                      _this.initSelector();
                      _this.initSubscription();
                      return _this;
                    }

                    Connect.prototype.getChildContext = function getChildContext() {
                      var _ref2;// If this component received store from props, its subscription should be transparent
// to any descendants receiving store+subscription from context; it passes along
// subscription passed to it. Otherwise, it shadows the parent subscription, which allows
// Connect to control ordering of notifications to flow top-down.
                      var subscription = this.propsMode ? null : this.subscription;
                      return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
                    };
                    Connect.prototype.componentDidMount = function componentDidMount() {
                      if (!shouldHandleStateChanges) return;// componentWillMount fires during server side rendering, but componentDidMount and
// componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
// Otherwise, unsubscription would never take place during SSR, causing a memory leak.
// To handle the case where a child component may have triggered a state change by
// dispatching an action in its componentWillMount, we have to re-run the select and maybe
// re-render.
                      this.subscription.trySubscribe();
                      this.selector.run(this.props);
                      if (this.selector.shouldComponentUpdate) this.forceUpdate();
                    };
                    Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                      this.selector.run(nextProps);
                    };
                    Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
                      return this.selector.shouldComponentUpdate;
                    };
                    Connect.prototype.componentWillUnmount = function componentWillUnmount() {
                      if (this.subscription) this.subscription.tryUnsubscribe();
                      this.subscription = null;
                      this.notifyNestedSubs = noop;
                      this.store = null;
                      this.selector.run = noop;
                      this.selector.shouldComponentUpdate = false;
                    };
                    Connect.prototype.getWrappedInstance = function getWrappedInstance() {
                      invariant(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
                      return this.wrappedInstance;
                    };
                    Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
                      this.wrappedInstance = ref;
                    };
                    Connect.prototype.initSelector = function initSelector() {
                      var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
                      this.selector = makeSelectorStateful(sourceSelector, this.store);
                      this.selector.run(this.props);
                    };
                    Connect.prototype.initSubscription = function initSubscription() {
                      if (!shouldHandleStateChanges) return;// parentSub's source should match where store came from: props vs. context. A component
// connected to the store via props shouldn't use subscription from context, or vice versa.
                      var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
                      this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this));// `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
// the middle of the notification loop, where `this.subscription` will then be null. An
// extra null check every change can be avoided by copying the method onto `this` and then
// replacing it with a no-op on unmount. This can probably be avoided if Subscription's
// listeners logic is changed to not call listeners that have been unsubscribed in the
// middle of the notification loop.
                      this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
                    };
                    Connect.prototype.onStateChange = function onStateChange() {
                      this.selector.run(this.props);
                      if (!this.selector.shouldComponentUpdate) {
                        this.notifyNestedSubs();
                      } else {
                        this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
                        this.setState(dummyState);
                      }
                    };
                    Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {// `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
// needs to notify nested subs. Once called, it unimplements itself until further state
// changes occur. Doing it this way vs having a permanent `componentDidMount` that does
// a boolean check every time avoids an extra method call most of the time, resulting
// in some perf boost.
                      this.componentDidUpdate = undefined;
                      this.notifyNestedSubs();
                    };
                    Connect.prototype.isSubscribed = function isSubscribed() {
                      return Boolean(this.subscription) && this.subscription.isSubscribed();
                    };
                    Connect.prototype.addExtraProps = function addExtraProps(props) {
                      if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;// make a shallow copy so that fields added don't leak to the original selector.
// this is especially important for 'ref' since that's a reference back to the component
// instance. a singleton memoized selector would then be holding a reference to the
// instance, preventing the instance from being garbage collected, and that would be bad
                      var withExtras = _extends({}, props);
                      if (withRef) withExtras.ref = this.setWrappedInstance;
                      if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
                      if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
                      return withExtras;
                    };
                    Connect.prototype.render = function render() {
                      var selector = this.selector;
                      selector.shouldComponentUpdate = false;
                      if (selector.error) {
                        throw selector.error;
                      } else {
                        return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["h"])(WrappedComponent, this.addExtraProps(selector.props));
                      }
                    };
                    return Connect;
                  }(__WEBPACK_IMPORTED_MODULE_0_preact__["Component"]);
                  Connect.WrappedComponent = WrappedComponent;
                  Connect.displayName = displayName;
                  Connect.childContextTypes = childContextTypes;
                  Connect.contextTypes = contextTypes;
                  {
                    Connect.prototype.componentWillUpdate = function componentWillUpdate() {// We are hot reloading!
                      if (this.version !== version) {
                        this.version = version;
                        this.initSelector();
                        if (this.subscription) this.subscription.tryUnsubscribe();
                        this.initSubscription();
                        if (shouldHandleStateChanges) this.subscription.trySubscribe();
                      }
                    };
                  }
                  return index$1(Connect, WrappedComponent);
                };
              }

              var hasOwn = Object.prototype.hasOwnProperty;

              function is(x, y) {
                if (x === y) {
                  return x !== 0 || y !== 0 || 1 / x === 1 / y;
                } else {
                  return x !== x && y !== y;
                }
              }

              function shallowEqual(objA, objB) {
                if (is(objA, objB)) return true;
                if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
                  return false;
                }
                var keysA = Object.keys(objA);
                var keysB = Object.keys(objB);
                if (keysA.length !== keysB.length) return false;
                for (var i = 0; i < keysA.length; i++) {
                  if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                    return false;
                  }
                }
                return true;
              }

              /** Detect free variable `global` from Node.js. */var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;
              /** Detect free variable `self`. */var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;
              /** Used as a reference to the global object. */var root = freeGlobal || freeSelf || Function('return this')();
              /** Built-in value references. */var _Symbol = root.Symbol;
              /** Used for built-in method references. */var objectProto$1 = Object.prototype;
              /** Used to check objects for own properties. */var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
              /**
               * Used to resolve the
               * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
               * of values.
               */var nativeObjectToString = objectProto$1.toString;
              /** Built-in value references. */var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

              /**
               * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
               *
               * @private
               * @param {*} value The value to query.
               * @returns {string} Returns the raw `toStringTag`.
               */function getRawTag(value) {
                var isOwn = hasOwnProperty$1.call(value, symToStringTag$1), tag = value[symToStringTag$1];
                try {
                  value[symToStringTag$1] = undefined;
                  var unmasked = true;
                } catch (e) {
                }
                var result = nativeObjectToString.call(value);
                if (unmasked) {
                  if (isOwn) {
                    value[symToStringTag$1] = tag;
                  } else {
                    delete value[symToStringTag$1];
                  }
                }
                return result;
              }

              /** Used for built-in method references. */var objectProto$2 = Object.prototype;
              /**
               * Used to resolve the
               * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
               * of values.
               */var nativeObjectToString$1 = objectProto$2.toString;

              /**
               * Converts `value` to a string using `Object.prototype.toString`.
               *
               * @private
               * @param {*} value The value to convert.
               * @returns {string} Returns the converted string.
               */function objectToString(value) {
                return nativeObjectToString$1.call(value);
              }

              /** `Object#toString` result references. */var nullTag = '[object Null]';
              var undefinedTag = '[object Undefined]';
              /** Built-in value references. */var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

              /**
               * The base implementation of `getTag` without fallbacks for buggy environments.
               *
               * @private
               * @param {*} value The value to query.
               * @returns {string} Returns the `toStringTag`.
               */function baseGetTag(value) {
                if (value == null) {
                  return value === undefined ? undefinedTag : nullTag;
                }
                return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
              }

              /**
               * Creates a unary function that invokes `func` with its argument transformed.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {Function} transform The argument transform.
               * @returns {Function} Returns the new function.
               */function overArg(func, transform) {
                return function (arg) {
                  return func(transform(arg));
                };
              }

              /** Built-in value references. */var getPrototype = overArg(Object.getPrototypeOf, Object);

              /**
               * Checks if `value` is object-like. A value is object-like if it's not `null`
               * and has a `typeof` result of "object".
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
               * @example
               *
               * _.isObjectLike({});
               * // => true
               *
               * _.isObjectLike([1, 2, 3]);
               * // => true
               *
               * _.isObjectLike(_.noop);
               * // => false
               *
               * _.isObjectLike(null);
               * // => false
               */function isObjectLike(value) {
                return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
              }

              /** `Object#toString` result references. */var objectTag = '[object Object]';
              /** Used for built-in method references. */var funcProto = Function.prototype;
              var objectProto = Object.prototype;
              /** Used to resolve the decompiled source of functions. */var funcToString = funcProto.toString;
              /** Used to check objects for own properties. */var hasOwnProperty = objectProto.hasOwnProperty;
              /** Used to infer the `Object` constructor. */var objectCtorString = funcToString.call(Object);

              /**
               * Checks if `value` is a plain object, that is, an object created by the
               * `Object` constructor or one with a `[[Prototype]]` of `null`.
               *
               * @static
               * @memberOf _
               * @since 0.8.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
               * @example
               *
               * function Foo() {
 *   this.a = 1;
 * }
               *
               * _.isPlainObject(new Foo);
               * // => false
               *
               * _.isPlainObject([1, 2, 3]);
               * // => false
               *
               * _.isPlainObject({ 'x': 0, 'y': 0 });
               * // => true
               *
               * _.isPlainObject(Object.create(null));
               * // => true
               */function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                  return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                  return true;
                }
                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
              }

              function verifyPlainObject(value, displayName, methodName) {
                if (!isPlainObject(value)) {
                  warning(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
                }
              }

              function wrapMapToPropsConstant(getConstant) {
                return function initConstantSelector(dispatch, options) {
                  var constant = getConstant(dispatch, options);

                  function constantSelector() {
                    return constant;
                  }

                  constantSelector.dependsOnOwnProps = false;
                  return constantSelector;
                };
              }// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
//
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..
              function getDependsOnOwnProps(mapToProps) {
                return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
              }// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
//
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//
              function wrapMapToPropsFunc(mapToProps, methodName) {
                return function initProxySelector(dispatch, _ref) {
                  var displayName = _ref.displayName;
                  var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
                    return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
                  };// allow detectFactoryAndVerify to get ownProps
                  proxy.dependsOnOwnProps = true;
                  proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
                    proxy.mapToProps = mapToProps;
                    proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
                    var props = proxy(stateOrDispatch, ownProps);
                    if (typeof props === 'function') {
                      proxy.mapToProps = props;
                      proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
                      props = proxy(stateOrDispatch, ownProps);
                    }
                    verifyPlainObject(props, displayName, methodName);
                    return props;
                  };
                  return proxy;
                };
              }

              function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
                return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
              }

              function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
                return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
                  return {dispatch: dispatch};
                }) : undefined;
              }

              function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
                return mapDispatchToProps && (typeof mapDispatchToProps === 'undefined' ? 'undefined' : _typeof(mapDispatchToProps)) === 'object' ? wrapMapToPropsConstant(function (dispatch) {
                  return Object(__WEBPACK_IMPORTED_MODULE_1_redux__["bindActionCreators"])(mapDispatchToProps, dispatch);
                }) : undefined;
              }

              var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

              function whenMapStateToPropsIsFunction(mapStateToProps) {
                return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
              }

              function whenMapStateToPropsIsMissing(mapStateToProps) {
                return !mapStateToProps ? wrapMapToPropsConstant(function () {
                  return {};
                }) : undefined;
              }

              var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

              function defaultMergeProps(stateProps, dispatchProps, ownProps) {
                return _extends({}, ownProps, stateProps, dispatchProps);
              }

              function wrapMergePropsFunc(mergeProps) {
                return function initMergePropsProxy(dispatch, _ref) {
                  var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
                  var hasRunOnce = false;
                  var mergedProps = void 0;
                  return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
                    var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                    if (hasRunOnce) {
                      if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
                    } else {
                      hasRunOnce = true;
                      mergedProps = nextMergedProps;
                      verifyPlainObject(mergedProps, displayName, 'mergeProps');
                    }
                    return mergedProps;
                  };
                };
              }

              function whenMergePropsIsFunction(mergeProps) {
                return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
              }

              function whenMergePropsIsOmitted(mergeProps) {
                return !mergeProps ? function () {
                  return defaultMergeProps;
                } : undefined;
              }

              var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

              function verify(selector, methodName, displayName) {
                if (!selector) {
                  throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
                } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
                  if (!selector.hasOwnProperty('dependsOnOwnProps')) {
                    warning('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
                  }
                }
              }

              function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
                verify(mapStateToProps, 'mapStateToProps', displayName);
                verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
                verify(mergeProps, 'mergeProps', displayName);
              }

              function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
                return function impureFinalPropsSelector(state, ownProps) {
                  return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
                };
              }

              function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
                var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual,
                  areStatePropsEqual = _ref.areStatePropsEqual;
                var hasRunAtLeastOnce = false;
                var state = void 0;
                var ownProps = void 0;
                var stateProps = void 0;
                var dispatchProps = void 0;
                var mergedProps = void 0;

                function handleFirstCall(firstState, firstOwnProps) {
                  state = firstState;
                  ownProps = firstOwnProps;
                  stateProps = mapStateToProps(state, ownProps);
                  dispatchProps = mapDispatchToProps(dispatch, ownProps);
                  mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                  hasRunAtLeastOnce = true;
                  return mergedProps;
                }

                function handleNewPropsAndNewState() {
                  stateProps = mapStateToProps(state, ownProps);
                  if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
                  mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                  return mergedProps;
                }

                function handleNewProps() {
                  if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
                  if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
                  mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                  return mergedProps;
                }

                function handleNewState() {
                  var nextStateProps = mapStateToProps(state, ownProps);
                  var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
                  stateProps = nextStateProps;
                  if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                  return mergedProps;
                }

                function handleSubsequentCalls(nextState, nextOwnProps) {
                  var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
                  var stateChanged = !areStatesEqual(nextState, state);
                  state = nextState;
                  ownProps = nextOwnProps;
                  if (propsChanged && stateChanged) return handleNewPropsAndNewState();
                  if (propsChanged) return handleNewProps();
                  if (stateChanged) return handleNewState();
                  return mergedProps;
                }

                return function pureFinalPropsSelector(nextState, nextOwnProps) {
                  return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
                };
              }// TODO: Add more comments
// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.
              function finalPropsSelectorFactory(dispatch, _ref2) {
                var initMapStateToProps = _ref2.initMapStateToProps,
                  initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps,
                  options = objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);
                var mapStateToProps = initMapStateToProps(dispatch, options);
                var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
                var mergeProps = initMergeProps(dispatch, options);
                {
                  verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
                }
                var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
                return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
              }

              /*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps

  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */
              function match(arg, factories, name) {
                for (var i = factories.length - 1; i >= 0; i--) {
                  var result = factories[i](arg);
                  if (result) return result;
                }
                return function (dispatch, options) {
                  throw new Error('Invalid value of type ' + (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
                };
              }

              function strictEqual(a, b) {
                return a === b;
              }// createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios
              function createConnect() {
                var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref$connectHOC = _ref.connectHOC,
                  connectHOC = _ref$connectHOC === undefined ? connectAdvanced : _ref$connectHOC,
                  _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
                  mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
                  _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
                  mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
                  _ref$mergePropsFactor = _ref.mergePropsFactories,
                  mergePropsFactories = _ref$mergePropsFactor === undefined ? defaultMergePropsFactories : _ref$mergePropsFactor,
                  _ref$selectorFactory = _ref.selectorFactory,
                  selectorFactory = _ref$selectorFactory === undefined ? finalPropsSelectorFactory : _ref$selectorFactory;
                return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
                  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                  var _ref2$pure = _ref2.pure, pure = _ref2$pure === undefined ? true : _ref2$pure,
                    _ref2$areStatesEqual = _ref2.areStatesEqual,
                    areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
                    _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
                    areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? shallowEqual : _ref2$areOwnPropsEqua,
                    _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
                    areStatePropsEqual = _ref2$areStatePropsEq === undefined ? shallowEqual : _ref2$areStatePropsEq,
                    _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
                    areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? shallowEqual : _ref2$areMergedPropsE,
                    extraOptions = objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);
                  var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
                  var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
                  var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
                  return connectHOC(selectorFactory, _extends({// used in error messages
                    methodName: 'connect',// used to compute Connect's displayName from the wrapped component's displayName.
                    getDisplayName: function getDisplayName(name) {
                      return 'Connect(' + name + ')';
                    },// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
                    shouldHandleStateChanges: Boolean(mapStateToProps),// passed through to selectorFactory
                    initMapStateToProps: initMapStateToProps,
                    initMapDispatchToProps: initMapDispatchToProps,
                    initMergeProps: initMergeProps,
                    pure: pure,
                    areStatesEqual: areStatesEqual,
                    areOwnPropsEqual: areOwnPropsEqual,
                    areStatePropsEqual: areStatePropsEqual,
                    areMergedPropsEqual: areMergedPropsEqual
                  }, extraOptions));
                };
              }

              var connect = createConnect();
              var index = {Provider: Provider, connect: connect, connectAdvanced: connectAdvanced};
              /* harmony default export */
              __webpack_exports__["default"] = index;//# sourceMappingURL=preact-redux.esm.js.map
              /* WEBPACK VAR INJECTION */
            }).call(__webpack_exports__, __webpack_require__(22));
            /***/
          }, /* 2 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _preact = __webpack_require__(0);
            var _playkitJs = __webpack_require__(43);
            var _playkitJs2 = _interopRequireDefault(_playkitJs);
            var _logger = __webpack_require__(24);
            var _logger2 = _interopRequireDefault(_logger);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * Base component to be extended by other player UI components
             *
             * @class BaseComponent
             * @extends {Component}
             */var BaseComponent = function (_Component) {
              _inherits(BaseComponent, _Component);

              /**
               * Creates an instance of BaseComponent.
               * @param {Object} [obj={ config: {} }] obj
               * @memberof BaseComponent
               */function BaseComponent() {
                var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {config: {}};
                _classCallCheck(this, BaseComponent);
                var _this = _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call(this));
                _this.name = obj.name;
                _this.player = obj.player;
                _this.config = obj.config;
                _this.logger = (0, _logger2.default)('UI ' + _this.name);
                _this.logger.debug('Initialized');
                return _this;
              }

              return BaseComponent;
            }(_preact.Component);
            exports.default = BaseComponent;
            /***/
          }, /* 3 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            exports.bindActions = bindActions;
            var _redux = __webpack_require__(11);

            /**
             * Binding redux actions to props utility
             *
             * @export
             * @param {Array<any>} actions redux actions
             * @returns {Function} function
             */function bindActions(actions) {
              return function (dispatch) {
                return _extends({}, (0, _redux.bindActionCreators)(actions, dispatch));
              };
            }

            /***/
          }, /* 4 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(60);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../node_modules/css-loader/index.js??ref--2-1!../../node_modules/sass-loader/lib/loader.js!./style.scss", function () {
                  var newContent = require("!!../../node_modules/css-loader/index.js??ref--2-1!../../node_modules/sass-loader/lib/loader.js!./style.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 5 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.IconType = exports.default = undefined;
            var _icon = __webpack_require__(81);
            Object.defineProperty(exports, 'IconType', {
              enumerable: true, get: function get() {
                return _icon.IconType;
              }
            });
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _icon2.default;
            /***/
          }, /* 6 *//***/function (module, exports) {/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/// css base code, injected by the css-loader
            module.exports = function (useSourceMap) {
              var list = [];// return the list of modules as css string
              list.toString = function toString() {
                return this.map(function (item) {
                  var content = cssWithMappingToString(item, useSourceMap);
                  if (item[2]) {
                    return "@media " + item[2] + "{" + content + "}";
                  } else {
                    return content;
                  }
                }).join("");
              };// import a list of modules into the list
              list.i = function (modules, mediaQuery) {
                if (typeof modules === "string") modules = [[null, modules, ""]];
                var alreadyImportedModules = {};
                for (var i = 0; i < this.length; i++) {
                  var id = this[i][0];
                  if (typeof id === "number") alreadyImportedModules[id] = true;
                }
                for (i = 0; i < modules.length; i++) {
                  var item = modules[i];// skip already imported module
// this implementation is not 100% perfect for weird media query combinations
//  when a module is imported multiple times with different media queries.
//  I hope this will never occur (Hey this way we have smaller bundles)
                  if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
                    if (mediaQuery && !item[2]) {
                      item[2] = mediaQuery;
                    } else if (mediaQuery) {
                      item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
                    }
                    list.push(item);
                  }
                }
              };
              return list;
            };

            function cssWithMappingToString(item, useSourceMap) {
              var content = item[1] || '';
              var cssMapping = item[3];
              if (!cssMapping) {
                return content;
              }
              if (useSourceMap && typeof btoa === 'function') {
                var sourceMapping = toComment(cssMapping);
                var sourceURLs = cssMapping.sources.map(function (source) {
                  return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
                });
                return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
              }
              return [content].join('\n');
            }// Adapted from convert-source-map (MIT)
            function toComment(sourceMap) {// eslint-disable-next-line no-undef
              var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
              var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
              return '/*# ' + data + ' */';
            }

            /***/
          }, /* 7 *//***/function (module, exports, __webpack_require__) {/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
            var stylesInDom = {};
            var memoize = function memoize(fn) {
              var memo;
              return function () {
                if (typeof memo === "undefined") memo = fn.apply(this, arguments);
                return memo;
              };
            };
            var isOldIE = memoize(function () {// Test for IE <= 9 as proposed by Browserhacks
// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
// Tests for existence of standard globals is to allow style-loader
// to operate correctly into non-standard environments
// @see https://github.com/webpack-contrib/style-loader/issues/177
              return window && document && document.all && !window.atob;
            });
            var getElement = function (fn) {
              var memo = {};
              return function (selector) {
                if (typeof memo[selector] === "undefined") {
                  memo[selector] = fn.call(this, selector);
                }
                return memo[selector];
              };
            }(function (target) {
              return document.querySelector(target);
            });
            var singleton = null;
            var singletonCounter = 0;
            var stylesInsertedAtTop = [];
            var fixUrls = __webpack_require__(61);
            module.exports = function (list, options) {
              if (typeof DEBUG !== "undefined" && DEBUG) {
                if ((typeof document === 'undefined' ? 'undefined' : _typeof2(document)) !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
              }
              options = options || {};
              options.attrs = _typeof2(options.attrs) === "object" ? options.attrs : {};// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
              if (!options.singleton) options.singleton = isOldIE();// By default, add <style> tags to the <head> element
              if (!options.insertInto) options.insertInto = "head";// By default, add <style> tags to the bottom of the target
              if (!options.insertAt) options.insertAt = "bottom";
              var styles = listToStyles(list, options);
              addStylesToDom(styles, options);
              return function update(newList) {
                var mayRemove = [];
                for (var i = 0; i < styles.length; i++) {
                  var item = styles[i];
                  var domStyle = stylesInDom[item.id];
                  domStyle.refs--;
                  mayRemove.push(domStyle);
                }
                if (newList) {
                  var newStyles = listToStyles(newList, options);
                  addStylesToDom(newStyles, options);
                }
                for (var i = 0; i < mayRemove.length; i++) {
                  var domStyle = mayRemove[i];
                  if (domStyle.refs === 0) {
                    for (var j = 0; j < domStyle.parts.length; j++) {
                      domStyle.parts[j]();
                    }
                    delete stylesInDom[domStyle.id];
                  }
                }
              };
            };

            function addStylesToDom(styles, options) {
              for (var i = 0; i < styles.length; i++) {
                var item = styles[i];
                var domStyle = stylesInDom[item.id];
                if (domStyle) {
                  domStyle.refs++;
                  for (var j = 0; j < domStyle.parts.length; j++) {
                    domStyle.parts[j](item.parts[j]);
                  }
                  for (; j < item.parts.length; j++) {
                    domStyle.parts.push(addStyle(item.parts[j], options));
                  }
                } else {
                  var parts = [];
                  for (var j = 0; j < item.parts.length; j++) {
                    parts.push(addStyle(item.parts[j], options));
                  }
                  stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
                }
              }
            }

            function listToStyles(list, options) {
              var styles = [];
              var newStyles = {};
              for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var id = options.base ? item[0] + options.base : item[0];
                var css = item[1];
                var media = item[2];
                var sourceMap = item[3];
                var part = {css: css, media: media, sourceMap: sourceMap};
                if (!newStyles[id]) styles.push(newStyles[id] = {
                  id: id,
                  parts: [part]
                }); else newStyles[id].parts.push(part);
              }
              return styles;
            }

            function insertStyleElement(options, style) {
              var target = getElement(options.insertInto);
              if (!target) {
                throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
              }
              var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];
              if (options.insertAt === "top") {
                if (!lastStyleElementInsertedAtTop) {
                  target.insertBefore(style, target.firstChild);
                } else if (lastStyleElementInsertedAtTop.nextSibling) {
                  target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
                } else {
                  target.appendChild(style);
                }
                stylesInsertedAtTop.push(style);
              } else if (options.insertAt === "bottom") {
                target.appendChild(style);
              } else {
                throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
              }
            }

            function removeStyleElement(style) {
              if (style.parentNode === null) return false;
              style.parentNode.removeChild(style);
              var idx = stylesInsertedAtTop.indexOf(style);
              if (idx >= 0) {
                stylesInsertedAtTop.splice(idx, 1);
              }
            }

            function createStyleElement(options) {
              var style = document.createElement("style");
              options.attrs.type = "text/css";
              addAttrs(style, options.attrs);
              insertStyleElement(options, style);
              return style;
            }

            function createLinkElement(options) {
              var link = document.createElement("link");
              options.attrs.type = "text/css";
              options.attrs.rel = "stylesheet";
              addAttrs(link, options.attrs);
              insertStyleElement(options, link);
              return link;
            }

            function addAttrs(el, attrs) {
              Object.keys(attrs).forEach(function (key) {
                el.setAttribute(key, attrs[key]);
              });
            }

            function addStyle(obj, options) {
              var style, update, remove, result;// If a transform function was defined, run it on the css
              if (options.transform && obj.css) {
                result = options.transform(obj.css);
                if (result) {// If transform returns a value, use that instead of the original css.
// This allows running runtime transformations on the css.
                  obj.css = result;
                } else {// If the transform function returns a falsy value, don't add this css.
// This allows conditional loading of css
                  return function () {// noop
                  };
                }
              }
              if (options.singleton) {
                var styleIndex = singletonCounter++;
                style = singleton || (singleton = createStyleElement(options));
                update = applyToSingletonTag.bind(null, style, styleIndex, false);
                remove = applyToSingletonTag.bind(null, style, styleIndex, true);
              } else if (obj.sourceMap && typeof URL === "function" && typeof URL.createObjectURL === "function" && typeof URL.revokeObjectURL === "function" && typeof Blob === "function" && typeof btoa === "function") {
                style = createLinkElement(options);
                update = updateLink.bind(null, style, options);
                remove = function remove() {
                  removeStyleElement(style);
                  if (style.href) URL.revokeObjectURL(style.href);
                };
              } else {
                style = createStyleElement(options);
                update = applyToTag.bind(null, style);
                remove = function remove() {
                  removeStyleElement(style);
                };
              }
              update(obj);
              return function updateStyle(newObj) {
                if (newObj) {
                  if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
                    return;
                  }
                  update(obj = newObj);
                } else {
                  remove();
                }
              };
            }

            var replaceText = function () {
              var textStore = [];
              return function (index, replacement) {
                textStore[index] = replacement;
                return textStore.filter(Boolean).join('\n');
              };
            }();

            function applyToSingletonTag(style, index, remove, obj) {
              var css = remove ? "" : obj.css;
              if (style.styleSheet) {
                style.styleSheet.cssText = replaceText(index, css);
              } else {
                var cssNode = document.createTextNode(css);
                var childNodes = style.childNodes;
                if (childNodes[index]) style.removeChild(childNodes[index]);
                if (childNodes.length) {
                  style.insertBefore(cssNode, childNodes[index]);
                } else {
                  style.appendChild(cssNode);
                }
              }
            }

            function applyToTag(style, obj) {
              var css = obj.css;
              var media = obj.media;
              if (media) {
                style.setAttribute("media", media);
              }
              if (style.styleSheet) {
                style.styleSheet.cssText = css;
              } else {
                while (style.firstChild) {
                  style.removeChild(style.firstChild);
                }
                style.appendChild(document.createTextNode(css));
              }
            }

            function updateLink(link, options, obj) {
              var css = obj.css;
              var sourceMap = obj.sourceMap;
              /*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
              var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;
              if (options.convertToAbsoluteUrls || autoFixUrls) {
                css = fixUrls(css);
              }
              if (sourceMap) {// http://stackoverflow.com/a/26603875
                css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
              }
              var blob = new Blob([css], {type: "text/css"});
              var oldSrc = link.href;
              link.href = URL.createObjectURL(blob);
              if (oldSrc) URL.revokeObjectURL(oldSrc);
            }

            /***/
          }, /* 8 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.getKeyName = getKeyName;
            exports.isTab = isTab;
            exports.isEnter = isEnter;
            exports.isEsc = isEsc;
            var KeyMap = exports.KeyMap = {
              TAB: 9,
              ENTER: 13,
              ESC: 27,
              SPACE: 32,
              END: 35,
              HOME: 36,
              LEFT: 37,
              UP: 38,
              RIGHT: 39,
              DOWN: 40,
              C: 67,
              F: 70,
              M: 77,
              SEMI_COLON: 186,
              COMMA: 188,
              PERIOD: 190
            };

            /**
             * gets the key name for a certain key code
             * @param {number} keyCode - key code
             * @returns {string} - key name
             */function getKeyName(keyCode) {
              for (var keyName in KeyMap) {
                if (KeyMap[keyName] === keyCode) {
                  return keyName;
                }
              }
              return 'NOT_FOUND';
            }

            /**
             * @param {number} keyCode - key code
             * @returns {boolean} - whether the given key code is a tab key
             */function isTab(keyCode) {
              return isKeyEqual(keyCode, KeyMap.TAB);
            }

            /**
             * @param {number} keyCode - key code
             * @returns {boolean} - whether the given key code is an enter key
             */function isEnter(keyCode) {
              return isKeyEqual(keyCode, KeyMap.ENTER);
            }

            /**
             * @param {number} keyCode - key code
             * @returns {boolean} - whether the given key code is an esc key
             */function isEsc(keyCode) {
              return isKeyEqual(keyCode, KeyMap.ESC);
            }

            /**
             * @param {number} inputKeyCode - input key code
             * @param {number} targetKeyCode - target key code
             * @returns {boolean} - whether the given key code is equals to the input key
             */function isKeyEqual(inputKeyCode, targetKeyCode) {
              return inputKeyCode === targetKeyCode;
            }

            /***/
          }, /* 9 *//***/function (module, exports, __webpack_require__) {
            function n(n) {
              return n && "object" == (typeof n === 'undefined' ? 'undefined' : _typeof2(n)) && "default" in n ? n.default : n;
            }

            function t(n) {
              return null !== n && void 0 !== n;
            }

            function r(n, t) {
              var o = e({}, n);
              for (var i in t) {
                t.hasOwnProperty(i) && (o[i] = n[i] && t[i] && "object" == _typeof2(n[i]) && "object" == _typeof2(t[i]) ? r(n[i], t[i]) : n[i] || t[i]);
              }
              return o;
            }

            function e(n, t) {
              for (var r in t) {
                t.hasOwnProperty(r) && (n[r] = t[r]);
              }
              return n;
            }

            function o(n) {
              if (n = n || {}, "string" == typeof n && (n = n.split(",")), "join" in n) {
                for (var t = {}, r = 0; r < n.length; r++) {
                  var e = n[r].trim();
                  e && (t[e.split(".").pop()] = e);
                }
                return t;
              }
              return n;
            }

            function i(n, t) {
              return v = t || h, n && n.replace(/\{\{([\w.-]+)\}\}/g, u);
            }

            function u(n, t) {
              for (var r = t.split("."), e = v, o = 0; o < r.length; o++) {
                if (null == (e = e[r[o]])) return "";
              }
              return "string" == typeof e && e.match(/\{\{/) && (e = i(e, v)), e;
            }

            function c(n, r, e, o, u, c) {
              r && (n = r + "." + n);
              var a = e && f(e, n);
              return (u || 0 === u) && a && "object" == (typeof a === 'undefined' ? 'undefined' : _typeof2(a)) && (a = a.splice ? a[u] || a[0] : 0 === u && t(a.none) ? a.none : 1 === u && t(a.one || a.singular) ? a.one || a.singular : a.some || a.many || a.plural || a.other || a), a && i(a, o) || c || null;
            }

            function a(n, t, r) {
              var i = {};
              t = t || {}, n = o(n);
              for (var u in n) {
                if (n.hasOwnProperty(u) && n[u]) {
                  var a = n[u];
                  r || "string" != typeof a ? a.nodeName === g && (a = e({fallback: a.children && a.children[0]}, a.attributes), i[u] = c(a.id, t.scope, t.dictionary, a.fields, a.plural, a.fallback)) : i[u] = c(a, t.scope, t.dictionary);
                }
              }
              return i;
            }

            var l = __webpack_require__(0), f = n(__webpack_require__(89)), p = /[?&#]intl=show/, s = function (n) {
              function t() {
                n.apply(this, arguments);
              }

              return n && (t.__proto__ = n), t.prototype = Object.create(n && n.prototype), t.prototype.constructor = t, t.prototype.getChildContext = function () {
                var n = this.props, t = n.scope, o = n.definition, i = n.mark, u = e({}, this.context.intl || {});
                return t && (u.scope = t), o && (u.dictionary = r(u.dictionary || {}, o)), (i || "undefined" != typeof location && String(location).match(p)) && (u.mark = !0), {intl: u};
              }, t.prototype.render = function (n) {
                var t = n.children;
                return t && t[0] || null;
              }, t;
            }(l.Component), d = function d() {
              for (var n = [], t = arguments.length; t--;) {
                n[t] = arguments[t];
              }
              if (n.length > 1) {
                return y(n[0], n[1]);
              }
              var r = n[0];
              return function (n) {
                return y(n, r);
              };
            }, y = function y(n, t) {
              return function (r) {
                return l.h(s, t || {}, l.h(n, r));
              };
            }, h = {}, v, g = function g(n, t) {
              var r = n.id, e = n.children, o = n.plural, i = n.fields, u = t.intl, a = e && e[0],
                p = c(r, u && u.scope, u && u.dictionary, i, o, a);
              if (u && u.mark) {
                var s = "dictionary" + (u && u.scope ? "." + u.scope : "") + "." + r;
                return l.h("mark", {
                  style: "background: " + (p ? f(u, s) ? "rgba(119,231,117,.5)" : "rgba(229,226,41,.5)" : "rgba(228,147,51,.5)"),
                  title: r
                }, p);
              }
              return p;
            }, b = function b(n, t) {
              var r = n.children, e = t.intl, o = r && r[0];
              return o && l.cloneElement(o, a(o.attributes, e, !0));
            }, m = function m(n) {
              return function (t) {
                return function (r, e) {
                  var o = "function" == typeof n ? n(r) : n, i = a(o, e.intl);
                  return l.h(t, assign({}, r, i));
                };
              };
            };
            d.intl = d, d.IntlProvider = s, d.Text = g, d.Localizer = b, d.withText = m, module.exports = d;//# sourceMappingURL=preact-i18n.js.map
            /***/
          }, /* 10 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };

            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }

            var types = exports.types = {
              ADD_PLAYER_CLASS: 'shell/ADD_PLAYER_CLASS',
              REMOVE_PLAYER_CLASS: 'shell/REMOVE_PLAYER_CLASS',
              UPDATE_IS_MOBILE: 'shell/UPDATE_IS_MOBILE',
              UPDATE_PRE_PLAYBACK: 'shell/UPDATE_PRE_PLAYBACK',
              UPDATE_PLAYER_WIDTH: 'shell/UPDATE_PLAYER_WIDTH',
              UPDATE_DOCUMENT_WIDTH: 'shell/UPDATE_DOCUMENT_WIDTH',
              UPDATE_PLAYER_HOVER_STATE: 'shell/UPDATE_PLAYER_HOVER_STATE',
              UPDATE_PLAYER_NAV_STATE: 'shell/UPDATE_PLAYER_NAV_STATE'
            };
            var initialState = exports.initialState = {
              playerClasses: [],
              prePlayback: true,
              is_ad: true,
              playerHover: false,
              playerNav: false
            };
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.ADD_PLAYER_CLASS:
                  if (state.playerClasses.includes(action.className)) return state;
                  return _extends({}, state, {playerClasses: [].concat(_toConsumableArray(state.playerClasses), [action.className])});
                case types.REMOVE_PLAYER_CLASS:
                  return _extends({}, state, {
                    playerClasses: state.playerClasses.filter(function (c) {
                      return c !== action.className;
                    })
                  });
                case types.UPDATE_IS_MOBILE:
                  return _extends({}, state, {isMobile: action.isMobile});
                case types.UPDATE_PRE_PLAYBACK:
                  return _extends({}, state, {prePlayback: action.prePlayback});
                case types.UPDATE_PLAYER_WIDTH:
                  return _extends({}, state, {playerWidth: action.playerWidth});
                case types.UPDATE_DOCUMENT_WIDTH:
                  return _extends({}, state, {documentWidth: action.documentWidth});
                case types.UPDATE_PLAYER_HOVER_STATE:
                  return _extends({}, state, {playerHover: action.hover});
                case types.UPDATE_PLAYER_NAV_STATE:
                  return _extends({}, state, {playerNav: action.nav});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              addPlayerClass: function addPlayerClass(className) {
                return {type: types.ADD_PLAYER_CLASS, className: className};
              }, removePlayerClass: function removePlayerClass(className) {
                return {type: types.REMOVE_PLAYER_CLASS, className: className};
              }, updateIsMobile: function updateIsMobile(isMobile) {
                return {type: types.UPDATE_IS_MOBILE, isMobile: isMobile};
              }, updatePrePlayback: function updatePrePlayback(prePlayback) {
                return {type: types.UPDATE_PRE_PLAYBACK, prePlayback: prePlayback};
              }, updatePlayerWidth: function updatePlayerWidth(playerWidth) {
                return {type: types.UPDATE_PLAYER_WIDTH, playerWidth: playerWidth};
              }, updateDocumentWidth: function updateDocumentWidth(documentWidth) {
                return {type: types.UPDATE_DOCUMENT_WIDTH, documentWidth: documentWidth};
              }, updatePlayerHoverState: function updatePlayerHoverState(hover) {
                return {type: types.UPDATE_PLAYER_HOVER_STATE, hover: hover};
              }, updatePlayerNavState: function updatePlayerNavState(nav) {
                return {type: types.UPDATE_PLAYER_NAV_STATE, nav: nav};
              }
            };
            /***/
          }, /* 11 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            Object.defineProperty(__webpack_exports__, "__esModule", {value: true});
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(38);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1__combineReducers__ = __webpack_require__(77);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__ = __webpack_require__(78);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__ = __webpack_require__(79);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_4__compose__ = __webpack_require__(42);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_5__utils_warning__ = __webpack_require__(41);
            /* harmony reexport (binding) */
            __webpack_require__.d(__webpack_exports__, "createStore", function () {
              return __WEBPACK_IMPORTED_MODULE_0__createStore__["b"];
            });
            /* harmony reexport (binding) */
            __webpack_require__.d(__webpack_exports__, "combineReducers", function () {
              return __WEBPACK_IMPORTED_MODULE_1__combineReducers__["a"];
            });
            /* harmony reexport (binding) */
            __webpack_require__.d(__webpack_exports__, "bindActionCreators", function () {
              return __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__["a"];
            });
            /* harmony reexport (binding) */
            __webpack_require__.d(__webpack_exports__, "applyMiddleware", function () {
              return __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__["a"];
            });
            /* harmony reexport (binding) */
            __webpack_require__.d(__webpack_exports__, "compose", function () {
              return __WEBPACK_IMPORTED_MODULE_4__compose__["a"];
            });

            /*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
            function isCrushed() {
            }

            if ("development" !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
              Object(__WEBPACK_IMPORTED_MODULE_5__utils_warning__["a"/* default */])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
            }
            /***/
          }, /* 12 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _loading = __webpack_require__(83);
            var _loading2 = _interopRequireDefault(_loading);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _loading2.default;
            /***/
          }, /* 13 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _playPause = __webpack_require__(86);
            var _playPause2 = _interopRequireDefault(_playPause);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _playPause2.default;
            /***/
          }, /* 14 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {
              UPDATE_SEEKBAR_DRAGGING_STATUS: 'seekbar/UPDATE_SEEKBAR_DRAGGING_STATUS',
              UPDATE_CURRENT_TIME: 'seekbar/UPDATE_CURRENT_TIME',
              UPDATE_DURATION: 'seekbar/UPDATE_DURATION'
            };
            var initialState = exports.initialState = {currentTime: 0, duration: 0, draggingActive: false};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE_SEEKBAR_DRAGGING_STATUS:
                  return _extends({}, state, {draggingActive: action.draggingActive});
                case types.UPDATE_CURRENT_TIME:
                  return _extends({}, state, {currentTime: action.currentTime});
                case types.UPDATE_DURATION:
                  return _extends({}, state, {duration: action.duration});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateSeekbarDraggingStatus: function updateSeekbarDraggingStatus(draggingActive) {
                return {type: types.UPDATE_SEEKBAR_DRAGGING_STATUS, draggingActive: draggingActive};
              }, updateDuration: function updateDuration(duration) {
                return {type: types.UPDATE_DURATION, duration: duration};
              }, updateCurrentTime: function updateCurrentTime(currentTime) {
                return {type: types.UPDATE_CURRENT_TIME, currentTime: currentTime};
              }
            };
            /***/
          }, /* 15 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _seekbar = __webpack_require__(94);
            var _seekbar2 = _interopRequireDefault(_seekbar);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _seekbar2.default;
            /***/
          }, /* 16 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _volume = __webpack_require__(97);
            var _volume2 = _interopRequireDefault(_volume);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _volume2.default;
            /***/
          }, /* 17 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _overlay = __webpack_require__(100);
            var _overlay2 = _interopRequireDefault(_overlay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _overlay2.default;
            /***/
          }, /* 18 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _fullscreen = __webpack_require__(114);
            var _fullscreen2 = _interopRequireDefault(_fullscreen);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _fullscreen2.default;
            /***/
          }, /* 19 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _bottomBar = __webpack_require__(122);
            var _bottomBar2 = _interopRequireDefault(_bottomBar);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _bottomBar2.default;
            /***/
          }, /* 20 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});

            /**
             * Gets config param value
             * @param {*} config property name
             * @param {string} alias component name alias
             * @returns {Object} component config object
             */function getComponentConfig(config, alias) {
              try {
                return config.ui[alias];
              } catch (error) {
                return {};
              }
            }

            exports.default = getComponentConfig;
            /***/
          }, /* 21 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _overlayPlay = __webpack_require__(62);
            var _overlayPlay2 = _interopRequireDefault(_overlayPlay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _overlayPlay2.default;
            /***/
          }, /* 22 *//***/function (module, exports) {
            var g;// This works in non-strict mode
            g = function () {
              return this;
            }();
            try {// This works if eval is allowed (see CSP)
              g = g || Function("return this")() || (1, eval)("this");
            } catch (e) {// This works if the window reference is available
              if ((typeof window === 'undefined' ? 'undefined' : _typeof2(window)) === "object") g = window;
            }// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}
            module.exports = g;
            /***/
          }, /* 23 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {TOGGLE_PLAY: 'play-pause/TOGGLE_PLAY'};
            var initialState = exports.initialState = {isPlaying: false};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.TOGGLE_PLAY:
                  return _extends({}, state, {isPlaying: action.isPlaying});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              toggleIsPlaying: function toggleIsPlaying(isPlaying) {
                return {type: types.TOGGLE_PLAY, isPlaying: isPlaying};
              }
            };
            /***/
          }, /* 24 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.setLogLevel = exports.getLogLevel = exports.LogLevel = undefined;
            var _jsLogger = __webpack_require__(80);
            var JsLogger = _interopRequireWildcard(_jsLogger);

            function _interopRequireWildcard(obj) {
              if (obj && obj.__esModule) {
                return obj;
              } else {
                var newObj = {};
                if (obj != null) {
                  for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                  }
                }
                newObj.default = obj;
                return newObj;
              }
            }

            var LogLevel = {
              "DEBUG": JsLogger.DEBUG,
              "INFO": JsLogger.INFO,
              "TIME": JsLogger.TIME,
              "WARN": JsLogger.WARN,
              "ERROR": JsLogger.ERROR,
              "OFF": JsLogger.OFF
            };
            JsLogger.useDefaults({defaultLevel: JsLogger.ERROR});

            /**
             * get a logger
             * @param {?string} name - the logger name
             * @returns {Object} - the logger class
             */function getLogger(name) {
              if (!name) {
                return JsLogger;
              }
              return JsLogger.get(name);
            }

            /**
             * get the log level
             * @param {?string} name - the logger name
             * @returns {Object} - the log level
             */function getLogLevel(name) {
              return getLogger(name).getLevel();
            }

            /**
             * sets the logger level
             * @param {Object} level - the log level
             * @param {?string} name - the logger name
             * @returns {void}
             */function setLogLevel(level, name) {
              getLogger(name).setLevel(level);
            }

            exports.default = getLogger;
            exports.LogLevel = LogLevel;
            exports.getLogLevel = getLogLevel;
            exports.setLogLevel = setLogLevel;
            /***/
          }, /* 25 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _prePlaybackPlayOverlay = __webpack_require__(82);
            var _prePlaybackPlayOverlay2 = _interopRequireDefault(_prePlaybackPlayOverlay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _prePlaybackPlayOverlay2.default;
            /***/
          }, /* 26 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});

            /**
             * Formatting seconds input into time format
             *
             * @param {number} input number of seconds
             * @returns {string} formatted time string
             */function toHHMMSS(input) {
              var sec_num = parseInt(input, 10);
              var hours = Math.floor(sec_num / 3600);
              var minutes = Math.floor((sec_num - hours * 3600) / 60);
              var seconds = sec_num - hours * 3600 - minutes * 60;
              if (hours < 10) {
                hours = '0' + hours;
              }
              if (minutes < 10) {
                minutes = '0' + minutes;
              }
              if (seconds < 10) {
                seconds = '0' + seconds;
              }
              return '' + (hours !== '00' ? hours + ':' : '') + minutes + ':' + seconds;
            }

            /**
             * Converting formatted time into seconds
             *
             * @param {string} input formatted time
             * @returns {number} number of seconds
             */function toSecondsFromHHMMSS(input) {
              var parts = input.split(':');
              var seconds = 0;
              if (parts.length === 2) {
                if (parseInt(parts[0]) > 59 || parseInt(parts[1]) > 59) {
                  return 0;
                }
                seconds += parseInt(parts[0]) * 60;
                seconds += parseInt(parts[1]);
              }
              return seconds;
            }

            exports.toHHMMSS = toHHMMSS;
            exports.toSecondsFromHHMMSS = toSecondsFromHHMMSS;
            /***/
          }, /* 27 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {
              UPDATE_VOLUME: 'volume/UPDATE_VOLUME',
              UPDATE_VOLUME_DRAGGING_STATUS: 'volume/UPDATE_VOLUME_DRAGGING_STATUS',
              UPDATE_MUTED: 'volume/UPDATE_MUTED'
            };
            var initialState = exports.initialState = {draggingActive: false, volume: 1, muted: false};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE_VOLUME:
                  return _extends({}, state, {volume: action.volume});
                case types.UPDATE_VOLUME_DRAGGING_STATUS:
                  return _extends({}, state, {draggingActive: action.draggingActive});
                case types.UPDATE_MUTED:
                  return _extends({}, state, {muted: action.muted});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateVolume: function updateVolume(volume) {
                return {type: types.UPDATE_VOLUME, volume: volume};
              }, updateVolumeDraggingStatus: function updateVolumeDraggingStatus(draggingActive) {
                return {type: types.UPDATE_VOLUME_DRAGGING_STATUS, draggingActive: draggingActive};
              }, updateMuted: function updateMuted(muted) {
                return {type: types.UPDATE_MUTED, muted: muted};
              }
            };
            /***/
          }, /* 28 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _settings = __webpack_require__(98);
            var _settings2 = _interopRequireDefault(_settings);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _settings2.default;
            /***/
          }, /* 29 *//***/function (module, exports, __webpack_require__) {
            (function (global, factory) {
              true ? module.exports = factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['preact'], factory) : global.preactPortal = factory(global.preact);
            })(this, function (preact) {
              'use strict';
              var classCallCheck = function classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              };
              var inherits = function inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              };
              var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
              };
              var Portal = function (_Component) {
                inherits(Portal, _Component);

                function Portal() {
                  classCallCheck(this, Portal);
                  return possibleConstructorReturn(this, _Component.apply(this, arguments));
                }

                Portal.prototype.componentDidUpdate = function componentDidUpdate(props) {
                  for (var i in props) {
                    if (props[i] !== this.props[i]) {
                      return this.renderLayer();
                    }
                  }
                };
                Portal.prototype.componentDidMount = function componentDidMount() {
                  this.renderLayer();
                };
                Portal.prototype.componentWillUnmount = function componentWillUnmount() {
                  this.renderLayer(false);
                  if (this.remote) this.remote.parentNode.removeChild(this.remote);
                };
                Portal.prototype.findNode = function findNode(node) {
                  return typeof node === 'string' ? document.querySelector(node) : node;
                };
                Portal.prototype.renderLayer = function renderLayer() {
                  var show = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                  if (this.props.into !== this.intoPointer) {
                    this.intoPointer = this.props.into;
                    if (this.into && this.remote) {
                      this.remote = preact.render(preact.h(PortalProxy, null), this.into, this.remote);
                    }
                    this.into = this.findNode(this.props.into);
                  }
                  this.remote = preact.render(preact.h(PortalProxy, {context: this.context}, show && this.props.children || null), this.into, this.remote);
                };
                Portal.prototype.render = function render() {
                  return null;
                };
                return Portal;
              }(preact.Component);
              var PortalProxy = function (_Component2) {
                inherits(PortalProxy, _Component2);

                function PortalProxy() {
                  classCallCheck(this, PortalProxy);
                  return possibleConstructorReturn(this, _Component2.apply(this, arguments));
                }

                PortalProxy.prototype.getChildContext = function getChildContext() {
                  return this.props.context;
                };
                PortalProxy.prototype.render = function render(_ref) {
                  var children = _ref.children;
                  return children && children[0] || null;
                };
                return PortalProxy;
              }(preact.Component);
              return Portal;
            });//# sourceMappingURL=preact-portal.js.map
            /***/
          }, /* 30 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _language = __webpack_require__(106);
            var _language2 = _interopRequireDefault(_language);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _language2.default;
            /***/
          }, /* 31 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {
              TOGGLE_CVAA_OVERLAY: 'cvaa/TOGGLE_CVAA_OVERLAY',
              UPDATE_CAPTIONS_STYLE: 'cvaa/UPDATE_CAPTIONS_STYLE'
            };
            var initialState = exports.initialState = {overlayOpen: false, style: 'default'};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.TOGGLE_CVAA_OVERLAY:
                  return _extends({}, state, {overlayOpen: action.show});
                case types.UPDATE_CAPTIONS_STYLE:
                  return _extends({}, state, {style: action.style});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              toggleCVAAOverlay: function toggleCVAAOverlay(show) {
                return {type: types.TOGGLE_CVAA_OVERLAY, show: show};
              }, updateCaptionsStyle: function updateCaptionsStyle(style) {
                return {type: types.UPDATE_CAPTIONS_STYLE, style: style};
              }
            };
            /***/
          }, /* 32 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _timeDisplay = __webpack_require__(119);
            var _timeDisplay2 = _interopRequireDefault(_timeDisplay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _timeDisplay2.default;
            /***/
          }, /* 33 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _overlayPortal = __webpack_require__(125);
            var _overlayPortal2 = _interopRequireDefault(_overlayPortal);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _overlayPortal2.default;
            /***/
          }, /* 34 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _keyboard = __webpack_require__(126);
            var _keyboard2 = _interopRequireDefault(_keyboard);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _keyboard2.default;
            /***/
          }, /* 35 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _unmuteIndication = __webpack_require__(127);
            var _unmuteIndication2 = _interopRequireDefault(_unmuteIndication);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _unmuteIndication2.default;
            /***/
          }, /* 36 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {
              UPDATE_PLAYER_STATE: 'engine/UPDATE_PLAYER_STATE',
              UPDATE_IS_PLAYING: 'engine/UPDATE_IS_PLAYING',
              UPDATE_IS_ENDED: 'engine/UPDATE_IS_ENDED',
              UPDATE_CURRENT_TIME: 'engine/UPDATE_CURRENT_TIME',
              UPDATE_DURATION: 'engine/UPDATE_DURATION',
              UPDATE_VOLUME: 'engine/UPDATE_VOLUME',
              UPDATE_MUTED: 'engine/UPDATE_MUTED',
              UPDATE_METADATA_LOADING_STATUS: 'engine/UPDATE_METADATA_LOADING_STATUS',
              UPDATE_AUDIO_TRACKS: 'engine/UPDATE_AUDIO_TRACKS',
              UPDATE_VIDEO_TRACKS: 'engine/UPDATE_VIDEO_TRACKS',
              UPDATE_TEXT_TRACKS: 'engine/UPDATE_TEXT_TRACKS',
              UPDATE_AD_BREAK: 'engine/UPDATE_AD_BREAK',
              UPDATE_AD_BREAK_PROGRESS: 'engine/UPDATE_AD_BREAK_PROGRESS',
              UPDATE_AD_BREAK_COMPLETED: 'engine/UPDATE_AD_BREAK_COMPLETED',
              UPDATE_AD_IS_PLAYING: 'engine/UPDATE_AD_IS_PLAYING',
              UPDATE_AD_SKIP_TIME_OFFSET: 'engine/UPDATE_AD_SKIP_TIME_OFFSET',
              UPDATE_AD_SKIPPABLE_STATE: 'engine/UPDATE_AD_SKIPPABLE_STATE',
              UPDATE_AD_URL: 'engine/UPDATE_AD_URL',
              UPDATE_PLAYER_POSTER: 'engine/UPDATE_PLATER_POSTER',
              UPDATE_IS_LIVE: 'engine/UPDATE_IS_LIVE',
              UPDATE_IS_DVR: 'engine/UPDATE_IS_DVR',
              UPDATE_ERROR: 'engine/ERROR'
            };
            var initialState = exports.initialState = {
              isPlaying: false,
              isEnded: false,
              metadataLoaded: false,
              playerState: {previousState: '', currentState: ''},
              poster: '',
              currentTime: 0,
              duration: 0,
              volume: 1,
              muted: false,
              videoTracks: [],
              audioTracks: [],
              textTracks: [],
              adBreak: false,
              adIsPlaying: false,
              adSkipTimeOffset: 0,
              adSkippableState: false,
              isLive: false,
              isDvr: false,
              adProgress: {currentTime: 0, duration: 0},
              adUrl: '',
              hasError: ''
            };
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE_ERROR:
                  return _extends({}, state, {hasError: action.hasError});
                case types.UPDATE_PLAYER_STATE:
                  return _extends({}, state, {playerState: action.playerState});
                case types.UPDATE_IS_PLAYING:
                  return _extends({}, state, {isPlaying: action.isPlaying});
                case types.UPDATE_IS_ENDED:
                  return _extends({}, state, {isEnded: action.isEnded});
                case types.UPDATE_CURRENT_TIME:
                  return _extends({}, state, {currentTime: action.currentTime});
                case types.UPDATE_DURATION:
                  return _extends({}, state, {duration: action.duration});
                case types.UPDATE_VOLUME:
                  return _extends({}, state, {volume: action.volume});
                case types.UPDATE_MUTED:
                  return _extends({}, state, {muted: action.muted});
                case types.UPDATE_METADATA_LOADING_STATUS:
                  return _extends({}, state, {metadataLoaded: action.metadataLoaded});
                case types.UPDATE_AUDIO_TRACKS:
                  return _extends({}, state, {audioTracks: action.tracks});
                case types.UPDATE_VIDEO_TRACKS:
                  return _extends({}, state, {videoTracks: action.tracks});
                case types.UPDATE_TEXT_TRACKS:
                  return _extends({}, state, {textTracks: action.tracks});
                case types.UPDATE_AD_BREAK:
                  return _extends({}, state, {adBreak: action.adBreak});
                case types.UPDATE_AD_BREAK_PROGRESS:
                  return _extends({}, state, {adProgress: action.adProgress});
                case types.UPDATE_AD_BREAK_COMPLETED:
                  return _extends({}, state, {
                    adProgress: {
                      currentTime: state.adProgress.duration,
                      duration: state.adProgress.duration
                    }
                  });
                case types.UPDATE_AD_IS_PLAYING:
                  return _extends({}, state, {adIsPlaying: action.adIsPlaying});
                case types.UPDATE_AD_SKIP_TIME_OFFSET:
                  return _extends({}, state, {adSkipTimeOffset: action.adSkipTimeOffset});
                case types.UPDATE_AD_SKIPPABLE_STATE:
                  return _extends({}, state, {adSkippableState: action.adSkippableState});
                case types.UPDATE_AD_URL:
                  return _extends({}, state, {adUrl: action.adUrl});
                case types.UPDATE_PLAYER_POSTER:
                  return _extends({}, state, {poster: action.poster});
                case types.UPDATE_IS_LIVE:
                  return _extends({}, state, {isLive: action.isLive});
                case types.UPDATE_IS_DVR:
                  return _extends({}, state, {isDvr: action.isDvr});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateHasError: function updateHasError(error) {
                return {type: types.UPDATE_ERROR, hasError: error};
              }, updatePlayerState: function updatePlayerState(prevoiusState, currentState) {
                return {
                  type: types.UPDATE_PLAYER_STATE,
                  playerState: {prevoiusState: prevoiusState, currentState: currentState}
                };
              }, updateIsPlaying: function updateIsPlaying(isPlaying) {
                return {type: types.UPDATE_IS_PLAYING, isPlaying: isPlaying};
              }, updateIsEnded: function updateIsEnded(isEnded) {
                return {type: types.UPDATE_IS_ENDED, isEnded: isEnded};
              }, updateCurrentTime: function updateCurrentTime(currentTime) {
                return {type: types.UPDATE_CURRENT_TIME, currentTime: currentTime};
              }, updateDuration: function updateDuration(duration) {
                return {type: types.UPDATE_DURATION, duration: duration};
              }, updateVolume: function updateVolume(volume) {
                return {type: types.UPDATE_VOLUME, volume: volume};
              }, updateMuted: function updateMuted(muted) {
                return {type: types.UPDATE_MUTED, muted: muted};
              }, updateMetadataLoadingStatus: function updateMetadataLoadingStatus(metadataLoaded) {
                return {type: types.UPDATE_METADATA_LOADING_STATUS, metadataLoaded: metadataLoaded};
              }, updateAudioTracks: function updateAudioTracks(tracks) {
                return {type: types.UPDATE_AUDIO_TRACKS, tracks: tracks};
              }, updateVideoTracks: function updateVideoTracks(tracks) {
                return {type: types.UPDATE_VIDEO_TRACKS, tracks: tracks};
              }, updateTextTracks: function updateTextTracks(tracks) {
                return {type: types.UPDATE_TEXT_TRACKS, tracks: tracks};
              }, updateAdBreak: function updateAdBreak(adBreak) {
                return {type: types.UPDATE_AD_BREAK, adBreak: adBreak};
              }, updateAdBreakProgress: function updateAdBreakProgress(currentTime, duration) {
                return {
                  type: types.UPDATE_AD_BREAK_PROGRESS,
                  adProgress: {currentTime: currentTime, duration: duration}
                };
              }, updateAdBreakCompleted: function updateAdBreakCompleted() {
                return {type: types.UPDATE_AD_BREAK_COMPLETED};
              }, updateAdIsPlaying: function updateAdIsPlaying(adIsPlaying) {
                return {type: types.UPDATE_AD_IS_PLAYING, adIsPlaying: adIsPlaying};
              }, updateAdSkipTimeOffset: function updateAdSkipTimeOffset(adSkipTimeOffset) {
                return {type: types.UPDATE_AD_SKIP_TIME_OFFSET, adSkipTimeOffset: adSkipTimeOffset};
              }, updateAdSkippableState: function updateAdSkippableState(adSkippableState) {
                return {type: types.UPDATE_AD_SKIPPABLE_STATE, adSkippableState: adSkippableState};
              }, updateAdClickUrl: function updateAdClickUrl(adUrl) {
                return {type: types.UPDATE_AD_URL, adUrl: adUrl};
              }, updatePlayerPoster: function updatePlayerPoster(poster) {
                return {type: types.UPDATE_PLAYER_POSTER, poster: poster};
              }, updateIsLive: function updateIsLive(isLive) {
                return {type: types.UPDATE_IS_LIVE, isLive: isLive};
              }, updateIsDvr: function updateIsDvr(isDvr) {
                return {type: types.UPDATE_IS_DVR, isDvr: isDvr};
              }
            };
            /***/
          }, /* 37 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = playbackUI;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _componentConfig = __webpack_require__(20);
            var _componentConfig2 = _interopRequireDefault(_componentConfig);
            var _overlayPlay = __webpack_require__(21);
            var _overlayPlay2 = _interopRequireDefault(_overlayPlay);
            var _prePlaybackPlayOverlay = __webpack_require__(25);
            var _prePlaybackPlayOverlay2 = _interopRequireDefault(_prePlaybackPlayOverlay);
            var _loading = __webpack_require__(12);
            var _loading2 = _interopRequireDefault(_loading);
            var _playPause = __webpack_require__(13);
            var _playPause2 = _interopRequireDefault(_playPause);
            var _rewind = __webpack_require__(90);
            var _rewind2 = _interopRequireDefault(_rewind);
            var _seekbarPlaybackContainer = __webpack_require__(92);
            var _seekbarPlaybackContainer2 = _interopRequireDefault(_seekbarPlaybackContainer);
            var _volume = __webpack_require__(16);
            var _volume2 = _interopRequireDefault(_volume);
            var _settings = __webpack_require__(28);
            var _settings2 = _interopRequireDefault(_settings);
            var _language = __webpack_require__(30);
            var _language2 = _interopRequireDefault(_language);
            var _fullscreen = __webpack_require__(18);
            var _fullscreen2 = _interopRequireDefault(_fullscreen);
            var _timeDisplayPlaybackContainer = __webpack_require__(117);
            var _timeDisplayPlaybackContainer2 = _interopRequireDefault(_timeDisplayPlaybackContainer);
            var _bottomBar = __webpack_require__(19);
            var _bottomBar2 = _interopRequireDefault(_bottomBar);
            var _overlayPortal = __webpack_require__(33);
            var _overlayPortal2 = _interopRequireDefault(_overlayPortal);
            var _keyboard = __webpack_require__(34);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _unmuteIndication = __webpack_require__(35);
            var _unmuteIndication2 = _interopRequireDefault(_unmuteIndication);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            /**
             * Playback ui interface
             *
             * @export
             * @param {*} props component props
             * @returns {React$Element} player ui tree
             */function playbackUI(props) {
              return (0, _preact.h)('div', {className: _style2.default.playbackGuiWWrapper}, (0, _preact.h)(_keyboard2.default, {
                player: props.player,
                config: props.config
              }), (0, _preact.h)(_loading2.default, {player: props.player}), (0, _preact.h)('div', {
                className: _style2.default.playerGui,
                id: 'player-gui'
              }, (0, _preact.h)(_overlayPortal2.default, null), (0, _preact.h)(_unmuteIndication2.default, {player: props.player}), (0, _preact.h)(_overlayPlay2.default, {player: props.player}), (0, _preact.h)(_bottomBar2.default, null, (0, _preact.h)(_seekbarPlaybackContainer2.default, {
                showFramePreview: true,
                showTimeBubble: true,
                player: props.player,
                playerContainer: props.playerContainer,
                config: (0, _componentConfig2.default)(props.config, 'seekbar')
              }), (0, _preact.h)('div', {className: _style2.default.leftControls}, (0, _preact.h)(_playPause2.default, {player: props.player}), (0, _preact.h)(_rewind2.default, {
                player: props.player,
                step: 10
              }), (0, _preact.h)(_timeDisplayPlaybackContainer2.default, {format: 'current / total'})), (0, _preact.h)('div', {className: _style2.default.rightControls}, (0, _preact.h)(_volume2.default, {player: props.player}), (0, _preact.h)(_language2.default, {player: props.player}), (0, _preact.h)(_settings2.default, {player: props.player}), (0, _preact.h)(_fullscreen2.default, {
                player: props.player,
                config: props.config
              })))), (0, _preact.h)(_prePlaybackPlayOverlay2.default, {player: props.player}));
            }

            /***/
          }, /* 38 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export (binding) */
            __webpack_require__.d(__webpack_exports__, "a", function () {
              return ActionTypes;
            });
            /* harmony export (immutable) */
            __webpack_exports__["b"] = createStore;
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(39);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1_symbol_observable__ = __webpack_require__(73);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_symbol_observable__);
            /**
             * These are private action types reserved by Redux.
             * For any unknown actions, you must return the current state.
             * If the current state is undefined, you must return the initial state.
             * Do not reference these action types directly in your code.
             */var ActionTypes = {
              INIT: '@@redux/INIT'/**
               * Creates a Redux store that holds the state tree.
               * The only way to change the data in the store is to call `dispatch()` on it.
               *
               * There should only be a single store in your app. To specify how different
               * parts of the state tree respond to actions, you may combine several reducers
               * into a single reducer function by using `combineReducers`.
               *
               * @param {Function} reducer A function that returns the next state tree, given
               * the current state tree and the action to handle.
               *
               * @param {any} [preloadedState] The initial state. You may optionally specify it
               * to hydrate the state from the server in universal apps, or to restore a
               * previously serialized user session.
               * If you use `combineReducers` to produce the root reducer function, this must be
               * an object with the same shape as `combineReducers` keys.
               *
               * @param {Function} [enhancer] The store enhancer. You may optionally specify it
               * to enhance the store with third-party capabilities such as middleware,
               * time travel, persistence, etc. The only store enhancer that ships with Redux
               * is `applyMiddleware()`.
               *
               * @returns {Store} A Redux store that lets you read the state, dispatch actions
               * and subscribe to changes.
               */
            };

            function createStore(reducer, preloadedState, enhancer) {
              var _ref2;
              if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
                enhancer = preloadedState;
                preloadedState = undefined;
              }
              if (typeof enhancer !== 'undefined') {
                if (typeof enhancer !== 'function') {
                  throw new Error('Expected the enhancer to be a function.');
                }
                return enhancer(createStore)(reducer, preloadedState);
              }
              if (typeof reducer !== 'function') {
                throw new Error('Expected the reducer to be a function.');
              }
              var currentReducer = reducer;
              var currentState = preloadedState;
              var currentListeners = [];
              var nextListeners = currentListeners;
              var isDispatching = false;

              function ensureCanMutateNextListeners() {
                if (nextListeners === currentListeners) {
                  nextListeners = currentListeners.slice();
                }
              }

              /**
               * Reads the state tree managed by the store.
               *
               * @returns {any} The current state tree of your application.
               */function getState() {
                return currentState;
              }

              /**
               * Adds a change listener. It will be called any time an action is dispatched,
               * and some part of the state tree may potentially have changed. You may then
               * call `getState()` to read the current state tree inside the callback.
               *
               * You may call `dispatch()` from a change listener, with the following
               * caveats:
               *
               * 1. The subscriptions are snapshotted just before every `dispatch()` call.
               * If you subscribe or unsubscribe while the listeners are being invoked, this
               * will not have any effect on the `dispatch()` that is currently in progress.
               * However, the next `dispatch()` call, whether nested or not, will use a more
               * recent snapshot of the subscription list.
               *
               * 2. The listener should not expect to see all state changes, as the state
               * might have been updated multiple times during a nested `dispatch()` before
               * the listener is called. It is, however, guaranteed that all subscribers
               * registered before the `dispatch()` started will be called with the latest
               * state by the time it exits.
               *
               * @param {Function} listener A callback to be invoked on every dispatch.
               * @returns {Function} A function to remove this change listener.
               */function subscribe(listener) {
                if (typeof listener !== 'function') {
                  throw new Error('Expected listener to be a function.');
                }
                var isSubscribed = true;
                ensureCanMutateNextListeners();
                nextListeners.push(listener);
                return function unsubscribe() {
                  if (!isSubscribed) {
                    return;
                  }
                  isSubscribed = false;
                  ensureCanMutateNextListeners();
                  var index = nextListeners.indexOf(listener);
                  nextListeners.splice(index, 1);
                };
              }

              /**
               * Dispatches an action. It is the only way to trigger a state change.
               *
               * The `reducer` function, used to create the store, will be called with the
               * current state tree and the given `action`. Its return value will
               * be considered the **next** state of the tree, and the change listeners
               * will be notified.
               *
               * The base implementation only supports plain object actions. If you want to
               * dispatch a Promise, an Observable, a thunk, or something else, you need to
               * wrap your store creating function into the corresponding middleware. For
               * example, see the documentation for the `redux-thunk` package. Even the
               * middleware will eventually dispatch plain object actions using this method.
               *
               * @param {Object} action A plain object representing “what changed”. It is
               * a good idea to keep actions serializable so you can record and replay user
               * sessions, or use the time travelling `redux-devtools`. An action must have
               * a `type` property which may not be `undefined`. It is a good idea to use
               * string constants for action types.
               *
               * @returns {Object} For convenience, the same action object you dispatched.
               *
               * Note that, if you use a custom middleware, it may wrap `dispatch()` to
               * return something else (for example, a Promise you can await).
               */function dispatch(action) {
                if (!Object(__WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__["a"/* default */])(action)) {
                  throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
                }
                if (typeof action.type === 'undefined') {
                  throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
                }
                if (isDispatching) {
                  throw new Error('Reducers may not dispatch actions.');
                }
                try {
                  isDispatching = true;
                  currentState = currentReducer(currentState, action);
                } finally {
                  isDispatching = false;
                }
                var listeners = currentListeners = nextListeners;
                for (var i = 0; i < listeners.length; i++) {
                  var listener = listeners[i];
                  listener();
                }
                return action;
              }

              /**
               * Replaces the reducer currently used by the store to calculate the state.
               *
               * You might need this if your app implements code splitting and you want to
               * load some of the reducers dynamically. You might also need this if you
               * implement a hot reloading mechanism for Redux.
               *
               * @param {Function} nextReducer The reducer for the store to use instead.
               * @returns {void}
               */function replaceReducer(nextReducer) {
                if (typeof nextReducer !== 'function') {
                  throw new Error('Expected the nextReducer to be a function.');
                }
                currentReducer = nextReducer;
                dispatch({type: ActionTypes.INIT});
              }

              /**
               * Interoperability point for observable/reactive libraries.
               * @returns {observable} A minimal observable of state changes.
               * For more information, see the observable proposal:
               * https://github.com/tc39/proposal-observable
               */function observable() {
                var _ref;
                var outerSubscribe = subscribe;
                return _ref = {
                  /**
                   * The minimal observable subscription method.
                   * @param {Object} observer Any object that can be used as an observer.
                   * The observer object should have a `next` method.
                   * @returns {subscription} An object with an `unsubscribe` method that can
                   * be used to unsubscribe the observable from the store, and prevent further
                   * emission of values from the observable.
                   */subscribe: function subscribe(observer) {
                    if ((typeof observer === 'undefined' ? 'undefined' : _typeof2(observer)) !== 'object') {
                      throw new TypeError('Expected the observer to be an object.');
                    }

                    function observeState() {
                      if (observer.next) {
                        observer.next(getState());
                      }
                    }

                    observeState();
                    var unsubscribe = outerSubscribe(observeState);
                    return {unsubscribe: unsubscribe};
                  }
                }, _ref[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = function () {
                  return this;
                }, _ref;
              }// When a store is created, an "INIT" action is dispatched so that every
// reducer returns their initial state. This effectively populates
// the initial state tree.
              dispatch({type: ActionTypes.INIT});
              return _ref2 = {
                dispatch: dispatch,
                subscribe: subscribe,
                getState: getState,
                replaceReducer: replaceReducer
              }, _ref2[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = observable, _ref2;
            }

            /***/
          }, /* 39 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(65);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__ = __webpack_require__(70);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(72);
            /** `Object#toString` result references. */var objectTag = '[object Object]';
            /** Used for built-in method references. */var funcProto = Function.prototype,
              objectProto = Object.prototype;
            /** Used to resolve the decompiled source of functions. */var funcToString = funcProto.toString;
            /** Used to check objects for own properties. */var hasOwnProperty = objectProto.hasOwnProperty;
            /** Used to infer the `Object` constructor. */var objectCtorString = funcToString.call(Object);

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
 *   this.a = 1;
 * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */function isPlainObject(value) {
              if (!Object(__WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__["a"/* default */])(value) || Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"/* default */])(value) != objectTag) {
                return false;
              }
              var proto = Object(__WEBPACK_IMPORTED_MODULE_1__getPrototype_js__["a"/* default */])(value);
              if (proto === null) {
                return true;
              }
              var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
              return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
            }

            /* harmony default export */
            __webpack_exports__["a"] = isPlainObject;
            /***/
          }, /* 40 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(66);
            /** Built-in value references. */var _Symbol2 = __WEBPACK_IMPORTED_MODULE_0__root_js__["a"/* default */].Symbol;
            /* harmony default export */
            __webpack_exports__["a"] = _Symbol2;
            /***/
          }, /* 41 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export (immutable) */
            __webpack_exports__["a"] = warning;

            /**
             * Prints a warning in the console if it exists.
             *
             * @param {String} message The warning message.
             * @returns {void}
             */function warning(message) {/* eslint-disable no-console */
              if (typeof console !== 'undefined' && typeof console.error === 'function') {
                console.error(message);
              }
              /* eslint-enable no-console */
              try {// This error was thrown as a convenience so that if you enable
// "break on all exceptions" in your console,
// it would pause the execution at this line.
                throw new Error(message);
                /* eslint-disable no-empty */
              } catch (e) {
              }
              /* eslint-enable no-empty */
            }

            /***/
          }, /* 42 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export (immutable) */
            __webpack_exports__["a"] = compose;

            /**
             * Composes single-argument functions from right to left. The rightmost
             * function can take multiple arguments as it provides the signature for
             * the resulting composite function.
             *
             * @param {...Function} funcs The functions to compose.
             * @returns {Function} A function obtained by composing the argument functions
             * from right to left. For example, compose(f, g, h) is identical to doing
             * (...args) => f(g(h(...args))).
             */function compose() {
              for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
                funcs[_key] = arguments[_key];
              }
              if (funcs.length === 0) {
                return function (arg) {
                  return arg;
                };
              }
              if (funcs.length === 1) {
                return funcs[0];
              }
              return funcs.reduce(function (a, b) {
                return function () {
                  return a(b.apply(undefined, arguments));
                };
              });
            }

            /***/
          }, /* 43 *//***/function (module, exports) {
            module.exports = __WEBPACK_EXTERNAL_MODULE_43__;
            /***/
          }, /* 44 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {UPDATE_LOADING_SPINNER_STATE: 'loading/UPDATE_LOADING_SPINNER_STATE'};
            var initialState = exports.initialState = {show: false};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE_LOADING_SPINNER_STATE:
                  return _extends({}, state, {show: action.show});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateLoadingSpinnerState: function updateLoadingSpinnerState(show) {
                return {type: types.UPDATE_LOADING_SPINNER_STATE, show: show};
              }
            };
            /***/
          }, /* 45 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {
              UPDATE_QUALITY: 'settings/UPDATE_QUALITY',
              UPDATE_SPEED: 'settings/UPDATE_SPEED'
            };
            var initialState = exports.initialState = {quality: 1, speed: 2};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE_QUALITY:
                  return _extends({}, state, {quality: action.quality});
                case types.UPDATE_SPEED:
                  return _extends({}, state, {speed: action.speed});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateQuality: function updateQuality(quality) {
                return {type: types.UPDATE_QUALITY, quality: quality};
              }, updateSpeed: function updateSpeed(speed) {
                return {type: types.UPDATE_SPEED, speed: speed};
              }
            };
            /***/
          }, /* 46 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _smartContainer = __webpack_require__(99);
            var _smartContainer2 = _interopRequireDefault(_smartContainer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _smartContainer2.default;
            /***/
          }, /* 47 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _smartContainer = __webpack_require__(101);
            var _smartContainer2 = _interopRequireDefault(_smartContainer);
            var _preact = __webpack_require__(0);
            var _dropdown = __webpack_require__(48);
            var _dropdown2 = _interopRequireDefault(_dropdown);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * SmartContainerItem component
             *
             * @class SmartContainerItem
             * @extends {Component}
             */var SmartContainerItem = function (_Component) {
              _inherits(SmartContainerItem, _Component);

              function SmartContainerItem() {
                _classCallCheck(this, SmartContainerItem);
                return _possibleConstructorReturn(this, (SmartContainerItem.__proto__ || Object.getPrototypeOf(SmartContainerItem)).apply(this, arguments));
              }

              _createClass(SmartContainerItem, [{
                key: 'render', /**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof SmartContainer
                 */value: function render(props) {
                  return (0, _preact.h)('div', {className: [_smartContainer2.default.smartContainerItem, _smartContainer2.default.selectMenuItem].join(' ')}, (0, _preact.h)('label', {htmlFor: _icon.IconType.Quality}, props.icon ? (0, _preact.h)('div', {className: _smartContainer2.default.labelIcon}, (0, _preact.h)(_icon2.default, {type: props.icon})) : undefined, props.label), (0, _preact.h)(_dropdown2.default, {
                    onSelect: function onSelect(o) {
                      return props.onSelect(o);
                    }, options: props.options
                  }));
                }
              }]);
              return SmartContainerItem;
            }(_preact.Component);
            exports.default = SmartContainerItem;
            /***/
          }, /* 48 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _dropdown = __webpack_require__(103);
            var _dropdown2 = _interopRequireDefault(_dropdown);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _dropdown2.default;
            /***/
          }, /* 49 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {UPDATE_FULLSCREEN: 'fullscreen/UPDATE_FULLSCREEN'};
            var initialState = exports.initialState = {fullscreen: false};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE_FULLSCREEN:
                  return _extends({}, state, {fullscreen: action.fullscreen});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateFullscreen: function updateFullscreen(fullscreen) {
                return {type: types.UPDATE_FULLSCREEN, fullscreen: fullscreen};
              }
            };
            /***/
          }, /* 50 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = adsUI;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _loading = __webpack_require__(12);
            var _loading2 = _interopRequireDefault(_loading);
            var _playPause = __webpack_require__(13);
            var _playPause2 = _interopRequireDefault(_playPause);
            var _seekbarAdsContainer = __webpack_require__(128);
            var _seekbarAdsContainer2 = _interopRequireDefault(_seekbarAdsContainer);
            var _volume = __webpack_require__(16);
            var _volume2 = _interopRequireDefault(_volume);
            var _fullscreen = __webpack_require__(18);
            var _fullscreen2 = _interopRequireDefault(_fullscreen);
            var _timeDisplayAdsContainer = __webpack_require__(130);
            var _timeDisplayAdsContainer2 = _interopRequireDefault(_timeDisplayAdsContainer);
            var _adSkip = __webpack_require__(132);
            var _adSkip2 = _interopRequireDefault(_adSkip);
            var _adLearnMore = __webpack_require__(136);
            var _adLearnMore2 = _interopRequireDefault(_adLearnMore);
            var _topBar = __webpack_require__(51);
            var _topBar2 = _interopRequireDefault(_topBar);
            var _bottomBar = __webpack_require__(19);
            var _bottomBar2 = _interopRequireDefault(_bottomBar);
            var _unmuteIndication = __webpack_require__(35);
            var _unmuteIndication2 = _interopRequireDefault(_unmuteIndication);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            /**
             * Ads ui interface
             *
             * @export
             * @param {*} props component props
             * @returns {?HTMLElement} player ui tree
             */function adsUI(props) {
              if (useDefaultAdsUi(props)) {
                return undefined;
              }
              var adsUiCustomization = getAdsUiCustomization();
              return (0, _preact.h)('div', {className: _style2.default.adGuiWrapper}, (0, _preact.h)(_loading2.default, {player: props.player}), (0, _preact.h)('div', {
                className: _style2.default.playerGui,
                id: 'player-gui'
              }, (0, _preact.h)(_unmuteIndication2.default, {
                player: props.player,
                hasTopBar: true
              }), (0, _preact.h)('div', null, (0, _preact.h)(_topBar2.default, null, (0, _preact.h)('div', {className: _style2.default.leftControls}, (0, _preact.h)('span', {className: _style2.default.fontSizeBase}, 'Advertisement')), (0, _preact.h)('div', {className: _style2.default.rightControls}, adsUiCustomization.learnMoreButton ? (0, _preact.h)(_adLearnMore2.default, null) : undefined)), adsUiCustomization.skipButton ? (0, _preact.h)(_adSkip2.default, {player: props.player}) : undefined), (0, _preact.h)(_bottomBar2.default, null, (0, _preact.h)(_seekbarAdsContainer2.default, {
                adBreak: true,
                showFramePreview: true,
                showTimeBubble: true,
                player: props.player,
                playerContainer: props.playerContainer
              }), (0, _preact.h)('div', {className: _style2.default.leftControls}, (0, _preact.h)(_playPause2.default, {player: props.player}), (0, _preact.h)(_timeDisplayAdsContainer2.default, null)), (0, _preact.h)('div', {className: _style2.default.rightControls}, (0, _preact.h)(_volume2.default, {player: props.player}), (0, _preact.h)(_fullscreen2.default, {
                player: props.player,
                config: props.config
              })))));
            }

            /**
             * Gets the ads ui customization settings
             * @returns {Object} - Customization object
             */function getAdsUiCustomization() {
              return {learnMoreButton: useCustomLearnMoreButton(), skipButton: useCustomSkipButton()};
            }

            /**
             * Whether the default ads ui should be shown or not.
             * @param {any} props - component props
             * @returns {boolean} - Whether the default ads ui should be shown or not.
             */function useDefaultAdsUi(props) {
              try {
                var isMobile = !!props.player.env.device.type;
                var adsRenderingSettings = props.player.config.plugins.ima.adsRenderingSettings;
                var useStyledLinearAds = adsRenderingSettings && adsRenderingSettings.useStyledLinearAds;
                return isMobile || useStyledLinearAds;
              } catch (e) {
                return false;
              }
            }

            /**
             * @returns {boolean} - Whether to use playkit skip button or not.
             */function useCustomSkipButton() {//TODO: false until we develop are own ads manager
              return false;
            }

            /**
             * @returns {boolean} - Whether to use playkit learn more button or not.
             */function useCustomLearnMoreButton() {//TODO: false until we develop are own ads manager
              return false;
            }

            /***/
          }, /* 51 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _topBar = __webpack_require__(140);
            var _topBar2 = _interopRequireDefault(_topBar);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _topBar2.default;
            /***/
          }, /* 52 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = liveUI;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _overlayPlay = __webpack_require__(21);
            var _overlayPlay2 = _interopRequireDefault(_overlayPlay);
            var _prePlaybackPlayOverlay = __webpack_require__(25);
            var _prePlaybackPlayOverlay2 = _interopRequireDefault(_prePlaybackPlayOverlay);
            var _loading = __webpack_require__(12);
            var _loading2 = _interopRequireDefault(_loading);
            var _playPause = __webpack_require__(13);
            var _playPause2 = _interopRequireDefault(_playPause);
            var _seekbarLivePlaybackContainer = __webpack_require__(143);
            var _seekbarLivePlaybackContainer2 = _interopRequireDefault(_seekbarLivePlaybackContainer);
            var _volume = __webpack_require__(16);
            var _volume2 = _interopRequireDefault(_volume);
            var _settings = __webpack_require__(28);
            var _settings2 = _interopRequireDefault(_settings);
            var _language = __webpack_require__(30);
            var _language2 = _interopRequireDefault(_language);
            var _fullscreen = __webpack_require__(18);
            var _fullscreen2 = _interopRequireDefault(_fullscreen);
            var _bottomBar = __webpack_require__(19);
            var _bottomBar2 = _interopRequireDefault(_bottomBar);
            var _overlayPortal = __webpack_require__(33);
            var _overlayPortal2 = _interopRequireDefault(_overlayPortal);
            var _keyboard = __webpack_require__(34);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _liveTag = __webpack_require__(145);
            var _liveTag2 = _interopRequireDefault(_liveTag);
            var _unmuteIndication = __webpack_require__(35);
            var _unmuteIndication2 = _interopRequireDefault(_unmuteIndication);
            var _componentConfig = __webpack_require__(20);
            var _componentConfig2 = _interopRequireDefault(_componentConfig);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            /**
             * Live ui intrface
             *
             * @export
             * @param {*} props component props
             * @returns {React$Element<any>} player ui tree
             */function liveUI(props) {
              return (0, _preact.h)('div', {className: _style2.default.playbackGuiWWrapper}, (0, _preact.h)(_keyboard2.default, {
                player: props.player,
                config: props.config
              }), (0, _preact.h)(_loading2.default, {player: props.player}), (0, _preact.h)('div', {
                className: _style2.default.playerGui,
                id: 'player-gui'
              }, (0, _preact.h)(_overlayPortal2.default, null), (0, _preact.h)(_unmuteIndication2.default, null), (0, _preact.h)(_overlayPlay2.default, {player: props.player}), (0, _preact.h)(_bottomBar2.default, null, (0, _preact.h)(_seekbarLivePlaybackContainer2.default, {
                showFramePreview: true,
                showTimeBubble: true,
                player: props.player,
                playerContainer: props.playerContainer,
                config: (0, _componentConfig2.default)(props.config, 'seekbar')
              }), (0, _preact.h)('div', {className: _style2.default.leftControls}, (0, _preact.h)(_playPause2.default, {player: props.player}), (0, _preact.h)(_liveTag2.default, {player: props.player})), (0, _preact.h)('div', {className: _style2.default.rightControls}, (0, _preact.h)(_volume2.default, {player: props.player}), (0, _preact.h)(_language2.default, {player: props.player}), (0, _preact.h)(_settings2.default, {player: props.player}), (0, _preact.h)(_fullscreen2.default, {
                player: props.player,
                config: props.config
              })))), (0, _preact.h)(_prePlaybackPlayOverlay2.default, {player: props.player}));
            }

            /***/
          }, /* 53 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = errorUI;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _errorOverlay = __webpack_require__(54);
            var _errorOverlay2 = _interopRequireDefault(_errorOverlay);
            var _componentConfig = __webpack_require__(20);
            var _componentConfig2 = _interopRequireDefault(_componentConfig);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            /**
             * Error ui interface
             *
             * @export
             * @param {*} props component props
             * @returns {React$Element} player ui tree
             */function errorUI(props) {
              return (0, _preact.h)('div', {className: _style2.default.playbackGuiWWrapper}, (0, _preact.h)(_errorOverlay2.default, {
                config: (0, _componentConfig2.default)(props.config, 'errorOverlay'),
                player: props.player,
                updateHasError: function updateHasError(error) {
                  return props.updateHasError(error);
                }
              }));
            }

            /***/
          }, /* 54 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _errorOverlay = __webpack_require__(149);
            var _errorOverlay2 = _interopRequireDefault(_errorOverlay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _errorOverlay2.default;
            /***/
          }, /* 55 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var types = exports.types = {TOGGLE_SHARE_OVERLAY: 'share/TOGGLE_SHARE_OVERLAY'};
            var initialState = exports.initialState = {overlayOpen: false};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.TOGGLE_SHARE_OVERLAY:
                  return _extends({}, state, {overlayOpen: action.show});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              toggleShareOverlay: function toggleShareOverlay(show) {
                return {type: types.TOGGLE_SHARE_OVERLAY, show: show};
              }
            };
            /***/
          }, /* 56 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.actions = exports.initialState = exports.types = undefined;
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _playkitJs = __webpack_require__(43);

            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {value: value, enumerable: true, configurable: true, writable: true});
              } else {
                obj[key] = value;
              }
              return obj;
            }

            var types = exports.types = {
              UPDATE: 'config/UPDATE',
              UPDATE_COMPONENT: 'config/UPDATE_COMPONENT',
              RESET: 'config/RESET'
            };
            var initialState = exports.initialState = {ui: {seekbar: {}, shell: {}, errorOverlay: {}}};
            exports.default = function () {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments[1];
              switch (action.type) {
                case types.UPDATE: {
                  var config = _playkitJs.Utils.Object.mergeDeep(state, action.config);
                  return _extends({}, state, config);
                }
                case types.UPDATE_COMPONENT:
                  return _extends({}, state, {ui: _extends({}, state.ui, _defineProperty({}, action.componentAlias, _playkitJs.Utils.Object.mergeDeep(state.ui[action.componentAlias], action.config)))});
                default:
                  return state;
              }
            };
            var actions = exports.actions = {
              updateConfig: function updateConfig(config) {
                return {type: types.UPDATE, config: config};
              }, updateComponentConfig: function updateComponentConfig(componentAlias, config) {
                return {type: types.UPDATE_COMPONENT, componentAlias: componentAlias, config: config};
              }
            };
            /***/
          }, /* 57 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _logger = __webpack_require__(24);

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var UIOptions = function () {
              _createClass(UIOptions, [{
                key: 'targetId', get: function get() {
                  return this._targetId;
                }
              }, {
                key: 'logLevel', get: function get() {
                  return this._logLevel;
                }, set: function set(value) {
                  if (_logger.LogLevel[value]) {
                    this._logLevel = value;
                  }
                }
              }]);

              function UIOptions(targetId, logLevel) {
                _classCallCheck(this, UIOptions);
                this._targetId = targetId;
                this.logLevel = logLevel || 'ERROR';
              }

              _createClass(UIOptions, [{
                key: 'toJSON', value: function toJSON() {
                  return {targetId: this.targetId, logLevel: this.logLevel};
                }
              }]);
              return UIOptions;
            }();
            exports.default = UIOptions;
            /***/
          }, /* 58 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var UIComponentConfig = function () {
              _createClass(UIComponentConfig, [{
                key: "component", get: function get() {
                  return this._component;
                }
              }, {
                key: "config", get: function get() {
                  return this._config;
                }, set: function set(value) {
                  this._config = value;
                }
              }]);

              function UIComponentConfig(component, config) {
                _classCallCheck(this, UIComponentConfig);
                this._component = component;
                this._config = config;
              }

              _createClass(UIComponentConfig, [{
                key: "toJSON", value: function toJSON() {
                  return {component: this.component, config: this.config};
                }
              }]);
              return UIComponentConfig;
            }();
            exports.default = UIComponentConfig;
            /***/
          }, /* 59 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.NAME = exports.VERSION = exports.UIManager = exports.UIComponentConfig = exports.UIOptions = exports.ErrorOverlay = exports.KeyboardControl = exports.OverlayPortal = exports.BottomBar = exports.TopBar = exports.TimeDisplay = exports.FullscreenControl = exports.LanguageControl = exports.SettingsControl = exports.ShareControl = exports.VolumeControl = exports.SeekBarControl = exports.PlayPauseControl = exports.Loading = exports.PrePlaybackPlayOverlay = exports.OverlayPlay = exports.errorUI = exports.liveUI = exports.adsUI = exports.playbackUI = exports.h = undefined;
            var _preact = __webpack_require__(0);
            Object.defineProperty(exports, 'h', {
              enumerable: true, get: function get() {
                return _preact.h;
              }
            });
            var _playback = __webpack_require__(37);
            Object.defineProperty(exports, 'playbackUI', {
              enumerable: true, get: function get() {
                return _interopRequireDefault(_playback).default;
              }
            });
            var _ads = __webpack_require__(50);
            Object.defineProperty(exports, 'adsUI', {
              enumerable: true, get: function get() {
                return _interopRequireDefault(_ads).default;
              }
            });
            var _live = __webpack_require__(52);
            Object.defineProperty(exports, 'liveUI', {
              enumerable: true, get: function get() {
                return _interopRequireDefault(_live).default;
              }
            });
            var _error = __webpack_require__(53);
            Object.defineProperty(exports, 'errorUI', {
              enumerable: true, get: function get() {
                return _interopRequireDefault(_error).default;
              }
            });
            var _overlayPlay = __webpack_require__(21);
            Object.defineProperty(exports, 'OverlayPlay', {
              enumerable: true, get: function get() {
                return _overlayPlay.OverlayPlay;
              }
            });
            var _prePlaybackPlayOverlay = __webpack_require__(25);
            Object.defineProperty(exports, 'PrePlaybackPlayOverlay', {
              enumerable: true, get: function get() {
                return _prePlaybackPlayOverlay.PrePlaybackPlayOverlay;
              }
            });
            var _loading = __webpack_require__(12);
            Object.defineProperty(exports, 'Loading', {
              enumerable: true, get: function get() {
                return _loading.Loading;
              }
            });
            var _playPause = __webpack_require__(13);
            Object.defineProperty(exports, 'PlayPauseControl', {
              enumerable: true, get: function get() {
                return _playPause.PlayPauseControl;
              }
            });
            var _seekbar = __webpack_require__(15);
            Object.defineProperty(exports, 'SeekBarControl', {
              enumerable: true, get: function get() {
                return _seekbar.SeekBarControl;
              }
            });
            var _volume = __webpack_require__(16);
            Object.defineProperty(exports, 'VolumeControl', {
              enumerable: true, get: function get() {
                return _volume.VolumeControl;
              }
            });
            var _share = __webpack_require__(150);
            Object.defineProperty(exports, 'ShareControl', {
              enumerable: true, get: function get() {
                return _share.ShareControl;
              }
            });
            var _settings = __webpack_require__(28);
            Object.defineProperty(exports, 'SettingsControl', {
              enumerable: true, get: function get() {
                return _settings.SettingsControl;
              }
            });
            var _language = __webpack_require__(30);
            Object.defineProperty(exports, 'LanguageControl', {
              enumerable: true, get: function get() {
                return _language.LanguageControl;
              }
            });
            var _fullscreen = __webpack_require__(18);
            Object.defineProperty(exports, 'FullscreenControl', {
              enumerable: true, get: function get() {
                return _fullscreen.FullscreenControl;
              }
            });
            var _timeDisplay = __webpack_require__(32);
            Object.defineProperty(exports, 'TimeDisplay', {
              enumerable: true, get: function get() {
                return _timeDisplay.TimeDisplay;
              }
            });
            var _topBar = __webpack_require__(51);
            Object.defineProperty(exports, 'TopBar', {
              enumerable: true, get: function get() {
                return _topBar.TopBar;
              }
            });
            var _bottomBar = __webpack_require__(19);
            Object.defineProperty(exports, 'BottomBar', {
              enumerable: true, get: function get() {
                return _bottomBar.BottomBar;
              }
            });
            var _overlayPortal = __webpack_require__(33);
            Object.defineProperty(exports, 'OverlayPortal', {
              enumerable: true, get: function get() {
                return _overlayPortal.OverlayPortal;
              }
            });
            var _keyboard = __webpack_require__(34);
            Object.defineProperty(exports, 'KeyboardControl', {
              enumerable: true, get: function get() {
                return _keyboard.KeyboardControl;
              }
            });
            var _errorOverlay = __webpack_require__(54);
            Object.defineProperty(exports, 'ErrorOverlay', {
              enumerable: true, get: function get() {
                return _errorOverlay.ErrorOverlay;
              }
            });
            var _uiManager = __webpack_require__(154);
            var _uiManager2 = _interopRequireDefault(_uiManager);
            var _uiOptions = __webpack_require__(57);
            var _uiOptions2 = _interopRequireDefault(_uiOptions);
            var _componentConfig = __webpack_require__(58);
            var _componentConfig2 = _interopRequireDefault(_componentConfig);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.UIOptions = _uiOptions2.default;
            exports.UIComponentConfig = _componentConfig2.default;
            exports.UIManager = _uiManager2.default;
            exports.VERSION = "0.16.1";
            exports.NAME = "playkit-js-ui";
            /***/
          }, /* 60 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-row {\n  display: block; }\n  .playkit-row:after {\n    content: '';\n    clear: both;\n    display: block; }\n\n.playkit-d-inline-block {\n  display: inline-block; }\n\n.playkit-mobile-hidden-select {\n  display: block;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  width: 100%;\n  height: 100%; }\n\n.playkit-font-size-base {\n  font-size: 15px; }\n\n.playkit-form-group {\n  margin: 10px 0;\n  position: relative;\n  max-width: 100%; }\n  .playkit-form-group.playkit-has-error .playkit-form-control {\n    border-color: #db1f26; }\n    .playkit-form-group.playkit-has-error .playkit-form-control:focus {\n      border-color: #fff; }\n  .playkit-form-group.playkit-has-icon .playkit-form-control {\n    padding-left: 34px; }\n  .playkit-form-group .playkit-icon {\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 32px;\n    height: 32px;\n    fill: rgba(255, 255, 255, 0.4); }\n\n.playkit-form-control {\n  height: 36px;\n  width: 100%;\n  min-width: 72px;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, 0.4);\n  font-size: 15px;\n  line-height: 18px;\n  color: #fff;\n  padding: 8px 10px;\n  text-overflow: ellipsis; }\n  .playkit-form-control::-webkit-input-placeholder {\n    color: rgba(255, 255, 255, 0.6); }\n  .playkit-form-control:focus {\n    background-color: #fff;\n    border-color: #fff;\n    color: #333; }\n    .playkit-form-control:focus::-webkit-input-placeholder {\n      color: #ccc; }\n    .playkit-form-control:focus + .playkit-icon {\n      fill: #999; }\n\ntextarea.playkit-form-control {\n  min-height: 72px; }\n\n.playkit-player select {\n  font-size: 15px;\n  font-family: sans-serif;\n  color: #fff;\n  -webkit-appearance: none;\n  border: 0;\n  background: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23FFFFFF' viewBox='0 0 1024 1024'><path d='M301.255 338.745c-24.994-24.994-65.516-24.994-90.51 0s-24.994 65.516 0 90.51l256 256c24.994 24.994 65.516 24.994 90.51 0l256-256c24.994-24.994 24.994-65.516 0-90.51s-65.516-24.994-90.51 0l-210.745 210.745-210.745-210.745z' /></svg>\") no-repeat;\n  background-size: 16px;\n  background-position: 100% center;\n  background-repeat: no-repeat;\n  padding-right: 24px; }\n\n.playkit-checkbox {\n  font-size: 15px;\n  position: relative; }\n  .playkit-checkbox input {\n    display: none; }\n  .playkit-checkbox label:before {\n    height: 16px;\n    width: 16px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, 0.4);\n    margin-right: 8px;\n    display: inline-block;\n    content: '';\n    vertical-align: middle; }\n  .playkit-checkbox input:checked + label:before {\n    border: 1px solid #fff;\n    background: #fff; }\n\n.playkit-form-group-row {\n  font-size: 15px;\n  margin: 24px 0; }\n  .playkit-form-group-row:after {\n    clear: both;\n    content: ' ';\n    display: block; }\n  .playkit-form-group-row label {\n    float: left;\n    color: rgba(244, 244, 244, 0.8); }\n  .playkit-form-group-row .playkit-dropdown {\n    float: right; }\n\n.playkit-btn {\n  text-decoration: none;\n  height: 36px;\n  border-radius: 18px;\n  color: #fff;\n  line-height: 36px;\n  font-weight: bold;\n  cursor: pointer;\n  display: inline-block;\n  padding: 0 24px; }\n  .playkit-btn.playkit-btn-block {\n    display: block; }\n  .playkit-btn.playkit-btn-dark-transparent {\n    background-color: rgba(0, 0, 0, 0.5);\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    line-height: 32px; }\n    .playkit-btn.playkit-btn-dark-transparent:hover {\n      color: #fff;\n      border: 2px solid rgba(255, 255, 255, 0.4); }\n  .playkit-btn.playkit-btn-branded {\n    background-color: #01ACCD; }\n    .playkit-btn.playkit-btn-branded:hover {\n      color: #fff; }\n\n.playkit-btn-rounded {\n  height: 36px;\n  width: 36px;\n  min-width: 36px;\n  min-height: 36px;\n  border-radius: 18px;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: inline-block;\n  padding: 2px; }\n\n.playkit-icon {\n  display: inline-block;\n  font-size: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: 50% 50%; }\n\n.playkit-icon-maximize {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M800 269.255v114.745c0 17.673 14.327 32 32 32s32-14.327 32-32v-192c0-17.673-14.327-32-32-32h-192c-17.673 0-32 14.327-32 32s14.327 32 32 32h114.745l-137.373 137.373c-12.497 12.497-12.497 32.758 0 45.255s32.758 12.497 45.255 0l137.373-137.373z' /%3E %3Cpath fill='%23fff' d='M224 754.745v-114.745c0-17.673-14.327-32-32-32s-32 14.327-32 32v192c0 17.673 14.327 32 32 32h192c17.673 0 32-14.327 32-32s-14.327-32-32-32h-114.745l137.373-137.373c12.497-12.497 12.497-32.758 0-45.255s-32.758-12.497-45.255 0l-137.373 137.373z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-minimize {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M672 306.745v-114.745c0-17.673-14.327-32-32-32s-32 14.327-32 32v192c0 17.673 14.327 32 32 32h192c17.673 0 32-14.327 32-32s-14.327-32-32-32h-114.745l137.373-137.373c12.497-12.497 12.497-32.758 0-45.255s-32.758-12.497-45.255 0l-137.373 137.373z' /%3E%3Cpath fill='%23fff' d='M352 717.255v114.745c0 17.673 14.327 32 32 32s32-14.327 32-32v-192c0-17.673-14.327-32-32-32h-192c-17.673 0-32 14.327-32 32s14.327 32 32 32h114.745l-137.373 137.373c-12.497 12.497-12.497 32.758 0 45.255s32.758 12.497 45.255 0l137.373-137.373z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-play {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M796.806 461.202c44.919 28.075 44.739 73.706 0 101.668l-459.472 287.171c-44.919 28.075-81.334 7.915-81.334-45.305v-585.4c0-53.096 36.595-73.266 81.334-45.305l459.472 287.171z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-pause {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M256 287.843c0-35.259 28.407-63.843 64-63.843 35.346 0 64 28.564 64 63.843v448.314c0 35.259-28.407 63.843-64 63.843-35.346 0-64-28.564-64-63.843v-448.314zM640 287.843c0-35.259 28.407-63.843 64-63.843 35.346 0 64 28.564 64 63.843v448.314c0 35.259-28.407 63.843-64 63.843-35.346 0-64-28.564-64-63.843v-448.314z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-volume-base {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M128 416v192h96v-192h-96zM64 383.853c0-17.592 14.012-31.853 32.094-31.853h159.813c17.725 0 32.094 14.581 32.094 31.853v256.295c0 17.592-14.012 31.853-32.094 31.853h-159.813c-17.725 0-32.094-14.581-32.094-31.853v-256.295z' /%3E%3Cpath fill='%23fff' d='M288 634.342l160 88.889v-422.462l-160 88.889v244.684zM224 352l231.787-128.771c31.046-17.248 56.213-2.487 56.213 32.476v512.589c0 35.184-25.054 49.786-56.213 32.476l-231.787-128.771v-320z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-volume-waves {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M802.017 837.177c82.359-86.627 129.183-201.774 129.183-324.26 0-123.976-47.976-240.409-132.127-327.329-12.293-12.697-32.552-13.025-45.249-0.732s-13.025 32.552-0.732 45.249c72.692 75.084 114.109 175.597 114.109 282.812 0 105.928-40.422 205.331-111.566 280.162-12.177 12.808-11.666 33.063 1.143 45.24s33.063 11.666 45.24-1.143z' /%3E%3Cpath fill='%23fff' d='M667.436 743.221c67.761-60.884 107.273-147.888 107.273-241.233 0-87.318-34.552-169.203-94.836-229.446-12.501-12.493-32.762-12.486-45.255 0.015s-12.486 32.762 0.015 45.255c48.375 48.342 76.075 113.989 76.075 184.176 0 75.021-31.679 144.776-86.048 193.627-13.146 11.812-14.227 32.044-2.416 45.19s32.044 14.227 45.19 2.416z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-volume-mute {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M768 466.745l-67.986-67.986c-12.213-12.213-32.654-12.393-45.151 0.104-12.584 12.584-12.543 32.711-0.104 45.151l67.986 67.986-67.986 67.986c-12.213 12.213-12.393 32.654 0.104 45.151 12.584 12.584 32.711 12.543 45.151 0.104l67.986-67.986 67.986 67.986c12.213 12.213 32.654 12.393 45.151-0.104 12.584-12.584 12.543-32.711 0.104-45.151l-67.986-67.986 67.986-67.986c12.213-12.213 12.393-32.654-0.104-45.151-12.584-12.584-32.711-12.543-45.151-0.104l-67.986 67.986z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-close {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M573.162 512l214.269-214.269c16.772-16.772 16.688-44.071-0.202-60.96-17.007-17.007-44.182-16.98-60.96-0.202l-214.269 214.269-214.269-214.269c-16.772-16.772-44.071-16.688-60.96 0.202-17.007 17.007-16.98 44.182-0.202 60.96l214.269 214.269-214.269 214.269c-16.772 16.772-16.688 44.071 0.202 60.96 17.007 17.007 44.182 16.98 60.96 0.202l214.269-214.269 214.269 214.269c16.772 16.772 44.071 16.688 60.96-0.202 17.007-17.007 16.98-44.182 0.202-60.96l-214.269-214.269z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-share {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M318.641 446.219l236.155-142.257c-0.086-1.754-0.129-3.52-0.129-5.295 0-58.91 47.756-106.667 106.667-106.667s106.667 47.756 106.667 106.667c0 58.91-47.756 106.667-106.667 106.667-33.894 0-64.095-15.808-83.633-40.454l-236.467 142.445c-0.132-3.064-0.394-6.095-0.779-9.087l7.271-12.835-0.117 53.333-7.183-12.743c0.399-3.046 0.67-6.131 0.806-9.252l236.467 142.383c19.538-24.648 49.741-40.457 83.636-40.457 58.91 0 106.667 47.756 106.667 106.667s-47.756 106.667-106.667 106.667c-58.91 0-106.667-47.756-106.667-106.667 0-1.775 0.043-3.539 0.129-5.293l-236.19-142.216c-19.528 24.867-49.868 40.841-83.939 40.841-58.91 0-106.667-47.756-106.667-106.667s47.756-106.667 106.667-106.667c34.091 0 64.447 15.993 83.974 40.886zM234.667 554.667c23.564 0 42.667-19.103 42.667-42.667s-19.103-42.667-42.667-42.667c-23.564 0-42.667 19.103-42.667 42.667s19.103 42.667 42.667 42.667zM661.333 341.333c23.564 0 42.667-19.103 42.667-42.667s-19.103-42.667-42.667-42.667c-23.564 0-42.667 19.103-42.667 42.667s19.103 42.667 42.667 42.667zM661.333 768c23.564 0 42.667-19.103 42.667-42.667s-19.103-42.667-42.667-42.667c-23.564 0-42.667 19.103-42.667 42.667s19.103 42.667 42.667 42.667z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-settings {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M803.451 546.033c2.552-22.107 2.552-44.408 0.246-64.81-1.084-6.208-6.499-10.721-12.535-10.671-30.286 0.533-57.727-17.773-68.866-45.941s-3.64-60.291 18.795-80.593c3.935-3.569 4.416-9.583 0.92-13.959-13.595-17.35-29.146-33.073-46.311-46.83-4.23-3.38-10.359-2.886-14.783 1.966-14.421 14.721-34.212 22.938-54.434 22.761-9.009 0.041-17.942-1.652-26.865-5.212-28.414-11.992-46.226-40.546-44.49-71.542 0.335-5.319-3.547-9.972-8.785-10.588-21.926-2.538-44.068-2.595-65.961-0.176-5.349 0.6-9.341 5.207-9.175 10.514 1.027 30.384-16.802 58.251-45.764 70.431-8.238 3.138-16.993 4.701-25.207 4.609-20.599 0.206-40.395-7.982-55.482-23.363-2.014-2.187-4.849-3.435-7.553-3.445-2.441 0.015-4.811 0.83-6.513 2.139-17.541 13.798-33.455 29.547-47.262 46.729-3.418 4.337-2.922 10.575 0.97 14.162 22.816 20.692 30.19 53.479 17.807 83.351-13.035 27.396-41.135 44.394-71.446 43.222-5.112-0.197-9.499 3.606-10.086 9.179-2.673 22.023-2.673 44.289-0.212 64.867 1.080 6.27 6.559 10.824 13.309 10.737l2.225 0.006c28.935 0.604 54.726 18.391 65.634 45.374 11.22 28.205 3.921 60.407-18.565 81.204-3.866 3.509-4.341 9.418-0.895 13.742 13.545 17.354 29.027 33.106 46.042 46.867 4.303 3.449 10.547 2.954 14.986-1.907 14.414-14.76 34.226-23.001 54.43-22.82 9.070-0.052 18.063 1.668 27.041 5.299 28.19 12.071 45.891 40.41 44.347 71.468-0.342 5.312 3.536 9.962 8.802 10.578 21.915 2.548 44.049 2.605 65.929 0.176 5.364-0.604 9.364-5.227 9.191-10.598-0.997-30.358 16.84-58.183 45.452-70.201 8.263-3.256 17.070-4.908 25.521-4.865 20.676-0.206 40.533 8.070 55.398 23.38 2.039 2.195 4.898 3.446 7.673 3.455 2.268-0.011 4.468-0.776 6.321-2.228 17.625-13.724 33.599-29.444 47.415-46.611 3.426-4.348 2.928-10.6-0.863-14.097-22.358-20.082-30.057-51.85-19.372-79.939s37.55-46.71 67.745-46.857h5.229c5.12-0.026 9.413-3.875 9.996-8.962zM861.733 552.735c-3.961 34.572-33.157 60.748-68.129 60.926h-5.235c-5.803 0.028-10.991 3.624-13.054 9.048s-0.577 11.558 4.020 15.69c26.602 24.519 29.853 65.381 7.275 94.034-16.847 20.934-36.063 39.845-57.197 56.302-12.034 9.427-26.861 14.584-42.368 14.658-19.254-0.051-37.623-8.090-50.269-21.718-3.221-3.315-7.66-5.165-12.712-5.118-1.425-0.007-2.839 0.258-3.554 0.532-5.581 2.346-9.136 7.892-8.937 13.966 1.152 35.958-25.509 66.771-61.307 70.804-26.332 2.923-52.909 2.854-79.246-0.208-36.286-4.245-62.897-36.157-60.576-72.186 0.304-6.123-3.235-11.788-8.302-13.964-1.328-0.536-2.748-0.808-4.606-0.8-4.651-0.041-9.118 1.817-11.635 4.367-24.544 27.036-65.886 30.311-94.481 7.394-20.587-16.65-39.207-35.595-55.308-56.226-22.552-28.277-19.261-69.208 7.317-93.334 4.474-4.138 5.939-10.604 3.748-16.115-2.052-5.076-6.932-8.442-11.794-8.55-36.436 0.464-66.759-24.741-72.949-60.89-3.243-26.718-3.243-53.731-0.055-79.964 3.744-35.827 34.642-62.605 70.642-61.219 6.877 0.266 13.251-3.59 15.584-8.401 2.309-5.59 0.861-12.028-3.789-16.247-26.603-24.51-29.856-65.368-7.293-93.994 16.767-20.868 35.856-39.76 57.129-56.491 12.099-9.322 26.921-14.42 42.463-14.513 19.308 0.059 37.717 8.166 50.145 21.684 3.263 3.322 7.737 5.172 12.994 5.126 1.471 0.015 2.933-0.245 3.363-0.39 5.601-2.359 9.165-7.93 8.957-14.077-1.126-35.941 25.542-66.721 61.322-70.731 26.322-2.909 52.889-2.84 79.251 0.212 36.244 4.265 62.828 36.125 60.546 72.343-0.339 6.047 3.159 11.654 8.186 13.782 1.381 0.55 2.855 0.829 4.726 0.823 4.663 0.040 9.142-1.819 11.615-4.312 24.439-26.99 65.656-30.312 94.137-7.557 20.721 16.607 39.456 35.549 55.655 56.225 22.667 28.35 19.38 69.439-7.531 93.846-4.33 3.918-5.776 10.112-3.628 15.542s7.438 8.96 13.543 8.854c34.999-0.298 65.076 24.766 71.337 60.925 3.065 26.552 3.065 53.368 0 79.92zM511.956 589.951c43.215-0.108 78.137-35.17 78.072-78.385 0-31.732-19.132-60.334-48.461-72.448s-63.068-5.35-85.461 17.133c-22.393 22.483-29.022 56.249-16.791 85.529s40.909 48.298 72.641 48.171zM512.146 648.617c-55.438 0.221-105.58-33.029-126.965-84.224s-9.796-110.233 29.358-149.543c39.153-39.31 98.144-51.136 149.424-29.956s84.731 71.189 84.732 126.627c0.114 75.549-60.999 136.907-136.548 137.096z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-check {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M342.481 563.894c-12.577-12.416-32.838-12.285-45.254 0.292s-12.285 32.838 0.292 45.254l118.857 117.333c13.275 13.105 34.901 12.123 46.933-2.131l297.143-352c11.4-13.505 9.694-33.694-3.811-45.094s-33.694-9.694-45.094 3.811l-274.828 325.566-94.238-93.030z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-language {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M512 800c159.058 0 288-128.942 288-288s-128.942-288-288-288c-159.058 0-288 128.942-288 288s128.942 288 288 288zM512 864c-194.404 0-352-157.596-352-352s157.596-352 352-352c194.404 0 352 157.596 352 352s-157.596 352-352 352z' /%3E%3Cpath fill='%23fff' d='M441.231 173.324c-76.632 84.62-121.231 207.208-121.231 338.676 0 134.304 46.556 259.282 126.083 343.936l46.646-43.82c-68.041-72.429-108.728-181.651-108.728-300.116 0-116.001 39.001-223.203 104.669-295.716l-47.438-42.96z' /%3E%3Cpath fill='%23fff' d='M584.297 173.324c76.632 84.62 121.231 207.208 121.231 338.676 0 134.304-46.556 259.282-126.083 343.936l-46.646-43.82c68.041-72.429 108.728-181.651 108.728-300.116 0-116.001-39.001-223.203-104.669-295.716l47.438-42.96z' /%3E%3Cpath fill='%23fff' d='M840.432 419.786c-81.65-22.637-200.551-35.786-328.432-35.786-128.056 0-247.103 13.185-328.758 35.876l17.136 61.663c75.47-20.972 188.938-33.539 311.622-33.539 122.521 0 235.854 12.533 311.334 33.459l17.099-61.674z' /%3E%3Cpath fill='%23fff' d='M840.432 605.754c-81.65 22.637-200.551 35.786-328.432 35.786-128.056 0-247.103-13.185-328.758-35.876l17.136-61.663c75.47 20.972 188.938 33.539 311.622 33.539 122.521 0 235.854-12.533 311.334-33.459l17.099 61.674z' /%3E%3Cpath fill='%23fff' d='M480 192h64v640h-64v-640z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-quality {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M159.904 192h288.234c17.277 0 31.862 14.323 31.862 31.992 0 17.792-14.261 31.993-31.853 31.994l-288.147 0.014v544.174c-0.017-0.18 704-0.174 704-0.174v-128.006c0-17.795 14.327-31.994 32-31.994 17.796 0 32 14.34 32 32.029v128.145c0 35.25-28.639 63.826-63.904 63.826h-704.192c-35.293 0-63.904-28.875-63.904-63.826v-544.348c0-35.25 28.639-63.826 63.904-63.826zM501.818 378.182c108.449 0 196.364-87.915 196.364-196.364 0-29.091 43.636-29.091 43.636 0 0 108.449 87.915 196.364 196.364 196.364 29.091 0 29.091 43.636 0 43.636-108.449 0-196.364 87.915-196.364 196.364 0 29.091-43.636 29.091-43.636 0 0-108.449-87.915-196.364-196.364-196.364-29.091 0-29.091-43.636 0-43.636z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-captions {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M160 771.213c-0.017-0.172 704-0.166 704-0.166v-518.261c0.017 0.172-704 0.166-704 0.166v518.261zM96 252.787c0-33.572 28.639-60.787 63.904-60.787h704.192c35.293 0 63.904 27.5 63.904 60.787v518.427c0 33.572-28.639 60.787-63.904 60.787h-704.192c-35.293 0-63.904-27.5-63.904-60.787v-518.427z' /%3E%3Cpath fill='%23fff' d='M490.583 568.655c0 7.729-2.311 15.987-6.933 24.777s-11.668 17.162-21.14 25.118c-9.471 7.956-21.405 14.358-35.801 19.208s-30.611 7.274-48.644 7.274c-38.34 0-68.268-11.176-89.787-33.528s-32.278-52.319-32.278-89.901c0-25.459 4.925-47.962 14.775-67.511s24.095-34.665 42.734-45.348c18.639-10.684 40.916-16.025 66.829-16.025 16.063 0 30.8 2.349 44.212 7.047s24.777 10.759 34.096 18.185c9.32 7.425 16.442 15.343 21.367 23.754s7.388 16.253 7.388 23.527c0 7.425-2.766 13.714-8.297 18.867s-12.237 7.729-20.117 7.729c-5.152 0-9.433-1.326-12.843-3.978s-7.236-6.933-11.479-12.843c-7.577-11.517-15.495-20.155-23.754-25.913s-18.753-8.638-31.482-8.638c-18.336 0-33.111 7.16-44.325 21.481s-16.821 33.907-16.821 58.759c0 11.669 1.44 22.39 4.319 32.164s7.047 18.109 12.502 25.004c5.455 6.895 12.047 12.123 19.776 15.684s16.215 5.342 25.459 5.342c12.426 0 23.072-2.879 31.937-8.638s16.707-14.548 23.527-26.368c3.789-6.971 7.88-12.426 12.275-16.366s9.774-5.91 16.139-5.91c7.577 0 13.866 2.879 18.867 8.638s7.501 11.896 7.501 18.412zM767.219 568.655c0 7.729-2.311 15.987-6.933 24.777s-11.668 17.162-21.14 25.118c-9.471 7.956-21.405 14.358-35.801 19.208s-30.611 7.274-48.644 7.274c-38.34 0-68.268-11.176-89.787-33.528s-32.278-52.319-32.278-89.901c0-25.459 4.925-47.962 14.775-67.511s24.095-34.665 42.734-45.348c18.639-10.684 40.916-16.025 66.829-16.025 16.063 0 30.8 2.349 44.212 7.047s24.777 10.759 34.096 18.185c9.32 7.425 16.442 15.343 21.367 23.754s7.388 16.253 7.388 23.527c0 7.425-2.766 13.714-8.297 18.867s-12.237 7.729-20.117 7.729c-5.152 0-9.433-1.326-12.843-3.978s-7.236-6.933-11.479-12.843c-7.577-11.517-15.495-20.155-23.754-25.913s-18.753-8.638-31.482-8.638c-18.336 0-33.111 7.16-44.325 21.481s-16.821 33.907-16.821 58.759c0 11.669 1.44 22.39 4.319 32.164s7.047 18.109 12.502 25.004c5.455 6.895 12.047 12.123 19.776 15.684s16.215 5.342 25.459 5.342c12.426 0 23.072-2.879 31.937-8.638s16.707-14.548 23.527-26.368c3.789-6.971 7.88-12.426 12.275-16.366s9.774-5.91 16.139-5.91c7.577 0 13.866 2.879 18.867 8.638s7.501 11.896 7.501 18.412z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-speed {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M512 832c35.346 0 64-28.654 64-64s-28.654-64-64-64c-35.346 0-64 28.654-64 64s28.654 64 64 64zM480.239 643.971c-0.158-1.272-0.239-2.566-0.239-3.876v-192.19c0-17.621 14.204-31.905 32-31.905 17.673 0 32 14.497 32 31.905v192.19c0 1.313-0.079 2.607-0.232 3.878 55.325 14.128 96.232 64.301 96.232 124.027 0 70.692-57.308 128-128 128s-128-57.308-128-128c0-59.729 40.91-109.903 96.239-124.029zM928 576c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-194.404-157.596-352-352-352s-352 157.596-352 352c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-229.75 186.25-416 416-416s416 186.25 416 416z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-audio {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M768 625.124v-354.531l-352 135.385v330.022c0 70.692-57.308 128-128 128s-128-57.308-128-128c0-70.692 57.308-128 128-128 23.314 0 45.173 6.233 64 17.124v-241.124c0-13.241 8.155-25.114 20.513-29.867l416-160c20.96-8.062 43.487 7.41 43.487 29.867v512c0 70.692-57.308 128-128 128s-128-57.308-128-128c0-70.692 57.308-128 128-128 23.314 0 45.173 6.233 64 17.124zM288 800c35.346 0 64-28.654 64-64s-28.654-64-64-64c-35.346 0-64 28.654-64 64s28.654 64 64 64zM704 800c35.346 0 64-28.654 64-64s-28.654-64-64-64c-35.346 0-64 28.654-64 64s28.654 64 64 64z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-copy {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M703.727 320c35.497 0 64.273 28.482 64.273 64.003v351.993c0 35.348-28.862 64.003-64.273 64.003h-191.454c-35.496 0-64.271-28.48-64.273-64.001l255.727 0.001v-352c0 0-28.356 0.147-63.727 0.001v-63.912l63.727-0.088zM256 288.187c0-35.45 28.398-64.187 63.988-64.187h192.025c35.339 0 63.988 28.706 63.988 64.187v319.625c0 35.45-28.398 64.187-63.988 64.187h-192.025c-35.339 0-63.988-28.706-63.988-64.187v-319.625zM320 288v320h192v-320h-192z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-facebook {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M432 405.333h-80v106.667h80v320h133.333v-320h97.12l9.547-106.667h-106.667v-44.453c0-25.467 5.12-35.547 29.733-35.547h76.933v-133.333h-101.547c-95.893 0-138.453 42.213-138.453 123.067v90.267z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-twitter {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M832 316.614c-23.547 10.29-48.853 17.221-75.413 20.345 27.12-15.987 47.947-41.319 57.733-71.508-25.36 14.806-53.467 25.568-83.387 31.37-23.92-25.122-58.080-40.82-95.84-40.82-84.773 0-147.067 77.861-127.92 158.687-109.093-5.381-205.84-56.833-270.613-135.035-34.4 58.094-17.84 134.090 40.613 172.574-21.493-0.683-41.76-6.484-59.44-16.171-1.44 59.879 42.16 115.898 105.307 128.368-18.48 4.935-38.72 6.090-59.307 2.205 16.693 51.347 65.173 88.702 122.667 89.752-55.2 42.605-124.747 61.637-194.4 53.552 58.107 36.673 127.147 58.067 201.28 58.067 243.787 0 381.52-202.684 373.2-384.473 25.653-18.244 47.92-41.004 65.52-66.914v0z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-google-plus {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M352 556.8h127.040c-5.12 32.928-38.4 96.64-127.040 96.64-76.48 0-138.88-63.328-138.88-141.44 0-78.080 62.4-141.44 138.88-141.44 43.52 0 72.64 18.56 89.28 34.56l60.8-58.56c-39.040-36.48-89.6-58.56-150.080-58.56-123.84 0-224 100.16-224 224s100.16 224 224 224c129.28 0 215.072-90.88 215.072-218.88 0-14.72-1.632-25.92-3.552-37.12h-211.52v76.8zM800 544v96h-64v-96h-96v-64h96v-96h64v96h96v64h-96z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-linked-in {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M324.8 290.087c0 36.506-29.6 66.087-66.133 66.087s-66.133-29.581-66.133-66.087c0-36.48 29.6-66.087 66.133-66.087s66.133 29.607 66.133 66.087zM325.333 409.043h-133.333v422.957h133.333v-422.957zM538.187 409.043h-132.48v422.957h132.507v-222.026c0-123.45 160.773-133.549 160.773 0v222.026h133.013v-267.811c0-208.306-237.92-200.719-293.813-98.179v-56.967z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-email {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M256 768c-35.346 0-64-28.654-64-64v-352c0-35.346 28.654-64 64-64h512c35.346 0 64 28.654 64 64v352c0 35.346-28.654 64-64 64h-512zM512 467.488l147.52-115.488h-295.040l147.52 115.488zM748.48 352l-211.2 179.2c-0.713 1.308-1.572 2.532-2.56 3.648-12.707 12.158-32.733 12.158-45.44 0-0.988-1.116-1.847-2.34-2.56-3.648l-211.2-179.2h-19.52v352h512v-352h-19.52z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-embed {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M377.989 579.335c12.669 12.904 12.669 33.777 0 46.68-12.733 12.969-33.427 12.969-46.16 0l-104.727-106.667c-12.669-12.904-12.669-33.777 0-46.68l104.727-106.667c12.733-12.969 33.427-12.969 46.16 0 12.669 12.904 12.669 33.777 0 46.68l-81.812 83.327 81.812 83.327zM646.011 412.68c-12.669-12.904-12.669-33.777 0-46.68 12.733-12.969 33.427-12.969 46.16 0l104.727 106.667c12.669 12.904 12.669 33.777 0 46.68l-104.727 106.667c-12.733 12.969-33.427 12.969-46.16 0-12.669-12.904-12.669-33.777 0-46.68l81.812-83.327-81.812-83.327zM572.293 250.6c17.455 4.445 28.025 22.388 23.686 40.066l-104.727 426.669c-4.349 17.719-22.048 28.535-39.545 24.079-17.455-4.445-28.025-22.388-23.686-40.066l104.727-426.669c4.349-17.719 22.048-28.535 39.545-24.079z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-link {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M355.028 445.537c12.497 12.497 12.497 32.758 0 45.255s-32.758 12.497-45.255 0l-24.141-24.141c-49.92-49.92-49.832-130.999 0.094-180.925 49.984-49.984 130.995-50.025 180.955-0.064l113.266 113.266c49.964 49.964 49.935 130.955-0.064 180.955-12.497 12.497-32.758 12.497-45.255 0s-12.497-32.758 0-45.255c25.013-25.013 25.027-65.482 0.064-90.445l-113.266-113.266c-24.957-24.957-65.445-24.936-90.445 0.064-24.955 24.955-24.998 65.511-0.094 90.416l24.141 24.141zM668.972 578.463c-12.497-12.497-12.497-32.758 0-45.255s32.758-12.497 45.255 0l24.141 24.141c49.92 49.92 49.832 130.999-0.094 180.925-49.984 49.984-130.995 50.025-180.955 0.064l-113.266-113.266c-49.964-49.964-49.935-130.955 0.064-180.955 12.497-12.497 32.758-12.497 45.255 0s12.497 32.758 0 45.255c-25.013 25.013-25.027 65.482-0.064 90.445l113.266 113.266c24.957 24.957 65.445 24.936 90.445-0.064 24.955-24.955 24.998-65.511 0.094-90.416l-24.141-24.141z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-arrow-down {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M301.255 338.745c-24.994-24.994-65.516-24.994-90.51 0s-24.994 65.516 0 90.51l256 256c24.994 24.994 65.516 24.994 90.51 0l256-256c24.994-24.994 24.994-65.516 0-90.51s-65.516-24.994-90.51 0l-210.745 210.745-210.745-210.745z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-start-over {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M255.271 339.053c94.182-126.513 270.298-165.203 410.222-84.418 150.758 87.040 202.411 279.813 115.371 430.571s-279.813 202.411-430.571 115.371c-61.424-35.463-107.948-89.4-134.169-153.673-7.677-18.818-29.156-27.85-47.974-20.173s-27.85 29.156-20.173 47.974c32.339 79.269 89.818 145.906 165.517 189.611 185.96 107.364 423.747 43.649 531.111-142.311s43.649-423.747-142.311-531.111c-172.433-99.554-389.428-52.014-505.682 103.69l-27.226-78.49c-6.66-19.202-27.626-29.368-46.828-22.708s-29.368 27.626-22.708 46.828l52.434 151.164c5.36 15.452 20.275 25.513 36.61 24.694l159.799-8.011c20.299-1.018 35.929-18.298 34.911-38.596s-18.298-35.929-38.596-34.911l-89.738 4.499z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-rewind {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' opacity='0.5' d='M258.471 323.053c94.182-126.513 270.298-165.203 410.222-84.418 150.758 87.040 202.411 279.813 115.371 430.571s-279.813 202.411-430.571 115.371c-61.424-35.463-107.948-89.4-134.169-153.673-7.677-18.818-29.156-27.85-47.974-20.173s-27.85 29.156-20.173 47.974c32.339 79.269 89.818 145.906 165.517 189.611 185.96 107.364 423.747 43.649 531.111-142.311s43.649-423.747-142.311-531.111c-172.433-99.554-389.428-52.014-505.682 103.69l-27.226-78.49c-6.66-19.202-27.626-29.368-46.828-22.708s-29.368 27.626-22.708 46.828l52.434 151.164c5.36 15.452 20.275 25.513 36.61 24.694l159.799-8.011c20.299-1.018 35.929-18.298 34.911-38.596s-18.298-35.929-38.596-34.911l-89.738 4.499z'%3E%3C/path%3E%3Cpath fill='%23fff' d='M816.068 431.974c-20.553-78.699-71.369-149.456-147.375-193.338-139.923-80.785-316.040-42.095-410.222 84.418l89.738-4.499c20.299-1.018 37.579 14.613 38.596 34.911s-14.613 37.579-34.911 38.596l-159.799 8.011c-16.335 0.819-31.25-9.242-36.61-24.694l-52.434-151.164c-6.66-19.202 3.506-40.167 22.708-46.828s40.167 3.506 46.828 22.708l27.226 78.49c116.254-155.703 333.248-203.244 505.682-103.69 91.184 52.645 152.976 136.648 179.618 230.523l-69.044 26.555z'%3E%3C/path%3E%3C/svg%3E\"); }\n\n.playkit-icon-rewind-10 {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M258.471 323.053c94.182-126.513 270.298-165.203 410.222-84.418 150.758 87.040 202.411 279.813 115.371 430.571s-279.813 202.411-430.571 115.371c-61.424-35.463-107.948-89.4-134.169-153.673-7.677-18.818-29.156-27.85-47.974-20.173s-27.85 29.156-20.173 47.974c32.339 79.269 89.818 145.906 165.517 189.611 185.96 107.364 423.747 43.649 531.111-142.311s43.649-423.747-142.311-531.111c-172.433-99.554-389.428-52.014-505.682 103.69l-27.226-78.49c-6.66-19.202-27.626-29.368-46.828-22.708s-29.368 27.626-22.708 46.828l52.434 151.164c5.36 15.452 20.275 25.513 36.61 24.694l159.799-8.011c20.299-1.018 35.929-18.298 34.911-38.596s-18.298-35.929-38.596-34.911l-89.738 4.499z'%3E%3C/path%3E%3Cpath fill='%23fff' d='M413.327 636.083h67.358v-252.083h-48.527c-2.173 7.358-4.949 13.589-8.329 18.693s-7.726 9.139-13.037 12.106c-5.311 2.967-11.709 5.103-19.193 6.409s-16.417 1.958-26.798 1.958v41.302h48.527v171.616zM596.807 554.192c0 17.803 1.569 29.849 4.708 36.139s8.208 9.435 15.21 9.435c7.001 0 12.071-3.145 15.21-9.435s4.708-18.336 4.708-36.139v-83.316c0-17.803-1.569-29.849-4.708-36.139s-8.208-9.435-15.21-9.435c-7.001 0-12.071 3.145-15.21 9.435s-4.708 18.336-4.708 36.139v83.316zM529.449 512.534c0-25.398 1.75-46.405 5.251-63.021s8.812-29.789 15.934-39.522c7.122-9.732 16.176-16.497 27.16-20.295s23.962-5.697 38.93-5.697c14.969 0 27.945 1.899 38.93 5.697s20.038 10.563 27.16 20.295c7.122 9.732 12.433 22.906 15.934 39.522s5.251 37.622 5.251 63.021c0 25.636-1.75 46.702-5.251 63.199s-8.812 29.552-15.934 39.166c-7.122 9.613-16.176 16.2-27.16 19.761s-23.962 5.341-38.93 5.341c-14.969 0-27.945-1.78-38.93-5.341s-20.038-10.147-27.16-19.761c-7.122-9.613-12.433-22.668-15.934-39.166s-5.251-37.563-5.251-63.199z'%3E%3C/path%3E%3C/svg%3E\"); }\n\n@keyframes playkit-openDropmenu {\n  from {\n    opacity: 0;\n    transform: translateY(10px); }\n  to {\n    opacity: 1;\n    transform: translateY(0); } }\n\n.playkit-dropdown {\n  position: relative;\n  font-size: 15px; }\n  .playkit-dropdown.playkit-active .playkit-dropdown-menu {\n    display: block;\n    opacity: 1; }\n  .playkit-dropdown.playkit-active .playkit-dropdown-button .playkit-icon {\n    transform: rotate(180deg); }\n  .playkit-dropdown .playkit-dropdown-button {\n    font-weight: bold;\n    line-height: 18px;\n    color: #fff;\n    cursor: pointer;\n    padding-left: 20px; }\n    .playkit-dropdown .playkit-dropdown-button .playkit-icon {\n      width: 16px;\n      height: 16px;\n      vertical-align: middle;\n      margin-left: 6px;\n      transition: 150ms transform;\n      will-change: transform; }\n\n.playkit-dropdown-menu {\n  display: block;\n  opacity: 1;\n  position: absolute;\n  background-color: #333333;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n  padding: 6px 0;\n  z-index: 5;\n  animation: playkit-openDropmenu 100ms ease-out forwards;\n  max-height: 173px;\n  overflow-y: auto;\n  font-size: 15px;\n  text-align: left; }\n  .playkit-dropdown-menu.playkit-top {\n    margin-bottom: 10px;\n    bottom: 100%; }\n  .playkit-dropdown-menu.playkit-bottom {\n    margin-top: 10px;\n    top: 100%; }\n  .playkit-dropdown-menu.playkit-right {\n    left: 0; }\n  .playkit-dropdown-menu.playkit-left {\n    right: 0; }\n  .playkit-dropdown-menu .playkit-dropdown-menu-item {\n    padding: 2px 10px 2px 16px;\n    white-space: nowrap;\n    min-height: 30px;\n    cursor: pointer; }\n    .playkit-dropdown-menu .playkit-dropdown-menu-item:hover {\n      color: #fff; }\n    .playkit-dropdown-menu .playkit-dropdown-menu-item.playkit-active {\n      color: #01ACCD; }\n      .playkit-dropdown-menu .playkit-dropdown-menu-item.playkit-active .playkit-icon-check {\n        background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%2301ACCD' d='M342.481 563.894c-12.577-12.416-32.838-12.285-45.254 0.292s-12.285 32.838 0.292 45.254l118.857 117.333c13.275 13.105 34.901 12.123 46.933-2.131l297.143-352c11.4-13.505 9.694-33.694-3.811-45.094s-33.694-9.694-45.094 3.811l-274.828 325.566-94.238-93.030z' /%3E%3C/svg%3E\"); }\n    .playkit-dropdown-menu .playkit-dropdown-menu-item .playkit-icon-check {\n      display: inline-block;\n      margin-left: 16px;\n      vertical-align: middle;\n      width: 24px;\n      height: 24px; }\n    .playkit-dropdown-menu .playkit-dropdown-menu-item span {\n      vertical-align: middle;\n      line-height: 26px; }\n\n.playkit-player .playkit-control-button {\n  width: 32px;\n  height: 32px;\n  background: transparent;\n  display: inline-block;\n  opacity: 0.8;\n  border: none;\n  padding: 0;\n  cursor: pointer; }\n  .playkit-player .playkit-control-button i {\n    width: 32px;\n    height: 32px; }\n  .playkit-player .playkit-control-button.playkit-active {\n    opacity: 1; }\n  .playkit-player .playkit-control-button.playkit-control-button-rounded {\n    width: 36px;\n    height: 36px;\n    padding: 2px; }\n\n.playkit-player:not(.playkit-touch) .playkit-control-button:hover {\n  opacity: 1; }\n\n.playkit-player:not(.playkit-touch) .playkit-control-button.playkit-control-button-rounded:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n  border-radius: 18px; }\n\n.playkit-player .playkit-control-button-container {\n  display: inline-block;\n  position: relative;\n  vertical-align: top; }\n\n.playkit-player.playkit-touch .playkit-player .playkit-control-button-container {\n  position: static; }\n\n.playkit-player.playkit-touch .playkit-control-button {\n  position: relative; }\n\n.playkit-rotate {\n  -moz-animation: playkit-spin .3s 1 linear;\n  -o-animation: playkit-spin .3s 1 linear;\n  -webkit-animation: playkit-spin .3s 1 linear;\n  animation: playkit-spin .3s 1 linear; }\n\n@-webkit-keyframes playkit-spin {\n  0% {\n    -webkit-transform: rotate(359deg); }\n  100% {\n    -webkit-transform: rotate(0deg); } }\n\n@-moz-keyframes playkit-spin {\n  0% {\n    -moz-transform: rotate(359deg); }\n  100% {\n    -moz-transform: rotate(0deg); } }\n\n@-o-keyframes playkit-spin {\n  0% {\n    -o-transform: rotate(359deg); }\n  100% {\n    -o-transform: rotate(0deg); } }\n\n@-ms-keyframes playkit-spin {\n  0% {\n    -ms-transform: rotate(359deg); }\n  100% {\n    -ms-transform: rotate(0deg); } }\n\n@keyframes playkit-spin {\n  0% {\n    transform: rotate(359deg); }\n  100% {\n    transform: rotate(0deg); } }\n\n.playkit-player a {\n  color: #01ACCD;\n  text-decoration: underline;\n  font-size: 15px;\n  line-height: 18px;\n  cursor: pointer; }\n  .playkit-player a:hover {\n    color: #01819a; }\n  .playkit-player a:active {\n    opacity: 0.7; }\n\n.playkit-player {\n  overflow: hidden;\n  user-select: none;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  outline: none;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent; }\n  .playkit-player:-webkit-full-screen {\n    width: 100%;\n    height: 100%;\n    max-width: none; }\n  .playkit-player * {\n    box-sizing: border-box;\n    outline: none; }\n  .playkit-player ::selection {\n    background-color: rgba(0, 0, 0, 0.1); }\n  .playkit-player video {\n    width: 100%; }\n  .playkit-player .playkit-player-gui {\n    opacity: 0;\n    overflow: hidden;\n    font-size: 0;\n    font-family: sans-serif; }\n    .playkit-player .playkit-player-gui input, .playkit-player .playkit-player-gui textarea {\n      font-family: sans-serif; }\n  .playkit-player #overlay-portal {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%; }\n  .playkit-player.playkit-overlay-active #overlay-portal {\n    z-index: 11; }\n  .playkit-player.playkit-metadata-loaded .playkit-player-gui,\n  .playkit-player.playkit-state-paused .playkit-player-gui,\n  .playkit-player.playkit-overlay-active .playkit-player-gui,\n  .playkit-player.playkit-menu-active .playkit-player-gui {\n    opacity: 1; }\n\n.playkit-player.playkit-nav .playkit-control-button:focus,\n.playkit-player.playkit-nav .playkit-seek-bar:focus,\n.playkit-player.playkit-nav .playkit-dropdown-button:focus,\n.playkit-player.playkit-nav .playkit-smart-container-item:focus,\n.playkit-player.playkit-nav .playkit-dropdown-menu-item:focus,\n.playkit-player.playkit-nav .playkit-pre-playback-play-button:focus,\n.playkit-player.playkit-nav .playkit-sample:focus,\n.playkit-player.playkit-nav .playkit-custom-captions-applied > a:focus,\n.playkit-player.playkit-nav .playkit-form-group-row > a:focus,\n.playkit-player.playkit-nav .playkit-button-save-cvaa:focus,\n.playkit-player.playkit-nav .playkit-slider:focus,\n.playkit-player.playkit-nav .playkit-live-tag:focus {\n  outline: 1px solid #00cbff; }\n\n.playkit-player [id^=playkit-ads-container] {\n  z-index: 5;\n  transition: transform 100ms; }\n\n.playkit-player:not(.playkit-ad-break).playkit-metadata-loaded.playkit-hover [id^=playkit-ads-container],\n.playkit-player:not(.playkit-ad-break).playkit-metadata-loaded.playkit-state-paused [id^=playkit-ads-container] {\n  transform: translateY(-60px); }\n\nvideo {\n  left: 0; }\n  video::-webkit-media-controls-panel-container, video::-webkit-media-controls {\n    display: none !important;\n    -webkit-appearance: none; }\n  video::-webkit-media-controls-start-playback-button {\n    display: none !important;\n    -webkit-appearance: none; }\n  video::-webkit-media-text-track-container {\n    bottom: 0;\n    height: 100% !important; }\n\n.playkit-player video::-webkit-media-text-track-display {\n  transform: translateY(0px);\n  transition: ease-in 100ms; }\n\n.playkit-player.playkit-state-paused video::-webkit-media-text-track-display,\n.playkit-player.playkit-hover video::-webkit-media-text-track-display {\n  transform: translateY(-60px);\n  transition: ease-out 100ms; }\n\n.playkit-player.playkit-overlay-active .playkit-subtitles {\n  display: none; }\n\n.playkit-player .playkit-subtitles {\n  transform: translateY(0px);\n  transition: ease-in 100ms; }\n\n.playkit-player:not(.playkit-overlay-active).playkit-state-paused .playkit-subtitles,\n.playkit-player:not(.playkit-overlay-active):hover .playkit-subtitles,\n.playkit-player:not(.playkit-overlay-active).playkit-hover .playkit-subtitles {\n  transform: translateY(-60px);\n  transition: ease-out 100ms; }\n\n.playkit-video-player {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: black; }\n\n@keyframes playkit-openOverlay {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n\n.playkit-overlay {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: none;\n  opacity: 0;\n  animation: playkit-openOverlay 100ms ease-in-out forwards;\n  z-index: 11; }\n  .playkit-overlay.playkit-active {\n    display: block;\n    opacity: 1; }\n  .playkit-overlay .playkit-overlay-contents {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.42);\n    z-index: 4;\n    text-align: center;\n    color: #fff;\n    padding: 60px 20px 30px 20px;\n    overflow-y: auto; }\n  .playkit-overlay .playkit-title {\n    font-size: 24px;\n    font-weight: bold;\n    line-height: 29px;\n    margin-bottom: 60px; }\n  .playkit-overlay .playkit-close-overlay {\n    position: absolute;\n    top: 48px;\n    right: 48px;\n    z-index: 5;\n    cursor: pointer; }\n    .playkit-overlay .playkit-close-overlay .playkit-icon-close {\n      width: 24px;\n      height: 24px; }\n  .playkit-overlay .playkit-overlay-screen {\n    display: none; }\n    .playkit-overlay .playkit-overlay-screen.playkit-active {\n      display: block; }\n\n.playkit-player.playkit-size-md .playkit-overlay .playkit-overlay-contents {\n  padding: 36px 20px; }\n\n.playkit-player.playkit-size-md .playkit-overlay .playkit-close-overlay {\n  top: 38px; }\n\n.playkit-player.playkit-size-md .playkit-overlay .playkit-title {\n  margin-bottom: 24px; }\n\n.playkit-player.playkit-size-sm .playkit-overlay .playkit-overlay-contents {\n  padding: 16px 24px; }\n\n.playkit-player.playkit-size-sm .playkit-overlay .playkit-close-overlay {\n  top: 15px;\n  right: 24px; }\n\n.playkit-player.playkit-size-sm .playkit-overlay .playkit-title {\n  font-size: 16px;\n  line-height: 19px;\n  margin-bottom: 24px; }\n\n@keyframes playkit-openSmartContainer {\n  from {\n    opacity: 0;\n    transform: translateY(10px); }\n  to {\n    opacity: 1;\n    transform: translateY(0); } }\n\n@keyframes playkit-closeSmartContainer {\n  from {\n    opacity: 1;\n    transform: translateY(0); }\n  to {\n    opacity: 0;\n    transform: translateY(10px); } }\n\n.playkit-player:not(.playkit-touch) .playkit-smart-container {\n  background-color: #222222;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n  position: absolute;\n  right: 0px;\n  min-width: 193px;\n  font-size: 15px;\n  z-index: 10;\n  display: block;\n  animation: playkit-openSmartContainer 100ms ease-out forwards; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-leaving {\n    animation: playkit-closeSmartContainer 100ms ease-out forwards; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-top {\n    bottom: 100%;\n    margin-bottom: 6px; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-top:before {\n      display: block;\n      content: ' ';\n      position: absolute;\n      bottom: -6px;\n      left: 0;\n      width: 100%;\n      height: 6px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-bottom {\n    top: 100%;\n    margin-top: 6px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-right {\n    left: 0px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-left {\n    right: 0px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item {\n    margin: 16px;\n    color: rgba(244, 244, 244, 0.8);\n    white-space: nowrap;\n    display: flex;\n    justify-content: space-between; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item label .playkit-label-icon {\n      display: none; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item .playkit-dropdown, .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item select {\n      align-self: flex-end; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item .playkit-dropdown span {\n      max-width: 100px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      display: inline-block;\n      vertical-align: middle; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item select {\n      text-align-last: right; }\n\n.playkit-touch .playkit-smart-container-item {\n  width: 300px;\n  max-width: 100%;\n  margin: 16px auto;\n  color: rgba(244, 244, 244, 0.8);\n  white-space: nowrap;\n  text-align: left;\n  display: flex;\n  justify-content: space-between; }\n  .playkit-touch .playkit-smart-container-item.playkit-select-menu-item label {\n    font-size: 16px;\n    color: rgba(255, 255, 255, 0.8);\n    margin-right: 20px; }\n    .playkit-touch .playkit-smart-container-item.playkit-select-menu-item label .playkit-label-icon {\n      width: 24px;\n      height: 24px;\n      display: inline-block;\n      vertical-align: middle;\n      margin-right: 16px; }\n  .playkit-touch .playkit-smart-container-item.playkit-select-menu-item .playkit-dropdown, .playkit-touch .playkit-smart-container-item.playkit-select-menu-item select {\n    align-self: flex-end; }\n  .playkit-touch .playkit-smart-container-item.playkit-select-menu-item select {\n    text-align-last: right;\n    min-width: 1px;\n    line-height: 24px; }\n\n.playkit-overlay.playkit-share-overlay .playkit-share-icons {\n  margin: 60px 0; }\n  .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded {\n    margin: 0 8px;\n    transition: transform 100ms;\n    will-change: transform; }\n    .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded:first-child {\n      margin-left: 0; }\n    .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded:last-child {\n      margin-right: 0; }\n    .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded.playkit-facebook-share-btn {\n      background-color: #3B5998; }\n    .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded.playkit-twitter-share-btn {\n      background-color: #1DA1F2; }\n    .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded.playkit-google-plus-share-btn {\n      background-color: #DD4B39; }\n    .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded.playkit-linkedin-share-btn {\n      background-color: #00A0DC; }\n\n.playkit-share-main-container {\n  width: 300px;\n  max-width: 100%;\n  margin: 0 auto;\n  text-align: center; }\n\n.playkit-link-options-container {\n  width: 400px;\n  max-width: 100%;\n  text-align: left;\n  margin: 0 auto; }\n  .playkit-link-options-container .playkit-copy-url-row {\n    display: flex; }\n    .playkit-link-options-container .playkit-copy-url-row .playkit-input-copy-url {\n      margin: 0; }\n    .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url {\n      margin-left: 16px; }\n      .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url .playkit-icon {\n        will-change: transform;\n        transition: 100ms transform;\n        position: absolute;\n        width: 32px; }\n      .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url .playkit-icon-check {\n        transform: scale(0);\n        opacity: 0; }\n      .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url.playkit-copied {\n        background-color: #009444; }\n        .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url.playkit-copied .playkit-icon-copy {\n          transform: scale(0);\n          opacity: 0; }\n        .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url.playkit-copied .playkit-icon-check {\n          transform: scale(1);\n          opacity: 1; }\n  .playkit-link-options-container .playkit-video-start-options-row {\n    margin-top: 24px; }\n    .playkit-link-options-container .playkit-video-start-options-row .playkit-checkbox {\n      margin-right: 15px; }\n    .playkit-link-options-container .playkit-video-start-options-row .playkit-form-group {\n      margin: 0; }\n\n.playkit-player:not(.playkit-touch) .playkit-overlay.playkit-share-overlay .playkit-share-icons .playkit-btn-rounded:hover {\n  transform: scale(1.1667); }\n\n.playkit-player.playkit-size-md .playkit-overlay.playkit-share-overlay .playkit-share-icons {\n  margin: 40px 0; }\n\n.playkit-player.playkit-size-sm .playkit-overlay.playkit-share-overlay .playkit-share-icons {\n  margin: 20px 0; }\n\n.playkit-overlay.playkit-cvaa-overlay .playkit-sample {\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 36px;\n  text-align: center;\n  padding: 0 31px;\n  display: inline-block;\n  margin: 0 12px;\n  cursor: pointer;\n  position: relative; }\n  .playkit-overlay.playkit-cvaa-overlay .playkit-sample.playkit-black-bg {\n    background-color: #000; }\n  .playkit-overlay.playkit-cvaa-overlay .playkit-sample.playkit-yellow-text {\n    color: #FAFF00; }\n  .playkit-overlay.playkit-cvaa-overlay .playkit-sample .playkit-active-tick {\n    height: 16px;\n    width: 16px;\n    border-radius: 8px;\n    background-color: #01ACCD;\n    position: absolute;\n    top: -5px;\n    right: -5px; }\n    .playkit-overlay.playkit-cvaa-overlay .playkit-sample .playkit-active-tick .playkit-icon {\n      vertical-align: top; }\n  .playkit-overlay.playkit-cvaa-overlay .playkit-sample span {\n    font-size: 16px !important;\n    line-height: 1;\n    vertical-align: middle; }\n\n.playkit-overlay.playkit-cvaa-overlay .playkit-button-save-cvaa {\n  margin-top: 50px;\n  height: 40px;\n  width: 400px;\n  max-width: 100%;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 38px;\n  text-align: center;\n  display: inline-block;\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer; }\n\n.playkit-overlay.playkit-cvaa-overlay .playkit-custom-captions-applied {\n  margin-top: 50px; }\n\n.playkit-overlay.playkit-cvaa-overlay .playkit-custom-caption-form {\n  width: 300px;\n  max-width: 100%;\n  margin: 0 auto; }\n  .playkit-overlay.playkit-cvaa-overlay .playkit-custom-caption-form a {\n    color: white;\n    line-height: 36px;\n    text-decoration: none; }\n    .playkit-overlay.playkit-cvaa-overlay .playkit-custom-caption-form a:hover, .playkit-overlay.playkit-cvaa-overlay .playkit-custom-caption-form a:focus {\n      text-decoration: underline; }\n  .playkit-overlay.playkit-cvaa-overlay .playkit-custom-caption-form .playkit-slider {\n    float: right;\n    width: 100px;\n    margin-top: 5px; }\n\n.playkit-overlay.playkit-cvaa-overlay .playkit-preview-container {\n  width: 100%;\n  text-align: center;\n  font-size: 16px; }\n\n.playkit-player.playkit-size-sm .playkit-overlay.playkit-cvaa-overlay .playkit-sample {\n  width: 30%;\n  margin: 2.33%;\n  padding: 0; }\n  .playkit-player.playkit-size-sm .playkit-overlay.playkit-cvaa-overlay .playkit-sample:first-child {\n    margin-left: 0; }\n  .playkit-player.playkit-size-sm .playkit-overlay.playkit-cvaa-overlay .playkit-sample:last-child {\n    margin-right: 0; }\n  .playkit-player.playkit-size-sm .playkit-overlay.playkit-cvaa-overlay .playkit-sample.playkit-custom {\n    width: auto;\n    padding: 0 10px; }\n\n.playkit-player.playkit-size-sm .playkit-overlay.playkit-cvaa-overlay .playkit-button-save-cvaa,\n.playkit-player.playkit-size-sm .playkit-overlay.playkit-cvaa-overlay .playkit-custom-captions-applied {\n  margin-top: 20px; }\n\n@keyframes playkit-kaltura-spinner {\n  0% {\n    transform: rotate(0deg) scale(0.7);\n    opacity: 1; }\n  70% {\n    transform: rotate(360deg) scale(0.7);\n    opacity: 1; }\n  82% {\n    transform: rotate(360deg) scale(0);\n    opacity: 0; }\n  87% {\n    transform: rotate(360deg) scale(0.9);\n    opacity: 1; }\n  100% {\n    transform: rotate(360deg) scale(0.7);\n    opacity: 1; } }\n\n.playkit-loading-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.3);\n  transition: 100ms opacity;\n  opacity: 0; }\n  .playkit-loading-backdrop.playkit-show {\n    opacity: 1; }\n    .playkit-loading-backdrop.playkit-show .playkit-spinner-container {\n      display: block; }\n  .playkit-loading-backdrop .playkit-spinner-container {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate3d(-50px, -50px, 0); }\n\n.playkit-spinner {\n  width: 100px;\n  height: 100px;\n  position: relative;\n  animation: playkit-kaltura-spinner 2.5s infinite; }\n  .playkit-spinner span {\n    width: 8px;\n    height: 8px;\n    background-color: #fff;\n    display: block;\n    border-radius: 8px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -4px;\n    margin-left: -4px; }\n    .playkit-spinner span:nth-child(1) {\n      transform: rotate(45deg) translateX(-25px) translateY(-25px);\n      background-color: #da1f26; }\n    .playkit-spinner span:nth-child(2) {\n      transform: rotate(90deg) translateX(-25px) translateY(-25px);\n      background-color: #06a885; }\n    .playkit-spinner span:nth-child(3) {\n      transform: rotate(135deg) translateX(-25px) translateY(-25px);\n      background-color: #009344; }\n    .playkit-spinner span:nth-child(4) {\n      transform: rotate(180deg) translateX(-25px) translateY(-25px);\n      background-color: #f8a61a; }\n    .playkit-spinner span:nth-child(5) {\n      transform: rotate(225deg) translateX(-25px) translateY(-25px);\n      background-color: #1b4a97; }\n    .playkit-spinner span:nth-child(6) {\n      transform: rotate(270deg) translateX(-25px) translateY(-25px);\n      background-color: #00abcc; }\n    .playkit-spinner span:nth-child(7) {\n      transform: rotate(315deg) translateX(-25px) translateY(-25px);\n      background-color: #b1d238; }\n    .playkit-spinner span:nth-child(8) {\n      transform: rotate(360deg) translateX(-25px) translateY(-25px);\n      background-color: #fcd203; }\n\n.playkit-control-button-container.playkit-control-play-pause .playkit-control-button {\n  transition: 400ms transform; }\n  .playkit-control-button-container.playkit-control-play-pause .playkit-control-button .playkit-icon-pause {\n    transition: 400ms opacity;\n    opacity: 0;\n    display: none; }\n  .playkit-control-button-container.playkit-control-play-pause .playkit-control-button .playkit-icon-play {\n    transition: 400ms opacity;\n    opacity: 1;\n    display: block; }\n  .playkit-control-button-container.playkit-control-play-pause .playkit-control-button.playkit-is-playing {\n    transform: rotate(360deg); }\n    .playkit-control-button-container.playkit-control-play-pause .playkit-control-button.playkit-is-playing .playkit-icon-pause {\n      opacity: 1;\n      display: block; }\n    .playkit-control-button-container.playkit-control-play-pause .playkit-control-button.playkit-is-playing .playkit-icon-play {\n      opacity: 0;\n      display: none; }\n\n.playkit-touch .playkit-control-button-container.playkit-control-play-pause {\n  display: none; }\n\n.playkit-player.playkit-size-sm .playkit-control-button-container.playkit-control-play-pause {\n  display: none; }\n\n.playkit-control-button-container.playkit-volume-control.playkit-hover .playkit-volume-control-bar {\n  display: block !important; }\n\n.playkit-control-button-container.playkit-volume-control.playkit-is-muted .playkit-icon-volume-waves {\n  opacity: 0;\n  transform: translateX(-5px); }\n\n.playkit-control-button-container.playkit-volume-control.playkit-is-muted .playkit-icon-volume-mute {\n  opacity: 1;\n  transform: scale(1); }\n\n.playkit-control-button-container.playkit-volume-control.playkit-dragging-active .playkit-volume-control-bar {\n  display: block; }\n\n.playkit-control-button-container.playkit-volume-control .playkit-icon-volume-waves {\n  transform: translateX(0px); }\n\n.playkit-control-button-container.playkit-volume-control .playkit-icon-volume-mute {\n  opacity: 1;\n  transform: scale(0); }\n\n.playkit-control-button-container.playkit-volume-control .playkit-icon-volume-waves, .playkit-control-button-container.playkit-volume-control .playkit-icon-volume-mute {\n  transition: 300ms transform, 300ms opacity; }\n\n.playkit-control-button-container.playkit-volume-control i {\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n.playkit-volume-control-bar {\n  position: absolute;\n  z-index: 2;\n  bottom: 38px;\n  left: 0px;\n  display: block;\n  height: 112px;\n  width: 34px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.3);\n  background-color: #333333;\n  padding: 6px;\n  display: none; }\n  .playkit-volume-control-bar:before {\n    position: absolute;\n    width: 34px;\n    height: 14px;\n    bottom: -8px;\n    left: 0;\n    content: ' ';\n    display: block; }\n  .playkit-volume-control-bar .playkit-bar {\n    background-color: #424242;\n    height: 100%;\n    position: relative;\n    cursor: pointer; }\n  .playkit-volume-control-bar .playkit-progress {\n    position: absolute;\n    bottom: 0px;\n    left: 0px;\n    width: 100%;\n    border-radius: 0 0 2px 2px;\n    background-color: #01ACCD; }\n\n.playkit-player.playkit-smart-container-open .playkit-control-button-container.playkit-volume-control.playkit-hover .playkit-volume-control-bar {\n  display: none !important; }\n\n.playkit-touch .playkit-control-button-container.playkit-volume-control.playkit-hover .playkit-volume-control-bar {\n  display: none !important; }\n\n.playkit-control-button-container.playkit-control-fullscreen .playkit-control-button {\n  transition: 100ms transform;\n  transform: scale(1); }\n  .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button .playkit-icon-minimize {\n    display: none; }\n  .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button.playkit-is-fullscreen .playkit-icon-maximize {\n    display: none; }\n  .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button.playkit-is-fullscreen .playkit-icon-minimize {\n    display: block; }\n\n.playkit-player:not(.playkit-touch) .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button:hover {\n  transform: scale(1.1); }\n\n.playkit-player .playkit-seek-bar {\n  padding: 6px 0;\n  cursor: pointer;\n  position: relative; }\n  .playkit-player .playkit-seek-bar:hover .playkit-time-preview,\n  .playkit-player .playkit-seek-bar:hover .playkit-frame-preview, .playkit-player .playkit-seek-bar.playkit-hover .playkit-time-preview,\n  .playkit-player .playkit-seek-bar.playkit-hover .playkit-frame-preview, .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-time-preview,\n  .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-frame-preview {\n    display: block; }\n  .playkit-player .playkit-seek-bar:hover .playkit-progress-bar .playkit-scrubber, .playkit-player .playkit-seek-bar.playkit-hover .playkit-progress-bar .playkit-scrubber, .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-progress-bar .playkit-scrubber {\n    transform: scale(1); }\n  .playkit-player .playkit-seek-bar:hover .playkit-progress-bar .playkit-virtual-progress, .playkit-player .playkit-seek-bar.playkit-hover .playkit-progress-bar .playkit-virtual-progress, .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-progress-bar .playkit-virtual-progress {\n    display: block; }\n  .playkit-player .playkit-seek-bar.playkit-ad-break {\n    cursor: initial; }\n    .playkit-player .playkit-seek-bar.playkit-ad-break .playkit-progress-bar .playkit-progress {\n      background-color: #F9A71B; }\n  .playkit-player .playkit-seek-bar.playkit-live .playkit-progress-bar .playkit-progress {\n    background-color: #DA1F26; }\n  .playkit-player .playkit-seek-bar .playkit-progress-bar {\n    height: 4px;\n    background-color: rgba(255, 255, 255, 0.3);\n    border-radius: 2px;\n    position: relative; }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-progress {\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      z-index: 2;\n      border-radius: 2px 0 0 2px;\n      background-color: #01ACCD; }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-virtual-progress {\n      display: none; }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-buffered, .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-virtual-progress {\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      z-index: 1;\n      border-radius: 2px 0 0 2px;\n      background-color: rgba(255, 255, 255, 0.3); }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-scrubber {\n      position: absolute;\n      z-index: 3;\n      cursor: pointer;\n      display: block;\n      top: -6px;\n      right: -8px;\n      border-radius: 8px;\n      height: 16px;\n      width: 16px;\n      background-color: #FFFFFF;\n      box-shadow: 0 0 31px 0 rgba(0, 0, 0, 0.3);\n      transform: scale(0);\n      transition: 100ms transform; }\n      .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-scrubber:active {\n        opacity: 1;\n        cursor: grabbing; }\n  .playkit-player .playkit-seek-bar .playkit-frame-preview {\n    position: absolute;\n    bottom: 16px;\n    left: 0;\n    height: 94px;\n    width: 164px;\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    border-radius: 4px;\n    z-index: 10; }\n    .playkit-player .playkit-seek-bar .playkit-frame-preview .playkit-frame-preview-img {\n      background-size: auto 100%;\n      width: 100%;\n      height: 100%;\n      position: relative; }\n  .playkit-player .playkit-seek-bar .playkit-time-preview {\n    position: absolute;\n    bottom: 22px;\n    left: 0;\n    z-index: 11;\n    height: 22px;\n    min-width: 48px;\n    padding: 0 3px;\n    text-align: center;\n    border-radius: 3px;\n    background-color: rgba(0, 0, 0, 0.7);\n    font-size: 13px;\n    font-weight: bold;\n    line-height: 22px;\n    color: #fff; }\n  .playkit-player .playkit-seek-bar .playkit-time-preview,\n  .playkit-player .playkit-seek-bar .playkit-frame-preview {\n    display: none; }\n\n.playkit-touch .playkit-virtual-progress, .playkit-touch .playkit-time-preview, .playkit-touch .playkit-frame-preview {\n  display: none !important; }\n\n.playkit-player.playkit-size-sm .playkit-virtual-progress, .playkit-player.playkit-size-sm .playkit-time-preview, .playkit-player.playkit-size-sm .playkit-frame-preview {\n  display: none; }\n\n.playkit-player .playkit-time-display {\n  display: inline-block;\n  line-height: 32px;\n  vertical-align: top;\n  font-size: 14px;\n  padding: 0 23px;\n  font-weight: bold; }\n\n.playkit-touch .playkit-time-display {\n  padding-left: 0; }\n\n.playkit-player.playkit-size-sm .playkit-player .playkit-time-display {\n  padding: 0 12px 0 0; }\n\n.playkit-player .playkit-video-playing-title {\n  font-size: 15px;\n  font-weight: bold;\n  line-height: 18px;\n  padding: 6px 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.playkit-player .playkit-bottom-bar {\n  background: linear-gradient(180deg, transparent 0%, rgba(0, 0, 0, 0.6) 100%);\n  padding: 6px 16px;\n  color: #fff;\n  opacity: 0;\n  visibility: hidden;\n  transition: 100ms opacity;\n  width: 100%;\n  margin-top: auto;\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 0; }\n  .playkit-player .playkit-bottom-bar .playkit-left-controls {\n    float: left;\n    text-align: left; }\n    .playkit-player .playkit-bottom-bar .playkit-left-controls .playkit-control-button-container:first-child {\n      margin-left: 0px; }\n  .playkit-player .playkit-bottom-bar .playkit-right-controls {\n    float: right;\n    text-align: left; }\n    .playkit-player .playkit-bottom-bar .playkit-right-controls .playkit-control-button-container:last-child {\n      margin-right: 0px; }\n  .playkit-player .playkit-bottom-bar .playkit-control-button-container {\n    margin: 0 6px; }\n\n.playkit-player.playkit-hover .playkit-bottom-bar,\n.playkit-player.playkit-state-paused .playkit-bottom-bar,\n.playkit-player.playkit-menu-active .playkit-bottom-bar {\n  opacity: 1;\n  visibility: visible; }\n\n.playkit-player.playkit-overlay-active .playkit-bottom-bar {\n  opacity: 0;\n  visibility: hidden; }\n\n.playkit-player.playkit-size-sm .playkit-bottom-bar {\n  padding: 6px 8px; }\n  .playkit-player.playkit-size-sm .playkit-bottom-bar .playkit-time-display {\n    padding-left: 0; }\n\n.playkit-player .playkit-top-bar {\n  background: linear-gradient(0deg, transparent 0%, rgba(0, 0, 0, 0.6) 100%);\n  padding: 14px 16px;\n  color: #fff;\n  opacity: 0;\n  visibility: hidden;\n  transition: 100ms opacity;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0; }\n  .playkit-player .playkit-top-bar .playkit-left-controls {\n    text-align: left;\n    min-width: 0; }\n  .playkit-player .playkit-top-bar .playkit-right-controls {\n    text-align: left; }\n    .playkit-player .playkit-top-bar .playkit-right-controls .playkit-control-button-container {\n      margin: 0 6px; }\n      .playkit-player .playkit-top-bar .playkit-right-controls .playkit-control-button-container:last-child {\n        margin-right: 0; }\n\n.playkit-player.playkit-hover .playkit-top-bar,\n.playkit-player.playkit-state-paused .playkit-top-bar,\n.playkit-player.playkit-menu-active .playkit-top-bar {\n  opacity: 1;\n  visibility: visible; }\n\n.playkit-player.playkit-overlay-active .playkit-top-bar {\n  opacity: 0;\n  visibility: hidden; }\n\n.playkit-player.playkit-size-sm .playkit-player .playkit-top-bar {\n  padding: 8px 8px 20px 8px; }\n\n@keyframes playkit-overlayPlayIconIn {\n  from {\n    opacity: 1;\n    transform: scale(0); }\n  to {\n    opacity: 0;\n    transform: scale(1); } }\n\n.playkit-overlay-play {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%; }\n  .playkit-overlay-play.playkit-in .playkit-icon {\n    animation: playkit-overlayPlayIconIn 400ms linear forwards; }\n  .playkit-overlay-play .playkit-icon {\n    width: 144px;\n    height: 144px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: -72px 0 0 -72px;\n    opacity: 0; }\n\n.playkit-pre-playback-play-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  background-position: center center;\n  background-size: contain;\n  background-repeat: no-repeat; }\n  .playkit-pre-playback-play-overlay.playkit-has-poster {\n    background-color: #000; }\n  .playkit-pre-playback-play-overlay .playkit-pre-playback-play-button {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    height: 108px;\n    width: 108px;\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    background-color: rgba(0, 0, 0, 0.5);\n    margin: -54px 0 0 -54px;\n    border-radius: 54px;\n    padding: 20px;\n    cursor: pointer; }\n    .playkit-pre-playback-play-overlay .playkit-pre-playback-play-button:hover {\n      border: 2px solid rgba(255, 255, 255, 0.4); }\n    .playkit-pre-playback-play-overlay .playkit-pre-playback-play-button:active {\n      opacity: 0.7;\n      transform: scale(1); }\n\n.playkit-pre-playback .playkit-player-gui {\n  opacity: 0 !important;\n  display: none; }\n\n.playkit-btn-skip-ad {\n  position: absolute;\n  bottom: 60px;\n  right: 16px; }\n\n.playkit-skip-ad {\n  color: #fff;\n  font-size: 20px;\n  font-weight: bold;\n  line-height: 24px;\n  text-shadow: 0 0 6px rgba(0, 0, 0, 0.6);\n  position: absolute;\n  bottom: 66px;\n  right: 16px; }\n\n.playkit-live-tag {\n  color: #DA1F26;\n  font-size: 14px;\n  font-weight: bold;\n  letter-spacing: 1px;\n  line-height: 19px;\n  border: 2px solid #DA1F26;\n  border-radius: 4px;\n  text-transform: uppercase;\n  text-align: center;\n  display: inline-block;\n  padding: 0 3px 0 5px;\n  margin: 5px 23px;\n  cursor: default; }\n  .playkit-live-tag.playkit-non-live-playhead {\n    background-color: rgba(255, 255, 255, 0.2);\n    border: none;\n    color: #fff;\n    line-height: 23px;\n    padding: 0 5px 0 7px;\n    cursor: pointer; }\n\n.playkit-player.playkit-size-sm .playkit-live-tag {\n  margin-left: 0; }\n\n.playkit-icon {\n  display: inline-block;\n  font-size: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: 50% 50%; }\n\n.playkit-icon-maximize {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M800 269.255v114.745c0 17.673 14.327 32 32 32s32-14.327 32-32v-192c0-17.673-14.327-32-32-32h-192c-17.673 0-32 14.327-32 32s14.327 32 32 32h114.745l-137.373 137.373c-12.497 12.497-12.497 32.758 0 45.255s32.758 12.497 45.255 0l137.373-137.373z' /%3E %3Cpath fill='%23fff' d='M224 754.745v-114.745c0-17.673-14.327-32-32-32s-32 14.327-32 32v192c0 17.673 14.327 32 32 32h192c17.673 0 32-14.327 32-32s-14.327-32-32-32h-114.745l137.373-137.373c12.497-12.497 12.497-32.758 0-45.255s-32.758-12.497-45.255 0l-137.373 137.373z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-minimize {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M672 306.745v-114.745c0-17.673-14.327-32-32-32s-32 14.327-32 32v192c0 17.673 14.327 32 32 32h192c17.673 0 32-14.327 32-32s-14.327-32-32-32h-114.745l137.373-137.373c12.497-12.497 12.497-32.758 0-45.255s-32.758-12.497-45.255 0l-137.373 137.373z' /%3E%3Cpath fill='%23fff' d='M352 717.255v114.745c0 17.673 14.327 32 32 32s32-14.327 32-32v-192c0-17.673-14.327-32-32-32h-192c-17.673 0-32 14.327-32 32s14.327 32 32 32h114.745l-137.373 137.373c-12.497 12.497-12.497 32.758 0 45.255s32.758 12.497 45.255 0l137.373-137.373z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-play {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M796.806 461.202c44.919 28.075 44.739 73.706 0 101.668l-459.472 287.171c-44.919 28.075-81.334 7.915-81.334-45.305v-585.4c0-53.096 36.595-73.266 81.334-45.305l459.472 287.171z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-pause {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M256 287.843c0-35.259 28.407-63.843 64-63.843 35.346 0 64 28.564 64 63.843v448.314c0 35.259-28.407 63.843-64 63.843-35.346 0-64-28.564-64-63.843v-448.314zM640 287.843c0-35.259 28.407-63.843 64-63.843 35.346 0 64 28.564 64 63.843v448.314c0 35.259-28.407 63.843-64 63.843-35.346 0-64-28.564-64-63.843v-448.314z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-volume-base {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M128 416v192h96v-192h-96zM64 383.853c0-17.592 14.012-31.853 32.094-31.853h159.813c17.725 0 32.094 14.581 32.094 31.853v256.295c0 17.592-14.012 31.853-32.094 31.853h-159.813c-17.725 0-32.094-14.581-32.094-31.853v-256.295z' /%3E%3Cpath fill='%23fff' d='M288 634.342l160 88.889v-422.462l-160 88.889v244.684zM224 352l231.787-128.771c31.046-17.248 56.213-2.487 56.213 32.476v512.589c0 35.184-25.054 49.786-56.213 32.476l-231.787-128.771v-320z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-volume-waves {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M802.017 837.177c82.359-86.627 129.183-201.774 129.183-324.26 0-123.976-47.976-240.409-132.127-327.329-12.293-12.697-32.552-13.025-45.249-0.732s-13.025 32.552-0.732 45.249c72.692 75.084 114.109 175.597 114.109 282.812 0 105.928-40.422 205.331-111.566 280.162-12.177 12.808-11.666 33.063 1.143 45.24s33.063 11.666 45.24-1.143z' /%3E%3Cpath fill='%23fff' d='M667.436 743.221c67.761-60.884 107.273-147.888 107.273-241.233 0-87.318-34.552-169.203-94.836-229.446-12.501-12.493-32.762-12.486-45.255 0.015s-12.486 32.762 0.015 45.255c48.375 48.342 76.075 113.989 76.075 184.176 0 75.021-31.679 144.776-86.048 193.627-13.146 11.812-14.227 32.044-2.416 45.19s32.044 14.227 45.19 2.416z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-volume-mute {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M768 466.745l-67.986-67.986c-12.213-12.213-32.654-12.393-45.151 0.104-12.584 12.584-12.543 32.711-0.104 45.151l67.986 67.986-67.986 67.986c-12.213 12.213-12.393 32.654 0.104 45.151 12.584 12.584 32.711 12.543 45.151 0.104l67.986-67.986 67.986 67.986c12.213 12.213 32.654 12.393 45.151-0.104 12.584-12.584 12.543-32.711 0.104-45.151l-67.986-67.986 67.986-67.986c12.213-12.213 12.393-32.654-0.104-45.151-12.584-12.584-32.711-12.543-45.151-0.104l-67.986 67.986z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-close {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M573.162 512l214.269-214.269c16.772-16.772 16.688-44.071-0.202-60.96-17.007-17.007-44.182-16.98-60.96-0.202l-214.269 214.269-214.269-214.269c-16.772-16.772-44.071-16.688-60.96 0.202-17.007 17.007-16.98 44.182-0.202 60.96l214.269 214.269-214.269 214.269c-16.772 16.772-16.688 44.071 0.202 60.96 17.007 17.007 44.182 16.98 60.96 0.202l214.269-214.269 214.269 214.269c16.772 16.772 44.071 16.688 60.96-0.202 17.007-17.007 16.98-44.182 0.202-60.96l-214.269-214.269z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-share {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M318.641 446.219l236.155-142.257c-0.086-1.754-0.129-3.52-0.129-5.295 0-58.91 47.756-106.667 106.667-106.667s106.667 47.756 106.667 106.667c0 58.91-47.756 106.667-106.667 106.667-33.894 0-64.095-15.808-83.633-40.454l-236.467 142.445c-0.132-3.064-0.394-6.095-0.779-9.087l7.271-12.835-0.117 53.333-7.183-12.743c0.399-3.046 0.67-6.131 0.806-9.252l236.467 142.383c19.538-24.648 49.741-40.457 83.636-40.457 58.91 0 106.667 47.756 106.667 106.667s-47.756 106.667-106.667 106.667c-58.91 0-106.667-47.756-106.667-106.667 0-1.775 0.043-3.539 0.129-5.293l-236.19-142.216c-19.528 24.867-49.868 40.841-83.939 40.841-58.91 0-106.667-47.756-106.667-106.667s47.756-106.667 106.667-106.667c34.091 0 64.447 15.993 83.974 40.886zM234.667 554.667c23.564 0 42.667-19.103 42.667-42.667s-19.103-42.667-42.667-42.667c-23.564 0-42.667 19.103-42.667 42.667s19.103 42.667 42.667 42.667zM661.333 341.333c23.564 0 42.667-19.103 42.667-42.667s-19.103-42.667-42.667-42.667c-23.564 0-42.667 19.103-42.667 42.667s19.103 42.667 42.667 42.667zM661.333 768c23.564 0 42.667-19.103 42.667-42.667s-19.103-42.667-42.667-42.667c-23.564 0-42.667 19.103-42.667 42.667s19.103 42.667 42.667 42.667z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-settings {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M803.451 546.033c2.552-22.107 2.552-44.408 0.246-64.81-1.084-6.208-6.499-10.721-12.535-10.671-30.286 0.533-57.727-17.773-68.866-45.941s-3.64-60.291 18.795-80.593c3.935-3.569 4.416-9.583 0.92-13.959-13.595-17.35-29.146-33.073-46.311-46.83-4.23-3.38-10.359-2.886-14.783 1.966-14.421 14.721-34.212 22.938-54.434 22.761-9.009 0.041-17.942-1.652-26.865-5.212-28.414-11.992-46.226-40.546-44.49-71.542 0.335-5.319-3.547-9.972-8.785-10.588-21.926-2.538-44.068-2.595-65.961-0.176-5.349 0.6-9.341 5.207-9.175 10.514 1.027 30.384-16.802 58.251-45.764 70.431-8.238 3.138-16.993 4.701-25.207 4.609-20.599 0.206-40.395-7.982-55.482-23.363-2.014-2.187-4.849-3.435-7.553-3.445-2.441 0.015-4.811 0.83-6.513 2.139-17.541 13.798-33.455 29.547-47.262 46.729-3.418 4.337-2.922 10.575 0.97 14.162 22.816 20.692 30.19 53.479 17.807 83.351-13.035 27.396-41.135 44.394-71.446 43.222-5.112-0.197-9.499 3.606-10.086 9.179-2.673 22.023-2.673 44.289-0.212 64.867 1.080 6.27 6.559 10.824 13.309 10.737l2.225 0.006c28.935 0.604 54.726 18.391 65.634 45.374 11.22 28.205 3.921 60.407-18.565 81.204-3.866 3.509-4.341 9.418-0.895 13.742 13.545 17.354 29.027 33.106 46.042 46.867 4.303 3.449 10.547 2.954 14.986-1.907 14.414-14.76 34.226-23.001 54.43-22.82 9.070-0.052 18.063 1.668 27.041 5.299 28.19 12.071 45.891 40.41 44.347 71.468-0.342 5.312 3.536 9.962 8.802 10.578 21.915 2.548 44.049 2.605 65.929 0.176 5.364-0.604 9.364-5.227 9.191-10.598-0.997-30.358 16.84-58.183 45.452-70.201 8.263-3.256 17.070-4.908 25.521-4.865 20.676-0.206 40.533 8.070 55.398 23.38 2.039 2.195 4.898 3.446 7.673 3.455 2.268-0.011 4.468-0.776 6.321-2.228 17.625-13.724 33.599-29.444 47.415-46.611 3.426-4.348 2.928-10.6-0.863-14.097-22.358-20.082-30.057-51.85-19.372-79.939s37.55-46.71 67.745-46.857h5.229c5.12-0.026 9.413-3.875 9.996-8.962zM861.733 552.735c-3.961 34.572-33.157 60.748-68.129 60.926h-5.235c-5.803 0.028-10.991 3.624-13.054 9.048s-0.577 11.558 4.020 15.69c26.602 24.519 29.853 65.381 7.275 94.034-16.847 20.934-36.063 39.845-57.197 56.302-12.034 9.427-26.861 14.584-42.368 14.658-19.254-0.051-37.623-8.090-50.269-21.718-3.221-3.315-7.66-5.165-12.712-5.118-1.425-0.007-2.839 0.258-3.554 0.532-5.581 2.346-9.136 7.892-8.937 13.966 1.152 35.958-25.509 66.771-61.307 70.804-26.332 2.923-52.909 2.854-79.246-0.208-36.286-4.245-62.897-36.157-60.576-72.186 0.304-6.123-3.235-11.788-8.302-13.964-1.328-0.536-2.748-0.808-4.606-0.8-4.651-0.041-9.118 1.817-11.635 4.367-24.544 27.036-65.886 30.311-94.481 7.394-20.587-16.65-39.207-35.595-55.308-56.226-22.552-28.277-19.261-69.208 7.317-93.334 4.474-4.138 5.939-10.604 3.748-16.115-2.052-5.076-6.932-8.442-11.794-8.55-36.436 0.464-66.759-24.741-72.949-60.89-3.243-26.718-3.243-53.731-0.055-79.964 3.744-35.827 34.642-62.605 70.642-61.219 6.877 0.266 13.251-3.59 15.584-8.401 2.309-5.59 0.861-12.028-3.789-16.247-26.603-24.51-29.856-65.368-7.293-93.994 16.767-20.868 35.856-39.76 57.129-56.491 12.099-9.322 26.921-14.42 42.463-14.513 19.308 0.059 37.717 8.166 50.145 21.684 3.263 3.322 7.737 5.172 12.994 5.126 1.471 0.015 2.933-0.245 3.363-0.39 5.601-2.359 9.165-7.93 8.957-14.077-1.126-35.941 25.542-66.721 61.322-70.731 26.322-2.909 52.889-2.84 79.251 0.212 36.244 4.265 62.828 36.125 60.546 72.343-0.339 6.047 3.159 11.654 8.186 13.782 1.381 0.55 2.855 0.829 4.726 0.823 4.663 0.040 9.142-1.819 11.615-4.312 24.439-26.99 65.656-30.312 94.137-7.557 20.721 16.607 39.456 35.549 55.655 56.225 22.667 28.35 19.38 69.439-7.531 93.846-4.33 3.918-5.776 10.112-3.628 15.542s7.438 8.96 13.543 8.854c34.999-0.298 65.076 24.766 71.337 60.925 3.065 26.552 3.065 53.368 0 79.92zM511.956 589.951c43.215-0.108 78.137-35.17 78.072-78.385 0-31.732-19.132-60.334-48.461-72.448s-63.068-5.35-85.461 17.133c-22.393 22.483-29.022 56.249-16.791 85.529s40.909 48.298 72.641 48.171zM512.146 648.617c-55.438 0.221-105.58-33.029-126.965-84.224s-9.796-110.233 29.358-149.543c39.153-39.31 98.144-51.136 149.424-29.956s84.731 71.189 84.732 126.627c0.114 75.549-60.999 136.907-136.548 137.096z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-check {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M342.481 563.894c-12.577-12.416-32.838-12.285-45.254 0.292s-12.285 32.838 0.292 45.254l118.857 117.333c13.275 13.105 34.901 12.123 46.933-2.131l297.143-352c11.4-13.505 9.694-33.694-3.811-45.094s-33.694-9.694-45.094 3.811l-274.828 325.566-94.238-93.030z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-language {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M512 800c159.058 0 288-128.942 288-288s-128.942-288-288-288c-159.058 0-288 128.942-288 288s128.942 288 288 288zM512 864c-194.404 0-352-157.596-352-352s157.596-352 352-352c194.404 0 352 157.596 352 352s-157.596 352-352 352z' /%3E%3Cpath fill='%23fff' d='M441.231 173.324c-76.632 84.62-121.231 207.208-121.231 338.676 0 134.304 46.556 259.282 126.083 343.936l46.646-43.82c-68.041-72.429-108.728-181.651-108.728-300.116 0-116.001 39.001-223.203 104.669-295.716l-47.438-42.96z' /%3E%3Cpath fill='%23fff' d='M584.297 173.324c76.632 84.62 121.231 207.208 121.231 338.676 0 134.304-46.556 259.282-126.083 343.936l-46.646-43.82c68.041-72.429 108.728-181.651 108.728-300.116 0-116.001-39.001-223.203-104.669-295.716l47.438-42.96z' /%3E%3Cpath fill='%23fff' d='M840.432 419.786c-81.65-22.637-200.551-35.786-328.432-35.786-128.056 0-247.103 13.185-328.758 35.876l17.136 61.663c75.47-20.972 188.938-33.539 311.622-33.539 122.521 0 235.854 12.533 311.334 33.459l17.099-61.674z' /%3E%3Cpath fill='%23fff' d='M840.432 605.754c-81.65 22.637-200.551 35.786-328.432 35.786-128.056 0-247.103-13.185-328.758-35.876l17.136-61.663c75.47 20.972 188.938 33.539 311.622 33.539 122.521 0 235.854-12.533 311.334-33.459l17.099 61.674z' /%3E%3Cpath fill='%23fff' d='M480 192h64v640h-64v-640z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-quality {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M159.904 192h288.234c17.277 0 31.862 14.323 31.862 31.992 0 17.792-14.261 31.993-31.853 31.994l-288.147 0.014v544.174c-0.017-0.18 704-0.174 704-0.174v-128.006c0-17.795 14.327-31.994 32-31.994 17.796 0 32 14.34 32 32.029v128.145c0 35.25-28.639 63.826-63.904 63.826h-704.192c-35.293 0-63.904-28.875-63.904-63.826v-544.348c0-35.25 28.639-63.826 63.904-63.826zM501.818 378.182c108.449 0 196.364-87.915 196.364-196.364 0-29.091 43.636-29.091 43.636 0 0 108.449 87.915 196.364 196.364 196.364 29.091 0 29.091 43.636 0 43.636-108.449 0-196.364 87.915-196.364 196.364 0 29.091-43.636 29.091-43.636 0 0-108.449-87.915-196.364-196.364-196.364-29.091 0-29.091-43.636 0-43.636z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-captions {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M160 771.213c-0.017-0.172 704-0.166 704-0.166v-518.261c0.017 0.172-704 0.166-704 0.166v518.261zM96 252.787c0-33.572 28.639-60.787 63.904-60.787h704.192c35.293 0 63.904 27.5 63.904 60.787v518.427c0 33.572-28.639 60.787-63.904 60.787h-704.192c-35.293 0-63.904-27.5-63.904-60.787v-518.427z' /%3E%3Cpath fill='%23fff' d='M490.583 568.655c0 7.729-2.311 15.987-6.933 24.777s-11.668 17.162-21.14 25.118c-9.471 7.956-21.405 14.358-35.801 19.208s-30.611 7.274-48.644 7.274c-38.34 0-68.268-11.176-89.787-33.528s-32.278-52.319-32.278-89.901c0-25.459 4.925-47.962 14.775-67.511s24.095-34.665 42.734-45.348c18.639-10.684 40.916-16.025 66.829-16.025 16.063 0 30.8 2.349 44.212 7.047s24.777 10.759 34.096 18.185c9.32 7.425 16.442 15.343 21.367 23.754s7.388 16.253 7.388 23.527c0 7.425-2.766 13.714-8.297 18.867s-12.237 7.729-20.117 7.729c-5.152 0-9.433-1.326-12.843-3.978s-7.236-6.933-11.479-12.843c-7.577-11.517-15.495-20.155-23.754-25.913s-18.753-8.638-31.482-8.638c-18.336 0-33.111 7.16-44.325 21.481s-16.821 33.907-16.821 58.759c0 11.669 1.44 22.39 4.319 32.164s7.047 18.109 12.502 25.004c5.455 6.895 12.047 12.123 19.776 15.684s16.215 5.342 25.459 5.342c12.426 0 23.072-2.879 31.937-8.638s16.707-14.548 23.527-26.368c3.789-6.971 7.88-12.426 12.275-16.366s9.774-5.91 16.139-5.91c7.577 0 13.866 2.879 18.867 8.638s7.501 11.896 7.501 18.412zM767.219 568.655c0 7.729-2.311 15.987-6.933 24.777s-11.668 17.162-21.14 25.118c-9.471 7.956-21.405 14.358-35.801 19.208s-30.611 7.274-48.644 7.274c-38.34 0-68.268-11.176-89.787-33.528s-32.278-52.319-32.278-89.901c0-25.459 4.925-47.962 14.775-67.511s24.095-34.665 42.734-45.348c18.639-10.684 40.916-16.025 66.829-16.025 16.063 0 30.8 2.349 44.212 7.047s24.777 10.759 34.096 18.185c9.32 7.425 16.442 15.343 21.367 23.754s7.388 16.253 7.388 23.527c0 7.425-2.766 13.714-8.297 18.867s-12.237 7.729-20.117 7.729c-5.152 0-9.433-1.326-12.843-3.978s-7.236-6.933-11.479-12.843c-7.577-11.517-15.495-20.155-23.754-25.913s-18.753-8.638-31.482-8.638c-18.336 0-33.111 7.16-44.325 21.481s-16.821 33.907-16.821 58.759c0 11.669 1.44 22.39 4.319 32.164s7.047 18.109 12.502 25.004c5.455 6.895 12.047 12.123 19.776 15.684s16.215 5.342 25.459 5.342c12.426 0 23.072-2.879 31.937-8.638s16.707-14.548 23.527-26.368c3.789-6.971 7.88-12.426 12.275-16.366s9.774-5.91 16.139-5.91c7.577 0 13.866 2.879 18.867 8.638s7.501 11.896 7.501 18.412z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-speed {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M512 832c35.346 0 64-28.654 64-64s-28.654-64-64-64c-35.346 0-64 28.654-64 64s28.654 64 64 64zM480.239 643.971c-0.158-1.272-0.239-2.566-0.239-3.876v-192.19c0-17.621 14.204-31.905 32-31.905 17.673 0 32 14.497 32 31.905v192.19c0 1.313-0.079 2.607-0.232 3.878 55.325 14.128 96.232 64.301 96.232 124.027 0 70.692-57.308 128-128 128s-128-57.308-128-128c0-59.729 40.91-109.903 96.239-124.029zM928 576c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-194.404-157.596-352-352-352s-352 157.596-352 352c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-229.75 186.25-416 416-416s416 186.25 416 416z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-audio {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M768 625.124v-354.531l-352 135.385v330.022c0 70.692-57.308 128-128 128s-128-57.308-128-128c0-70.692 57.308-128 128-128 23.314 0 45.173 6.233 64 17.124v-241.124c0-13.241 8.155-25.114 20.513-29.867l416-160c20.96-8.062 43.487 7.41 43.487 29.867v512c0 70.692-57.308 128-128 128s-128-57.308-128-128c0-70.692 57.308-128 128-128 23.314 0 45.173 6.233 64 17.124zM288 800c35.346 0 64-28.654 64-64s-28.654-64-64-64c-35.346 0-64 28.654-64 64s28.654 64 64 64zM704 800c35.346 0 64-28.654 64-64s-28.654-64-64-64c-35.346 0-64 28.654-64 64s28.654 64 64 64z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-copy {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M703.727 320c35.497 0 64.273 28.482 64.273 64.003v351.993c0 35.348-28.862 64.003-64.273 64.003h-191.454c-35.496 0-64.271-28.48-64.273-64.001l255.727 0.001v-352c0 0-28.356 0.147-63.727 0.001v-63.912l63.727-0.088zM256 288.187c0-35.45 28.398-64.187 63.988-64.187h192.025c35.339 0 63.988 28.706 63.988 64.187v319.625c0 35.45-28.398 64.187-63.988 64.187h-192.025c-35.339 0-63.988-28.706-63.988-64.187v-319.625zM320 288v320h192v-320h-192z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-facebook {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M432 405.333h-80v106.667h80v320h133.333v-320h97.12l9.547-106.667h-106.667v-44.453c0-25.467 5.12-35.547 29.733-35.547h76.933v-133.333h-101.547c-95.893 0-138.453 42.213-138.453 123.067v90.267z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-twitter {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M832 316.614c-23.547 10.29-48.853 17.221-75.413 20.345 27.12-15.987 47.947-41.319 57.733-71.508-25.36 14.806-53.467 25.568-83.387 31.37-23.92-25.122-58.080-40.82-95.84-40.82-84.773 0-147.067 77.861-127.92 158.687-109.093-5.381-205.84-56.833-270.613-135.035-34.4 58.094-17.84 134.090 40.613 172.574-21.493-0.683-41.76-6.484-59.44-16.171-1.44 59.879 42.16 115.898 105.307 128.368-18.48 4.935-38.72 6.090-59.307 2.205 16.693 51.347 65.173 88.702 122.667 89.752-55.2 42.605-124.747 61.637-194.4 53.552 58.107 36.673 127.147 58.067 201.28 58.067 243.787 0 381.52-202.684 373.2-384.473 25.653-18.244 47.92-41.004 65.52-66.914v0z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-google-plus {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M352 556.8h127.040c-5.12 32.928-38.4 96.64-127.040 96.64-76.48 0-138.88-63.328-138.88-141.44 0-78.080 62.4-141.44 138.88-141.44 43.52 0 72.64 18.56 89.28 34.56l60.8-58.56c-39.040-36.48-89.6-58.56-150.080-58.56-123.84 0-224 100.16-224 224s100.16 224 224 224c129.28 0 215.072-90.88 215.072-218.88 0-14.72-1.632-25.92-3.552-37.12h-211.52v76.8zM800 544v96h-64v-96h-96v-64h96v-96h64v96h96v64h-96z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-linked-in {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M324.8 290.087c0 36.506-29.6 66.087-66.133 66.087s-66.133-29.581-66.133-66.087c0-36.48 29.6-66.087 66.133-66.087s66.133 29.607 66.133 66.087zM325.333 409.043h-133.333v422.957h133.333v-422.957zM538.187 409.043h-132.48v422.957h132.507v-222.026c0-123.45 160.773-133.549 160.773 0v222.026h133.013v-267.811c0-208.306-237.92-200.719-293.813-98.179v-56.967z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-email {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M256 768c-35.346 0-64-28.654-64-64v-352c0-35.346 28.654-64 64-64h512c35.346 0 64 28.654 64 64v352c0 35.346-28.654 64-64 64h-512zM512 467.488l147.52-115.488h-295.040l147.52 115.488zM748.48 352l-211.2 179.2c-0.713 1.308-1.572 2.532-2.56 3.648-12.707 12.158-32.733 12.158-45.44 0-0.988-1.116-1.847-2.34-2.56-3.648l-211.2-179.2h-19.52v352h512v-352h-19.52z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-embed {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M377.989 579.335c12.669 12.904 12.669 33.777 0 46.68-12.733 12.969-33.427 12.969-46.16 0l-104.727-106.667c-12.669-12.904-12.669-33.777 0-46.68l104.727-106.667c12.733-12.969 33.427-12.969 46.16 0 12.669 12.904 12.669 33.777 0 46.68l-81.812 83.327 81.812 83.327zM646.011 412.68c-12.669-12.904-12.669-33.777 0-46.68 12.733-12.969 33.427-12.969 46.16 0l104.727 106.667c12.669 12.904 12.669 33.777 0 46.68l-104.727 106.667c-12.733 12.969-33.427 12.969-46.16 0-12.669-12.904-12.669-33.777 0-46.68l81.812-83.327-81.812-83.327zM572.293 250.6c17.455 4.445 28.025 22.388 23.686 40.066l-104.727 426.669c-4.349 17.719-22.048 28.535-39.545 24.079-17.455-4.445-28.025-22.388-23.686-40.066l104.727-426.669c4.349-17.719 22.048-28.535 39.545-24.079z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-link {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M355.028 445.537c12.497 12.497 12.497 32.758 0 45.255s-32.758 12.497-45.255 0l-24.141-24.141c-49.92-49.92-49.832-130.999 0.094-180.925 49.984-49.984 130.995-50.025 180.955-0.064l113.266 113.266c49.964 49.964 49.935 130.955-0.064 180.955-12.497 12.497-32.758 12.497-45.255 0s-12.497-32.758 0-45.255c25.013-25.013 25.027-65.482 0.064-90.445l-113.266-113.266c-24.957-24.957-65.445-24.936-90.445 0.064-24.955 24.955-24.998 65.511-0.094 90.416l24.141 24.141zM668.972 578.463c-12.497-12.497-12.497-32.758 0-45.255s32.758-12.497 45.255 0l24.141 24.141c49.92 49.92 49.832 130.999-0.094 180.925-49.984 49.984-130.995 50.025-180.955 0.064l-113.266-113.266c-49.964-49.964-49.935-130.955 0.064-180.955 12.497-12.497 32.758-12.497 45.255 0s12.497 32.758 0 45.255c-25.013 25.013-25.027 65.482-0.064 90.445l113.266 113.266c24.957 24.957 65.445 24.936 90.445-0.064 24.955-24.955 24.998-65.511 0.094-90.416l-24.141-24.141z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-arrow-down {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M301.255 338.745c-24.994-24.994-65.516-24.994-90.51 0s-24.994 65.516 0 90.51l256 256c24.994 24.994 65.516 24.994 90.51 0l256-256c24.994-24.994 24.994-65.516 0-90.51s-65.516-24.994-90.51 0l-210.745 210.745-210.745-210.745z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-start-over {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M255.271 339.053c94.182-126.513 270.298-165.203 410.222-84.418 150.758 87.040 202.411 279.813 115.371 430.571s-279.813 202.411-430.571 115.371c-61.424-35.463-107.948-89.4-134.169-153.673-7.677-18.818-29.156-27.85-47.974-20.173s-27.85 29.156-20.173 47.974c32.339 79.269 89.818 145.906 165.517 189.611 185.96 107.364 423.747 43.649 531.111-142.311s43.649-423.747-142.311-531.111c-172.433-99.554-389.428-52.014-505.682 103.69l-27.226-78.49c-6.66-19.202-27.626-29.368-46.828-22.708s-29.368 27.626-22.708 46.828l52.434 151.164c5.36 15.452 20.275 25.513 36.61 24.694l159.799-8.011c20.299-1.018 35.929-18.298 34.911-38.596s-18.298-35.929-38.596-34.911l-89.738 4.499z' /%3E%3C/svg%3E\"); }\n\n.playkit-icon-rewind {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' opacity='0.5' d='M258.471 323.053c94.182-126.513 270.298-165.203 410.222-84.418 150.758 87.040 202.411 279.813 115.371 430.571s-279.813 202.411-430.571 115.371c-61.424-35.463-107.948-89.4-134.169-153.673-7.677-18.818-29.156-27.85-47.974-20.173s-27.85 29.156-20.173 47.974c32.339 79.269 89.818 145.906 165.517 189.611 185.96 107.364 423.747 43.649 531.111-142.311s43.649-423.747-142.311-531.111c-172.433-99.554-389.428-52.014-505.682 103.69l-27.226-78.49c-6.66-19.202-27.626-29.368-46.828-22.708s-29.368 27.626-22.708 46.828l52.434 151.164c5.36 15.452 20.275 25.513 36.61 24.694l159.799-8.011c20.299-1.018 35.929-18.298 34.911-38.596s-18.298-35.929-38.596-34.911l-89.738 4.499z'%3E%3C/path%3E%3Cpath fill='%23fff' d='M816.068 431.974c-20.553-78.699-71.369-149.456-147.375-193.338-139.923-80.785-316.040-42.095-410.222 84.418l89.738-4.499c20.299-1.018 37.579 14.613 38.596 34.911s-14.613 37.579-34.911 38.596l-159.799 8.011c-16.335 0.819-31.25-9.242-36.61-24.694l-52.434-151.164c-6.66-19.202 3.506-40.167 22.708-46.828s40.167 3.506 46.828 22.708l27.226 78.49c116.254-155.703 333.248-203.244 505.682-103.69 91.184 52.645 152.976 136.648 179.618 230.523l-69.044 26.555z'%3E%3C/path%3E%3C/svg%3E\"); }\n\n.playkit-icon-rewind-10 {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1024 1024' width='36' height='36'%3E%3Cpath fill='%23fff' d='M258.471 323.053c94.182-126.513 270.298-165.203 410.222-84.418 150.758 87.040 202.411 279.813 115.371 430.571s-279.813 202.411-430.571 115.371c-61.424-35.463-107.948-89.4-134.169-153.673-7.677-18.818-29.156-27.85-47.974-20.173s-27.85 29.156-20.173 47.974c32.339 79.269 89.818 145.906 165.517 189.611 185.96 107.364 423.747 43.649 531.111-142.311s43.649-423.747-142.311-531.111c-172.433-99.554-389.428-52.014-505.682 103.69l-27.226-78.49c-6.66-19.202-27.626-29.368-46.828-22.708s-29.368 27.626-22.708 46.828l52.434 151.164c5.36 15.452 20.275 25.513 36.61 24.694l159.799-8.011c20.299-1.018 35.929-18.298 34.911-38.596s-18.298-35.929-38.596-34.911l-89.738 4.499z'%3E%3C/path%3E%3Cpath fill='%23fff' d='M413.327 636.083h67.358v-252.083h-48.527c-2.173 7.358-4.949 13.589-8.329 18.693s-7.726 9.139-13.037 12.106c-5.311 2.967-11.709 5.103-19.193 6.409s-16.417 1.958-26.798 1.958v41.302h48.527v171.616zM596.807 554.192c0 17.803 1.569 29.849 4.708 36.139s8.208 9.435 15.21 9.435c7.001 0 12.071-3.145 15.21-9.435s4.708-18.336 4.708-36.139v-83.316c0-17.803-1.569-29.849-4.708-36.139s-8.208-9.435-15.21-9.435c-7.001 0-12.071 3.145-15.21 9.435s-4.708 18.336-4.708 36.139v83.316zM529.449 512.534c0-25.398 1.75-46.405 5.251-63.021s8.812-29.789 15.934-39.522c7.122-9.732 16.176-16.497 27.16-20.295s23.962-5.697 38.93-5.697c14.969 0 27.945 1.899 38.93 5.697s20.038 10.563 27.16 20.295c7.122 9.732 12.433 22.906 15.934 39.522s5.251 37.622 5.251 63.021c0 25.636-1.75 46.702-5.251 63.199s-8.812 29.552-15.934 39.166c-7.122 9.613-16.176 16.2-27.16 19.761s-23.962 5.341-38.93 5.341c-14.969 0-27.945-1.78-38.93-5.341s-20.038-10.147-27.16-19.761c-7.122-9.613-12.433-22.668-15.934-39.166s-5.251-37.563-5.251-63.199z'%3E%3C/path%3E%3C/svg%3E\"); }\n\n.playkit-unmute-button-container {\n  display: inline-block;\n  position: absolute;\n  top: 13px;\n  left: 16px;\n  z-index: 15; }\n  .playkit-unmute-button-container.playkit-show-icon-only .playkit-btn.playkit-unmute-button {\n    max-width: 64px; }\n    .playkit-unmute-button-container.playkit-show-icon-only .playkit-btn.playkit-unmute-button span {\n      transform: translateX(10px);\n      opacity: 0; }\n\n.playkit-btn.playkit-unmute-button {\n  font-size: 15px;\n  max-width: 200px;\n  transition: max-width 200ms;\n  padding: 0 16px;\n  white-space: nowrap; }\n  .playkit-btn.playkit-unmute-button span {\n    transform: translateX(0px);\n    opacity: 1;\n    transition: transform 100ms, opacity 100ms;\n    display: inline-block; }\n  .playkit-btn.playkit-unmute-button.playkit-has-top-bar {\n    transition: 100ms transform; }\n\n.playkit-unmute-icon-container {\n  width: 32px;\n  height: 32px;\n  display: inline-block;\n  vertical-align: top;\n  position: relative;\n  margin-right: 3px; }\n  .playkit-unmute-icon-container i {\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.playkit-player.playkit-hover .playkit-unmute-button-container.playkit-has-top-bar,\n.playkit-player.playkit-state-paused .playkit-unmute-button-container.playkit-has-top-bar,\n.playkit-player.playkit-menu-active .playkit-unmute-button-container.playkit-has-top-bar {\n  transform: translateY(32px); }\n\n.playkit-overlay {\n  background-color: #333;\n  font-size: 0em; }\n  .playkit-overlay .playkit-overlay-contents {\n    padding-top: 20px; }\n\n.playkit-error-overlay {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100%;\n  font-family: sans-serif; }\n  .playkit-error-overlay .playkit-svg-container {\n    flex: 4;\n    display: flex;\n    justify-content: space-around;\n    flex-flow: column; }\n  .playkit-error-overlay .playkit-headline {\n    color: #FFFFFF;\n    font-size: 18px;\n    margin: 10px 0 14px 0;\n    flex: 1; }\n  .playkit-error-overlay .playkit-error-session {\n    font-size: 14px;\n    color: #ccc;\n    margin-bottom: 20px;\n    user-select: text;\n    -webkit-user-select: text;\n    -moz-user-select: text;\n    -ms-user-select: text;\n    max-width: 300px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    flex: 1; }\n  .playkit-error-overlay .playkit-control-button-container {\n    flex: 5; }\n  .playkit-error-overlay .playkit-retry-btn {\n    height: 36px;\n    width: 120px;\n    border: 2px solid #333;\n    border-radius: 18px;\n    background-color: black;\n    color: #FFFFFF;\n    font-size: 15px;\n    font-weight: bold;\n    line-height: 32px;\n    cursor: pointer; }\n  .playkit-error-overlay .playkit-error-text {\n    height: 0px;\n    visibility: hidden; }\n\n.playkit-link-options-container {\n  width: auto; }\n  .playkit-link-options-container .playkit-copy-url-row .playkit-input-copy-url {\n    margin: 0; }\n  .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url {\n    margin-left: 10px; }\n    .playkit-link-options-container .playkit-copy-url-row .playkit-btn-copy-url .playkit-icon {\n      height: 24px;\n      width: 24px;\n      margin-top: -3px; }\n", ""]);// exports
            exports.locals = {
              "row": "playkit-row",
              "d-inline-block": "playkit-d-inline-block",
              "dInlineBlock": "playkit-d-inline-block",
              "mobile-hidden-select": "playkit-mobile-hidden-select",
              "mobileHiddenSelect": "playkit-mobile-hidden-select",
              "font-size-base": "playkit-font-size-base",
              "fontSizeBase": "playkit-font-size-base",
              "form-group": "playkit-form-group",
              "formGroup": "playkit-form-group",
              "has-error": "playkit-has-error",
              "hasError": "playkit-has-error",
              "form-control": "playkit-form-control",
              "formControl": "playkit-form-control",
              "has-icon": "playkit-has-icon",
              "hasIcon": "playkit-has-icon",
              "icon": "playkit-icon",
              "player": "playkit-player",
              "checkbox": "playkit-checkbox",
              "form-group-row": "playkit-form-group-row",
              "formGroupRow": "playkit-form-group-row",
              "dropdown": "playkit-dropdown",
              "btn": "playkit-btn",
              "btn-block": "playkit-btn-block",
              "btnBlock": "playkit-btn-block",
              "btn-dark-transparent": "playkit-btn-dark-transparent",
              "btnDarkTransparent": "playkit-btn-dark-transparent",
              "btn-branded": "playkit-btn-branded",
              "btnBranded": "playkit-btn-branded",
              "btn-rounded": "playkit-btn-rounded",
              "btnRounded": "playkit-btn-rounded",
              "icon-maximize": "playkit-icon-maximize",
              "iconMaximize": "playkit-icon-maximize",
              "icon-minimize": "playkit-icon-minimize",
              "iconMinimize": "playkit-icon-minimize",
              "icon-play": "playkit-icon-play",
              "iconPlay": "playkit-icon-play",
              "icon-pause": "playkit-icon-pause",
              "iconPause": "playkit-icon-pause",
              "icon-volume-base": "playkit-icon-volume-base",
              "iconVolumeBase": "playkit-icon-volume-base",
              "icon-volume-waves": "playkit-icon-volume-waves",
              "iconVolumeWaves": "playkit-icon-volume-waves",
              "icon-volume-mute": "playkit-icon-volume-mute",
              "iconVolumeMute": "playkit-icon-volume-mute",
              "icon-close": "playkit-icon-close",
              "iconClose": "playkit-icon-close",
              "icon-share": "playkit-icon-share",
              "iconShare": "playkit-icon-share",
              "icon-settings": "playkit-icon-settings",
              "iconSettings": "playkit-icon-settings",
              "icon-check": "playkit-icon-check",
              "iconCheck": "playkit-icon-check",
              "icon-language": "playkit-icon-language",
              "iconLanguage": "playkit-icon-language",
              "icon-quality": "playkit-icon-quality",
              "iconQuality": "playkit-icon-quality",
              "icon-captions": "playkit-icon-captions",
              "iconCaptions": "playkit-icon-captions",
              "icon-speed": "playkit-icon-speed",
              "iconSpeed": "playkit-icon-speed",
              "icon-audio": "playkit-icon-audio",
              "iconAudio": "playkit-icon-audio",
              "icon-copy": "playkit-icon-copy",
              "iconCopy": "playkit-icon-copy",
              "icon-facebook": "playkit-icon-facebook",
              "iconFacebook": "playkit-icon-facebook",
              "icon-twitter": "playkit-icon-twitter",
              "iconTwitter": "playkit-icon-twitter",
              "icon-google-plus": "playkit-icon-google-plus",
              "iconGooglePlus": "playkit-icon-google-plus",
              "icon-linked-in": "playkit-icon-linked-in",
              "iconLinkedIn": "playkit-icon-linked-in",
              "icon-email": "playkit-icon-email",
              "iconEmail": "playkit-icon-email",
              "icon-embed": "playkit-icon-embed",
              "iconEmbed": "playkit-icon-embed",
              "icon-link": "playkit-icon-link",
              "iconLink": "playkit-icon-link",
              "icon-arrow-down": "playkit-icon-arrow-down",
              "iconArrowDown": "playkit-icon-arrow-down",
              "icon-start-over": "playkit-icon-start-over",
              "iconStartOver": "playkit-icon-start-over",
              "icon-rewind": "playkit-icon-rewind",
              "iconRewind": "playkit-icon-rewind",
              "icon-rewind-10": "playkit-icon-rewind-10",
              "iconRewind10": "playkit-icon-rewind-10",
              "active": "playkit-active",
              "dropdown-menu": "playkit-dropdown-menu",
              "dropdownMenu": "playkit-dropdown-menu",
              "dropdown-button": "playkit-dropdown-button",
              "dropdownButton": "playkit-dropdown-button",
              "openDropmenu": "playkit-openDropmenu",
              "top": "playkit-top",
              "bottom": "playkit-bottom",
              "right": "playkit-right",
              "left": "playkit-left",
              "dropdown-menu-item": "playkit-dropdown-menu-item",
              "dropdownMenuItem": "playkit-dropdown-menu-item",
              "control-button": "playkit-control-button",
              "controlButton": "playkit-control-button",
              "control-button-rounded": "playkit-control-button-rounded",
              "controlButtonRounded": "playkit-control-button-rounded",
              "touch": "playkit-touch",
              "control-button-container": "playkit-control-button-container",
              "controlButtonContainer": "playkit-control-button-container",
              "rotate": "playkit-rotate",
              "spin": "playkit-spin",
              "player-gui": "playkit-player-gui",
              "playerGui": "playkit-player-gui",
              "overlay-active": "playkit-overlay-active",
              "overlayActive": "playkit-overlay-active",
              "metadata-loaded": "playkit-metadata-loaded",
              "metadataLoaded": "playkit-metadata-loaded",
              "state-paused": "playkit-state-paused",
              "statePaused": "playkit-state-paused",
              "menu-active": "playkit-menu-active",
              "menuActive": "playkit-menu-active",
              "nav": "playkit-nav",
              "seek-bar": "playkit-seek-bar",
              "seekBar": "playkit-seek-bar",
              "smart-container-item": "playkit-smart-container-item",
              "smartContainerItem": "playkit-smart-container-item",
              "pre-playback-play-button": "playkit-pre-playback-play-button",
              "prePlaybackPlayButton": "playkit-pre-playback-play-button",
              "sample": "playkit-sample",
              "custom-captions-applied": "playkit-custom-captions-applied",
              "customCaptionsApplied": "playkit-custom-captions-applied",
              "button-save-cvaa": "playkit-button-save-cvaa",
              "buttonSaveCvaa": "playkit-button-save-cvaa",
              "slider": "playkit-slider",
              "live-tag": "playkit-live-tag",
              "liveTag": "playkit-live-tag",
              "ad-break": "playkit-ad-break",
              "adBreak": "playkit-ad-break",
              "hover": "playkit-hover",
              "video-player": "playkit-video-player",
              "videoPlayer": "playkit-video-player",
              "overlay": "playkit-overlay",
              "openOverlay": "playkit-openOverlay",
              "overlay-contents": "playkit-overlay-contents",
              "overlayContents": "playkit-overlay-contents",
              "title": "playkit-title",
              "close-overlay": "playkit-close-overlay",
              "closeOverlay": "playkit-close-overlay",
              "overlay-screen": "playkit-overlay-screen",
              "overlayScreen": "playkit-overlay-screen",
              "size-md": "playkit-size-md",
              "sizeMd": "playkit-size-md",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm",
              "smart-container": "playkit-smart-container",
              "smartContainer": "playkit-smart-container",
              "openSmartContainer": "playkit-openSmartContainer",
              "leaving": "playkit-leaving",
              "closeSmartContainer": "playkit-closeSmartContainer",
              "select-menu-item": "playkit-select-menu-item",
              "selectMenuItem": "playkit-select-menu-item",
              "label-icon": "playkit-label-icon",
              "labelIcon": "playkit-label-icon",
              "share-overlay": "playkit-share-overlay",
              "shareOverlay": "playkit-share-overlay",
              "share-icons": "playkit-share-icons",
              "shareIcons": "playkit-share-icons",
              "facebook-share-btn": "playkit-facebook-share-btn",
              "facebookShareBtn": "playkit-facebook-share-btn",
              "twitter-share-btn": "playkit-twitter-share-btn",
              "twitterShareBtn": "playkit-twitter-share-btn",
              "google-plus-share-btn": "playkit-google-plus-share-btn",
              "googlePlusShareBtn": "playkit-google-plus-share-btn",
              "linkedin-share-btn": "playkit-linkedin-share-btn",
              "linkedinShareBtn": "playkit-linkedin-share-btn",
              "share-main-container": "playkit-share-main-container",
              "shareMainContainer": "playkit-share-main-container",
              "link-options-container": "playkit-link-options-container",
              "linkOptionsContainer": "playkit-link-options-container",
              "copy-url-row": "playkit-copy-url-row",
              "copyUrlRow": "playkit-copy-url-row",
              "input-copy-url": "playkit-input-copy-url",
              "inputCopyUrl": "playkit-input-copy-url",
              "btn-copy-url": "playkit-btn-copy-url",
              "btnCopyUrl": "playkit-btn-copy-url",
              "copied": "playkit-copied",
              "video-start-options-row": "playkit-video-start-options-row",
              "videoStartOptionsRow": "playkit-video-start-options-row",
              "cvaa-overlay": "playkit-cvaa-overlay",
              "cvaaOverlay": "playkit-cvaa-overlay",
              "black-bg": "playkit-black-bg",
              "blackBg": "playkit-black-bg",
              "yellow-text": "playkit-yellow-text",
              "yellowText": "playkit-yellow-text",
              "active-tick": "playkit-active-tick",
              "activeTick": "playkit-active-tick",
              "custom-caption-form": "playkit-custom-caption-form",
              "customCaptionForm": "playkit-custom-caption-form",
              "preview-container": "playkit-preview-container",
              "previewContainer": "playkit-preview-container",
              "custom": "playkit-custom",
              "loading-backdrop": "playkit-loading-backdrop",
              "loadingBackdrop": "playkit-loading-backdrop",
              "show": "playkit-show",
              "spinner-container": "playkit-spinner-container",
              "spinnerContainer": "playkit-spinner-container",
              "spinner": "playkit-spinner",
              "kaltura-spinner": "playkit-kaltura-spinner",
              "kalturaSpinner": "playkit-kaltura-spinner",
              "control-play-pause": "playkit-control-play-pause",
              "controlPlayPause": "playkit-control-play-pause",
              "is-playing": "playkit-is-playing",
              "isPlaying": "playkit-is-playing",
              "volume-control": "playkit-volume-control",
              "volumeControl": "playkit-volume-control",
              "volume-control-bar": "playkit-volume-control-bar",
              "volumeControlBar": "playkit-volume-control-bar",
              "is-muted": "playkit-is-muted",
              "isMuted": "playkit-is-muted",
              "dragging-active": "playkit-dragging-active",
              "draggingActive": "playkit-dragging-active",
              "bar": "playkit-bar",
              "progress": "playkit-progress",
              "smart-container-open": "playkit-smart-container-open",
              "smartContainerOpen": "playkit-smart-container-open",
              "control-fullscreen": "playkit-control-fullscreen",
              "controlFullscreen": "playkit-control-fullscreen",
              "is-fullscreen": "playkit-is-fullscreen",
              "isFullscreen": "playkit-is-fullscreen",
              "time-preview": "playkit-time-preview",
              "timePreview": "playkit-time-preview",
              "frame-preview": "playkit-frame-preview",
              "framePreview": "playkit-frame-preview",
              "progress-bar": "playkit-progress-bar",
              "progressBar": "playkit-progress-bar",
              "scrubber": "playkit-scrubber",
              "virtual-progress": "playkit-virtual-progress",
              "virtualProgress": "playkit-virtual-progress",
              "live": "playkit-live",
              "buffered": "playkit-buffered",
              "frame-preview-img": "playkit-frame-preview-img",
              "framePreviewImg": "playkit-frame-preview-img",
              "time-display": "playkit-time-display",
              "timeDisplay": "playkit-time-display",
              "video-playing-title": "playkit-video-playing-title",
              "videoPlayingTitle": "playkit-video-playing-title",
              "bottom-bar": "playkit-bottom-bar",
              "bottomBar": "playkit-bottom-bar",
              "left-controls": "playkit-left-controls",
              "leftControls": "playkit-left-controls",
              "right-controls": "playkit-right-controls",
              "rightControls": "playkit-right-controls",
              "top-bar": "playkit-top-bar",
              "topBar": "playkit-top-bar",
              "overlay-play": "playkit-overlay-play",
              "overlayPlay": "playkit-overlay-play",
              "in": "playkit-in",
              "overlayPlayIconIn": "playkit-overlayPlayIconIn",
              "pre-playback-play-overlay": "playkit-pre-playback-play-overlay",
              "prePlaybackPlayOverlay": "playkit-pre-playback-play-overlay",
              "has-poster": "playkit-has-poster",
              "hasPoster": "playkit-has-poster",
              "pre-playback": "playkit-pre-playback",
              "prePlayback": "playkit-pre-playback",
              "btn-skip-ad": "playkit-btn-skip-ad",
              "btnSkipAd": "playkit-btn-skip-ad",
              "skip-ad": "playkit-skip-ad",
              "skipAd": "playkit-skip-ad",
              "non-live-playhead": "playkit-non-live-playhead",
              "nonLivePlayhead": "playkit-non-live-playhead",
              "unmute-button-container": "playkit-unmute-button-container",
              "unmuteButtonContainer": "playkit-unmute-button-container",
              "show-icon-only": "playkit-show-icon-only",
              "showIconOnly": "playkit-show-icon-only",
              "unmute-button": "playkit-unmute-button",
              "unmuteButton": "playkit-unmute-button",
              "has-top-bar": "playkit-has-top-bar",
              "hasTopBar": "playkit-has-top-bar",
              "unmute-icon-container": "playkit-unmute-icon-container",
              "unmuteIconContainer": "playkit-unmute-icon-container",
              "error-overlay": "playkit-error-overlay",
              "errorOverlay": "playkit-error-overlay",
              "svg-container": "playkit-svg-container",
              "svgContainer": "playkit-svg-container",
              "headline": "playkit-headline",
              "error-session": "playkit-error-session",
              "errorSession": "playkit-error-session",
              "retry-btn": "playkit-retry-btn",
              "retryBtn": "playkit-retry-btn",
              "error-text": "playkit-error-text",
              "errorText": "playkit-error-text"
            };
            /***/
          }, /* 61 *//***/function (module, exports) {
            /**
             * When source maps are enabled, `style-loader` uses a link element with a data-uri to
             * embed the css on the page. This breaks all relative urls because now they are relative to a
             * bundle instead of the current page.
             *
             * One solution is to only use full urls, but that may be impossible.
             *
             * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
             *
             * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
             *
             */module.exports = function (css) {// get current location
              var location = typeof window !== "undefined" && window.location;
              if (!location) {
                throw new Error("fixUrls requires window.location");
              }// blank or null?
              if (!css || typeof css !== "string") {
                return css;
              }
              var baseUrl = location.protocol + "//" + location.host;
              var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");// convert each url(...)
              /*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
              var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {// strip quotes (if they exist)
                var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
                  return $1;
                }).replace(/^'(.*)'$/, function (o, $1) {
                  return $1;
                });// already a full url? no change
                if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
                  return fullMatch;
                }// convert the url to a full url
                var newUrl;
                if (unquotedOrigUrl.indexOf("//") === 0) {//TODO: should we add protocol?
                  newUrl = unquotedOrigUrl;
                } else if (unquotedOrigUrl.indexOf("/") === 0) {// path should be relative to the base url
                  newUrl = baseUrl + unquotedOrigUrl;// already starts with '/'
                } else {// path should be relative to current directory
                  newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, "");// Strip leading './'
                }// send back the fixed url(...)
                return "url(" + JSON.stringify(newUrl) + ")";
              });// send back the fixed css
              return fixedCss;
            };
            /***/
          }, /* 62 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _overlayPlay = __webpack_require__(63);
            var _overlayPlay2 = _interopRequireDefault(_overlayPlay);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _playPause = __webpack_require__(23);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                isPlaying: state.engine.isPlaying,
                adBreak: state.engine.adBreak,
                adIsPlaying: state.engine.adIsPlaying,
                playerHover: state.shell.playerHover,
                isMobile: state.shell.isMobile
              };
            };
            /**
             * OverlayPlay component
             *
             * @class OverlayPlay
             * @example <OverlayPlay player={this.player} />
             * @extends {BaseComponent}
             */var OverlayPlay = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_playPause.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(OverlayPlay, _BaseComponent);

              /**
               * Creates an instance of OverlayPlay.
               * @param {Object} obj obj
               * @memberof OverlayPlay
               */function OverlayPlay(obj) {
                _classCallCheck(this, OverlayPlay);
                return _possibleConstructorReturn(this, (OverlayPlay.__proto__ || Object.getPrototypeOf(OverlayPlay)).call(this, {
                  name: 'OverlayPlay',
                  player: obj.player
                }));
              }

              /**
               * check if currently playing ad or playback
               *
               * @returns {boolean} - if currently playing ad or playback
               * @memberof OverlayPlay
               */_createClass(OverlayPlay, [{
                key: 'isPlayingAdOrPlayback', value: function isPlayingAdOrPlayback() {
                  return this.props.adBreak && this.props.adIsPlaying || !this.props.adBreak && this.props.isPlaying;
                }/**
                 * toggle play pause and set animation to icon change
                 *
                 * @returns {void}
                 * @memberof OverlayPlay
                 */
              }, {
                key: 'togglePlayPause', value: function togglePlayPause() {
                  var _this2 = this;
                  this.logger.debug('Toggle play');
                  this.setState({animation: true});
                  setTimeout(function () {
                    _this2.setState({animation: false});
                  }, 400);
                  this.isPlayingAdOrPlayback() ? this.player.pause() : this.player.play();
                }/**
                 * handler for overlay click
                 *
                 * @returns {void}
                 * @memberof OverlayPlay
                 */
              }, {
                key: 'onOverlayClick', value: function onOverlayClick() {
                  if (!this.props.isMobile || this.props.isMobile && this.props.playerHover) {
                    this.togglePlayPause();
                  }
                }/**
                 * render component
                 *
                 * @returns {React$Element} - component element
                 * @memberof OverlayPlay
                 */
              }, {
                key: 'render', value: function render() {
                  var _this3 = this;
                  return (0, _preact.h)('div', {
                    className: _overlayPlay2.default.overlayPlay + ' ' + (this.state.animation ? _overlayPlay2.default.in : ''),
                    onClick: function onClick() {
                      return _this3.onOverlayClick();
                    }
                  }, this.isPlayingAdOrPlayback() ? (0, _preact.h)(_icon2.default, {type: _icon.IconType.Play}) : (0, _preact.h)(_icon2.default, {type: _icon.IconType.Pause}));
                }
              }]);
              return OverlayPlay;
            }(_base2.default)) || _class);
            exports.default = OverlayPlay;
            /***/
          }, /* 63 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(64);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_overlay-play.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_overlay-play.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 64 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, "@keyframes playkit-overlayPlayIconIn {\n  from {\n    opacity: 1;\n    transform: scale(0); }\n  to {\n    opacity: 0;\n    transform: scale(1); } }\n\n.playkit-overlay-play {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%; }\n  .playkit-overlay-play.playkit-in .playkit-icon {\n    animation: playkit-overlayPlayIconIn 400ms linear forwards; }\n  .playkit-overlay-play .playkit-icon {\n    width: 144px;\n    height: 144px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: -72px 0 0 -72px;\n    opacity: 0; }\n", ""]);// exports
            exports.locals = {
              "overlay-play": "playkit-overlay-play",
              "overlayPlay": "playkit-overlay-play",
              "in": "playkit-in",
              "icon": "playkit-icon",
              "overlayPlayIconIn": "playkit-overlayPlayIconIn"
            };
            /***/
          }, /* 65 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(40);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__ = __webpack_require__(68);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_2__objectToString_js__ = __webpack_require__(69);
            /** `Object#toString` result references. */var nullTag = '[object Null]',
              undefinedTag = '[object Undefined]';
            /** Built-in value references. */var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"/* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"/* default */].toStringTag : undefined;

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object(value) ? Object(__WEBPACK_IMPORTED_MODULE_1__getRawTag_js__["a"/* default */])(value) : Object(__WEBPACK_IMPORTED_MODULE_2__objectToString_js__["a"/* default */])(value);
            }

            /* harmony default export */
            __webpack_exports__["a"] = baseGetTag;
            /***/
          }, /* 66 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(67);
            /** Detect free variable `self`. */var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof2(self)) == 'object' && self && self.Object === Object && self;
            /** Used as a reference to the global object. */var root = __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__["a"/* default */] || freeSelf || Function('return this')();
            /* harmony default export */
            __webpack_exports__["a"] = root;
            /***/
          }, /* 67 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (global) {
              /** Detect free variable `global` from Node.js. */var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof2(global)) == 'object' && global && global.Object === Object && global;
              /* harmony default export */
              __webpack_exports__["a"] = freeGlobal;
              /* WEBPACK VAR INJECTION */
            }).call(__webpack_exports__, __webpack_require__(22));
            /***/
          }, /* 68 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(40);
            /** Used for built-in method references. */var objectProto = Object.prototype;
            /** Used to check objects for own properties. */var hasOwnProperty = objectProto.hasOwnProperty;
            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */var nativeObjectToString = objectProto.toString;
            /** Built-in value references. */var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"/* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"/* default */].toStringTag : undefined;

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) {
              }
              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            /* harmony default export */
            __webpack_exports__["a"] = getRawTag;
            /***/
          }, /* 69 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /** Used for built-in method references. */var objectProto = Object.prototype;
            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */var nativeObjectToString = objectProto.toString;

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */function objectToString(value) {
              return nativeObjectToString.call(value);
            }

            /* harmony default export */
            __webpack_exports__["a"] = objectToString;
            /***/
          }, /* 70 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(71);
            /** Built-in value references. */var getPrototype = Object(__WEBPACK_IMPORTED_MODULE_0__overArg_js__["a"/* default */])(Object.getPrototypeOf, Object);
            /* harmony default export */
            __webpack_exports__["a"] = getPrototype;
            /***/
          }, /* 71 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";

            /**
             * Creates a unary function that invokes `func` with its argument transformed.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {Function} transform The argument transform.
             * @returns {Function} Returns the new function.
             */function overArg(func, transform) {
              return function (arg) {
                return func(transform(arg));
              };
            }

            /* harmony default export */
            __webpack_exports__["a"] = overArg;
            /***/
          }, /* 72 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */function isObjectLike(value) {
              return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof2(value)) == 'object';
            }

            /* harmony default export */
            __webpack_exports__["a"] = isObjectLike;
            /***/
          }, /* 73 *//***/function (module, exports, __webpack_require__) {
            module.exports = __webpack_require__(74);
            /***/
          }, /* 74 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (global, module) {
              Object.defineProperty(exports, "__esModule", {value: true});
              var _ponyfill = __webpack_require__(76);
              var _ponyfill2 = _interopRequireDefault(_ponyfill);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {'default': obj};
              }

              var root;
              /* global window */
              if (typeof self !== 'undefined') {
                root = self;
              } else if (typeof window !== 'undefined') {
                root = window;
              } else if (typeof global !== 'undefined') {
                root = global;
              } else if (true) {
                root = module;
              } else {
                root = Function('return this')();
              }
              var result = (0, _ponyfill2['default'])(root);
              exports['default'] = result;
              /* WEBPACK VAR INJECTION */
            }).call(exports, __webpack_require__(22), __webpack_require__(75)(module));
            /***/
          }, /* 75 *//***/function (module, exports) {
            module.exports = function (module) {
              if (!module.webpackPolyfill) {
                module.deprecate = function () {
                };
                module.paths = [];// module.parent = undefined by default
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                  enumerable: true, get: function get() {
                    return module.l;
                  }
                });
                Object.defineProperty(module, "id", {
                  enumerable: true, get: function get() {
                    return module.i;
                  }
                });
                module.webpackPolyfill = 1;
              }
              return module;
            };
            /***/
          }, /* 76 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports['default'] = symbolObservablePonyfill;

            function symbolObservablePonyfill(root) {
              var result;
              var _Symbol = root.Symbol;
              if (typeof _Symbol === 'function') {
                if (_Symbol.observable) {
                  result = _Symbol.observable;
                } else {
                  result = _Symbol('observable');
                  _Symbol.observable = result;
                }
              } else {
                result = '@@observable';
              }
              return result;
            };
            /***/
          }, /* 77 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export (immutable) */
            __webpack_exports__["a"] = combineReducers;
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(38);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__ = __webpack_require__(39);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_2__utils_warning__ = __webpack_require__(41);

            function getUndefinedStateErrorMessage(key, action) {
              var actionType = action && action.type;
              var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
              return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
            }

            function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
              var reducerKeys = Object.keys(reducers);
              var argumentName = action && action.type === __WEBPACK_IMPORTED_MODULE_0__createStore__["a"/* ActionTypes */].INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
              if (reducerKeys.length === 0) {
                return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
              }
              if (!Object(__WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__["a"/* default */])(inputState)) {
                return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
              }
              var unexpectedKeys = Object.keys(inputState).filter(function (key) {
                return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
              });
              unexpectedKeys.forEach(function (key) {
                unexpectedKeyCache[key] = true;
              });
              if (unexpectedKeys.length > 0) {
                return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
              }
            }

            function assertReducerShape(reducers) {
              Object.keys(reducers).forEach(function (key) {
                var reducer = reducers[key];
                var initialState = reducer(undefined, {type: __WEBPACK_IMPORTED_MODULE_0__createStore__["a"/* ActionTypes */].INIT});
                if (typeof initialState === 'undefined') {
                  throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
                }
                var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
                if (typeof reducer(undefined, {type: type}) === 'undefined') {
                  throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + __WEBPACK_IMPORTED_MODULE_0__createStore__["a"/* ActionTypes */].INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
                }
              });
            }

            /**
             * Turns an object whose values are different reducer functions, into a single
             * reducer function. It will call every child reducer, and gather their results
             * into a single state object, whose keys correspond to the keys of the passed
             * reducer functions.
             *
             * @param {Object} reducers An object whose values correspond to different
             * reducer functions that need to be combined into one. One handy way to obtain
             * it is to use ES6 `import * as reducers` syntax. The reducers may never return
             * undefined for any action. Instead, they should return their initial state
             * if the state passed to them was undefined, and the current state for any
             * unrecognized action.
             *
             * @returns {Function} A reducer function that invokes every reducer inside the
             * passed object, and builds a state object with the same shape.
             */function combineReducers(reducers) {
              var reducerKeys = Object.keys(reducers);
              var finalReducers = {};
              for (var i = 0; i < reducerKeys.length; i++) {
                var key = reducerKeys[i];
                if (true) {
                  if (typeof reducers[key] === 'undefined') {
                    Object(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a"/* default */])('No reducer provided for key "' + key + '"');
                  }
                }
                if (typeof reducers[key] === 'function') {
                  finalReducers[key] = reducers[key];
                }
              }
              var finalReducerKeys = Object.keys(finalReducers);
              var unexpectedKeyCache = void 0;
              if (true) {
                unexpectedKeyCache = {};
              }
              var shapeAssertionError = void 0;
              try {
                assertReducerShape(finalReducers);
              } catch (e) {
                shapeAssertionError = e;
              }
              return function combination() {
                var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var action = arguments[1];
                if (shapeAssertionError) {
                  throw shapeAssertionError;
                }
                if (true) {
                  var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
                  if (warningMessage) {
                    Object(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a"/* default */])(warningMessage);
                  }
                }
                var hasChanged = false;
                var nextState = {};
                for (var _i = 0; _i < finalReducerKeys.length; _i++) {
                  var _key = finalReducerKeys[_i];
                  var reducer = finalReducers[_key];
                  var previousStateForKey = state[_key];
                  var nextStateForKey = reducer(previousStateForKey, action);
                  if (typeof nextStateForKey === 'undefined') {
                    var errorMessage = getUndefinedStateErrorMessage(_key, action);
                    throw new Error(errorMessage);
                  }
                  nextState[_key] = nextStateForKey;
                  hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
                }
                return hasChanged ? nextState : state;
              };
            }

            /***/
          }, /* 78 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export (immutable) */
            __webpack_exports__["a"] = bindActionCreators;

            function bindActionCreator(actionCreator, dispatch) {
              return function () {
                return dispatch(actionCreator.apply(undefined, arguments));
              };
            }

            /**
             * Turns an object whose values are action creators, into an object with the
             * same keys, but with every function wrapped into a `dispatch` call so they
             * may be invoked directly. This is just a convenience method, as you can call
             * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
             *
             * For convenience, you can also pass a single function as the first argument,
             * and get a function in return.
             *
             * @param {Function|Object} actionCreators An object whose values are action
             * creator functions. One handy way to obtain it is to use ES6 `import * as`
             * syntax. You may also pass a single function.
             *
             * @param {Function} dispatch The `dispatch` function available on your Redux
             * store.
             *
             * @returns {Function|Object} The object mimicking the original object, but with
             * every action creator wrapped into the `dispatch` call. If you passed a
             * function as `actionCreators`, the return value will also be a single
             * function.
             */function bindActionCreators(actionCreators, dispatch) {
              if (typeof actionCreators === 'function') {
                return bindActionCreator(actionCreators, dispatch);
              }
              if ((typeof actionCreators === 'undefined' ? 'undefined' : _typeof2(actionCreators)) !== 'object' || actionCreators === null) {
                throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators === 'undefined' ? 'undefined' : _typeof2(actionCreators)) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
              }
              var keys = Object.keys(actionCreators);
              var boundActionCreators = {};
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var actionCreator = actionCreators[key];
                if (typeof actionCreator === 'function') {
                  boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
                }
              }
              return boundActionCreators;
            }

            /***/
          }, /* 79 *//***/function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export (immutable) */
            __webpack_exports__["a"] = applyMiddleware;
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(42);
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };

            /**
             * Creates a store enhancer that applies middleware to the dispatch method
             * of the Redux store. This is handy for a variety of tasks, such as expressing
             * asynchronous actions in a concise manner, or logging every action payload.
             *
             * See `redux-thunk` package as an example of the Redux middleware.
             *
             * Because middleware is potentially asynchronous, this should be the first
             * store enhancer in the composition chain.
             *
             * Note that each middleware will be given the `dispatch` and `getState` functions
             * as named arguments.
             *
             * @param {...Function} middlewares The middleware chain to be applied.
             * @returns {Function} A store enhancer applying the middleware.
             */function applyMiddleware() {
              for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
                middlewares[_key] = arguments[_key];
              }
              return function (createStore) {
                return function (reducer, preloadedState, enhancer) {
                  var store = createStore(reducer, preloadedState, enhancer);
                  var _dispatch = store.dispatch;
                  var chain = [];
                  var middlewareAPI = {
                    getState: store.getState, dispatch: function dispatch(action) {
                      return _dispatch(action);
                    }
                  };
                  chain = middlewares.map(function (middleware) {
                    return middleware(middlewareAPI);
                  });
                  _dispatch = __WEBPACK_IMPORTED_MODULE_0__compose__["a"/* default */].apply(undefined, chain)(store.dispatch);
                  return _extends({}, store, {dispatch: _dispatch});
                };
              };
            }

            /***/
          }, /* 80 *//***/function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            /*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */
            (function (global) {
              "use strict";// Top level module for the global, static logger instance.
              var Logger = {};// For those that are at home that are keeping score.
              Logger.VERSION = "1.4.1";// Function which handles all incoming log messages.
              var logHandler;// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
              var contextualLoggersByNameMap = {};// Polyfill for ES5's Function.bind.
              var bind = function bind(scope, func) {
                return function () {
                  return func.apply(scope, arguments);
                };
              };// Super exciting object merger-matron 9000 adding another 100 bytes to your download.
              var merge = function merge() {
                var args = arguments, target = args[0], key, i;
                for (i = 1; i < args.length; i++) {
                  for (key in args[i]) {
                    if (!(key in target) && args[i].hasOwnProperty(key)) {
                      target[key] = args[i][key];
                    }
                  }
                }
                return target;
              };// Helper to define a logging level object; helps with optimisation.
              var defineLogLevel = function defineLogLevel(value, name) {
                return {value: value, name: name};
              };// Predefined logging levels.
              Logger.DEBUG = defineLogLevel(1, 'DEBUG');
              Logger.INFO = defineLogLevel(2, 'INFO');
              Logger.TIME = defineLogLevel(3, 'TIME');
              Logger.WARN = defineLogLevel(4, 'WARN');
              Logger.ERROR = defineLogLevel(8, 'ERROR');
              Logger.OFF = defineLogLevel(99, 'OFF');// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
// of each other.
              var ContextualLogger = function ContextualLogger(defaultContext) {
                this.context = defaultContext;
                this.setLevel(defaultContext.filterLevel);
                this.log = this.info;// Convenience alias.
              };
              ContextualLogger.prototype = {// Changes the current logging level for the logging instance.
                setLevel: function setLevel(newLevel) {// Ensure the supplied Level object looks valid.
                  if (newLevel && "value" in newLevel) {
                    this.context.filterLevel = newLevel;
                  }
                },// Gets the current logging level for the logging instance
                getLevel: function getLevel() {
                  return this.context.filterLevel;
                },// Is the logger configured to output messages at the supplied level?
                enabledFor: function enabledFor(lvl) {
                  var filterLevel = this.context.filterLevel;
                  return lvl.value >= filterLevel.value;
                }, debug: function debug() {
                  this.invoke(Logger.DEBUG, arguments);
                }, info: function info() {
                  this.invoke(Logger.INFO, arguments);
                }, warn: function warn() {
                  this.invoke(Logger.WARN, arguments);
                }, error: function error() {
                  this.invoke(Logger.ERROR, arguments);
                }, time: function time(label) {
                  if (typeof label === 'string' && label.length > 0) {
                    this.invoke(Logger.TIME, [label, 'start']);
                  }
                }, timeEnd: function timeEnd(label) {
                  if (typeof label === 'string' && label.length > 0) {
                    this.invoke(Logger.TIME, [label, 'end']);
                  }
                },// Invokes the logger callback if it's not being filtered.
                invoke: function invoke(level, msgArgs) {
                  if (logHandler && this.enabledFor(level)) {
                    logHandler(msgArgs, merge({level: level}, this.context));
                  }
                }
              };// Protected instance which all calls to the to level `Logger` module will be routed through.
              var globalLogger = new ContextualLogger({filterLevel: Logger.OFF});// Configure the global Logger instance.
              (function () {// Shortcut for optimisers.
                var L = Logger;
                L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
                L.debug = bind(globalLogger, globalLogger.debug);
                L.time = bind(globalLogger, globalLogger.time);
                L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
                L.info = bind(globalLogger, globalLogger.info);
                L.warn = bind(globalLogger, globalLogger.warn);
                L.error = bind(globalLogger, globalLogger.error);// Don't forget the convenience alias!
                L.log = L.info;
              })();// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
// object with the supplied log messages and the second being a context object which contains a hash of stateful
// parameters which the logging function can consume.
              Logger.setHandler = function (func) {
                logHandler = func;
              };// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
              Logger.setLevel = function (level) {// Set the globalLogger's level.
                globalLogger.setLevel(level);// Apply this level to all registered contextual loggers.
                for (var key in contextualLoggersByNameMap) {
                  if (contextualLoggersByNameMap.hasOwnProperty(key)) {
                    contextualLoggersByNameMap[key].setLevel(level);
                  }
                }
              };// Gets the global logging filter level
              Logger.getLevel = function () {
                return globalLogger.getLevel();
              };// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
// default context and log handler.
              Logger.get = function (name) {// All logger instances are cached so they can be configured ahead of use.
                return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({name: name}, globalLogger.context)));
              };// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
// write to the window's console object (if present); the optional options object can be used to customise the
// formatter used to format each log message.
              Logger.createDefaultHandler = function (options) {
                options = options || {};
                options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {// Prepend the logger's name to the log message for easy identification.
                  if (context.name) {
                    messages.unshift("[" + context.name + "]");
                  }
                };// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
// that don't offer a native console method.
                var timerStartTimeByLabelMap = {};// Support for IE8+ (and other, slightly more sane environments)
                var invokeConsoleMethod = function invokeConsoleMethod(hdlr, messages) {
                  Function.prototype.apply.call(hdlr, console, messages);
                };// Check for the presence of a logger.
                if (typeof console === "undefined") {
                  return function () {/* no console */
                  };
                }
                return function (messages, context) {// Convert arguments object to Array.
                  messages = Array.prototype.slice.call(messages);
                  var hdlr = console.log;
                  var timerLabel;
                  if (context.level === Logger.TIME) {
                    timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];
                    if (messages[1] === 'start') {
                      if (console.time) {
                        console.time(timerLabel);
                      } else {
                        timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
                      }
                    } else {
                      if (console.timeEnd) {
                        console.timeEnd(timerLabel);
                      } else {
                        invokeConsoleMethod(hdlr, [timerLabel + ': ' + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
                      }
                    }
                  } else {// Delegate through to custom warn/error loggers if present on the console.
                    if (context.level === Logger.WARN && console.warn) {
                      hdlr = console.warn;
                    } else if (context.level === Logger.ERROR && console.error) {
                      hdlr = console.error;
                    } else if (context.level === Logger.INFO && console.info) {
                      hdlr = console.info;
                    } else if (context.level === Logger.DEBUG && console.debug) {
                      hdlr = console.debug;
                    }
                    options.formatter(messages, context);
                    invokeConsoleMethod(hdlr, messages);
                  }
                };
              };// Configure and example a Default implementation which writes to the `window.console` (if present).  The
// `options` hash can be used to configure the default logLevel and provide a custom message formatter.
              Logger.useDefaults = function (options) {
                Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
                Logger.setHandler(Logger.createDefaultHandler(options));
              };// Export to popular environments boilerplate.
              if (true) {
                !(__WEBPACK_AMD_DEFINE_FACTORY__ = Logger, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else if (typeof module !== 'undefined' && module.exports) {
                module.exports = Logger;
              } else {
                Logger._prevLogger = global.Logger;
                Logger.noConflict = function () {
                  global.Logger = Logger._prevLogger;
                  return Logger;
                };
                global.Logger = Logger;
              }
            })(this);
            /***/
          }, /* 81 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.IconType = undefined;
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var IconType = {
              Maximize: 'maximize',
              Minimize: 'minimize',
              Play: 'play',
              Pause: 'pause',
              VolumeBase: 'volume-base',
              VolumeWaves: 'volume-waves',
              VolumeMute: 'volume-mute',
              Close: 'close',
              Share: 'share',
              Settings: 'settings',
              Check: 'check',
              Language: 'language',
              Quality: 'quality',
              Captions: 'captions',
              Speed: 'speed',
              Audio: 'audio',
              Copy: 'copy',
              Facebook: 'facebook',
              Twitter: 'twitter',
              GooglePlus: 'google-plus',
              Linkedin: 'linkedin',
              Email: 'email',
              Embed: 'embed',
              Link: 'link',
              ArrowDown: 'arrow-down',
              StartOver: 'start-over',
              Rewind: 'rewind',
              Rewind10: 'rewind10'
            };
            /**
             * Icon component
             *
             * @class Icon
             * @example <Icon type={IconType.Play} />
             * @extends {Component}
             */var Icon = function (_Component) {
              _inherits(Icon, _Component);

              function Icon() {
                _classCallCheck(this, Icon);
                return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
              }

              _createClass(Icon, [{
                key: 'render', /**
                 * render icon based on props.type
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof Icon
                 */value: function render(props) {
                  switch (props.type) {
                    case IconType.Maximize:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconMaximize].join(' ')});
                    case IconType.Minimize:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconMinimize].join(' ')});
                    case IconType.Play:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconPlay].join(' ')});
                    case IconType.Pause:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconPause].join(' ')});
                    case IconType.VolumeBase:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconVolumeBase].join(' ')});
                    case IconType.VolumeWaves:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconVolumeWaves].join(' ')});
                    case IconType.VolumeMute:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconVolumeMute].join(' ')});
                    case IconType.Close:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconClose].join(' ')});
                    case IconType.Share:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconShare].join(' ')});
                    case IconType.Settings:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconSettings].join(' ')});
                    case IconType.Check:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconCheck].join(' ')});
                    case IconType.Language:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconLanguage].join(' ')});
                    case IconType.Quality:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconQuality].join(' ')});
                    case IconType.Captions:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconCaptions].join(' ')});
                    case IconType.Speed:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconSpeed].join(' ')});
                    case IconType.Audio:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconAudio].join(' ')});
                    case IconType.Copy:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconCopy].join(' ')});
                    case IconType.Facebook:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconFacebook].join(' ')});
                    case IconType.Twitter:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconTwitter].join(' ')});
                    case IconType.GooglePlus:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconGoogleplus].join(' ')});
                    case IconType.Linkedin:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconLinkedin].join(' ')});
                    case IconType.Email:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconEmail].join(' ')});
                    case IconType.Embed:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconEmbed].join(' ')});
                    case IconType.Link:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconLink].join(' ')});
                    case IconType.ArrowDown:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconArrowDown].join(' ')});
                    case IconType.StartOver:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconStartOver].join(' ')});
                    case IconType.Rewind:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconRewind].join(' ')});
                    case IconType.Rewind10:
                      return (0, _preact.h)('i', {className: [_style2.default.icon, _style2.default.iconRewind10].join(' ')});
                    default:
                      break;
                  }
                }
              }]);
              return Icon;
            }(_preact.Component);
            exports.default = Icon;
            exports.IconType = IconType;
            /***/
          }, /* 82 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _shell = __webpack_require__(10);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                metadataLoaded: state.engine.metadataLoaded,
                prePlayback: state.shell.prePlayback,
                poster: state.engine.poster,
                isMobile: state.shell.isMobile,
                isEnded: state.engine.isEnded
              };
            };
            /**
             * PrePlaybackPlayOverlay component
             *
             * @class PrePlaybackPlayOverlay
             * @example <PrePlaybackPlayOverlay player={this.player} />
             * @extends {BaseComponent}
             */var PrePlaybackPlayOverlay = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_shell.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(PrePlaybackPlayOverlay, _BaseComponent);

              /**
               * Creates an instance of PrePlaybackPlayOverlay.
               * @param {Object} obj obj
               * @memberof PrePlaybackPlayOverlay
               */function PrePlaybackPlayOverlay(obj) {
                _classCallCheck(this, PrePlaybackPlayOverlay);
                var _this = _possibleConstructorReturn(this, (PrePlaybackPlayOverlay.__proto__ || Object.getPrototypeOf(PrePlaybackPlayOverlay)).call(this, {
                  name: 'PrePlaybackPlayOverlay',
                  player: obj.player
                }));
                _this.player.addEventListener(_this.player.Event.CHANGE_SOURCE_ENDED, function () {
                  return _this._onChangeSourceEnded();
                });
                return _this;
              }

              /**
               * before component mounted, add 'pre-playback' class to player shell in order to hide the gui
               * and set the autoplay and mobileAutoplay values from the player config
               *
               * @returns {void}
               * @memberof PrePlaybackPlayOverlay
               */_createClass(PrePlaybackPlayOverlay, [{
                key: 'componentWillMount', value: function componentWillMount() {
                  var _this2 = this;
                  this.props.addPlayerClass(_style2.default.prePlayback);
                  try {
                    this.autoplay = this.player.config.playback.autoplay;
                    if (this.autoplay === true) {
                      this.player.addEventListener(this.player.Event.AUTOPLAY_FAILED, function () {
                        _this2.autoplay = false;
                      });
                    }
                  } catch (e) {// eslint-disable-line no-unused-vars
                    this.autoplay = false;
                  }
                }/**
                 * before component unmounted, remove the pre playback flag and class from player shell.
                 *
                 * @returns {void}
                 * @memberof PrePlaybackPlayOverlay
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  this._hidePrePlayback();
                  this.props.removePlayerClass(_style2.default.prePlayback);
                }/**
                 * after component mounted, listen to play event and update the pre plackback flag to false
                 *
                 * @returns {void}
                 * @memberof PrePlaybackPlayOverlay
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this3 = this;
                  this.player.addEventListener(this.player.Event.PLAY, function () {
                    return _this3._hidePrePlayback();
                  });
                  if (this.player.paused === false) {
                    this._hidePrePlayback();
                  }
                }/**
                 * play on click
                 *
                 * @returns {void}
                 * @memberof PrePlaybackPlayOverlay
                 */
              }, {
                key: 'handleClick', value: function handleClick() {
                  var _this4 = this;// TODO: The promise handling should be in the play API of the player.
                  new Promise(function (resolve, reject) {
                    try {
                      if (_this4.player.config.playback.preload === "auto" && !_this4.player.config.plugins.ima) {
                        _this4.player.ready().then(resolve);
                      } else {
                        resolve();
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }).then(function () {
                    _this4.player.play();
                    if (_this4.props.prePlayback) {
                      _this4._hidePrePlayback();
                    }
                  }).catch(function (e) {
                    _this4.logger.error(e.message);
                  });
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof PrePlaybackPlayOverlay
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this5 = this;
                  if (!props.isEnded && !props.prePlayback || !props.isEnded && this.autoplay) {
                    return undefined;
                  }
                  var rootStyle = {}, rootClass = [_style2.default.prePlaybackPlayOverlay];
                  if (!props.prePlayback && props.poster) {
                    rootStyle = {backgroundImage: 'url(' + props.poster + ')'};
                    rootClass.push(_style2.default.hasPoster);
                  }
                  return (0, _preact.h)('div', {
                    className: rootClass.join(' '),
                    style: rootStyle,
                    onClick: function onClick() {
                      return _this5.handleClick();
                    }
                  }, (0, _preact.h)('a', {
                    className: _style2.default.prePlaybackPlayButton,
                    tabIndex: '0',
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this5.handleClick();
                      }
                    }
                  }, props.isEnded ? (0, _preact.h)(_icon2.default, {type: _icon.IconType.StartOver}) : (0, _preact.h)(_icon2.default, {type: _icon.IconType.Play})));
                }/**
                 * Change source ended event handler.
                 * @private
                 * @returns {void}
                 */
              }, {
                key: '_onChangeSourceEnded', value: function _onChangeSourceEnded() {
                  try {
                    if (!this.player.config.playback.autoplay) {
                      this._displayPrePlayback();
                    }
                  } catch (e) {
                    this.logger.error(e.message);
                  }
                }/**
                 * Displays the pre playback overlay.
                 * @private
                 * @returns {void}
                 */
              }, {
                key: '_displayPrePlayback', value: function _displayPrePlayback() {
                  this.props.updatePrePlayback(true);
                  this.props.addPlayerClass(_style2.default.prePlayback);
                }/**
                 * Hides the pre playback overlay.
                 * @private
                 * @returns {void}
                 */
              }, {
                key: '_hidePrePlayback', value: function _hidePrePlayback() {
                  this.props.updatePrePlayback(false);
                  this.props.removePlayerClass(_style2.default.prePlayback);
                }
              }]);
              return PrePlaybackPlayOverlay;
            }(_base2.default)) || _class);
            exports.default = PrePlaybackPlayOverlay;
            /***/
          }, /* 83 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _loading = __webpack_require__(84);
            var _loading2 = _interopRequireDefault(_loading);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _loading3 = __webpack_require__(44);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {show: state.loading.show, isMobile: state.shell.isMobile, adBreak: state.engine.adBreak};
            };
            /**
             * Loading component
             *
             * @class Loading
             * @example <Loading />
             * @extends {BaseComponent}
             */var Loading = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_loading3.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(Loading, _BaseComponent);

              /**
               * Creates an instance of Loading.
               * @param {Object} obj obj
               * @memberof Loading
               */function Loading(obj) {
                _classCallCheck(this, Loading);
                var _this = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, {
                  name: 'Loading',
                  player: obj.player
                }));
                try {// TODO: Change the dependency on ima to our ads plugin when it will be developed.
                  if (_this.player.config.playback.preload === "auto" && !_this.player.config.plugins.ima) {
                    _this.isPreloading = true;
                    _this.player.addEventListener(_this.player.Event.PLAYER_STATE_CHANGED, function (e) {
                      if (e.payload.oldState.type === _this.player.State.LOADING) {
                        _this.isPreloading = false;
                      }
                    });
                  }
                } catch (e) {
                  _this.logger.error(e.message);
                  _this.isPreloading = false;
                }
                return _this;
              }

              /**
               * before component mount, update the autoplay and mobileAutoplay values from player config
               *
               * @returns {void}
               * @memberof Loading
               */_createClass(Loading, [{
                key: 'componentWillMount', value: function componentWillMount() {
                  try {
                    this.autoplay = this.player.config.playback.autoplay;
                  } catch (e) {// eslint-disable-line no-unused-vars
                    this.autoplay = false;
                  }
                  try {
                    this.mobileAutoplay = this.player.config.playback.mobileAutoplay;
                  } catch (e) {// eslint-disable-line no-unused-vars
                    this.mobileAutoplay = false;
                  }
                }/**
                 * after component mounted, set event listener to player state change and update the state of loading spinner accordingly.
                 * initially, if not mobile and autoplay is on, show the loading spinner without dependency on the player state.
                 * if is mobile and mobile autoplay is on, show the loading spinner without dependency on the player state.
                 *
                 * @returns {void}
                 * @memberof Loading
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  if (!this.props.isMobile && this.autoplay || this.props.isMobile && this.mobileAutoplay) {
                    this.props.updateLoadingSpinnerState(true);
                  }
                  this.player.addEventListener(this.player.Event.PLAYER_STATE_CHANGED, function (e) {
                    if (e.payload.newState.type === 'idle' || e.payload.newState.type === 'playing' || e.payload.newState.type === 'paused') {
                      _this2.props.updateLoadingSpinnerState(false);
                    } else {
                      _this2.props.updateLoadingSpinnerState(true);
                    }
                  });
                  this.player.addEventListener(this.player.Event.AD_BREAK_START, function () {
                    _this2.props.updateLoadingSpinnerState(true);
                  });
                  this.player.addEventListener(this.player.Event.AD_LOADED, function () {
                    _this2.props.updateLoadingSpinnerState(true);
                  });
                  this.player.addEventListener(this.player.Event.AD_STARTED, function () {
                    _this2.props.updateLoadingSpinnerState(false);
                  });
                  this.player.addEventListener(this.player.Event.ALL_ADS_COMPLETED, function () {
                    _this2.props.updateLoadingSpinnerState(false);
                  });
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof Loading
                 */
              }, {
                key: 'render', value: function render(props) {
                  if (!props.show || this.isPreloading) return undefined;
                  return (0, _preact.h)('div', {className: [_loading2.default.loadingBackdrop, _loading2.default.show].join(' ')}, (0, _preact.h)('div', {className: _loading2.default.spinnerContainer}, (0, _preact.h)('div', {className: _loading2.default.spinner}, [].concat(_toConsumableArray(Array(8))).map(function (i) {
                    return (0, _preact.h)('span', {key: i});
                  }))));
                }
              }]);
              return Loading;
            }(_base2.default)) || _class);
            exports.default = Loading;
            /***/
          }, /* 84 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(85);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_loading.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_loading.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 85 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, "@keyframes playkit-kaltura-spinner {\n  0% {\n    transform: rotate(0deg) scale(0.7);\n    opacity: 1; }\n  70% {\n    transform: rotate(360deg) scale(0.7);\n    opacity: 1; }\n  82% {\n    transform: rotate(360deg) scale(0);\n    opacity: 0; }\n  87% {\n    transform: rotate(360deg) scale(0.9);\n    opacity: 1; }\n  100% {\n    transform: rotate(360deg) scale(0.7);\n    opacity: 1; } }\n\n.playkit-loading-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.3);\n  transition: 100ms opacity;\n  opacity: 0; }\n  .playkit-loading-backdrop.playkit-show {\n    opacity: 1; }\n    .playkit-loading-backdrop.playkit-show .playkit-spinner-container {\n      display: block; }\n  .playkit-loading-backdrop .playkit-spinner-container {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate3d(-50px, -50px, 0); }\n\n.playkit-spinner {\n  width: 100px;\n  height: 100px;\n  position: relative;\n  animation: playkit-kaltura-spinner 2.5s infinite; }\n  .playkit-spinner span {\n    width: 8px;\n    height: 8px;\n    background-color: #fff;\n    display: block;\n    border-radius: 8px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -4px;\n    margin-left: -4px; }\n    .playkit-spinner span:nth-child(1) {\n      transform: rotate(45deg) translateX(-25px) translateY(-25px);\n      background-color: #da1f26; }\n    .playkit-spinner span:nth-child(2) {\n      transform: rotate(90deg) translateX(-25px) translateY(-25px);\n      background-color: #06a885; }\n    .playkit-spinner span:nth-child(3) {\n      transform: rotate(135deg) translateX(-25px) translateY(-25px);\n      background-color: #009344; }\n    .playkit-spinner span:nth-child(4) {\n      transform: rotate(180deg) translateX(-25px) translateY(-25px);\n      background-color: #f8a61a; }\n    .playkit-spinner span:nth-child(5) {\n      transform: rotate(225deg) translateX(-25px) translateY(-25px);\n      background-color: #1b4a97; }\n    .playkit-spinner span:nth-child(6) {\n      transform: rotate(270deg) translateX(-25px) translateY(-25px);\n      background-color: #00abcc; }\n    .playkit-spinner span:nth-child(7) {\n      transform: rotate(315deg) translateX(-25px) translateY(-25px);\n      background-color: #b1d238; }\n    .playkit-spinner span:nth-child(8) {\n      transform: rotate(360deg) translateX(-25px) translateY(-25px);\n      background-color: #fcd203; }\n", ""]);// exports
            exports.locals = {
              "loading-backdrop": "playkit-loading-backdrop",
              "loadingBackdrop": "playkit-loading-backdrop",
              "show": "playkit-show",
              "spinner-container": "playkit-spinner-container",
              "spinnerContainer": "playkit-spinner-container",
              "spinner": "playkit-spinner",
              "kaltura-spinner": "playkit-kaltura-spinner",
              "kalturaSpinner": "playkit-kaltura-spinner"
            };
            /***/
          }, /* 86 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _playPause = __webpack_require__(87);
            var _playPause2 = _interopRequireDefault(_playPause);
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _playPause3 = __webpack_require__(23);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                isPlaying: state.engine.isPlaying,
                adBreak: state.engine.adBreak,
                adIsPlaying: state.engine.adIsPlaying,
                isEnded: state.engine.isEnded
              };
            };
            /**
             * PlayPauseControl component
             *
             * @class PlayPauseControl
             * @example <PlayPauseControl player={this.player} />
             * @extends {BaseComponent}
             */var PlayPauseControl = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_playPause3.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(PlayPauseControl, _BaseComponent);

              /**
               * Creates an instance of PlayPauseControl.
               * @param {Object} obj obj
               * @memberof PlayPauseControl
               */function PlayPauseControl(obj) {
                _classCallCheck(this, PlayPauseControl);
                return _possibleConstructorReturn(this, (PlayPauseControl.__proto__ || Object.getPrototypeOf(PlayPauseControl)).call(this, {
                  name: 'PlayPause',
                  player: obj.player
                }));
              }

              /**
               * toggle play / pause
               *
               * @returns {void}
               * @memberof PlayPauseControl
               */_createClass(PlayPauseControl, [{
                key: 'togglePlayPause', value: function togglePlayPause() {
                  this.logger.debug('Toggle play');
                  this.isPlayingAdOrPlayback() ? this.player.pause() : this.player.play();
                }/**
                 * check if currently playing ad or playback
                 *
                 * @returns {boolean} - if currently playing ad or playback
                 * @memberof PlayPauseControl
                 */
              }, {
                key: 'isPlayingAdOrPlayback', value: function isPlayingAdOrPlayback() {
                  return this.props.adBreak && this.props.adIsPlaying || !this.props.adBreak && this.props.isPlaying;
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof PlayPauseControl
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this2 = this;
                  var controlButtonClass = this.isPlayingAdOrPlayback() ? [_playPause2.default.controlButton, _playPause2.default.isPlaying].join(' ') : _playPause2.default.controlButton;
                  return (0, _preact.h)('div', {className: [_playPause2.default.controlButtonContainer, _playPause2.default.controlPlayPause].join(' ')}, (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)('button', {
                    tabIndex: '0',
                    'aria-label': (0, _preact.h)(_preactI18n.Text, {id: this.isPlayingAdOrPlayback() ? 'controls.pause' : 'controls.play'}),
                    className: controlButtonClass,
                    onClick: function onClick() {
                      return _this2.togglePlayPause();
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.togglePlayPause();
                      }
                    }
                  }, props.isEnded && !props.adBreak ? (0, _preact.h)(_icon2.default, {type: _icon.IconType.StartOver}) : (0, _preact.h)('div', null, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Play}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Pause})))));
                }
              }]);
              return PlayPauseControl;
            }(_base2.default)) || _class);
            exports.default = PlayPauseControl;
            /***/
          }, /* 87 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(88);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_play-pause.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_play-pause.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 88 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-control-button-container.playkit-control-play-pause .playkit-control-button {\n  transition: 400ms transform; }\n  .playkit-control-button-container.playkit-control-play-pause .playkit-control-button .playkit-icon-pause {\n    transition: 400ms opacity;\n    opacity: 0;\n    display: none; }\n  .playkit-control-button-container.playkit-control-play-pause .playkit-control-button .playkit-icon-play {\n    transition: 400ms opacity;\n    opacity: 1;\n    display: block; }\n  .playkit-control-button-container.playkit-control-play-pause .playkit-control-button.playkit-is-playing {\n    transform: rotate(360deg); }\n    .playkit-control-button-container.playkit-control-play-pause .playkit-control-button.playkit-is-playing .playkit-icon-pause {\n      opacity: 1;\n      display: block; }\n    .playkit-control-button-container.playkit-control-play-pause .playkit-control-button.playkit-is-playing .playkit-icon-play {\n      opacity: 0;\n      display: none; }\n\n.playkit-touch .playkit-control-button-container.playkit-control-play-pause {\n  display: none; }\n\n.playkit-player.playkit-size-sm .playkit-control-button-container.playkit-control-play-pause {\n  display: none; }\n", ""]);// exports
            exports.locals = {
              "control-button-container": "playkit-control-button-container",
              "controlButtonContainer": "playkit-control-button-container",
              "control-play-pause": "playkit-control-play-pause",
              "controlPlayPause": "playkit-control-play-pause",
              "control-button": "playkit-control-button",
              "controlButton": "playkit-control-button",
              "icon-pause": "playkit-icon-pause",
              "iconPause": "playkit-icon-pause",
              "icon-play": "playkit-icon-play",
              "iconPlay": "playkit-icon-play",
              "is-playing": "playkit-is-playing",
              "isPlaying": "playkit-is-playing",
              "touch": "playkit-touch",
              "player": "playkit-player",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm"
            };
            /***/
          }, /* 89 *//***/function (module, exports, __webpack_require__) {
            !function (e, n) {
              true ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : e.dlv = n();
            }(this, function () {
              function e(e, n, t, o) {
                for (o = 0, n = n.split ? n.split(".") : n; e && o < n.length;) {
                  e = e[n[o++]];
                }
                return void 0 === e ? t : e;
              }

              return e;
            });
            /***/
          }, /* 90 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _rewind = __webpack_require__(91);
            var _rewind2 = _interopRequireDefault(_rewind);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _rewind2.default;
            /***/
          }, /* 91 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * Default rewind step
             * @type {number} number of seconds
             * @const
             */var DEFAULT_STEP = 10;
            /**
             * RewindControl component
             *
             * @class RewindControl
             * @example <RewindControl player={this.player} step={5} />
             * @extends {BaseComponent}
             */var RewindControl = function (_BaseComponent) {
              _inherits(RewindControl, _BaseComponent);

              /**
               * Creates an instance of RewindControl.
               * @param {Object} obj obj
               * @memberof RewindControl
               */function RewindControl(obj) {
                _classCallCheck(this, RewindControl);
                return _possibleConstructorReturn(this, (RewindControl.__proto__ || Object.getPrototypeOf(RewindControl)).call(this, {
                  name: 'Rewind',
                  player: obj.player
                }));
              }

              /**
               * rewind click handler
               *
               * @returns {void}
               * @memberof RewindControl
               */_createClass(RewindControl, [{
                key: 'onClick', value: function onClick() {
                  this.animate();
                  var step = this.props.step || DEFAULT_STEP;
                  if (this.player.currentTime - step < 0) {
                    this.player.currentTime = 0;
                  } else {
                    this.player.currentTime = this.player.currentTime - step;
                  }
                }/**
                 * toggles the animation state to activate the rotate animation
                 *
                 * @returns {void}
                 * @memberof RewindControl
                 */
              }, {
                key: 'animate', value: function animate() {
                  this.setState({animation: false});
                  this.forceUpdate();
                  this.setState({animation: true});
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof RewindControl
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this2 = this;
                  return (0, _preact.h)('div', {className: [_style2.default.controlButtonContainer, _style2.default.controlRewind].join(' ')}, (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)('button', {
                    tabIndex: '0',
                    'aria-label': (0, _preact.h)(_preactI18n.Text, {id: 'controls.rewind'}),
                    className: _style2.default.controlButton + ' ' + (this.state.animation ? _style2.default.rotate : ''),
                    onClick: function onClick() {
                      return _this2.onClick();
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.onClick();
                      }
                    }
                  }, (0, _preact.h)(_icon2.default, {type: !props.step || props.step === 10 ? _icon.IconType.Rewind10 : _icon.IconType.Rewind}))));
                }
              }]);
              return RewindControl;
            }(_base2.default);
            exports.default = RewindControl;
            /***/
          }, /* 92 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _seekbarPlaybackContainer = __webpack_require__(93);
            var _seekbarPlaybackContainer2 = _interopRequireDefault(_seekbarPlaybackContainer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _seekbarPlaybackContainer2.default;
            /***/
          }, /* 93 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _seekbar = __webpack_require__(14);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _seekbar2 = __webpack_require__(15);
            var _seekbar3 = _interopRequireDefault(_seekbar2);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                currentTime: state.seekbar.currentTime,
                duration: state.engine.duration,
                isDraggingActive: state.seekbar.draggingActive,
                isMobile: state.shell.isMobile,
                poster: state.engine.poster
              };
            };
            /**
             * SeekBarPlaybackContainer component
             *
             * @class SeekBarPlaybackContainer
             * @example <SeekBarPlaybackContainer player={this.player} />
             * @extends {BaseComponent}
             */var SeekBarPlaybackContainer = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_seekbar.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(SeekBarPlaybackContainer, _BaseComponent);

              /**
               * Creates an instance of SeekBarPlaybackContainer.
               * @param {Object} obj obj
               * @memberof SeekBarPlaybackContainer
               */function SeekBarPlaybackContainer(obj) {
                _classCallCheck(this, SeekBarPlaybackContainer);
                return _possibleConstructorReturn(this, (SeekBarPlaybackContainer.__proto__ || Object.getPrototypeOf(SeekBarPlaybackContainer)).call(this, {
                  name: 'SeekBarPlaybackContainer',
                  player: obj.player,
                  config: obj.config
                }));
              }

              /**
               * after component mounted, listen to time update event and if dragging not active,
               * update the current time in the store
               *
               * @returns {void}
               * @memberof SeekBarPlaybackContainer
               */_createClass(SeekBarPlaybackContainer, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  this.player.addEventListener(this.player.Event.TIME_UPDATE, function () {
                    if (!_this2.props.isDraggingActive) {
                      _this2.props.updateCurrentTime(_this2.player.currentTime);
                    }
                  });
                }/**
                 * render component
                 *
                 * @returns {React$Element} - component element
                 * @memberof SeekBarPlaybackContainer
                 */
              }, {
                key: 'render', value: function render() {
                  var _this3 = this;
                  return (0, _preact.h)(_seekbar3.default, {
                    player: this.props.player,
                    playerElement: this.props.playerContainer,
                    showFramePreview: this.props.showFramePreview,
                    showTimeBubble: this.props.showTimeBubble,
                    changeCurrentTime: function changeCurrentTime(time) {
                      return _this3.player.currentTime = time;
                    },
                    playerPoster: this.props.poster,
                    updateSeekbarDraggingStatus: function updateSeekbarDraggingStatus(data) {
                      return _this3.props.updateSeekbarDraggingStatus(data);
                    },
                    updateCurrentTime: function updateCurrentTime(data) {
                      return _this3.props.updateCurrentTime(data);
                    },
                    currentTime: this.props.currentTime,
                    duration: this.props.duration,
                    isDraggingActive: this.props.isDraggingActive,
                    isMobile: this.props.isMobile,
                    thumbsSprite: this.props.config.thumbsSprite,
                    thumbsSlices: this.props.config.thumbsSlices,
                    thumbsWidth: this.props.config.thumbsWidth
                  });
                }
              }]);
              return SeekBarPlaybackContainer;
            }(_base2.default)) || _class);
            exports.default = SeekBarPlaybackContainer;
            /***/
          }, /* 94 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _seekbar = __webpack_require__(95);
            var _seekbar2 = _interopRequireDefault(_seekbar);
            var _preact = __webpack_require__(0);
            var _timeFormat = __webpack_require__(26);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * SeekBarControl component
             *
             * @class SeekBarControl
             * @example <SeekBarControl
             *  playerElement={this.player.getView().parentElement}
             *  showFramePreview={this.props.showFramePreview}
             *  showTimeBubble={this.props.showTimeBubble}
             *  changeCurrentTime={time => this.player.currentTime = time}
             *  thumbsSprite={this.config.thumbsSprite}
             *  thumbsSlices={this.config.thumbsSlices}
             *  thumbsWidth={this.config.thumbsWidth}
             *  updateSeekbarDraggingStatus={data => this.props.updateSeekbarDraggingStatus(data)}
             *  updateCurrentTime={data => this.props.updateCurrentTime(data)}
             *  currentTime={this.props.currentTime}
             *  duration={this.props.duration}
             *  isDraggingActive={this.props.isDraggingActive}
             *  isMobile={this.props.isMobile}
             * />
             * @extends {Component}
             */var SeekBarControl = function (_Component) {
              _inherits(SeekBarControl, _Component);

              function SeekBarControl() {
                _classCallCheck(this, SeekBarControl);
                return _possibleConstructorReturn(this, (SeekBarControl.__proto__ || Object.getPrototypeOf(SeekBarControl)).apply(this, arguments));
              }

              _createClass(SeekBarControl, [{
                key: 'componentWillMount', /**
                 * before component mounted, set initial state
                 *
                 * @returns {void}
                 * @memberof SeekBarControl
                 */value: function componentWillMount() {
                  this.setState({virtualTime: 0});
                }/**
                 * on component mount, bind mouseup and mousemove events to top player element
                 *
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  document.addEventListener('mouseup', function (e) {
                    _this2.onPlayerMouseUp(e);
                  });
                  document.addEventListener('mousemove', function (e) {
                    _this2.onPlayerMouseMove(e);
                  });
                }/**
                 * seekbar mouse down handler
                 *
                 * @param {Event} e - mouse down event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onSeekbarMouseDown', value: function onSeekbarMouseDown(e) {
                  if (this.props.isMobile) {
                    return;
                  }
                  this.props.updateSeekbarDraggingStatus(true);
                  if (this.props.isDraggingActive) {
                    var time = this.getTime(e);
                    this.updateSeekBarProgress(time, this.props.duration);
                  }
                }/**
                 * onTap event handler
                 *
                 * @param {Event} e - onClick event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onTap', value: function onTap(e) {
                  if (!this.props.isMobile) {
                    return;
                  }
                  var time = this.getTime(e);
                  this.props.changeCurrentTime(time);
                  this.updateSeekBarProgress(time, this.props.duration);
                  this.props.updateSeekbarDraggingStatus(false);
                }/**
                 * player mouse up handler for seekbar porpuses
                 *
                 * @param {Event} e - mouse up event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onPlayerMouseUp', value: function onPlayerMouseUp(e) {
                  if (this.props.isMobile) {
                    return;
                  }
                  if (this.props.isDraggingActive) {
                    var time = this.getTime(e);
                    this.props.changeCurrentTime(time);
                    this.updateSeekBarProgress(time, this.props.duration);
                    this.props.updateSeekbarDraggingStatus(false);
                  }
                }/**
                 * player mouse move handler for seekbar porpuses
                 *
                 * @param {Event} e - mouse move event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onPlayerMouseMove', value: function onPlayerMouseMove(e) {
                  if (this.props.isMobile) {
                    return;
                  }
                  if (this.props.isDraggingActive) {
                    var time = this.getTime(e);
                    this.updateSeekBarProgress(time, this.props.duration);
                    this.updateSeekBarProgress(time, this.props.duration, true);
                  }
                }/**
                 * seekbar mouse move handler
                 *
                 * @param {Event} e - mouse move event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onSeekbarMouseMove', value: function onSeekbarMouseMove(e) {
                  if (this.props.isMobile) {
                    return;
                  }
                  var time = this.getTime(e);
                  this.updateSeekBarProgress(time, this.props.duration, true);
                }/**
                 * seekbar touch start handler
                 *
                 * @param {Event} e - touch start event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onSeekbarTouchStart', value: function onSeekbarTouchStart(e) {
                  this.props.updateSeekbarDraggingStatus(true);
                  if (this.props.isDraggingActive) {
                    var time = this.getTime(e);
                    this.updateSeekBarProgress(time, this.props.duration);
                  }
                }/**
                 * seekbar touch move handler
                 *
                 * @param {Event} e - touch move event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onSeekbarTouchMove', value: function onSeekbarTouchMove(e) {
                  var time = this.getTime(e);
                  this._movex = time;
                  this.updateSeekBarProgress(time, this.props.duration, true);
                  if (this.props.isDraggingActive) {
                    this.updateSeekBarProgress(time, this.props.duration);
                  }
                }/**
                 * seekbar key down handler
                 *
                 * @param {KeyboardEvent} e - keyboard event
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onSeekbarKeyDown', value: function onSeekbarKeyDown(e) {
                  if (this.props.adBreak) {
                    return;
                  }
                  var newTime = void 0;
                  switch (e.keyCode) {
                    case _keyMap.KeyMap.LEFT:
                      newTime = this.props.player.currentTime - 5;
                      this.props.player.currentTime = newTime > 0 ? newTime : 0;
                      this.updateSeekBarProgress(this.props.player.currentTime, this.props.duration, true);
                      break;
                    case _keyMap.KeyMap.RIGHT:
                      newTime = this.props.player.currentTime + 5;
                      this.props.player.currentTime = newTime > this.props.player.duration ? this.props.player.duration : newTime;
                      this.updateSeekBarProgress(this.props.player.currentTime, this.props.duration, true);
                      break;
                  }
                }/**
                 * seekbar touch end handler
                 *
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'onSeekbarTouchEnd', value: function onSeekbarTouchEnd() {
                  if (this.props.isDraggingActive) {
                    var time = this._movex;
                    this.props.changeCurrentTime(time);
                    this.updateSeekBarProgress(time, this.props.duration);
                  }
                  this.props.updateSeekbarDraggingStatus(false);
                }/**
                 * abstract function to update virtual progress ui using component state or report to upper component of time change
                 *
                 * @param {number} currentTime - current time
                 * @param {number} duration - duration
                 * @param {boolean} [virtual=false] - virtual relates to the hover seekbar position
                 * @returns {void}
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'updateSeekBarProgress', value: function updateSeekBarProgress(currentTime, duration) {
                  var virtual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                  if (virtual) {
                    this.setState({virtualTime: currentTime});
                  } else {
                    this.props.updateCurrentTime(currentTime);
                  }
                }/**
                 * utility function to get element offset from window
                 *
                 * @param {*} element - element to get the offset for
                 * @returns {{ top: number, left: number }} - object with offset in both asixs
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'getOffset', value: function getOffset(element) {
                  var _x = 0;
                  var _y = 0;
                  while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {
                    _x += element.offsetLeft - element.scrollLeft;
                    _y += element.offsetTop - element.scrollTop;
                    element = element.offsetParent;
                  }
                  return {top: _y, left: _x};
                }/**
                 * get current time based on position of the mouseEvent on the seekbar
                 *
                 * @param {*} e - event
                 * @returns {number} - current time in seconds
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'getTime', value: function getTime(e) {
                  var xPosition = e.touches ? e.touches[0].clientX : e.clientX;
                  var time = this.props.duration * ((xPosition - this._seekBarElement.offsetLeft - this.getOffset(this.props.playerElement).left) / this._seekBarElement.clientWidth);
                  time = parseFloat(time.toFixed(2));
                  if (time < 0) return 0;
                  if (time > this.props.duration) return this.props.duration;
                  return time;
                }/**
                 * get current buffered percent from the player
                 *
                 * @returns {number} - current buffered percent
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'getBufferedPercent', value: function getBufferedPercent() {
                  if (this.props.player.duration > 0 && this.props.player.buffered.length > 0) {
                    return this.props.player.buffered.end(0) / this.props.player.duration * 100;
                  }
                  return 0;
                }/**
                 * utility function to get the thumb sprite background position
                 *
                 * @returns {string} background-position string value
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'getThumbSpriteOffset', value: function getThumbSpriteOffset() {
                  var percent = this.state.virtualTime / this.props.duration;
                  var sliceIndex = Math.ceil(this.props.thumbsSlices * percent);
                  return -(sliceIndex * this.props.thumbsWidth) + 'px 0px';
                }/**
                 * get the left position the frame preview element should be in
                 *
                 * @returns {number} left position
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'getFramePreviewOffset', value: function getFramePreviewOffset() {
                  if (this._seekBarElement && this._framePreviewElement) {
                    var leftOffset = this.state.virtualTime / this.props.duration * this._seekBarElement.clientWidth - this._framePreviewElement.clientWidth / 2;
                    if (leftOffset < 0) {
                      return 0;
                    } else if (leftOffset > this._seekBarElement.clientWidth - this._framePreviewElement.clientWidth) {
                      return this._seekBarElement.clientWidth - this._framePreviewElement.clientWidth;
                    } else {
                      return leftOffset;
                    }
                  } else {
                    return 0;
                  }
                }/**
                 * get the left position to time bubble should be in
                 *
                 * @returns {number} left position
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'getTimeBubbleOffset', value: function getTimeBubbleOffset() {
                  if (this._timeBubbleElement) {
                    var leftOffset = this.state.virtualTime / this.props.duration * this._seekBarElement.clientWidth - this._timeBubbleElement.clientWidth / 2;
                    if (leftOffset < 0) {
                      return 0;
                    } else if (leftOffset > this._seekBarElement.clientWidth - this._timeBubbleElement.clientWidth) {
                      return this._seekBarElement.clientWidth - this._timeBubbleElement.clientWidth;
                    } else {
                      return leftOffset;
                    }
                  } else {
                    return 0;
                  }
                }/**
                 * render frame preview
                 *
                 * @returns {React$Element} - component
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'renderFramePreview', value: function renderFramePreview() {
                  var _this3 = this;
                  if (!this.props.thumbsSprite || !this.props.thumbsSlices || !this.props.thumbsWidth || !this.props.showFramePreview || this.props.isMobile) return undefined;
                  return (0, _preact.h)('div', {
                    className: _seekbar2.default.framePreview,
                    style: this._getFramePreviewStyle(),
                    ref: function ref(c) {
                      return _this3._framePreviewElement = c;
                    }
                  }, (0, _preact.h)('div', {
                    className: _seekbar2.default.framePreviewImg,
                    style: this._getFramePreviewImgStyle()
                  }));
                }/**
                 * Gets the style of the frame preview image.
                 * @returns {string} - The css style string.
                 * @memberof SeekBarControl
                 * @private
                 */
              }, {
                key: '_getFramePreviewImgStyle', value: function _getFramePreviewImgStyle() {
                  var framePreviewImgStyle = 'background-image: url(' + this.props.thumbsSprite + ');';
                  framePreviewImgStyle += 'background-position: ' + this.getThumbSpriteOffset() + ';';
                  framePreviewImgStyle += 'background-size: ' + this.props.thumbsSlices * this.props.thumbsWidth + 'px 100%;';
                  return framePreviewImgStyle;
                }/**
                 * Gets the style of the frame preview.
                 * @returns {string} - The css style string.
                 * @memberof SeekBarControl
                 * @private
                 */
              }, {
                key: '_getFramePreviewStyle', value: function _getFramePreviewStyle() {
                  var framePreviewStyle = 'left: ' + this.getFramePreviewOffset() + 'px;';
                  framePreviewStyle += 'width: ' + this.props.thumbsWidth + 'px;';
                  return framePreviewStyle;
                }/**
                 * render time bubble
                 *
                 * @returns {React$Element} - component
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'renderTimeBubble', value: function renderTimeBubble() {
                  var _this4 = this;
                  if (!this.props.showTimeBubble || this.props.isMobile) return undefined;
                  var timeBubbleStyle = 'left: ' + this.getTimeBubbleOffset() + 'px';
                  var timeBubbleValue = this.props.isDvr ? '-' + (0, _timeFormat.toHHMMSS)(this.props.duration - this.state.virtualTime) : (0, _timeFormat.toHHMMSS)(this.state.virtualTime);
                  return (0, _preact.h)('div', {
                    className: _seekbar2.default.timePreview,
                    style: timeBubbleStyle,
                    ref: function ref(c) {
                      return _this4._timeBubbleElement = c;
                    }
                  }, timeBubbleValue);
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component
                 * @memberof SeekBarControl
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this5 = this;
                  var virtualProgressWidth = this.state.virtualTime / props.duration * 100 + '%';
                  var progressWidth = props.currentTime / props.duration * 100 + '%';
                  var bufferedWidth = Math.round(this.getBufferedPercent()) + '%';
                  var seekbarStyleClass = [_seekbar2.default.seekBar];
                  if (props.adBreak) seekbarStyleClass.push(_seekbar2.default.adBreak);
                  if (props.isDvr) seekbarStyleClass.push(_seekbar2.default.live);
                  if (props.isMobile) seekbarStyleClass.push(_seekbar2.default.hover);
                  if (props.isDraggingActive) seekbarStyleClass.push(_seekbar2.default.hover);
                  return (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: seekbarStyleClass.join(' '),
                    ref: function ref(c) {
                      return _this5._seekBarElement = c;
                    },
                    role: 'slider',
                    'aria-label': 'Seek slider',
                    'aria-valuemin': '0',
                    'aria-valuemax': Math.round(this.props.duration),
                    'aria-valuenow': Math.round(this.props.currentTime),
                    'aria-valuetext': (0, _timeFormat.toHHMMSS)(this.props.currentTime) + ' of ' + (0, _timeFormat.toHHMMSS)(this.props.duration),
                    onClick: function onClick(e) {
                      return _this5.onTap(e);
                    },
                    onMouseMove: function onMouseMove(e) {
                      return _this5.onSeekbarMouseMove(e);
                    },
                    onMouseDown: function onMouseDown(e) {
                      return _this5.onSeekbarMouseDown(e);
                    },
                    onTouchStart: function onTouchStart(e) {
                      return _this5.onSeekbarTouchStart(e);
                    },
                    onTouchMove: function onTouchMove(e) {
                      return _this5.onSeekbarTouchMove(e);
                    },
                    onTouchEnd: function onTouchEnd() {
                      return _this5.onSeekbarTouchEnd();
                    },
                    onKeyDown: function onKeyDown(e) {
                      return _this5.onSeekbarKeyDown(e);
                    }
                  }, (0, _preact.h)('div', {className: _seekbar2.default.progressBar}, (0, _preact.h)('div', {
                    className: _seekbar2.default.progress,
                    style: {width: progressWidth}
                  }, props.adBreak ? undefined : (0, _preact.h)('a', {className: _seekbar2.default.scrubber})), (0, _preact.h)('div', {
                    className: _seekbar2.default.virtualProgress,
                    style: {width: virtualProgressWidth}
                  }), this.renderTimeBubble(), this.renderFramePreview(), (0, _preact.h)('div', {
                    className: _seekbar2.default.buffered,
                    style: {width: bufferedWidth}
                  })));
                }
              }]);
              return SeekBarControl;
            }(_preact.Component);
            exports.default = SeekBarControl;
            /***/
          }, /* 95 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(96);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_seekbar.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_seekbar.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 96 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-player .playkit-seek-bar {\n  padding: 6px 0;\n  cursor: pointer;\n  position: relative; }\n  .playkit-player .playkit-seek-bar:hover .playkit-time-preview,\n  .playkit-player .playkit-seek-bar:hover .playkit-frame-preview, .playkit-player .playkit-seek-bar.playkit-hover .playkit-time-preview,\n  .playkit-player .playkit-seek-bar.playkit-hover .playkit-frame-preview, .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-time-preview,\n  .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-frame-preview {\n    display: block; }\n  .playkit-player .playkit-seek-bar:hover .playkit-progress-bar .playkit-scrubber, .playkit-player .playkit-seek-bar.playkit-hover .playkit-progress-bar .playkit-scrubber, .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-progress-bar .playkit-scrubber {\n    transform: scale(1); }\n  .playkit-player .playkit-seek-bar:hover .playkit-progress-bar .playkit-virtual-progress, .playkit-player .playkit-seek-bar.playkit-hover .playkit-progress-bar .playkit-virtual-progress, .playkit-player .playkit-seek-bar.playkit-dragging-active .playkit-progress-bar .playkit-virtual-progress {\n    display: block; }\n  .playkit-player .playkit-seek-bar.playkit-ad-break {\n    cursor: initial; }\n    .playkit-player .playkit-seek-bar.playkit-ad-break .playkit-progress-bar .playkit-progress {\n      background-color: #F9A71B; }\n  .playkit-player .playkit-seek-bar.playkit-live .playkit-progress-bar .playkit-progress {\n    background-color: #DA1F26; }\n  .playkit-player .playkit-seek-bar .playkit-progress-bar {\n    height: 4px;\n    background-color: rgba(255, 255, 255, 0.3);\n    border-radius: 2px;\n    position: relative; }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-progress {\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      z-index: 2;\n      border-radius: 2px 0 0 2px;\n      background-color: #01ACCD; }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-virtual-progress {\n      display: none; }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-buffered, .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-virtual-progress {\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      z-index: 1;\n      border-radius: 2px 0 0 2px;\n      background-color: rgba(255, 255, 255, 0.3); }\n    .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-scrubber {\n      position: absolute;\n      z-index: 3;\n      cursor: pointer;\n      display: block;\n      top: -6px;\n      right: -8px;\n      border-radius: 8px;\n      height: 16px;\n      width: 16px;\n      background-color: #FFFFFF;\n      box-shadow: 0 0 31px 0 rgba(0, 0, 0, 0.3);\n      transform: scale(0);\n      transition: 100ms transform; }\n      .playkit-player .playkit-seek-bar .playkit-progress-bar .playkit-scrubber:active {\n        opacity: 1;\n        cursor: grabbing; }\n  .playkit-player .playkit-seek-bar .playkit-frame-preview {\n    position: absolute;\n    bottom: 16px;\n    left: 0;\n    height: 94px;\n    width: 164px;\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    border-radius: 4px;\n    z-index: 10; }\n    .playkit-player .playkit-seek-bar .playkit-frame-preview .playkit-frame-preview-img {\n      background-size: auto 100%;\n      width: 100%;\n      height: 100%;\n      position: relative; }\n  .playkit-player .playkit-seek-bar .playkit-time-preview {\n    position: absolute;\n    bottom: 22px;\n    left: 0;\n    z-index: 11;\n    height: 22px;\n    min-width: 48px;\n    padding: 0 3px;\n    text-align: center;\n    border-radius: 3px;\n    background-color: rgba(0, 0, 0, 0.7);\n    font-size: 13px;\n    font-weight: bold;\n    line-height: 22px;\n    color: #fff; }\n  .playkit-player .playkit-seek-bar .playkit-time-preview,\n  .playkit-player .playkit-seek-bar .playkit-frame-preview {\n    display: none; }\n\n.playkit-touch .playkit-virtual-progress, .playkit-touch .playkit-time-preview, .playkit-touch .playkit-frame-preview {\n  display: none !important; }\n\n.playkit-player.playkit-size-sm .playkit-virtual-progress, .playkit-player.playkit-size-sm .playkit-time-preview, .playkit-player.playkit-size-sm .playkit-frame-preview {\n  display: none; }\n", ""]);// exports
            exports.locals = {
              "player": "playkit-player",
              "seek-bar": "playkit-seek-bar",
              "seekBar": "playkit-seek-bar",
              "time-preview": "playkit-time-preview",
              "timePreview": "playkit-time-preview",
              "frame-preview": "playkit-frame-preview",
              "framePreview": "playkit-frame-preview",
              "hover": "playkit-hover",
              "dragging-active": "playkit-dragging-active",
              "draggingActive": "playkit-dragging-active",
              "progress-bar": "playkit-progress-bar",
              "progressBar": "playkit-progress-bar",
              "scrubber": "playkit-scrubber",
              "virtual-progress": "playkit-virtual-progress",
              "virtualProgress": "playkit-virtual-progress",
              "ad-break": "playkit-ad-break",
              "adBreak": "playkit-ad-break",
              "progress": "playkit-progress",
              "live": "playkit-live",
              "buffered": "playkit-buffered",
              "frame-preview-img": "playkit-frame-preview-img",
              "framePreviewImg": "playkit-frame-preview-img",
              "touch": "playkit-touch",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm"
            };
            /***/
          }, /* 97 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _volume = __webpack_require__(27);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                isDraggingActive: state.volume.draggingActive,
                volume: state.volume.volume,
                muted: state.volume.muted,
                isMobile: state.shell.isMobile
              };
            };
            /**
             * VolumeControl component
             *
             * @class VolumeControl
             * @example <VolumeControl player={this.player} />
             * @extends {BaseComponent}
             */var VolumeControl = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_volume.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(VolumeControl, _BaseComponent);

              /**
               * Creates an instance of VolumeControl.
               *
               * @constructor
               * @param {Object} obj obj
               * @memberof VolumeControl
               */function VolumeControl(obj) {
                _classCallCheck(this, VolumeControl);
                return _possibleConstructorReturn(this, (VolumeControl.__proto__ || Object.getPrototypeOf(VolumeControl)).call(this, {
                  name: 'Volume',
                  player: obj.player
                }));
              }

              /**
               * after component mounted, update initial volume and muted value and listen to volume change
               *
               * @method componentDidMount
               * @returns {void}
               * @memberof VolumeControl
               */_createClass(VolumeControl, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  this.player.addEventListener(this.player.Event.LOADED_METADATA, function () {
                    _this2.props.updateVolume(_this2.player.volume);
                    _this2.props.updateMuted(_this2.player.muted);
                  });
                  this.player.addEventListener(this.player.Event.VOLUME_CHANGE, function () {
                    _this2.props.updateMuted(_this2.player.muted);
                    _this2.props.updateVolume(_this2.player.volume);
                  });
                  document.addEventListener('mouseup', function (e) {
                    return _this2.onVolumeProgressBarMouseUp(e);
                  });
                  document.addEventListener('mousemove', function (e) {
                    return _this2.onVolumeProgressBarMouseMove(e);
                  });
                }/**
                 * get the volume progress bar height percentage string
                 *
                 * @method getVolumeProgessHeight
                 * @returns {string} - volume progress bar new height based on volume
                 * @memberof VolumeControl
                 */
              }, {
                key: 'getVolumeProgressHeight', value: function getVolumeProgressHeight() {
                  return this.props.muted ? '0%' : Math.round(this.props.volume * 100) + '%';
                }/**
                 * on volume progress bar mouse down, update volume dragging status in store state
                 *
                 * @method onVolumeProgressBarMouseDown
                 * @returns {void}
                 * @memberof VolumeControl
                 */
              }, {
                key: 'onVolumeProgressBarMouseDown', value: function onVolumeProgressBarMouseDown() {
                  this.props.updateVolumeDraggingStatus(true);
                }/**
                 * on volume progress bar mouse move, update the volume if dragging is active
                 *
                 * @method onVolumeProgressBarMouseMove
                 * @param {Event} e - mouse move event
                 * @returns {void}
                 * @memberof VolumeControl
                 */
              }, {
                key: 'onVolumeProgressBarMouseMove', value: function onVolumeProgressBarMouseMove(e) {
                  if (this.props.isDraggingActive) {
                    this.changeVolume(e);
                  }
                }/**
                 * on volume control key down, update the volume in case of up/down keys
                 *
                 * @param {KeyboardEvent} e - keyboardEvent event
                 * @method onVolumeControlButtonClick
                 * @returns {void}
                 * @memberof VolumeControl
                 */
              }, {
                key: 'onVolumeControlKeyDown', value: function onVolumeControlKeyDown(e) {
                  var newVolume = void 0;
                  switch (e.keyCode) {
                    case _keyMap.KeyMap.UP:
                      this.setState({hover: true});
                      newVolume = Math.round(this.player.volume * 100) + 5;
                      if (this.player.muted) {
                        this.player.muted = false;
                      }
                      this.player.volume = newVolume / 100;
                      break;
                    case _keyMap.KeyMap.DOWN:
                      this.setState({hover: true});
                      newVolume = Math.round(this.player.volume * 100) - 5;
                      if (newVolume < 5) {
                        this.player.muted = true;
                        return;
                      }
                      this.player.volume = newVolume / 100;
                      break;
                    default:
                      this.setState({hover: false});
                      break;
                  }
                }/**
                 * on volume progress bar mouse up, update the volume and change the dragging status to false
                 *
                 * @method onVolumeProgressBarMouseUp
                 * @param {Event} e - mouse up event
                 * @returns {void}
                 * @memberof VolumeControl
                 */
              }, {
                key: 'onVolumeProgressBarMouseUp', value: function onVolumeProgressBarMouseUp(e) {
                  if (this.props.isDraggingActive) {
                    this.props.updateVolumeDraggingStatus(false);
                    this.changeVolume(e);
                  }
                }/**
                 * on volume control button click, toggle mute in player and store state
                 *
                 * @method onVolumeControlButtonClick
                 * @returns {void}
                 * @memberof VolumeControl
                 */
              }, {
                key: 'onVolumeControlButtonClick', value: function onVolumeControlButtonClick() {
                  this.logger.debug('Toggle mute. ' + this.player.muted + ' => ' + !this.player.muted);
                  this.player.muted = !this.player.muted;
                }/**
                 * change volume based on event mouse position compared to volume progress bar element
                 * if muted value is true in store state, change it to false both in store state and in player instance.
                 *
                 * @method changeVolume
                 * @param {Event} e - event to get the position from
                 * @returns {void}
                 * @memberof VolumeControl
                 */
              }, {
                key: 'changeVolume', value: function changeVolume(e) {
                  var barHeight = this._volumeProgressBarElement.clientHeight;
                  var topY = this.getCoords(this._volumeProgressBarElement).top;
                  var clickY = e.clientY;
                  var volume = 1 - (clickY - topY) / barHeight;
                  volume = parseFloat(volume.toFixed(2));
                  this.logger.debug('Change volume from ' + this.player.volume + ' => ' + volume);
                  this.player.volume = volume;
                  if (this.props.muted) {
                    this.player.muted = false;
                  }
                }/**
                 * get element cordinates
                 *
                 * @method getCoords
                 * @param {HTMLElement} el element to inspect
                 * @returns {{top: number, left: number}} object with the top and left position
                 * @memberof VolumeControl
                 */
              }, {
                key: 'getCoords', value: function getCoords(el) {
                  var box = el.getBoundingClientRect();
                  return {top: box.top, left: box.left};
                }/**
                 * render component
                 *
                 * @returns {React$Element} - component element
                 * @memberof VolumeControl
                 */
              }, {
                key: 'render', value: function render() {
                  var _this3 = this;
                  var controlButtonClass = [_style2.default.controlButtonContainer, _style2.default.volumeControl];
                  if (this.props.isDraggingActive) controlButtonClass.push(_style2.default.draggingActive);
                  if (this.props.muted || this.props.volume === 0) controlButtonClass.push(_style2.default.isMuted);
                  if (this.state.hover && !this.props.smartContainerOpen) controlButtonClass.push(_style2.default.hover);
                  return (0, _preact.h)('div', {
                    ref: function ref(c) {
                      return _this3._volumeControlElement = c;
                    }, className: controlButtonClass.join(' '), onMouseOver: function onMouseOver() {
                      return _this3.setState({hover: true});
                    }, onMouseOut: function onMouseOut() {
                      return _this3.setState({hover: false});
                    }
                  }, (0, _preact.h)('button', {
                    tabIndex: '0',
                    'aria-label': 'Volume',
                    className: _style2.default.controlButton,
                    onClick: function onClick() {
                      return _this3.onVolumeControlButtonClick();
                    },
                    onKeyDown: function onKeyDown(e) {
                      return _this3.onVolumeControlKeyDown(e);
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.VolumeBase}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.VolumeWaves}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.VolumeMute})), (0, _preact.h)('div', {
                    className: _style2.default.volumeControlBar,
                    role: 'slider',
                    'aria-valuemin': '0',
                    'aria-valuemaz': '100',
                    'aria-valuenow': this.player.volume * 100,
                    'aria-valuetext': this.player.volume * 100 + '% volume ' + (this.player.muted ? 'muted' : '')
                  }, (0, _preact.h)('div', {
                    className: _style2.default.bar, ref: function ref(c) {
                      return _this3._volumeProgressBarElement = c;
                    }, onMouseDown: function onMouseDown() {
                      return _this3.onVolumeProgressBarMouseDown();
                    }
                  }, (0, _preact.h)('div', {
                    className: _style2.default.progress,
                    style: {height: this.getVolumeProgressHeight()}
                  }))));
                }
              }]);
              return VolumeControl;
            }(_base2.default)) || _class);
            exports.default = VolumeControl;
            /***/
          }, /* 98 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _settings = __webpack_require__(45);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _smartContainer = __webpack_require__(46);
            var _smartContainer2 = _interopRequireDefault(_smartContainer);
            var _smartContainerItem = __webpack_require__(47);
            var _smartContainerItem2 = _interopRequireDefault(_smartContainerItem);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                videoTracks: state.engine.videoTracks,
                isMobile: state.shell.isMobile,
                isLive: state.engine.isLive
              };
            };
            /**
             * SettingsControl component
             *
             * @class SettingsControl
             * @example <SettingsControl player={this.player} />
             * @extends {BaseComponent}
             */var SettingsControl = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_settings.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(SettingsControl, _BaseComponent);

              /**
               * Creates an instance of SettingsControl.
               * @param {Object} obj obj
               * @memberof SettingsControl
               */function SettingsControl(obj) {
                _classCallCheck(this, SettingsControl);
                return _possibleConstructorReturn(this, (SettingsControl.__proto__ || Object.getPrototypeOf(SettingsControl)).call(this, {
                  name: 'Settings',
                  player: obj.player
                }));
              }

              /**
               * before component mounted, set initial state
               *
               * @returns {void}
               * @memberof SettingsControl
               */_createClass(SettingsControl, [{
                key: 'componentWillMount', value: function componentWillMount() {
                  this.setState({smartContainerOpen: false});
                }/**
                 * after component mounted, set event listener to click outside of the component
                 *
                 * @returns {void}
                 * @memberof SettingsControl
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  document.addEventListener('click', this.handleClickOutside.bind(this), true);
                }/**
                 * before component unmounted, remove event listener
                 *
                 * @returns {void}
                 * @memberof SettingsControl
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  document.removeEventListener('click', this.handleClickOutside.bind(this));
                }/**
                 * event listener for clicking outside handler.
                 *
                 * @param {*} e - click event
                 * @returns {void}
                 * @memberof SettingsControl
                 */
              }, {
                key: 'handleClickOutside', value: function handleClickOutside(e) {
                  if (!this.props.isMobile && !!this._controlSettingsElement && !this._controlSettingsElement.contains(e.target) && this.state.smartContainerOpen) {
                    if (e.target.classList.contains(_style2.default.overlayPlay)) {
                      e.stopPropagation();
                    }
                    this.setState({smartContainerOpen: false});
                  }
                }/**
                 * toggle smart container internal state on control button click
                 *
                 * @returns {void}
                 * @memberof SettingsControl
                 */
              }, {
                key: 'onControlButtonClick', value: function onControlButtonClick() {
                  this.setState({smartContainerOpen: !this.state.smartContainerOpen});
                }/**
                 * change player playback rate and update it in the store state
                 *
                 * @param {number} playbackRate - playback rate value
                 * @returns {void}
                 * @memberof SettingsControl
                 */
              }, {
                key: 'onSpeedChange', value: function onSpeedChange(playbackRate) {
                  this.props.updateSpeed(playbackRate);
                  this.player.playbackRate = playbackRate;
                }/**
                 * change quality track or if value is 'auto', enable player adaptive bitrate
                 *
                 * @param {(Object | string)} videoTrack - video track
                 * @returns {void}
                 * @memberof SettingsControl
                 */
              }, {
                key: 'onQualityChange', value: function onQualityChange(videoTrack) {
                  if (videoTrack === 'auto') {
                    this.player.enableAdaptiveBitrate();
                  } else {
                    this.player.selectTrack(videoTrack);
                  }
                }/**
                 * get the quality option label with fallbacks by optional configuration
                 *
                 * @param {Object} t - video track
                 * @returns {string} - quality option label
                 * @memberof SettingsControl
                 */
              }, {
                key: 'getQualityOptionLabel', value: function getQualityOptionLabel(t) {
                  var resolution = t.height ? t.height + 'p' : undefined;
                  var mbs = t.bandwidth ? (t.bandwidth / 1000000).toPrecision(2) + 'Mbs' : undefined;
                  if (!this.props.qualityType) {
                    return resolution || mbs || 'N/A';
                  } else if (this.props.qualityType.toUpperCase() === 'MBS' && mbs) {
                    return mbs;
                  } else if (this.props.qualityType.toUpperCase() === 'RESOLUTION' && resolution) {
                    return t.height + 'p';
                  } else if (t.label) {
                    return t.label;
                  } else {
                    return 'N/A';
                  }
                }/**
                 * This function gets an array and increases it if needed in each iteration. The function checks if the last element
                 * in the sorted array has the same resolution as the new current track element. If so, it compares their bandwidth
                 * and the the one with the higher. If the resolution is different then it just adds it to the array
                 *
                 * @param {Array} qualities - sorted (!) video tracks array
                 * @param {object} currentTrack - a track
                 * @returns {Array<any>} - an array with unique values, compared by their height. if the new track (currenttrack) has
                 * the same height value, then we take the one with the higher bandwidth (replace it if needed)
                 * @memberof SettingsControl
                 */
              }, {
                key: 'filterUniqueQualities', value: function filterUniqueQualities(qualities, currentTrack) {
                  var arrLength = qualities.length - 1;
                  var previousTrack = qualities[arrLength];
                  if (arrLength > -1 && currentTrack.height === previousTrack.height) {
                    if (currentTrack.bandwidth > previousTrack.bandwidth) {
                      qualities[arrLength] = currentTrack;
                    }
                  } else {
                    qualities.push(currentTrack);
                  }
                  return qualities;
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof SettingsControl
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this2 = this;
                  var speedOptions = this.player.playbackRates.reduce(function (acc, speed) {
                    var speedOption = {value: speed, label: speed === 1 ? 'Normal' : speed, active: false};
                    if (speed === _this2.player.playbackRate) {
                      speedOption.active = true;
                    }
                    acc.push(speedOption);
                    return acc;
                  }, []);
                  var qualityOptions = props.videoTracks.sort(function (a, b) {
                    return a.bandwidth < b.bandwidth ? 1 : -1;
                  }).filter(function (t) {
                    return t.bandwidth || t.height;
                  }).reduce(this.filterUniqueQualities, []).map(function (t) {
                    return {
                      label: _this2.getQualityOptionLabel(t),
                      active: !_this2.player.isAdaptiveBitrateEnabled() && t.active,
                      value: t
                    };
                  });// Progressive playback doesn't support auto
                  if (qualityOptions.length > 1 && this.player.streamType !== "progressive") {
                    qualityOptions.unshift({
                      label: 'Auto',
                      active: this.player.isAdaptiveBitrateEnabled(),
                      value: 'auto'
                    });
                  }
                  if (props.isLive && qualityOptions.length === 0) return undefined;
                  return (0, _preact.h)('div', {
                    ref: function ref(c) {
                      return _this2._controlSettingsElement = c;
                    }, className: [_style2.default.controlButtonContainer, _style2.default.controlSettings].join(' ')
                  }, (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)('button', {
                    tabIndex: '0',
                    'aria-label': (0, _preact.h)(_preactI18n.Text, {id: 'controls.settings'}),
                    className: this.state.smartContainerOpen ? [_style2.default.controlButton, _style2.default.active].join(' ') : _style2.default.controlButton,
                    onClick: function onClick() {
                      return _this2.onControlButtonClick();
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Settings}))), !this.state.smartContainerOpen ? '' : (0, _preact.h)(_smartContainer2.default, {
                    title: 'Settings',
                    onClose: function onClose() {
                      return _this2.onControlButtonClick();
                    }
                  }, qualityOptions.length <= 1 ? '' : (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)(_smartContainerItem2.default, {
                    icon: 'quality',
                    label: (0, _preact.h)(_preactI18n.Text, {id: 'settings.quality'}),
                    options: qualityOptions,
                    onSelect: function onSelect(o) {
                      return _this2.onQualityChange(o);
                    }
                  })), props.isLive ? '' : (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)(_smartContainerItem2.default, {
                    icon: 'speed',
                    label: (0, _preact.h)(_preactI18n.Text, {id: 'settings.speed'}),
                    options: speedOptions,
                    onSelect: function onSelect(o) {
                      return _this2.onSpeedChange(o);
                    }
                  }))));
                }
              }]);
              return SettingsControl;
            }(_base2.default)) || _class);
            exports.default = SettingsControl;
            /***/
          }, /* 99 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _shell = __webpack_require__(10);
            var _preactPortal = __webpack_require__(29);
            var _preactPortal2 = _interopRequireDefault(_preactPortal);
            var _overlay = __webpack_require__(17);
            var _overlay2 = _interopRequireDefault(_overlay);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {isMobile: state.shell.isMobile};
            };
            /**
             * SmartContainer component
             *
             * @class SmartContainer
             * @example <SmartContainer title='Language' onClose={() => this.controlButtonClickHandler()}>
             *   <SmartContainerItem
             *     icon={IconType.Audio}
             *     label='Audio'
             *     options={audioTrackOptions}
             *     onSelect={audioTrack => this.audioTrackChangeHandler(audioTrack)}
             *   />
             *   ...
             * </SmartContainer>
             * @extends {Component}
             */var SmartContainer = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_shell.actions)), _dec(_class = function (_Component) {
              _inherits(SmartContainer, _Component);

              function SmartContainer() {
                _classCallCheck(this, SmartContainer);
                return _possibleConstructorReturn(this, (SmartContainer.__proto__ || Object.getPrototypeOf(SmartContainer)).apply(this, arguments));
              }

              _createClass(SmartContainer, [{
                key: 'componentWillMount', /**
                 * before component mounted, add player css class
                 *
                 * @returns {void}
                 * @memberof SmartContainer
                 */value: function componentWillMount() {
                  this.props.addPlayerClass(_style2.default.smartContainerOpen);
                }/**
                 * after component unmounted, remove player css class
                 *
                 * @returns {void}
                 * @memberof SmartContainer
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  this.props.removePlayerClass(_style2.default.smartContainerOpen);
                }/**
                 * if mobile detected, smart container representation is an overlay. hence, render overlay with its children.
                 * otherwise, render smart container
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof SmartContainer
                 */
              }, {
                key: 'render', value: function render(props) {
                  return props.isMobile ? (0, _preact.h)(_preactPortal2.default, {into: '#overlay-portal'}, (0, _preact.h)(_overlay2.default, {
                    open: true,
                    onClose: function onClose() {
                      return props.onClose();
                    }
                  }, (0, _preact.h)('div', {className: _style2.default.title}, props.title), props.children)) : (0, _preact.h)('div', {
                    tabIndex: '-1',
                    className: [_style2.default.smartContainer, _style2.default.top, _style2.default.left].join(' '),
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ESC) {
                        props.onClose();
                      }
                    }
                  }, props.children);
                }
              }]);
              return SmartContainer;
            }(_preact.Component)) || _class);
            exports.default = SmartContainer;
            /***/
          }, /* 100 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _shell = __webpack_require__(10);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * Overlay component
             * @class Overlay
             * @example <Overlay
             *  type='share'
             *  onClose={() => this.closeShareOverlay()}
             * >
             *  ...
             * </Overlay>
             * @extends {Component}
             */var Overlay = (_dec = (0, _preactRedux.connect)(null, (0, _bindActions.bindActions)(_shell.actions)), _dec(_class = function (_Component) {
              _inherits(Overlay, _Component);

              function Overlay() {
                _classCallCheck(this, Overlay);
                return _possibleConstructorReturn(this, (Overlay.__proto__ || Object.getPrototypeOf(Overlay)).apply(this, arguments));
              }

              _createClass(Overlay, [{
                key: 'componentWillMount', /**
                 * componentWillMount
                 *
                 * @returns {void}
                 * @memberof Overlay
                 */value: function componentWillMount() {
                  this.props.addPlayerClass(_style2.default.overlayActive);
                }/**
                 * componentWillUnmount
                 *
                 * @returns {void}
                 * @memberof Overlay
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  this.props.removePlayerClass(_style2.default.overlayActive);
                }/**
                 * closeButton
                 * @param {any} props - props
                 * @returns {React$Element | void} close button element
                 * @memberof Overlay
                 */
              }, {
                key: 'renderCloseButton', value: function renderCloseButton(props) {
                  if (!props.permanent) {
                    return (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)('a', {
                      onClick: function onClick() {
                        return props.onClose();
                      },
                      'aria-label': (0, _preact.h)(_preactI18n.Text, {id: 'core.close'}),
                      className: _style2.default.closeOverlay
                    }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Close})));
                  } else {
                    return undefined;
                  }
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component
                 * @memberof Overlay
                 */
              }, {
                key: 'render', value: function render(props) {
                  var overlayClass = [_style2.default.overlay];
                  if (props.type) overlayClass.push(_style2.default[props.type + '-overlay']);
                  if (props.open) overlayClass.push(_style2.default.active);
                  return (0, _preact.h)('div', {
                    tabIndex: '-1',
                    className: overlayClass.join(' '),
                    role: 'dialog',
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ESC) {
                        props.onClose();
                      }
                    }
                  }, (0, _preact.h)('div', {className: _style2.default.overlayContents}, props.children), this.renderCloseButton(props));
                }
              }]);
              return Overlay;
            }(_preact.Component)) || _class);
            exports.default = Overlay;
            /***/
          }, /* 101 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(102);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_smart-container.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_smart-container.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 102 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, "@keyframes playkit-openSmartContainer {\n  from {\n    opacity: 0;\n    transform: translateY(10px); }\n  to {\n    opacity: 1;\n    transform: translateY(0); } }\n\n@keyframes playkit-closeSmartContainer {\n  from {\n    opacity: 1;\n    transform: translateY(0); }\n  to {\n    opacity: 0;\n    transform: translateY(10px); } }\n\n.playkit-player:not(.playkit-touch) .playkit-smart-container {\n  background-color: #222222;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n  position: absolute;\n  right: 0px;\n  min-width: 193px;\n  font-size: 15px;\n  z-index: 10;\n  display: block;\n  animation: playkit-openSmartContainer 100ms ease-out forwards; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-leaving {\n    animation: playkit-closeSmartContainer 100ms ease-out forwards; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-top {\n    bottom: 100%;\n    margin-bottom: 6px; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-top:before {\n      display: block;\n      content: ' ';\n      position: absolute;\n      bottom: -6px;\n      left: 0;\n      width: 100%;\n      height: 6px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-bottom {\n    top: 100%;\n    margin-top: 6px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-right {\n    left: 0px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container.playkit-left {\n    right: 0px; }\n  .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item {\n    margin: 16px;\n    color: rgba(244, 244, 244, 0.8);\n    white-space: nowrap;\n    display: flex;\n    justify-content: space-between; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item label .playkit-label-icon {\n      display: none; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item .playkit-dropdown, .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item select {\n      align-self: flex-end; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item .playkit-dropdown span {\n      max-width: 100px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      display: inline-block;\n      vertical-align: middle; }\n    .playkit-player:not(.playkit-touch) .playkit-smart-container .playkit-smart-container-item.playkit-select-menu-item select {\n      text-align-last: right; }\n\n.playkit-touch .playkit-smart-container-item {\n  width: 300px;\n  max-width: 100%;\n  margin: 16px auto;\n  color: rgba(244, 244, 244, 0.8);\n  white-space: nowrap;\n  text-align: left;\n  display: flex;\n  justify-content: space-between; }\n  .playkit-touch .playkit-smart-container-item.playkit-select-menu-item label {\n    font-size: 16px;\n    color: rgba(255, 255, 255, 0.8);\n    margin-right: 20px; }\n    .playkit-touch .playkit-smart-container-item.playkit-select-menu-item label .playkit-label-icon {\n      width: 24px;\n      height: 24px;\n      display: inline-block;\n      vertical-align: middle;\n      margin-right: 16px; }\n  .playkit-touch .playkit-smart-container-item.playkit-select-menu-item .playkit-dropdown, .playkit-touch .playkit-smart-container-item.playkit-select-menu-item select {\n    align-self: flex-end; }\n  .playkit-touch .playkit-smart-container-item.playkit-select-menu-item select {\n    text-align-last: right;\n    min-width: 1px;\n    line-height: 24px; }\n", ""]);// exports
            exports.locals = {
              "player": "playkit-player",
              "touch": "playkit-touch",
              "smart-container": "playkit-smart-container",
              "smartContainer": "playkit-smart-container",
              "openSmartContainer": "playkit-openSmartContainer",
              "leaving": "playkit-leaving",
              "closeSmartContainer": "playkit-closeSmartContainer",
              "top": "playkit-top",
              "bottom": "playkit-bottom",
              "right": "playkit-right",
              "left": "playkit-left",
              "smart-container-item": "playkit-smart-container-item",
              "smartContainerItem": "playkit-smart-container-item",
              "select-menu-item": "playkit-select-menu-item",
              "selectMenuItem": "playkit-select-menu-item",
              "label-icon": "playkit-label-icon",
              "labelIcon": "playkit-label-icon",
              "dropdown": "playkit-dropdown"
            };
            /***/
          }, /* 103 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _menu = __webpack_require__(104);
            var _menu2 = _interopRequireDefault(_menu);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {isMobile: state.shell.isMobile};
            };
            /**
             * DropDown component
             *
             * @class DropDown
             * @example <DropDown options={this.videoTrackOptions} />
             * @extends {Component}
             */var DropDown = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_Component) {
              _inherits(DropDown, _Component);

              function DropDown() {
                _classCallCheck(this, DropDown);
                return _possibleConstructorReturn(this, (DropDown.__proto__ || Object.getPrototypeOf(DropDown)).apply(this, arguments));
              }

              _createClass(DropDown, [{
                key: 'componentWillMount', /**
                 * before component mounted, set initial internal state
                 *
                 * @returns {void}
                 * @memberof DropDown
                 */value: function componentWillMount() {
                  this.setState({dropMenuActive: false});
                }/**
                 * is given option selected
                 *
                 * @param {Object} option - option object
                 * @returns {boolean} - is the option selected
                 * @memberof DropDown
                 */
              }, {
                key: 'isSelected', value: function isSelected(option) {
                  return option.active;
                }/**
                 * on option select - pass the selected option to upper component through props and close the menu
                 *
                 * @param {Object} option - option object
                 * @returns {void}
                 * @memberof DropDown
                 */
              }, {
                key: 'onSelect', value: function onSelect(option) {
                  this.props.onSelect(option);
                  this.setState({dropMenuActive: false});
                }/**
                 * on key down handler - on enter open toggle drop down menu
                 *
                 * @param {KeyboardEvent} e - keyboard event
                 * @returns {void}
                 * @memberof DropDown
                 */
              }, {
                key: 'onKeyDown', value: function onKeyDown(e) {
                  switch (e.keyCode) {
                    case _keyMap.KeyMap.ENTER:
                      this.setState({dropMenuActive: !this.state.dropMenuActive});
                      break;
                    case _keyMap.KeyMap.ESC:
                      this.onClose();
                      e.stopPropagation();
                      break;
                  }
                }/**
                 * listener function from Menu component to close the dropdown menu.
                 * set the internal state of dropMenuActive to false.
                 *
                 * @returns {void}
                 * @memberof DropDown
                 */
              }, {
                key: 'onClose', value: function onClose() {
                  this.setState({dropMenuActive: false});
                }/**
                 * get active option label or first option's label
                 *
                 * @returns {string} - active option label
                 * @memberof DropDown
                 */
              }, {
                key: 'getActiveOptionLabel', value: function getActiveOptionLabel() {
                  var activeOptions = this.props.options.filter(function (t) {
                    return t.active;
                  });
                  try {
                    return activeOptions[0].label;
                  } catch (e) {
                    return this.props.options[0].label || 'Unlabled';
                  }
                }/**
                 * render for menu only which will render a native select element in this case (mobile)
                 *
                 * @returns {React$Element} - component element
                 * @memberof DropDown
                 */
              }, {
                key: 'renderNativeSelect', value: function renderNativeSelect() {
                  var _this2 = this;
                  return (0, _preact.h)(_menu2.default, {
                    options: this.props.options, onSelect: function onSelect(o) {
                      return _this2.onSelect(o);
                    }, onClose: function onClose() {
                      return _this2.onClose();
                    }
                  });
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof DropDown
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this3 = this;
                  return props.isMobile ? this.renderNativeSelect() : (0, _preact.h)('div', {className: this.state.dropMenuActive ? [_style2.default.dropdown, _style2.default.active].join(' ') : _style2.default.dropdown}, (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: _style2.default.dropdownButton,
                    onClick: function onClick() {
                      return _this3.setState({dropMenuActive: !_this3.state.dropMenuActive});
                    },
                    onKeyDown: function onKeyDown(e) {
                      return _this3.onKeyDown(e);
                    }
                  }, (0, _preact.h)('span', null, this.getActiveOptionLabel()), (0, _preact.h)(_icon2.default, {type: _icon.IconType.ArrowDown})), !this.state.dropMenuActive ? undefined : (0, _preact.h)(_menu2.default, {
                    options: props.options,
                    onSelect: function onSelect(o) {
                      return _this3.onSelect(o);
                    },
                    onClose: function onClose() {
                      return _this3.onClose();
                    }
                  }));
                }
              }]);
              return DropDown;
            }(_preact.Component)) || _class);
            exports.default = DropDown;
            /***/
          }, /* 104 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _menu = __webpack_require__(105);
            var _menu2 = _interopRequireDefault(_menu);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _menu2.default;
            /***/
          }, /* 105 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _preactRedux = __webpack_require__(1);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {isMobile: state.shell.isMobile};
            };
            /**
             * Menu component
             *
             * @class Menu
             * @example <Menu
             *  options={this.videoTrackOptions}
             *  onSelect={track => this.videoTrackChangeHandler(track)}
             *  onClose={() => this.onClose()}
             * />
             * @extends {Component}
             */var Menu = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_Component) {
              _inherits(Menu, _Component);

              function Menu() {
                _classCallCheck(this, Menu);
                return _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).apply(this, arguments));
              }

              _createClass(Menu, [{
                key: 'componentWillMount', /**
                 * before component mounted, set initial state of the menu position
                 * @returns {void}
                 * @memberof Menu
                 */value: function componentWillMount() {
                  this.setState({position: [_style2.default.top, _style2.default.left]});
                }/**
                 * after component mounted, listen to click outside of the component
                 * @returns {void}
                 * @memberof Menu
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  document.addEventListener('click', this.handleClickOutside.bind(this), true);
                  if (!this.props.isMobile) {
                    this.setState({position: this.getPosition()});
                  }
                }/**
                 * before component unmount, remove the event listener
                 *
                 * @returns {void}
                 * @memberof Menu
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  document.removeEventListener('click', this.handleClickOutside.bind(this));
                }/**
                 * get menu position based on document boundaries
                 *
                 * @returns {Array} position style classes array
                 * @memberof Menu
                 */
              }, {
                key: 'getPosition', value: function getPosition() {
                  var box = this._menuElement.getBoundingClientRect();
                  if (box.top < 0) {
                    return [_style2.default.bottom, _style2.default.left];
                  } else {
                    return [_style2.default.top, _style2.default.left];
                  }
                }/**
                 * handler to click outside of the component event listener.
                 * if not mobile device and clicked outside the component, call the onClose callback
                 *
                 * @param {*} e click event
                 * @returns {void}
                 * @memberof Menu
                 */
              }, {
                key: 'handleClickOutside', value: function handleClickOutside(e) {
                  if (!this.props.isMobile && this._menuElement && !this._menuElement.contains(e.target)) {
                    e.stopPropagation();
                    this.props.onClose();
                  }
                }/**
                 * indication if option is active or not
                 *
                 * @param {Object} option option object
                 * @returns {boolean} is option active boolean
                 * @memberof Menu
                 */
              }, {
                key: 'isSelected', value: function isSelected(option) {
                  return option.active;
                }/**
                 * when option selected, change the active prop immediately for instant ui change
                 * and call the onSelect callback with the option value
                 *
                 * @param {Object} option - option object
                 * @returns {void}
                 * @memberof Menu
                 */
              }, {
                key: 'onSelect', value: function onSelect(option) {
                  this.props.onSelect(option.value);// Instant select
                  this.props.options.filter(function (t) {
                    return t.active;
                  }).forEach(function (option) {
                    option.active = false;
                  });
                  this.props.options.filter(function (t) {
                    return t.value === option.value;
                  })[0].active = true;
                }/**
                 * on key down handler
                 *
                 * @param {KeyboardEvent} e - keyboard event
                 * @param {Object} o - option object
                 * @returns {void}
                 * @memberof Menu
                 */
              }, {
                key: 'onKeyDown', value: function onKeyDown(e, o) {
                  switch (e.keyCode) {
                    case _keyMap.KeyMap.ENTER:
                      this.onSelect(o);
                      break;
                    case _keyMap.KeyMap.ESC:
                      this.props.onClose();
                      e.stopPropagation();
                      break;
                    default:
                      break;
                  }
                }/**
                 * get active option label
                 *
                 * @returns {string} active option label
                 * @memberof Menu
                 */
              }, {
                key: 'getActiveOptionLabel', value: function getActiveOptionLabel() {
                  var activeOptions = this.props.options.filter(function (t) {
                    return t.active;
                  });
                  return activeOptions.length > 0 ? activeOptions[0].label : this.props.options[0].label;
                }/**
                 * render native select element
                 *
                 * @returns {React$Element} - component element
                 * @memberof Menu
                 */
              }, {
                key: 'renderNativeSelect', value: function renderNativeSelect() {
                  var _this2 = this;
                  return (0, _preact.h)('select', {
                    className: this.props.hideSelect ? _style2.default.mobileHiddenSelect : '',
                    onChange: function onChange(e) {
                      return _this2.onSelect(_this2.props.options[e.target.value]);
                    }
                  }, this.props.options.map(function (o, index) {
                    return (0, _preact.h)('option', {
                      selected: _this2.isSelected(o),
                      value: index,
                      key: index
                    }, o.label);
                  }));
                }/**
                 * if mobile device detected, renders the native select element.
                 * otherwise, render the styled menu
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof Menu
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this3 = this;
                  return props.isMobile ? this.renderNativeSelect() : (0, _preact.h)('div', {
                    ref: function ref(c) {
                      return _this3._menuElement = c;
                    },
                    className: [_style2.default.dropdownMenu].concat(_toConsumableArray(this.state.position)).join(' ')
                  }, props.options.map(function (o, index) {
                    return (0, _preact.h)('div', {
                      tabIndex: '',
                      key: index,
                      className: _this3.isSelected(o) ? [_style2.default.dropdownMenuItem, _style2.default.active].join(' ') : _style2.default.dropdownMenuItem,
                      onClick: function onClick() {
                        return _this3.onSelect(o);
                      },
                      onKeyDown: function onKeyDown(e) {
                        return _this3.onKeyDown(e, o);
                      }
                    }, (0, _preact.h)('span', null, o.label), (0, _preact.h)('span', {
                      className: _style2.default.menuIconContainer,
                      style: 'opacity: ' + (_this3.isSelected(o) ? 1 : 0)
                    }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check})));
                  }));
                }
              }]);
              return Menu;
            }(_preact.Component)) || _class);
            exports.default = Menu;
            /***/
          }, /* 106 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _cvaa = __webpack_require__(31);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _smartContainer = __webpack_require__(46);
            var _smartContainer2 = _interopRequireDefault(_smartContainer);
            var _smartContainerItem = __webpack_require__(47);
            var _smartContainerItem2 = _interopRequireDefault(_smartContainerItem);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _cvaaOverlay = __webpack_require__(107);
            var _cvaaOverlay2 = _interopRequireDefault(_cvaaOverlay);
            var _preactPortal = __webpack_require__(29);
            var _preactPortal2 = _interopRequireDefault(_preactPortal);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                audioTracks: state.engine.audioTracks,
                textTracks: state.engine.textTracks,
                overlayOpen: state.cvaa.overlayOpen,
                isMobile: state.shell.isMobile
              };
            };
            /**
             * LanguageControl component
             *
             * @class LanguageControl
             * @example <LanguageControl />
             * @extends {BaseComponent}
             */var LanguageControl = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_cvaa.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(LanguageControl, _BaseComponent);

              /**
               * Creates an instance of LanguageControl.
               * @param {Object} obj obj
               * @memberof LanguageControl
               */function LanguageControl(obj) {
                _classCallCheck(this, LanguageControl);
                return _possibleConstructorReturn(this, (LanguageControl.__proto__ || Object.getPrototypeOf(LanguageControl)).call(this, {
                  name: 'LanguageControl',
                  player: obj.player
                }));
              }

              /**
               * before component mounted, set initial state
               *
               * @returns {void}
               * @memberof LanguageControl
               */_createClass(LanguageControl, [{
                key: 'componentWillMount', value: function componentWillMount() {
                  this.setState({smartContainerOpen: false});
                }/**
                 * after component mounted, set event listener to click outside of the component
                 *
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  document.addEventListener('click', this.handleClickOutside.bind(this), true);
                }/**
                 * before component unmounted, remove event listener
                 *
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  document.removeEventListener('click', this.handleClickOutside.bind(this), true);
                }/**
                 * event listener for clicking outside handler.
                 *
                 * @param {*} e - click event
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'handleClickOutside', value: function handleClickOutside(e) {
                  if (this._controlLanguageElement && !this.props.isMobile && !this._controlLanguageElement.contains(e.target) && this.state.smartContainerOpen && !this.state.cvaaOverlay) {
                    if (e.target.classList.contains('overlay-play')) {
                      e.stopPropagation();
                    }
                    this.setState({smartContainerOpen: false});
                  }
                }/**
                 * toggle smart container internal state on control button click
                 *
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'onControlButtonClick', value: function onControlButtonClick() {
                  this.setState({smartContainerOpen: !this.state.smartContainerOpen});
                }/**
                 * call to player selectTrack method and change audio track
                 *
                 * @param {Object} audioTrack - audio track
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'onAudioChange', value: function onAudioChange(audioTrack) {
                  this.player.selectTrack(audioTrack);
                }/**
                 * Select the given text track
                 *
                 * @param {Object} textTrack - text track
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'onCaptionsChange', value: function onCaptionsChange(textTrack) {
                  this.player.selectTrack(textTrack);
                }/**
                 * toggle the internal state of cvaa overlay
                 *
                 * @returns {void}
                 * @memberof LanguageControl
                 */
              }, {
                key: 'toggleCVAAOverlay', value: function toggleCVAAOverlay() {
                  this.setState({cvaaOverlay: !this.state.cvaaOverlay});
                }/**
                 * render smart container with both audio and text options if exist
                 *
                 * @param {Array<Object>} audioOptions - audio tracks
                 * @param {Array<Object>} textOptions - text tracks
                 * @returns {React$Element} - component
                 * @memberof LanguageControl
                 */
              }, {
                key: 'renderAll', value: function renderAll(audioOptions, textOptions) {
                  var _this2 = this;
                  return (0, _preact.h)('div', {
                    ref: function ref(c) {
                      return _this2._controlLanguageElement = c;
                    }, className: [_style2.default.controlButtonContainer, _style2.default.controlLanguage].join(' ')
                  }, (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)('button', {
                    tabIndex: '0',
                    'aria-label': (0, _preact.h)(_preactI18n.Text, {id: 'controls.language'}),
                    className: this.state.smartContainerOpen ? [_style2.default.controlButton, _style2.default.active].join(' ') : _style2.default.controlButton,
                    onClick: function onClick() {
                      return _this2.onControlButtonClick();
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Language}))), !this.state.smartContainerOpen || this.state.cvaaOverlay ? undefined : (0, _preact.h)(_smartContainer2.default, {
                    title: 'Language',
                    onClose: function onClose() {
                      return _this2.onControlButtonClick();
                    }
                  }, audioOptions.length === 0 ? undefined : (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)(_smartContainerItem2.default, {
                    icon: 'audio',
                    label: (0, _preact.h)(_preactI18n.Text, {id: 'language.audio'}),
                    options: audioOptions,
                    onSelect: function onSelect(audioTrack) {
                      return _this2.onAudioChange(audioTrack);
                    }
                  })), textOptions.length === 0 ? undefined : (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)(_smartContainerItem2.default, {
                    icon: 'captions',
                    label: (0, _preact.h)(_preactI18n.Text, {id: 'language.captions'}),
                    options: textOptions,
                    onSelect: function onSelect(textTrack) {
                      return _this2.onCaptionsChange(textTrack);
                    }
                  })), textOptions.length === 0 ? undefined : (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: _style2.default.smartContainerItem,
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.toggleCVAAOverlay();
                      }
                    }
                  }, (0, _preact.h)('a', {
                    onClick: function onClick() {
                      return _this2.toggleCVAAOverlay();
                    }
                  }, (0, _preact.h)(_preactI18n.Text, {id: 'language.advanced_captions_settings'})))), this.state.cvaaOverlay ? (0, _preact.h)(_preactPortal2.default, {
                    into: '#overlay-portal',
                    ref: function ref(_ref) {
                      return _this2._portal = _ref;
                    }
                  }, (0, _preact.h)(_cvaaOverlay2.default, {
                    player: this.player, onClose: function onClose() {
                      _this2.toggleCVAAOverlay();
                      _this2.onControlButtonClick();
                    }
                  })) : (0, _preact.h)('div', null));
                }/**
                 * root render function. will decide to render audio only / text only or both based on the available options
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component
                 * @memberof LanguageControl
                 */
              }, {
                key: 'render', value: function render(props) {
                  var audioOptions = props.audioTracks.filter(function (t) {
                    return t.label || t.language;
                  }).map(function (t) {
                    return {label: t.label || t.language, active: t.active, value: t};
                  });
                  var textOptions = props.textTracks.filter(function (t) {
                    return t.kind === 'subtitles';
                  }).map(function (t) {
                    return {label: t.label || t.language, active: t.active, value: t};
                  });
                  if (audioOptions.length > 0 || textOptions.length > 0) {
                    return this.renderAll(audioOptions, textOptions);
                  } else {
                    return undefined;
                  }
                }
              }]);
              return LanguageControl;
            }(_base2.default)) || _class);
            exports.default = LanguageControl;
            /***/
          }, /* 107 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _cvaaOverlay = __webpack_require__(108);
            var _cvaaOverlay2 = _interopRequireDefault(_cvaaOverlay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _cvaaOverlay2.default;
            /***/
          }, /* 108 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _isEqual = __webpack_require__(109);
            var _isEqual2 = _interopRequireDefault(_isEqual);
            var _bindActions = __webpack_require__(3);
            var _cvaa = __webpack_require__(31);
            var _shell = __webpack_require__(10);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _overlay = __webpack_require__(17);
            var _overlay2 = _interopRequireDefault(_overlay);
            var _dropdown = __webpack_require__(48);
            var _dropdown2 = _interopRequireDefault(_dropdown);
            var _slider = __webpack_require__(110);
            var _slider2 = _interopRequireDefault(_slider);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {open: state.cvaa.overlayOpen, style: state.cvaa.style};
            };
            var cvaaOverlayState = {Main: 'main', CustomCaptions: 'custom-captions'};
            /**
             * CVAAOverlay component
             *
             * @class CVAAOverlay
             * @extends {BaseComponent}
             */var CVAAOverlay = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_extends({}, _cvaa.actions, _shell.actions))), _dec(_class = function (_BaseComponent) {
              _inherits(CVAAOverlay, _BaseComponent);

              /**
               * Creates an instance of CVAAOverlay.
               * @memberof CVAAOverlay
               */function CVAAOverlay() {
                _classCallCheck(this, CVAAOverlay);
                return _possibleConstructorReturn(this, (CVAAOverlay.__proto__ || Object.getPrototypeOf(CVAAOverlay)).call(this, {name: 'CVAAOverlay'}));
              }

              /**
               * componentWillUnmount
               *
               * @returns {void}
               * @memberof CVAAOverlay
               */_createClass(CVAAOverlay, [{
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  this.setState({state: cvaaOverlayState.Main});
                }/**
                 * componentWillMount
                 *
                 * @returns {void}
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'componentWillMount', value: function componentWillMount() {
                  this.setState({state: cvaaOverlayState.Main, customTextStyle: this.props.player.textStyle});
                  this.captionsStyleDefault = Object.assign(new this.props.player.TextStyle(), {backgroundOpacity: this.props.player.TextStyle.StandardOpacities.TRANSPARENT});
                  this.captionsStyleYellow = Object.assign(new this.props.player.TextStyle(), {
                    backgroundOpacity: this.props.player.TextStyle.StandardOpacities.TRANSPARENT,
                    fontColor: this.props.player.TextStyle.StandardColors.YELLOW
                  });
                  this.captionsStyleBlackBG = Object.assign(new this.props.player.TextStyle(), {
                    backgroundColor: this.props.player.TextStyle.StandardColors.BLACK,
                    fontColor: this.props.player.TextStyle.StandardColors.WHITE
                  });
                }/**
                 * changing the overlay state
                 *
                 * @param {CvaaOverlayStateType} stateName - the new state name
                 * @returns {void}
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'transitionToState', value: function transitionToState(stateName) {
                  this.setState({state: stateName});
                }/**
                 * changing the captions style
                 *
                 * @param {Object} textStyle - TextStyle object
                 * @returns {void}
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'changeCaptionsStyle', value: function changeCaptionsStyle(textStyle) {
                  this.props.updateCaptionsStyle(textStyle);
                  this.props.player.textStyle = textStyle;
                  this.props.onClose();
                }/**
                 * detection if advanced style applied or one of the default presets applied
                 *
                 * @returns {boolean} advanced style applied boolean
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'isAdvancedStyleApplied', value: function isAdvancedStyleApplied() {
                  return !(0, _isEqual2.default)(this.props.player.textStyle, this.captionsStyleDefault) && !(0, _isEqual2.default)(this.props.player.textStyle, this.captionsStyleBlackBG) && !(0, _isEqual2.default)(this.props.player.textStyle, this.captionsStyleYellow);
                }/**
                 * render main state
                 *
                 * @returns {React$Element} - main state element
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'renderMainState', value: function renderMainState() {
                  var _this2 = this;
                  return (0, _preact.h)('div', {className: this.state.state === cvaaOverlayState.Main ? [_style2.default.overlayScreen, _style2.default.active].join(' ') : _style2.default.overlayScreen}, (0, _preact.h)('div', {className: _style2.default.title}, 'Advanced captions settings'), (0, _preact.h)('div', null, (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: _style2.default.sample,
                    onClick: function onClick() {
                      return _this2.changeCaptionsStyle(_this2.captionsStyleDefault);
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.changeCaptionsStyle(_this2.captionsStyleDefault);
                      }
                    }
                  }, 'Sample', (0, _isEqual2.default)(this.props.player.textStyle, this.captionsStyleDefault) ? (0, _preact.h)('div', {className: _style2.default.activeTick}, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check})) : undefined), (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: [_style2.default.sample, _style2.default.blackBg].join(' '),
                    onClick: function onClick() {
                      return _this2.changeCaptionsStyle(_this2.captionsStyleBlackBG);
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.changeCaptionsStyle(_this2.captionsStyleBlackBG);
                      }
                    }
                  }, 'Sample', (0, _isEqual2.default)(this.props.player.textStyle, this.captionsStyleBlackBG) ? (0, _preact.h)('div', {className: _style2.default.activeTick}, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check})) : undefined), (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: [_style2.default.sample, _style2.default.yellowText].join(' '),
                    onClick: function onClick() {
                      return _this2.changeCaptionsStyle(_this2.captionsStyleYellow);
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.changeCaptionsStyle(_this2.captionsStyleYellow);
                      }
                    }
                  }, 'Sample', (0, _isEqual2.default)(this.props.player.textStyle, this.captionsStyleYellow) ? (0, _preact.h)('div', {className: _style2.default.activeTick}, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check})) : undefined)), !this.isAdvancedStyleApplied() ? (0, _preact.h)('a', {
                    tabIndex: '0',
                    className: _style2.default.buttonSaveCvaa,
                    onClick: function onClick() {
                      return _this2.transitionToState(cvaaOverlayState.CustomCaptions);
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.transitionToState(cvaaOverlayState.CustomCaptions);
                      }
                    }
                  }, 'Set custom caption') : (0, _preact.h)('div', {className: _style2.default.customCaptionsApplied}, (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: [_style2.default.sample, _style2.default.custom].join(' '),
                    style: this.state.customTextStyle.toCSS()
                  }, (0, _preact.h)('span', null, 'Custom captions'), (0, _preact.h)('div', {className: _style2.default.activeTick}, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check}))), (0, _preact.h)('a', {
                    tabIndex: '0',
                    onClick: function onClick() {
                      return _this2.transitionToState(cvaaOverlayState.CustomCaptions);
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.transitionToState(cvaaOverlayState.CustomCaptions);
                      }
                    }
                  }, 'Edit caption')));
                }/**
                 * change one or more properties in customTextStyle object in the internal state
                 *
                 * @param {Object} styleChanges style changes object
                 * @returns {void}
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'changeCustomStyle', value: function changeCustomStyle(styleChanges) {
                  this.setState({customTextStyle: Object.assign(this.state.customTextStyle, styleChanges)});
                }/**
                 * render custom captions state
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - custom captions elements
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'renderCustomCaptionsState', value: function renderCustomCaptionsState(props) {
                  var _this3 = this;
                  var fontFamily = this.props.player.TextStyle.FontFamily;
                  var edgeStyles = this.props.player.TextStyle.EdgeStyles;
                  var standardColors = props.player.TextStyle.StandardColors;
                  var fontSizeOptions = this.props.player.TextStyle.FontSizes.map(function (size) {
                    return {value: size, label: size, active: _this3.state.customTextStyle.fontSize === size};
                  });
                  var fontColorOptions = Object.keys(standardColors).map(function (key) {
                    return {
                      value: standardColors[key],
                      label: key.charAt(0).toUpperCase() + key.toLowerCase().slice(1),
                      active: _this3.state.customTextStyle.fontColor == standardColors[key]
                    };
                  });
                  var fontFamilyOptions = Object.keys(fontFamily).map(function (key) {
                    return {
                      value: fontFamily[key],
                      label: fontFamily[key],
                      active: _this3.state.customTextStyle.fontFamily == fontFamily[key]
                    };
                  });
                  var fontStyleOptions = Object.keys(edgeStyles).map(function (key) {
                    return {
                      value: edgeStyles[key],
                      label: key.charAt(0).toUpperCase() + key.toLowerCase().slice(1),
                      active: _this3.state.customTextStyle.fontEdge == edgeStyles[key]
                    };
                  });
                  var backgroundColorOptions = Object.keys(standardColors).map(function (key) {
                    return {
                      value: standardColors[key],
                      label: key.charAt(0).toUpperCase() + key.toLowerCase().slice(1),
                      active: _this3.state.customTextStyle.backgroundColor == standardColors[key]
                    };
                  });
                  return (0, _preact.h)('div', {className: this.state.state === cvaaOverlayState.CustomCaptions ? [_style2.default.overlayScreen, _style2.default.active].join(' ') : _style2.default.overlayScreen}, (0, _preact.h)('form', {className: [_style2.default.form, _style2.default.customCaptionForm].join(' ')}, (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Size'), (0, _preact.h)(_dropdown2.default, {
                    onSelect: function onSelect(fontSize) {
                      return _this3.changeCustomStyle({fontSize: fontSize});
                    }, options: fontSizeOptions
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Font color'), (0, _preact.h)(_dropdown2.default, {
                    onSelect: function onSelect(fontColor) {
                      return _this3.changeCustomStyle({fontColor: fontColor});
                    }, options: fontColorOptions
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Font family'), (0, _preact.h)(_dropdown2.default, {
                    onSelect: function onSelect(fontFamily) {
                      return _this3.changeCustomStyle({fontFamily: fontFamily});
                    }, options: fontFamilyOptions
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Font style'), (0, _preact.h)(_dropdown2.default, {
                    onSelect: function onSelect(fontEdge) {
                      return _this3.changeCustomStyle({fontEdge: fontEdge});
                    }, options: fontStyleOptions
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Font opacity'), (0, _preact.h)(_slider2.default, {
                    min: 0,
                    max: 100,
                    value: this.state.customTextStyle.fontOpacity * 100,
                    onChange: function onChange(fontOpacity) {
                      return _this3.changeCustomStyle({fontOpacity: fontOpacity / 100});
                    }
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Background color'), (0, _preact.h)(_dropdown2.default, {
                    onSelect: function onSelect(backgroundColor) {
                      return _this3.changeCustomStyle({backgroundColor: backgroundColor});
                    }, options: backgroundColorOptions
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('label', null, 'Background opacity'), (0, _preact.h)(_slider2.default, {
                    min: 0,
                    max: 100,
                    value: this.state.customTextStyle.backgroundOpacity * 100,
                    onChange: function onChange(backgroundOpacity) {
                      return _this3.changeCustomStyle({backgroundOpacity: backgroundOpacity / 100});
                    }
                  })), (0, _preact.h)('div', {className: _style2.default.formGroupRow}, (0, _preact.h)('a', {
                    tabIndex: '0',
                    onClick: function onClick() {
                      return _this3.changeCaptionsStyle(_this3.state.customTextStyle);
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this3.changeCaptionsStyle(_this3.state.customTextStyle);
                      }
                    },
                    className: [_style2.default.btn, _style2.default.btnBranded, _style2.default.btnBlock].join(' ')
                  }, 'Apply')), (0, _preact.h)('div', {className: _style2.default.previewContainer}, (0, _preact.h)('span', {style: this.state.customTextStyle.toCSS()}, 'This is your caption preview'))));
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof CVAAOverlay
                 */
              }, {
                key: 'render', value: function render(props) {
                  return (0, _preact.h)(_overlay2.default, {
                    open: true, onClose: function onClose() {
                      return props.onClose();
                    }, type: 'cvaa'
                  }, this.renderMainState(), this.renderCustomCaptionsState(props));
                }
              }]);
              return CVAAOverlay;
            }(_base2.default)) || _class);
            exports.default = CVAAOverlay;
            /***/
          }, /* 109 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});

            /**
             * Shallow comparison of two objects
             *
             * @param {Object} objA object A
             * @param {Object} objB object B
             * @returns {boolean} objects equal or not
             */function isEqual(objA, objB) {
              var keysA = Object.keys(objA);
              var keysB = Object.keys(objB);
              if (keysA.length !== keysB.length) {
                return false;
              }
              for (var i = 0; i < keysA.length; i++) {
                if (objA[keysA[i]] !== objB[keysA[i]]) {
                  return false;
                }
              }
              return true;
            }

            exports.default = isEqual;
            /***/
          }, /* 110 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _slider = __webpack_require__(111);
            var _slider2 = _interopRequireDefault(_slider);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _slider2.default;
            /***/
          }, /* 111 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _slider = __webpack_require__(112);
            var _slider2 = _interopRequireDefault(_slider);
            var _preact = __webpack_require__(0);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var KEYBOARD_DRAG_STEP = 5;
            /**
             * Slider component
             *
             * @class Slider
             * @example <Slider onChange={value => this.onOpacityChange(value)} value={this.initialOpacity} min={0} max={100} />
             * @extends {Component}
             */var Slider = function (_Component) {
              _inherits(Slider, _Component);

              function Slider() {
                _classCallCheck(this, Slider);
                return _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).apply(this, arguments));
              }

              _createClass(Slider, [{
                key: 'componentWillMount', /**
                 * before component mounted, set initial state of the slider
                 *
                 * @returns {void}
                 * @memberof Slider
                 */value: function componentWillMount() {
                  var _this2 = this;
                  this.setState({
                    value: this.props.value || 0,
                    min: this.props.min || 0,
                    max: this.props.max || 100,
                    dragging: false
                  });
                  document.addEventListener('mouseup', function (e) {
                    return _this2.mouseUpHandler(e);
                  });
                  document.addEventListener('mousemove', function (e) {
                    return _this2.mouseMoveHandler(e);
                  });
                  document.addEventListener('touchend', function (e) {
                    return _this2.mouseUpHandler(e);
                  });
                  document.addEventListener('touchmove', function (e) {
                    return _this2.mouseMoveHandler(e);
                  });
                }/**
                 * after component mounted, save the sliderWidth
                 *
                 * @returns {void}
                 * @memberof Slider
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  this.sliderWidth = this._sliderElement.clientWidth;
                  this._sliderElementOffsetLeft = this._sliderElement.getBoundingClientRect().left;
                }/**
                 * mousedown slider handler
                 *
                 * @param {*} e event
                 * @returns {void}
                 * @memberof Slider
                 */
              }, {
                key: 'mouseDownHandler', value: function mouseDownHandler(e) {
                  this._sliderElementOffsetLeft = this._sliderElement.getBoundingClientRect().left;
                  if (!this.state.dragging) {
                    this.setState({dragging: true, value: this.mouseEventToValue(e)});
                    this.props.onChange(this.mouseEventToValue(e));
                  }
                }/**
                 * key down handler if dragging via keyboard
                 *
                 * @param {KeyboardEvent} e - keyboard event
                 * @returns {void}
                 * @memberof Slider
                 */
              }, {
                key: 'onKeyboardDragging', value: function onKeyboardDragging(e) {
                  this._sliderElementOffsetLeft = this._sliderElement.getBoundingClientRect().left;
                  var newValue = this.props.value;
                  switch (e.keyCode) {
                    case _keyMap.KeyMap.RIGHT: {
                      newValue += KEYBOARD_DRAG_STEP;
                      if (newValue > this.state.max) {
                        newValue = this.state.max;
                      }
                      break;
                    }
                    case _keyMap.KeyMap.LEFT: {
                      newValue -= KEYBOARD_DRAG_STEP;
                      if (newValue < this.state.min) {
                        newValue = this.state.min;
                      }
                      break;
                    }
                  }
                  this.setState({value: newValue, dragging: false});
                  this.props.onChange(newValue);
                }/**
                 * document mousemove handler if dragging active
                 *
                 * @param {*} e event
                 * @returns {void}
                 * @memberof Slider
                 */
              }, {
                key: 'mouseMoveHandler', value: function mouseMoveHandler(e) {
                  if (this.state.dragging) {
                    this.setState({value: this.mouseEventToValue(e)});
                    this.props.onChange(this.mouseEventToValue(e));
                  }
                }/**
                 * document mouseup handler if dragging active
                 *
                 * @param {*} e event
                 * @returns {void}
                 * @memberof Slider
                 */
              }, {
                key: 'mouseUpHandler', value: function mouseUpHandler(e) {
                  if (this.state.dragging) {
                    this.setState({value: this.mouseEventToValue(e), dragging: false});
                    this.props.onChange(this.mouseEventToValue(e));
                  }
                }/**
                 * get slider value based on mouse event
                 *
                 * @param {*} e event
                 * @returns {number} slider value
                 * @memberof Slider
                 */
              }, {
                key: 'mouseEventToValue', value: function mouseEventToValue(e) {
                  var clientX = void 0;
                  if (e.touches && e.touches.length > 0) {
                    clientX = e.touches[0].clientX;
                  } else if (e.changedTouches) {
                    clientX = e.changedTouches[0].pageX;
                  } else {
                    clientX = e.clientX;
                  }
                  var offsetLeft = clientX - this._sliderElement.getBoundingClientRect().left;
                  var offsetLeftPercentage = Math.round(offsetLeft / this._sliderElement.clientWidth * 100);
                  if (this.getValueByPersentage(offsetLeftPercentage) < this.state.min) return this.state.min;
                  if (this.getValueByPersentage(offsetLeftPercentage) > this.state.max) return this.state.max;
                  return this.getValueByPersentage(offsetLeftPercentage);
                }/**
                 * get slider value based on persentage value
                 *
                 * @param {any} persentage progress persentage of slider
                 * @returns {number} slider value
                 * @memberof Slider
                 */
              }, {
                key: 'getValueByPersentage', value: function getValueByPersentage(persentage) {
                  return this.state.max / 100 * persentage;
                }/**
                 * get progress presentage by slider value
                 *
                 * @returns {number} presentage
                 * @memberof Slider
                 */
              }, {
                key: 'getPersentageByValue', value: function getPersentageByValue() {
                  return Math.round(this.state.value / this.state.max * 100);
                }/**
                 * component render function
                 *
                 * @returns {React$Element<any>} component element
                 * @memberof Slider
                 */
              }, {
                key: 'render', value: function render() {
                  var _this3 = this;
                  return (0, _preact.h)('div', {
                    tabIndex: '0', ref: function ref(c) {
                      return _this3._sliderElement = c;
                    }, className: _slider2.default.slider, onMouseDown: function onMouseDown(e) {
                      return _this3.mouseDownHandler(e);
                    }, onTouchStart: function onTouchStart(e) {
                      return _this3.mouseDownHandler(e);
                    }, onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.LEFT || e.keyCode === _keyMap.KeyMap.RIGHT) {
                        _this3.onKeyboardDragging(e);
                      }
                    }
                  }, (0, _preact.h)('div', {
                    className: _slider2.default.progress,
                    style: {width: this.getPersentageByValue() + '%'}
                  }, (0, _preact.h)('div', {
                    className: _slider2.default.handle, onMouseDown: function onMouseDown(e) {
                      return _this3.mouseDownHandler(e);
                    }, onTouchStart: function onTouchStart(e) {
                      return _this3.mouseDownHandler(e);
                    }
                  })));
                }
              }]);
              return Slider;
            }(_preact.Component);
            exports.default = Slider;
            /***/
          }, /* 112 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(113);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_slider.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_slider.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 113 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-slider {\n  height: 8px;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.2); }\n  .playkit-slider .playkit-progress {\n    background-color: #01ACCD;\n    height: 8px;\n    border-radius: 4px;\n    position: relative; }\n    .playkit-slider .playkit-progress .playkit-handle {\n      height: 12px;\n      width: 12px;\n      border-radius: 5px;\n      background-color: #FFFFFF;\n      box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.3);\n      position: absolute;\n      right: 0;\n      top: 0px;\n      transform: translate3d(6px, -2px, 0);\n      cursor: pointer; }\n", ""]);// exports
            exports.locals = {"slider": "playkit-slider", "progress": "playkit-progress", "handle": "playkit-handle"};
            /***/
          }, /* 114 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _fullscreen = __webpack_require__(115);
            var _fullscreen2 = _interopRequireDefault(_fullscreen);
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _fullscreen3 = __webpack_require__(49);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {fullscreen: state.fullscreen.fullscreen, isMobile: state.shell.isMobile};
            };
            /**
             * FullscreenControl component
             *
             * @class FullscreenControl
             * @example <FullscreenControl player={this.player} />
             * @extends {BaseComponent}
             */var FullscreenControl = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_fullscreen3.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(FullscreenControl, _BaseComponent);

              /**
               * Creates an instance of FullscreenControl.
               * @param {Object} obj obj
               * @memberof FullscreenControl
               */function FullscreenControl(obj) {
                _classCallCheck(this, FullscreenControl);
                return _possibleConstructorReturn(this, (FullscreenControl.__proto__ || Object.getPrototypeOf(FullscreenControl)).call(this, {
                  name: 'Fullscreen',
                  player: obj.player,
                  config: obj.config
                }));
              }

              /**
               * after component mounted, set up event listerners to window fullscreen state change
               *
               * @returns {void}
               * @memberof FullscreenControl
               */_createClass(FullscreenControl, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  document.addEventListener('webkitfullscreenchange', function () {
                    return _this2.fullscreenChangeHandler();
                  });
                  document.addEventListener('mozfullscreenchange', function () {
                    return _this2.fullscreenChangeHandler();
                  });
                  document.addEventListener('fullscreenchange', function () {
                    return _this2.fullscreenChangeHandler();
                  });
                  document.addEventListener('MSFullscreenChange', function () {
                    return _this2.fullscreenChangeHandler();
                  });
                  this.player.addEventListener(this.player.Event.REQUESTED_ENTER_FULLSCREEN, function () {
                    return _this2.enterFullscreen();
                  });
                  this.player.addEventListener(this.player.Event.REQUESTED_EXIT_FULLSCREEN, function () {
                    return _this2.exitFullscreen();
                  });
                }/**
                 * fullscreen change handler function. updates the store with new value
                 *
                 * @returns {void}
                 * @memberof FullscreenControl
                 */
              }, {
                key: 'fullscreenChangeHandler', value: function fullscreenChangeHandler() {
                  var isFullscreen = typeof document.fullscreenElement !== 'undefined' && Boolean(document.fullscreenElement) || typeof document.webkitFullscreenElement !== 'undefined' && Boolean(document.webkitFullscreenElement) || typeof document.mozFullScreenElement !== 'undefined' && Boolean(document.mozFullScreenElement) || typeof document.msFullscreenElement !== 'undefined' && Boolean(document.msFullscreenElement);
                  isFullscreen ? this.player.notifyEnterFullscreen() : this.player.notifyExitFullscreen();
                  this.props.updateFullscreen(isFullscreen);
                }/**
                 * request fullscreen function to all browsers
                 *
                 * @param {HTMLElement} element - element to enter fullscreen
                 * @returns {boolean} - boolean success indicator to enter fullscreen or not
                 * @memberof FullscreenControl
                 */
              }, {
                key: 'requestFullscreen', value: function requestFullscreen(element) {
                  if (typeof element.requestFullscreen === 'function') {
                    element.requestFullscreen();
                    return true;
                  } else if (typeof element.mozRequestFullScreen === 'function') {
                    element.mozRequestFullScreen();
                    return true;
                  } else if (typeof element.webkitRequestFullScreen === 'function') {
                    element.webkitRequestFullScreen();
                    return true;
                  } else if (typeof element.msRequestFullscreen === 'function') {
                    element.msRequestFullscreen();
                    return true;
                  } else {
                    return false;
                  }
                }/**
                 * if mobile detected, get the video element and request fullscreen.
                 * otherwise, request fullscreen to the parent plater view than includes the GUI as well
                 *
                 * @returns {void}
                 * @memberof FullscreenControl
                 */
              }, {
                key: 'enterFullscreen', value: function enterFullscreen() {
                  if (this.props.isMobile && this.player.env.os.name === 'iOS') {
                    this.player.getView().getElementsByTagName('video')[0].webkitEnterFullscreen();
                  } else {
                    var elementToFullscreen = document.getElementById(this.config.targetId);
                    if (elementToFullscreen) {
                      this.requestFullscreen(elementToFullscreen);
                    }
                  }
                }/**
                 * exit fullscreen cross platform function
                 *
                 * @returns {void}
                 * @memberof FullscreenControl
                 */
              }, {
                key: 'exitFullscreen', value: function exitFullscreen() {
                  if (typeof document.exitFullscreen === 'function') {
                    document.exitFullscreen();
                  } else if (typeof document.webkitExitFullscreen === 'function') {
                    document.webkitExitFullscreen();
                  } else if (typeof document.mozCancelFullScreen === 'function') {
                    document.mozCancelFullScreen();
                  } else if (typeof document.msExitFullscreen === 'function') {
                    document.msExitFullscreen();
                  }
                }/**
                 * toggle fullscreen based on current fullscreen state in store
                 *
                 * @returns {void}
                 * @memberof FullscreenControl
                 */
              }, {
                key: 'toggleFullscreen', value: function toggleFullscreen() {
                  this.logger.debug('Toggle fullscreen');
                  this.props.fullscreen ? this.exitFullscreen() : this.enterFullscreen();
                }/**
                 * render component
                 *
                 * @returns {React$Element} - component
                 * @memberof FullscreenControl
                 */
              }, {
                key: 'render', value: function render() {
                  var _this3 = this;
                  return (0, _preact.h)('div', {className: [_fullscreen2.default.controlButtonContainer, _fullscreen2.default.controlFullscreen].join(' ')}, (0, _preact.h)(_preactI18n.Localizer, null, (0, _preact.h)('button', {
                    tabIndex: '0',
                    'aria-label': (0, _preact.h)(_preactI18n.Text, {id: 'controls.fullscreen'}),
                    className: this.props.fullscreen ? [_fullscreen2.default.controlButton, _fullscreen2.default.isFullscreen].join(' ') : _fullscreen2.default.controlButton,
                    onClick: function onClick() {
                      return _this3.toggleFullscreen();
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Maximize}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Minimize}))));
                }
              }]);
              return FullscreenControl;
            }(_base2.default)) || _class);
            exports.default = FullscreenControl;
            /***/
          }, /* 115 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(116);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_fullscreen.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_fullscreen.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 116 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-control-button-container.playkit-control-fullscreen .playkit-control-button {\n  transition: 100ms transform;\n  transform: scale(1); }\n  .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button .playkit-icon-minimize {\n    display: none; }\n  .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button.playkit-is-fullscreen .playkit-icon-maximize {\n    display: none; }\n  .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button.playkit-is-fullscreen .playkit-icon-minimize {\n    display: block; }\n\n.playkit-player:not(.playkit-touch) .playkit-control-button-container.playkit-control-fullscreen .playkit-control-button:hover {\n  transform: scale(1.1); }\n", ""]);// exports
            exports.locals = {
              "control-button-container": "playkit-control-button-container",
              "controlButtonContainer": "playkit-control-button-container",
              "control-fullscreen": "playkit-control-fullscreen",
              "controlFullscreen": "playkit-control-fullscreen",
              "control-button": "playkit-control-button",
              "controlButton": "playkit-control-button",
              "icon-minimize": "playkit-icon-minimize",
              "iconMinimize": "playkit-icon-minimize",
              "is-fullscreen": "playkit-is-fullscreen",
              "isFullscreen": "playkit-is-fullscreen",
              "icon-maximize": "playkit-icon-maximize",
              "iconMaximize": "playkit-icon-maximize",
              "player": "playkit-player",
              "touch": "playkit-touch"
            };
            /***/
          }, /* 117 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _timeDisplayPlaybackContainer = __webpack_require__(118);
            var _timeDisplayPlaybackContainer2 = _interopRequireDefault(_timeDisplayPlaybackContainer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _timeDisplayPlaybackContainer2.default;
            /***/
          }, /* 118 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _timeDisplay = __webpack_require__(32);
            var _timeDisplay2 = _interopRequireDefault(_timeDisplay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {currentTime: state.engine.currentTime, duration: state.engine.duration};
            };
            /**
             * TimeDisplayPlaybackContainer component
             *
             * @class TimeDisplayPlaybackContainer
             * @example <TimeDisplayPlaybackContainer format='currentTime / duration' />
             * @extends {BaseComponent}
             */var TimeDisplayPlaybackContainer = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_BaseComponent) {
              _inherits(TimeDisplayPlaybackContainer, _BaseComponent);

              /**
               * Creates an instance of TimeDisplayPlaybackContainer.
               * @memberof TimeDisplayPlaybackContainer
               */function TimeDisplayPlaybackContainer() {
                _classCallCheck(this, TimeDisplayPlaybackContainer);
                return _possibleConstructorReturn(this, (TimeDisplayPlaybackContainer.__proto__ || Object.getPrototypeOf(TimeDisplayPlaybackContainer)).call(this, {name: 'TimeDisplayPlaybackContainer'}));
              }

              /**
               * render component
               *
               * @param {*} props - component props
               * @returns {React$Element} - component element
               * @memberof TimeDisplayPlaybackContainer
               */_createClass(TimeDisplayPlaybackContainer, [{
                key: 'render', value: function render(props) {
                  return (0, _preact.h)(_timeDisplay2.default, _extends({
                    currentTime: props.currentTime,
                    duration: props.duration
                  }, props));
                }
              }]);
              return TimeDisplayPlaybackContainer;
            }(_base2.default)) || _class);
            exports.default = TimeDisplayPlaybackContainer;
            /***/
          }, /* 119 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _timeDisplay = __webpack_require__(120);
            var _timeDisplay2 = _interopRequireDefault(_timeDisplay);
            var _preact = __webpack_require__(0);
            var _timeFormat = __webpack_require__(26);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * TimeDisplay component
             *
             * @class TimeDisplay
             * @example <TimeDisplay
             *  currentTime={this.player.currentTime}
             *  duration={this.player.duration}
             *  format='currentTime / duration'
             * />
             * @extends {Component}
             */var TimeDisplay = function (_Component) {
              _inherits(TimeDisplay, _Component);

              function TimeDisplay() {
                _classCallCheck(this, TimeDisplay);
                return _possibleConstructorReturn(this, (TimeDisplay.__proto__ || Object.getPrototypeOf(TimeDisplay)).apply(this, arguments));
              }

              _createClass(TimeDisplay, [{
                key: 'getTimeDisplay', /**
                 * get formatted time display based on defined format
                 *
                 * @method getTimeDisplay
                 * @param {number} currentTime current time
                 * @param {number} duration duration
                 * @param {string} [format] string that can use one or more of: 'current' / 'total' / 'left' and will be replaced with the relevant value
                 * @returns {string} formatted time display
                 * @memberof TimeDisplay
                 */value: function getTimeDisplay(currentTime, duration, format) {
                  var result = format ? format : 'current / total', current = (0, _timeFormat.toHHMMSS)(currentTime),
                    total = (0, _timeFormat.toHHMMSS)(duration),
                    left = (0, _timeFormat.toHHMMSS)(duration - currentTime);
                  result = result.replace(/current/g, current);
                  result = result.replace(/total/g, total);
                  result = result.replace(/left/g, left);
                  return result;
                }/**
                 * render component
                 *
                 * @method render
                 * @param {*} props - component props
                 * @returns {React$Element} - component
                 * @memberof TimeDisplay
                 */
              }, {
                key: 'render', value: function render(props) {
                  return (0, _preact.h)('div', {className: _timeDisplay2.default.timeDisplay}, (0, _preact.h)('span', null, this.getTimeDisplay(props.currentTime, props.duration, props.format)));
                }
              }]);
              return TimeDisplay;
            }(_preact.Component);
            exports.default = TimeDisplay;
            /***/
          }, /* 120 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(121);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_time-display.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_time-display.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 121 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-player .playkit-time-display {\n  display: inline-block;\n  line-height: 32px;\n  vertical-align: top;\n  font-size: 14px;\n  padding: 0 23px;\n  font-weight: bold; }\n\n.playkit-touch .playkit-time-display {\n  padding-left: 0; }\n\n.playkit-player.playkit-size-sm .playkit-player .playkit-time-display {\n  padding: 0 12px 0 0; }\n", ""]);// exports
            exports.locals = {
              "player": "playkit-player",
              "time-display": "playkit-time-display",
              "timeDisplay": "playkit-time-display",
              "touch": "playkit-touch",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm"
            };
            /***/
          }, /* 122 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _bottomBar = __webpack_require__(123);
            var _bottomBar2 = _interopRequireDefault(_bottomBar);
            var _preact = __webpack_require__(0);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * BottomBar component
             *
             * @class BottomBar
             * @example <BottomBar>...</BottomBar>
             * @extends {Component}
             */var BottomBar = function (_Component) {
              _inherits(BottomBar, _Component);

              function BottomBar() {
                _classCallCheck(this, BottomBar);
                return _possibleConstructorReturn(this, (BottomBar.__proto__ || Object.getPrototypeOf(BottomBar)).apply(this, arguments));
              }

              _createClass(BottomBar, [{
                key: 'render', /**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof BottomBar
                 */value: function render(props) {
                  return (0, _preact.h)('div', {className: _bottomBar2.default.bottomBar}, props.children);
                }
              }]);
              return BottomBar;
            }(_preact.Component);
            exports.default = BottomBar;
            /***/
          }, /* 123 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(124);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_bottom-bar.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_bottom-bar.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 124 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-player .playkit-bottom-bar {\n  background: linear-gradient(180deg, transparent 0%, rgba(0, 0, 0, 0.6) 100%);\n  padding: 6px 16px;\n  color: #fff;\n  opacity: 0;\n  visibility: hidden;\n  transition: 100ms opacity;\n  width: 100%;\n  margin-top: auto;\n  position: absolute;\n  z-index: 10;\n  bottom: 0;\n  left: 0; }\n  .playkit-player .playkit-bottom-bar .playkit-left-controls {\n    float: left;\n    text-align: left; }\n    .playkit-player .playkit-bottom-bar .playkit-left-controls .playkit-control-button-container:first-child {\n      margin-left: 0px; }\n  .playkit-player .playkit-bottom-bar .playkit-right-controls {\n    float: right;\n    text-align: left; }\n    .playkit-player .playkit-bottom-bar .playkit-right-controls .playkit-control-button-container:last-child {\n      margin-right: 0px; }\n  .playkit-player .playkit-bottom-bar .playkit-control-button-container {\n    margin: 0 6px; }\n\n.playkit-player.playkit-hover .playkit-bottom-bar,\n.playkit-player.playkit-state-paused .playkit-bottom-bar,\n.playkit-player.playkit-menu-active .playkit-bottom-bar {\n  opacity: 1;\n  visibility: visible; }\n\n.playkit-player.playkit-overlay-active .playkit-bottom-bar {\n  opacity: 0;\n  visibility: hidden; }\n\n.playkit-player.playkit-size-sm .playkit-bottom-bar {\n  padding: 6px 8px; }\n  .playkit-player.playkit-size-sm .playkit-bottom-bar .playkit-time-display {\n    padding-left: 0; }\n", ""]);// exports
            exports.locals = {
              "player": "playkit-player",
              "bottom-bar": "playkit-bottom-bar",
              "bottomBar": "playkit-bottom-bar",
              "left-controls": "playkit-left-controls",
              "leftControls": "playkit-left-controls",
              "control-button-container": "playkit-control-button-container",
              "controlButtonContainer": "playkit-control-button-container",
              "right-controls": "playkit-right-controls",
              "rightControls": "playkit-right-controls",
              "hover": "playkit-hover",
              "state-paused": "playkit-state-paused",
              "statePaused": "playkit-state-paused",
              "menu-active": "playkit-menu-active",
              "menuActive": "playkit-menu-active",
              "overlay-active": "playkit-overlay-active",
              "overlayActive": "playkit-overlay-active",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm",
              "time-display": "playkit-time-display",
              "timeDisplay": "playkit-time-display"
            };
            /***/
          }, /* 125 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _preact = __webpack_require__(0);

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * OverlayPortal component
             *
             * @class OverlayPortal
             * @example <OverlayPortal>...</OverlayPortal>
             * @extends {Component}
             */var OverlayPortal = function (_Component) {
              _inherits(OverlayPortal, _Component);

              function OverlayPortal() {
                _classCallCheck(this, OverlayPortal);
                return _possibleConstructorReturn(this, (OverlayPortal.__proto__ || Object.getPrototypeOf(OverlayPortal)).apply(this, arguments));
              }

              _createClass(OverlayPortal, [{
                key: 'shouldComponentUpdate', /**
                 * change in component props or state shouldn't render the component again
                 *
                 * @returns {boolean} shouldComponentUpdate
                 * @memberof OverlayPortal
                 */value: function shouldComponentUpdate() {
                  return false;
                }/**
                 * render component
                 *
                 * @param {*} props - comonent props
                 * @returns {React$Element} - component element
                 * @memberof OverlayPortal
                 */
              }, {
                key: 'render', value: function render(props) {
                  return (0, _preact.h)('div', {id: 'overlay-portal'}, props.children);
                }
              }]);
              return OverlayPortal;
            }(_preact.Component);
            exports.default = OverlayPortal;
            /***/
          }, /* 126 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _dec, _class;
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _preactRedux = __webpack_require__(1);
            var _shell = __webpack_require__(10);
            var _bindActions = __webpack_require__(3);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {value: value, enumerable: true, configurable: true, writable: true});
              } else {
                obj[key] = value;
              }
              return obj;
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {playerNav: state.shell.playerNav};
            };
            var SEEK_JUMP = 5;
            var VOLUME_JUMP = 5;
            /**
             * KeyboardControl component
             *
             * @class KeyboardControl
             * @extends {BaseComponent}
             */var KeyboardControl = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_shell.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(KeyboardControl, _BaseComponent);

              /**
               * Creates an instance of KeyboardControl.
               * @param {Object} obj obj
               * @memberof KeyboardControl
               */function KeyboardControl(obj) {
                var _this$keyboardHandler;
                _classCallCheck(this, KeyboardControl);
                var _this = _possibleConstructorReturn(this, (KeyboardControl.__proto__ || Object.getPrototypeOf(KeyboardControl)).call(this, {
                  name: 'Keyboard',
                  player: obj.player,
                  config: obj.config
                }));
                _this._activeTextTrack = null;
                _this.keyboardHandlers = (_this$keyboardHandler = {}, _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.SPACE, function () {
                  _this.player.paused ? _this.player.play() : _this.player.pause();
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.UP, function () {
                  var newVolume = Math.round(_this.player.volume * 100) + VOLUME_JUMP;
                  _this.logger.debug('Changing volume. ' + _this.player.volume + ' => ' + newVolume);
                  if (_this.player.muted) {
                    _this.player.muted = false;
                  }
                  _this.player.volume = newVolume / 100;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.DOWN, function () {
                  var newVolume = Math.round(_this.player.volume * 100) - VOLUME_JUMP;
                  if (newVolume < 5) {
                    _this.player.muted = true;
                    return;
                  }
                  _this.logger.debug('Changing volume. ' + _this.player.volume + ' => ' + newVolume);
                  _this.player.volume = newVolume / 100;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.F, function () {
                  if (!_this.player.isFullscreen()) {
                    _this.logger.debug("Enter fullscreen");
                    _this.player.enterFullscreen();
                  }
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.ESC, function () {
                  if (_this.player.isFullscreen()) {
                    _this.logger.debug("Exit fullscreen");
                    _this.player.exitFullscreen();
                  }
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.LEFT, function () {
                  var newTime = _this.player.currentTime - SEEK_JUMP;
                  _this.logger.debug('Seek. ' + _this.player.currentTime + ' => ' + (newTime > 0 ? newTime : 0));
                  _this.player.currentTime = newTime > 0 ? newTime : 0;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.RIGHT, function () {
                  var newTime = _this.player.currentTime + SEEK_JUMP;
                  _this.logger.debug('Seek. ' + _this.player.currentTime + ' => ' + (newTime > _this.player.duration ? _this.player.duration : newTime));
                  _this.player.currentTime = newTime > _this.player.duration ? _this.player.duration : newTime;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.HOME, function () {
                  _this.logger.debug('Seek. ' + _this.player.currentTime + ' => 0');
                  _this.player.currentTime = 0;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.END, function () {
                  _this.logger.debug('Seek. ' + _this.player.currentTime + ' => ' + _this.player.duration);
                  _this.player.currentTime = _this.player.duration;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.M, function () {
                  _this.logger.debug(_this.player.muted ? "Umnute" : "Mute");
                  _this.player.muted = !_this.player.muted;
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.SEMI_COLON, function (shiftKey) {
                  if (shiftKey) {
                    _this.logger.debug('Changing playback rate. ' + _this.player.playbackRate + ' => ' + _this.player.defaultPlaybackRate);
                    _this.player.playbackRate = _this.player.defaultPlaybackRate;
                  }
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.PERIOD, function (shiftKey) {
                  if (shiftKey) {
                    var playbackRate = _this.player.playbackRate;
                    var index = _this.player.playbackRates.indexOf(playbackRate);
                    if (index < _this.player.playbackRates.length - 1) {
                      _this.logger.debug('Changing playback rate. ' + playbackRate + ' => ' + _this.player.playbackRates[index + 1]);
                      _this.player.playbackRate = _this.player.playbackRates[index + 1];
                    }
                  }
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.COMMA, function (shiftKey) {
                  if (shiftKey) {
                    var playbackRate = _this.player.playbackRate;
                    var index = _this.player.playbackRates.indexOf(playbackRate);
                    if (index > 0) {
                      _this.logger.debug('Changing playback rate. ' + playbackRate + ' => ' + _this.player.playbackRates[index - 1]);
                      _this.player.playbackRate = _this.player.playbackRates[index - 1];
                    }
                  }
                }), _defineProperty(_this$keyboardHandler, _keyMap.KeyMap.C, function () {
                  var activeTextTrack = _this.player.getActiveTracks().text;
                  if (activeTextTrack.language === "off" && _this._activeTextTrack) {
                    _this.logger.debug('Changing text track', _this._activeTextTrack);
                    _this.player.selectTrack(_this._activeTextTrack);
                    _this._activeTextTrack = null;
                  } else if (activeTextTrack.language !== "off" && !_this._activeTextTrack) {
                    _this.logger.debug('Hiding text track');
                    _this._activeTextTrack = activeTextTrack;
                    _this.player.hideTextTrack();
                  }
                }), _this$keyboardHandler);
                var playerContainer = document.getElementById(_this.config.targetId);
                if (!playerContainer) {
                  return _possibleConstructorReturn(_this);
                }
                playerContainer.onkeydown = function (e) {
                  if (!_this.props.playerNav && typeof _this.keyboardHandlers[e.keyCode] === 'function') {
                    _this.logger.debug('KeyDown -> keyName: ' + (0, _keyMap.getKeyName)(e.keyCode) + ', shiftKey: ' + e.shiftKey.toString());
                    _this.keyboardHandlers[e.keyCode](e.shiftKey);
                  }
                };
                return _this;
              }

              /**
               * Handlers for keyboard commands
               * @type { Object } - Maps key number to his handler
               * @memberof KeyboardControl
               */
              return KeyboardControl;
            }(_base2.default)) || _class);
            exports.default = KeyboardControl;
            /***/
          }, /* 127 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _volume = __webpack_require__(27);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * The icon only timeout
             * @type {number}
             * @const
             */var ICON_ONLY_TIMEOUT = 3000;
            /**
             * UnmuteIndication component
             *
             * @class UnmuteIndication
             * @example <UnmuteIndication player={this.player} />
             * @extends {BaseComponent}
             */var UnmuteIndication = (_dec = (0, _preactRedux.connect)(null, (0, _bindActions.bindActions)(_volume.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(UnmuteIndication, _BaseComponent);

              /**
               * Creates an instance of UnmuteIndication.
               * @param {Object} obj obj
               * @memberof UnmuteIndication
               */function UnmuteIndication(obj) {
                _classCallCheck(this, UnmuteIndication);
                var _this = _possibleConstructorReturn(this, (UnmuteIndication.__proto__ || Object.getPrototypeOf(UnmuteIndication)).call(this, {
                  name: 'UnmuteIndication',
                  player: obj.player
                }));
                _this._iconOnlyTimeoutCallback = _this._iconOnlyTimeout.bind(_this);
                return _this;
              }

              /**
               * after component mounted, listen to relevant player event for updating the state of the component
               *
               * @method componentDidMount
               * @returns {void}
               * @memberof UnmuteIndication
               */
              /**
               * The icon only timeout bounded method reference
               * @private
               * @memberof UnmuteIndication
               * @type {Function}
               */_createClass(UnmuteIndication, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  this.player.addEventListener(this.player.Event.MUTE_CHANGE, function (e) {
                    _this2.props.updateMuted(e.payload.mute);// hide tooltip on user interaction
                    if (!e.payload.mute && _this2.state.unmuteHint) {
                      _this2.setState({unmuteHint: false});
                    }
                  });
                  this.player.addEventListener(this.player.Event.FALLBACK_TO_MUTED_AUTOPLAY, function () {
                    _this2.setState({unmuteHint: true});
                    _this2.player.addEventListener(_this2.player.Event.PLAYING, _this2._iconOnlyTimeoutCallback);
                    _this2.player.addEventListener(_this2.player.Event.AD_STARTED, _this2._iconOnlyTimeoutCallback);
                  });
                }/**
                 * The icon only timeout handler
                 * @private
                 * @memberof UnmuteIndication
                 * @returns {void}
                 */
              }, {
                key: '_iconOnlyTimeout', value: function _iconOnlyTimeout() {
                  var _this3 = this;
                  this.player.removeEventListener(this.player.Event.PLAYING, this._iconOnlyTimeoutCallback);
                  this.player.removeEventListener(this.player.Event.AD_STARTED, this._iconOnlyTimeoutCallback);
                  setTimeout(function () {
                    _this3.setState({iconOnly: true});
                  }, ICON_ONLY_TIMEOUT);
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {?React$Element} component element
                 * @memberof UnmuteIndication
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this4 = this;
                  if (!this.state.unmuteHint) return undefined;
                  var styleClass = [_style2.default.unmuteButtonContainer];
                  if (props.hasTopBar) styleClass.push(_style2.default.hasTopBar);
                  if (this.state.iconOnly) styleClass.push(_style2.default.showIconOnly);
                  return (0, _preact.h)('div', {
                    className: styleClass.join(' '), onMouseOver: function onMouseOver() {
                      return _this4.setState({iconOnly: false});
                    }, onMouseOut: function onMouseOut() {
                      return _this4.setState({iconOnly: true});
                    }, onClick: function onClick() {
                      return _this4.player.muted = !_this4.player.muted;
                    }
                  }, (0, _preact.h)('a', {className: [_style2.default.btn, _style2.default.btnDarkTransparent, _style2.default.unmuteButton].join(' ')}, (0, _preact.h)('div', {className: _style2.default.unmuteIconContainer}, (0, _preact.h)(_icon2.default, {type: _icon.IconType.VolumeBase}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.VolumeMute})), (0, _preact.h)('span', null, 'Unmute')));
                }
              }]);
              return UnmuteIndication;
            }(_base2.default)) || _class);
            exports.default = UnmuteIndication;
            /***/
          }, /* 128 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _seekbarAdsContainer = __webpack_require__(129);
            var _seekbarAdsContainer2 = _interopRequireDefault(_seekbarAdsContainer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _seekbarAdsContainer2.default;
            /***/
          }, /* 129 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _seekbar = __webpack_require__(14);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _seekbar2 = __webpack_require__(15);
            var _seekbar3 = _interopRequireDefault(_seekbar2);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                currentTime: state.engine.adProgress.currentTime,
                duration: state.engine.adProgress.duration,
                isDraggingActive: state.seekbar.draggingActive,
                isMobile: state.shell.isMobile
              };
            };
            /**
             * SeekBarAdsContainer component
             *
             * @class SeekBarAdsContainer
             * @example <SeekBarAdsContainer player={this.player} />
             * @extends {BaseComponent}
             */var SeekBarAdsContainer = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_seekbar.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(SeekBarAdsContainer, _BaseComponent);

              /**
               * Creates an instance of SeekBarAdsContainer.
               * @param {Object} obj - obj
               * @memberof SeekBarAdsContainer
               */function SeekBarAdsContainer(obj) {
                _classCallCheck(this, SeekBarAdsContainer);
                return _possibleConstructorReturn(this, (SeekBarAdsContainer.__proto__ || Object.getPrototypeOf(SeekBarAdsContainer)).call(this, {
                  name: 'SeekBarAdsContainer',
                  player: obj.player
                }));
              }

              /**
               * render compoent
               *
               * @param {*} props - component props
               * @returns {React$Element} - component element
               * @memberof SeekBarAdsContainer
               */_createClass(SeekBarAdsContainer, [{
                key: 'render', value: function render(props) {
                  return (0, _preact.h)(_seekbar3.default, {
                    player: this.props.player,
                    playerElement: this.props.playerContainer,
                    changeCurrentTime: function changeCurrentTime(time) {// eslint-disable-line no-unused-vars
                    },
                    updateSeekbarDraggingStatus: function updateSeekbarDraggingStatus(data) {// eslint-disable-line no-unused-vars
                    },
                    updateCurrentTime: function updateCurrentTime(data) {// eslint-disable-line no-unused-vars
                    },
                    adBreak: props.adBreak,
                    currentTime: props.currentTime,
                    duration: props.duration,
                    isDraggingActive: props.isDraggingActive,
                    isMobile: props.isMobile
                  });
                }
              }]);
              return SeekBarAdsContainer;
            }(_base2.default)) || _class);
            exports.default = SeekBarAdsContainer;
            /***/
          }, /* 130 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _timeDisplayAdsContainer = __webpack_require__(131);
            var _timeDisplayAdsContainer2 = _interopRequireDefault(_timeDisplayAdsContainer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _timeDisplayAdsContainer2.default;
            /***/
          }, /* 131 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _timeDisplay = __webpack_require__(32);
            var _timeDisplay2 = _interopRequireDefault(_timeDisplay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {adProgress: state.engine.adProgress};
            };
            /**
             * TimeDisplayAdsContainer component
             *
             * @class TimeDisplayAdsContainer
             * @example <TimeDisplayAdsContainer format='-left seconds left' />
             * @extends {BaseComponent}
             */var TimeDisplayAdsContainer = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_BaseComponent) {
              _inherits(TimeDisplayAdsContainer, _BaseComponent);

              /**
               * Creates an instance of TimeDisplayAdsContainer.
               * @memberof TimeDisplayAdsContainer
               */function TimeDisplayAdsContainer() {
                _classCallCheck(this, TimeDisplayAdsContainer);
                return _possibleConstructorReturn(this, (TimeDisplayAdsContainer.__proto__ || Object.getPrototypeOf(TimeDisplayAdsContainer)).call(this, {name: 'TimeDisplayAdsContainer'}));
              }

              /**
               * render component
               *
               * @param {*} props component props
               * @returns {React$Element} - component element
               * @memberof TimeDisplayAdsContainer
               */_createClass(TimeDisplayAdsContainer, [{
                key: 'render', value: function render(props) {
                  return (0, _preact.h)(_timeDisplay2.default, _extends({
                    currentTime: Math.round(props.adProgress.currentTime),
                    duration: Math.round(props.adProgress.duration)
                  }, props));
                }
              }]);
              return TimeDisplayAdsContainer;
            }(_base2.default)) || _class);
            exports.default = TimeDisplayAdsContainer;
            /***/
          }, /* 132 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _adSkip = __webpack_require__(133);
            var _adSkip2 = _interopRequireDefault(_adSkip);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _adSkip2.default;
            /***/
          }, /* 133 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _adSkip = __webpack_require__(134);
            var _adSkip2 = _interopRequireDefault(_adSkip);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                currentTime: state.engine.adProgress.currentTime,
                duration: state.engine.adProgress.duration,
                adSkipTimeOffset: state.engine.adSkipTimeOffset,
                adSkippableState: state.engine.adSkippableState
              };
            };
            /**
             * AdSkip component
             *
             * @class AdSkip
             * @example <AdSkip player={this.player} />
             * @extends {BaseComponent}
             */var AdSkip = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_BaseComponent) {
              _inherits(AdSkip, _BaseComponent);

              /**
               * Creates an instance of AdSkip.
               * @param {Object} obj obj
               * @memberof AdSkip
               */function AdSkip(obj) {
                _classCallCheck(this, AdSkip);
                return _possibleConstructorReturn(this, (AdSkip.__proto__ || Object.getPrototypeOf(AdSkip)).call(this, {
                  name: 'AdSkip',
                  player: obj.player
                }));
              }

              /**
               * componentDidMount
               *
               * @returns {void}
               * @memberof AdSkip
               */_createClass(AdSkip, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  this.skipSupport = this.player.config.plugins.ima.skipSupport;
                }/**
                 * getting the number value of seconds left to be able to skip ad
                 *
                 * @returns {number} - number of seconds left to skip ad
                 * @memberof AdSkip
                 */
              }, {
                key: 'getSkipTimeOffset', value: function getSkipTimeOffset() {
                  if (this.skipSupport) {
                    return Math.ceil(this.skipSupport.skipTimeOffset - this.props.currentTime);
                  } else {
                    return Math.ceil(this.props.adSkipTimeOffset - this.props.currentTime);
                  }
                }/**
                 * render component
                 *
                 * @returns {React$Element}  - component
                 * @memberof AdSkip
                 */
              }, {
                key: 'render', value: function render() {
                  var _this2 = this;
                  if (!this.props.adSkippableState && this.skipSupport) {
                    return this.getSkipTimeOffset() <= 0 ? (0, _preact.h)('a', {
                      className: [_adSkip2.default.btn, _adSkip2.default.btnBranded, _adSkip2.default.btnSkipAd].join(' '),
                      onClick: function onClick() {
                        return _this2.player.skipAd();
                      }
                    }, this.skipSupport.label || 'Skip ad') : (0, _preact.h)('span', {className: _adSkip2.default.skipAd}, 'Skip in ', this.getSkipTimeOffset());
                  } else {
                    return undefined;
                  }
                }
              }]);
              return AdSkip;
            }(_base2.default)) || _class);
            exports.default = AdSkip;
            /***/
          }, /* 134 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(135);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_ad-skip.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_ad-skip.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 135 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-btn-skip-ad {\n  position: absolute;\n  bottom: 60px;\n  right: 16px; }\n\n.playkit-skip-ad {\n  color: #fff;\n  font-size: 20px;\n  font-weight: bold;\n  line-height: 24px;\n  text-shadow: 0 0 6px rgba(0, 0, 0, 0.6);\n  position: absolute;\n  bottom: 66px;\n  right: 16px; }\n", ""]);// exports
            exports.locals = {
              "btn-skip-ad": "playkit-btn-skip-ad",
              "btnSkipAd": "playkit-btn-skip-ad",
              "skip-ad": "playkit-skip-ad",
              "skipAd": "playkit-skip-ad"
            };
            /***/
          }, /* 136 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _adLearnMore = __webpack_require__(137);
            var _adLearnMore2 = _interopRequireDefault(_adLearnMore);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _adLearnMore2.default;
            /***/
          }, /* 137 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _adLearnMore = __webpack_require__(138);
            var _adLearnMore2 = _interopRequireDefault(_adLearnMore);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {url: state.engine.adUrl};
            };
            /**
             * AdLearnMore component
             *
             * @class AdLearnMore
             * @example <AdLearnMore />
             * @extends {Component}
             */var AdLearnMore = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_Component) {
              _inherits(AdLearnMore, _Component);

              function AdLearnMore() {
                _classCallCheck(this, AdLearnMore);
                return _possibleConstructorReturn(this, (AdLearnMore.__proto__ || Object.getPrototypeOf(AdLearnMore)).apply(this, arguments));
              }

              _createClass(AdLearnMore, [{
                key: 'render', /**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof AdLearnMore
                 */value: function render(props) {
                  return (0, _preact.h)('a', {
                    href: props.url,
                    target: '_blank',
                    className: [_adLearnMore2.default.btn, _adLearnMore2.default.btnDarkTransparent].join(' ')
                  }, 'Learn more');
                }
              }]);
              return AdLearnMore;
            }(_preact.Component)) || _class);
            exports.default = AdLearnMore;
            /***/
          }, /* 138 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(139);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_ad-learn-more.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_ad-learn-more.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 139 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-btn {\n  text-decoration: none;\n  height: 36px;\n  border-radius: 18px;\n  color: #fff;\n  line-height: 36px;\n  font-weight: bold;\n  cursor: pointer;\n  display: inline-block;\n  padding: 0 24px; }\n  .playkit-btn.playkit-btn-block {\n    display: block; }\n  .playkit-btn.playkit-btn-dark-transparent {\n    background-color: rgba(0, 0, 0, 0.5);\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    line-height: 32px; }\n    .playkit-btn.playkit-btn-dark-transparent:hover {\n      color: #fff;\n      border: 2px solid rgba(255, 255, 255, 0.4); }\n  .playkit-btn.playkit-btn-branded {\n    background-color: #01ACCD; }\n    .playkit-btn.playkit-btn-branded:hover {\n      color: #fff; }\n\n.playkit-btn-rounded {\n  height: 36px;\n  width: 36px;\n  min-width: 36px;\n  min-height: 36px;\n  border-radius: 18px;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: inline-block;\n  padding: 2px; }\n", ""]);// exports
            exports.locals = {
              "btn": "playkit-btn",
              "btn-block": "playkit-btn-block",
              "btnBlock": "playkit-btn-block",
              "btn-dark-transparent": "playkit-btn-dark-transparent",
              "btnDarkTransparent": "playkit-btn-dark-transparent",
              "btn-branded": "playkit-btn-branded",
              "btnBranded": "playkit-btn-branded",
              "btn-rounded": "playkit-btn-rounded",
              "btnRounded": "playkit-btn-rounded"
            };
            /***/
          }, /* 140 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _topBar = __webpack_require__(141);
            var _topBar2 = _interopRequireDefault(_topBar);
            var _preact = __webpack_require__(0);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * TopBar component
             *
             * @class TopBar
             * @example <TopBar>...</TopBar>
             * @extends {Component}
             */var TopBar = function (_Component) {
              _inherits(TopBar, _Component);

              function TopBar() {
                _classCallCheck(this, TopBar);
                return _possibleConstructorReturn(this, (TopBar.__proto__ || Object.getPrototypeOf(TopBar)).apply(this, arguments));
              }

              _createClass(TopBar, [{
                key: 'render', /**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof TopBar
                 */value: function render(props) {
                  return (0, _preact.h)('div', {className: _topBar2.default.topBar}, props.children);
                }
              }]);
              return TopBar;
            }(_preact.Component);
            exports.default = TopBar;
            /***/
          }, /* 141 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(142);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_top-bar.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_top-bar.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 142 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-player .playkit-top-bar {\n  background: linear-gradient(0deg, transparent 0%, rgba(0, 0, 0, 0.6) 100%);\n  padding: 14px 16px;\n  color: #fff;\n  opacity: 0;\n  visibility: hidden;\n  transition: 100ms opacity;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0; }\n  .playkit-player .playkit-top-bar .playkit-left-controls {\n    text-align: left;\n    min-width: 0; }\n  .playkit-player .playkit-top-bar .playkit-right-controls {\n    text-align: left; }\n    .playkit-player .playkit-top-bar .playkit-right-controls .playkit-control-button-container {\n      margin: 0 6px; }\n      .playkit-player .playkit-top-bar .playkit-right-controls .playkit-control-button-container:last-child {\n        margin-right: 0; }\n\n.playkit-player.playkit-hover .playkit-top-bar,\n.playkit-player.playkit-state-paused .playkit-top-bar,\n.playkit-player.playkit-menu-active .playkit-top-bar {\n  opacity: 1;\n  visibility: visible; }\n\n.playkit-player.playkit-overlay-active .playkit-top-bar {\n  opacity: 0;\n  visibility: hidden; }\n\n.playkit-player.playkit-size-sm .playkit-player .playkit-top-bar {\n  padding: 8px 8px 20px 8px; }\n", ""]);// exports
            exports.locals = {
              "player": "playkit-player",
              "top-bar": "playkit-top-bar",
              "topBar": "playkit-top-bar",
              "left-controls": "playkit-left-controls",
              "leftControls": "playkit-left-controls",
              "right-controls": "playkit-right-controls",
              "rightControls": "playkit-right-controls",
              "control-button-container": "playkit-control-button-container",
              "controlButtonContainer": "playkit-control-button-container",
              "hover": "playkit-hover",
              "state-paused": "playkit-state-paused",
              "statePaused": "playkit-state-paused",
              "menu-active": "playkit-menu-active",
              "menuActive": "playkit-menu-active",
              "overlay-active": "playkit-overlay-active",
              "overlayActive": "playkit-overlay-active",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm"
            };
            /***/
          }, /* 143 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _seekbarLivePlaybackContainer = __webpack_require__(144);
            var _seekbarLivePlaybackContainer2 = _interopRequireDefault(_seekbarLivePlaybackContainer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _seekbarLivePlaybackContainer2.default;
            /***/
          }, /* 144 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _seekbar = __webpack_require__(14);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _seekbar2 = __webpack_require__(15);
            var _seekbar3 = _interopRequireDefault(_seekbar2);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                currentTime: state.seekbar.currentTime,
                duration: state.engine.duration,
                isDraggingActive: state.seekbar.draggingActive,
                isMobile: state.shell.isMobile,
                poster: state.engine.poster,
                isDvr: state.engine.isDvr
              };
            };
            /**
             * SeekBarLivePlaybackContainer component
             *
             * @class SeekBarLivePlaybackContainer
             * @example <SeekBarLivePlaybackContainer player={this.player} />
             * @extends {BaseComponent}
             */var SeekBarLivePlaybackContainer = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_seekbar.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(SeekBarLivePlaybackContainer, _BaseComponent);

              /**
               * Creates an instance of SeekBarLivePlaybackContainer.
               * @param {Object} obj obj
               * @memberof SeekBarLivePlaybackContainer
               */function SeekBarLivePlaybackContainer(obj) {
                _classCallCheck(this, SeekBarLivePlaybackContainer);
                return _possibleConstructorReturn(this, (SeekBarLivePlaybackContainer.__proto__ || Object.getPrototypeOf(SeekBarLivePlaybackContainer)).call(this, {
                  name: 'SeekBarLivePlaybackContainer',
                  player: obj.player
                }));
              }

              /**
               * after component mounted, listen to time update event and if dragging not active,
               * update the current time in the store
               *
               * @returns {void}
               * @memberof SeekBarLivePlaybackContainer
               */_createClass(SeekBarLivePlaybackContainer, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  this.player.addEventListener(this.player.Event.TIME_UPDATE, function () {
                    if (!_this2.props.isDraggingActive) {
                      _this2.props.updateCurrentTime(_this2.player.currentTime);
                    }
                  });
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof SeekBarLivePlaybackContainer
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this3 = this;
                  if (!props.isDvr) {
                    return undefined;
                  }
                  return (0, _preact.h)(_seekbar3.default, {
                    player: this.props.player,
                    playerElement: this.props.playerContainer,
                    showTimeBubble: this.props.showTimeBubble,
                    changeCurrentTime: function changeCurrentTime(time) {
                      return _this3.player.currentTime = time;
                    },
                    playerPoster: this.props.poster,
                    updateSeekbarDraggingStatus: function updateSeekbarDraggingStatus(data) {
                      return _this3.props.updateSeekbarDraggingStatus(data);
                    },
                    updateCurrentTime: function updateCurrentTime(data) {
                      return _this3.props.updateCurrentTime(data);
                    },
                    isDvr: this.props.isDvr,
                    currentTime: this.props.currentTime,
                    duration: this.props.duration,
                    isDraggingActive: this.props.isDraggingActive,
                    isMobile: this.props.isMobile
                  });
                }
              }]);
              return SeekBarLivePlaybackContainer;
            }(_base2.default)) || _class);
            exports.default = SeekBarLivePlaybackContainer;
            /***/
          }, /* 145 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _liveTag = __webpack_require__(146);
            var _liveTag2 = _interopRequireDefault(_liveTag);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _liveTag2.default;
            /***/
          }, /* 146 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _liveTag = __webpack_require__(147);
            var _liveTag2 = _interopRequireDefault(_liveTag);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                isLive: state.engine.isLive,
                isDvr: state.engine.isDvr,
                currentTime: state.engine.currentTime,
                duration: state.engine.duration
              };
            };
            /**
             * LiveTag component
             *
             * @class LiveTag
             * @example <LiveTag player={this.player} />
             * @extends {BaseComponent}
             */var LiveTag = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_BaseComponent) {
              _inherits(LiveTag, _BaseComponent);

              /**
               * Creates an instance of LiveTag.
               * @param {Object} obj obj
               * @memberof LiveTag
               */function LiveTag(obj) {
                _classCallCheck(this, LiveTag);
                return _possibleConstructorReturn(this, (LiveTag.__proto__ || Object.getPrototypeOf(LiveTag)).call(this, {
                  name: 'LiveTag',
                  player: obj.player
                }));
              }

              /**
               * returns a boolean to detect if player is on live edge with buffer of 1 second
               *
               * @returns {boolean} - is player on live edge
               * @memberof LiveTag
               */_createClass(LiveTag, [{
                key: 'isOnLiveEdge', value: function isOnLiveEdge() {
                  return this.props.currentTime >= this.props.duration - 1;
                }/**
                 * click handler to live tag
                 * if not on live edge, seeking to live edge and if paused, call play method
                 *
                 * @returns {void}
                 * @memberof LiveTag
                 */
              }, {
                key: 'onClick', value: function onClick() {
                  if (!this.isOnLiveEdge()) {
                    this.player.seekToLiveEdge();
                    if (this.player.paused) {
                      this.player.play();
                    }
                  }
                }/**
                 * render live tag component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} component element
                 * @memberof LiveTag
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this2 = this;
                  var tagStyleClass = [_liveTag2.default.liveTag];
                  if (props.isDvr && !this.isOnLiveEdge()) tagStyleClass.push(_liveTag2.default.nonLivePlayhead);
                  return (0, _preact.h)('div', {
                    tabIndex: '0',
                    className: tagStyleClass.join(' '),
                    onClick: function onClick() {
                      return _this2.onClick();
                    },
                    onKeyDown: function onKeyDown(e) {
                      if (e.keyCode === _keyMap.KeyMap.ENTER) {
                        _this2.onClick();
                      }
                    }
                  }, 'Live');
                }
              }]);
              return LiveTag;
            }(_base2.default)) || _class);
            exports.default = LiveTag;
            /***/
          }, /* 147 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(148);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_live-tag.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_live-tag.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 148 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-live-tag {\n  color: #DA1F26;\n  font-size: 14px;\n  font-weight: bold;\n  letter-spacing: 1px;\n  line-height: 19px;\n  border: 2px solid #DA1F26;\n  border-radius: 4px;\n  text-transform: uppercase;\n  text-align: center;\n  display: inline-block;\n  padding: 0 3px 0 5px;\n  margin: 5px 23px;\n  cursor: default; }\n  .playkit-live-tag.playkit-non-live-playhead {\n    background-color: rgba(255, 255, 255, 0.2);\n    border: none;\n    color: #fff;\n    line-height: 23px;\n    padding: 0 5px 0 7px;\n    cursor: pointer; }\n\n.playkit-player.playkit-size-sm .playkit-live-tag {\n  margin-left: 0; }\n", ""]);// exports
            exports.locals = {
              "live-tag": "playkit-live-tag",
              "liveTag": "playkit-live-tag",
              "non-live-playhead": "playkit-non-live-playhead",
              "nonLivePlayhead": "playkit-non-live-playhead",
              "player": "playkit-player",
              "size-sm": "playkit-size-sm",
              "sizeSm": "playkit-size-sm"
            };
            /***/
          }, /* 149 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _overlay = __webpack_require__(17);
            var _overlay2 = _interopRequireDefault(_overlay);
            var _preactI18n = __webpack_require__(9);
            var _bindActions = __webpack_require__(3);
            var _engine = __webpack_require__(36);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {hasError: state.engine.hasError};
            };
            /**
             * errorOverlay component
             *
             * @class errorOverlay
             * @extends {BaseComponent}
             */var ErrorOverlay = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_engine.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(ErrorOverlay, _BaseComponent);

              /**
               * Creates an instance of ErrorObject.
               * @param {Object} obj obj
               * @memberof ErrorObejct
               */function ErrorOverlay(obj) {
                _classCallCheck(this, ErrorOverlay);
                return _possibleConstructorReturn(this, (ErrorOverlay.__proto__ || Object.getPrototypeOf(ErrorOverlay)).call(this, {
                  name: 'ErrorOverlay',
                  player: obj.player
                }));
              }

              /**
               * copy input text based on input element.
               * on success, set success internal component state for 2 seconds
               * @returns {void}
               * @memberof ShareOverlay
               */_createClass(ErrorOverlay, [{
                key: 'copyError', value: function copyError() {
                  var _this2 = this;
                  var selection = window.getSelection();
                  var range = document.createRange();
                  try {
                    range.selectNode(this.sessionEl);
                    selection.removeAllRanges();
                    selection.addRange(range);
                    document.execCommand('copy');
                    this.setState({copySuccess: true});
                    setTimeout(function () {
                      return _this2.setState({copySuccess: false});
                    }, 2000);
                  } catch (e) {
                    this.setState({copySuccess: false});
                  }
                }/**
                 * play on click
                 *
                 * @returns {void}
                 * @memberof PrePlaybackPlayOverlay
                 */
              }, {
                key: 'handleClick', value: function handleClick() {
                  this.props.updateHasError(false);
                  this.player.loadMedia(this.props.config.entryId);
                }/**
                 * render the sessionID line
                 *
                 * @returns {React$Element} - main state element
                 * @memberof ErrorOverlay
                 */
              }, {
                key: 'renderSessionID', value: function renderSessionID() {
                  var _this3 = this;
                  var sessionId = this.player && this.player.config && this.player.config.session && this.player.config.session.id;
                  var copyUrlClasses = [_style2.default.btnCopyUrl].join(' ');
                  copyUrlClasses += this.state.copySuccess ? ' ' + _style2.default.copied : '';
                  if (sessionId) {
                    return (0, _preact.h)('div', {className: _style2.default.linkOptionsContainer}, (0, _preact.h)('div', {className: _style2.default.copyUrlRow}, (0, _preact.h)('div', {
                      ref: function ref(el) {
                        _this3.sessionEl = el;
                      }, className: _style2.default.errorSession
                    }, (0, _preact.h)(_preactI18n.Text, {id: 'error.default_session_text'}), sessionId), (0, _preact.h)('a', {
                      className: copyUrlClasses,
                      onClick: function onClick() {
                        return _this3.copyError();
                      }
                    }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Copy}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check}))));
                  } else {
                    return undefined;
                  }
                }/**
                 * render main state
                 *
                 * @returns {?React$Element} - main state element
                 * @memberof ErrorOverlay
                 */
              }, {
                key: 'render', value: function render() {
                  var _this4 = this;
                  if (this.props && this.props.hasError) {
                    return (0, _preact.h)('div', {id: 'overlay-portal'}, (0, _preact.h)(_overlay2.default, {
                      open: true,
                      permanent: true,
                      type: 'error'
                    }, (0, _preact.h)('div', {className: _style2.default.errorOverlay}, (0, _preact.h)('p', {className: _style2.default.errorText}), (0, _preact.h)('div', {className: _style2.default.svgContainer}, (0, _preact.h)('svg', {
                      width: '124',
                      height: '110',
                      viewBox: '0 0 124 110',
                      xmlns: 'http://www.w3.org/2000/svg',
                      xmlnsXlink: 'http://www.w3.org/1999/xlink'
                    }, (0, _preact.h)('defs', null, (0, _preact.h)('polygon', {
                      id: 'path-1',
                      points: '58.0906294 70 50.7492774 88.8201923 60.1881585 88.8201923 54.22331 107 73.8876457 84.2307692 64.0554779 84.2307692 70.6102564 70'
                    })), (0, _preact.h)('g', {
                      id: 'Player-v3',
                      fill: 'none',
                      fillRule: 'evenodd'
                    }, (0, _preact.h)('g', {
                      id: 'Desktop---Default---Error',
                      transform: 'translate(-365 -103)'
                    }, (0, _preact.h)('g', {
                      id: 'Cloud',
                      transform: 'translate(366 104)'
                    }, (0, _preact.h)('path', {
                      d: 'M63.5662942,30.179068 C61.0506558,29.4162424 58.3339083,29 55.5,29 C42.5213084,29 32,37.7304474 32,48.5 C32,48.6497107 32.0020332,48.7990274 32.0060779,48.947932 L32.0060779,48.947932 C20.975194,51.4855427 13,58.8323573 13,67.5 C13,71.2164926 14.4662425,74.6901504 17.0109182,77.6459815 C17.3714483,67.0552274 26.624181,58.1393462 39.3259742,55.0194402 L39.3259742,55.0194402 C39.3212229,54.8326784 39.3188345,54.6453999 39.3188345,54.4576271 C39.3188345,41.956968 49.9040267,31.6467441 63.5662942,30.179068 Z',
                      id: 'Combined-Shape',
                      fillOpacity: '.08',
                      fill: '#2E2E2E'
                    }), (0, _preact.h)('path', {
                      d: 'M31.0032591,48.1614253 C31.2192187,36.9518144 42.1402046,28 55.5,28 C64.749856,28 73.0886419,32.3249294 77.2653132,39.0733535 C84.8537029,39.7078593 90.7909537,44.3809769 90.9945979,50.1913309 C102.911627,51.5069936 112,59.4322556 112,69 C112,79.5603607 100.981582,88 87.5,88 C84.4639246,88 81.503099,87.5724513 78.7283559,86.7489741 C74.6488476,88.1943213 69.4726739,89 64,89 C58.7323857,89 53.737093,88.2538247 49.7263698,86.9058736 C46.7827225,87.6274324 43.6763865,88 40.5,88 C24.8190401,88 12,78.9101352 12,67.5 C12,58.659353 19.7679337,51.004786 31.0032591,48.1614253 Z',
                      id: 'Combined-Shape',
                      stroke: '#666',
                      strokeWidth: '2'
                    }), (0, _preact.h)('g', {
                      id: 'Path-8',
                      strokeLinecap: 'round',
                      strokeLinejoin: 'round'
                    }, (0, _preact.h)('use', {
                      fill: '#666',
                      xlinkHref: '#path-1'
                    }), (0, _preact.h)('path', {
                      stroke: '#1D1D1D',
                      strokeWidth: '2',
                      d: 'M65.6170644,83.2307692 L76.0725949,83.2307692 L51.7165365,111.432521 L58.8076053,89.8201923 L49.2858112,89.8201923 L57.4073201,69 L72.1718429,69 L65.6170644,83.2307692 Z'
                    })), (0, _preact.h)('path', {
                      d: 'M59.9991166,0 L59.9991166,7.04768642 C59.9991166,7.59997117 60.4468318,8.04768642 60.9991166,8.04768642 C61.5514013,8.04768642 61.9991166,7.59997117 61.9991166,7.04768642 L61.9991166,0 C61.9991166,-0.55228475 61.5514013,-1 60.9991166,-1 C60.4468318,-1 59.9991166,-0.55228475 59.9991166,0 Z M95.3084192,8.85153517 L90.7782537,14.2503762 C90.4232519,14.6734508 90.4784359,15.3042064 90.9015106,15.6592082 C91.3245852,16.01421 91.9553408,15.9590261 92.3103426,15.5359514 L96.8405081,10.1371104 C97.1955099,9.71403572 97.140326,9.08328013 96.7172513,8.72827833 C96.2941766,8.37327654 95.663421,8.4284605 95.3084192,8.85153517 Z M121.628196,36.6783398 L114.687579,37.9021577 C114.143685,37.9980609 113.780517,38.5167193 113.87642,39.0606136 C113.972323,39.6045079 114.490981,39.9676764 115.034876,39.8717732 L121.975492,38.6479553 C122.519386,38.552052 122.882555,38.0333936 122.786652,37.4894993 C122.690748,36.945605 122.17209,36.5824365 121.628196,36.6783398 Z M0.0227411046,38.6479553 L6.96335733,39.8717732 C7.50725163,39.9676764 8.02591002,39.6045079 8.12181326,39.0606136 C8.2177165,38.5167193 7.85454799,37.9980609 7.31065368,37.9021577 L0.37003746,36.6783398 C-0.173856844,36.5824365 -0.69251523,36.945605 -0.788418471,37.4894993 C-0.884321711,38.0333936 -0.521153199,38.552052 0.0227411046,38.6479553 Z M25.157725,10.1371104 L29.6878905,15.5359514 C30.0428923,15.9590261 30.6736479,16.01421 31.0967226,15.6592082 C31.5197972,15.3042064 31.5749812,14.6734508 31.2199794,14.2503762 L26.6898139,8.85153517 C26.3348121,8.4284605 25.7040565,8.37327654 25.2809818,8.72827833 C24.8579072,9.08328013 24.8027232,9.71403572 25.157725,10.1371104 Z',
                      id: 'Path-9',
                      fill: '#666',
                      fillRule: 'nonzero'
                    })))))), (0, _preact.h)('div', {className: _style2.default.headline}, this.props.errorHead ? this.props.errorHead : (0, _preact.h)(_preactI18n.Text, {id: 'error.default_error'})), this.renderSessionID(), (0, _preact.h)('div', {
                      className: _style2.default.controlButtonContainer,
                      onClick: function onClick() {
                        return _this4.handleClick();
                      }
                    }, (0, _preact.h)('button', {className: [_style2.default.controlButton, _style2.default.retryBtn].join(' ')}, (0, _preact.h)(_preactI18n.Text, {id: 'core.retry'}))))));
                  } else {
                    return undefined;
                  }
                }
              }]);
              return ErrorOverlay;
            }(_base2.default)) || _class);
            exports.default = ErrorOverlay;
            /***/
          }, /* 150 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _share = __webpack_require__(151);
            var _share2 = _interopRequireDefault(_share);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _share2.default;
            /***/
          }, /* 151 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _preact = __webpack_require__(0);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);
            var _shareOverlay = __webpack_require__(152);
            var _shareOverlay2 = _interopRequireDefault(_shareOverlay);
            var _preactPortal = __webpack_require__(29);
            var _preactPortal2 = _interopRequireDefault(_preactPortal);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * ShareControl component
             *
             * @class ShareControl
             * @example <ShareControl player={this.player} />
             * @extends {BaseComponent}
             */var ShareControl = function (_BaseComponent) {
              _inherits(ShareControl, _BaseComponent);

              /**
               * Creates an instance of ShareControl.
               * @param {Object} obj obj
               * @memberof ShareControl
               */function ShareControl(obj) {
                _classCallCheck(this, ShareControl);
                return _possibleConstructorReturn(this, (ShareControl.__proto__ || Object.getPrototypeOf(ShareControl)).call(this, {
                  name: 'Share',
                  player: obj.player
                }));
              }

              /**
               * before component mounted, set initial state
               *
               * @returns {void}
               * @memberof ShareControl
               */_createClass(ShareControl, [{
                key: 'componentWillMount', value: function componentWillMount() {
                  this.setState({overlay: false});
                }/**
                 * toggle overlay internal component state
                 *
                 * @returns {void}
                 * @memberof ShareControl
                 */
              }, {
                key: 'toggleOverlay', value: function toggleOverlay() {
                  this.setState({overlay: !this.state.overlay});
                }/**
                 * render element
                 *
                 * @returns {React$Element} component element
                 * @memberof ShareControl
                 */
              }, {
                key: 'render', value: function render() {
                  var _this2 = this;
                  return (0, _preact.h)('div', {className: 'control-button-container control-share'}, (0, _preact.h)('button', {
                    className: 'control-button control-button-rounded',
                    onClick: function onClick() {
                      return _this2.toggleOverlay();
                    },
                    'aria-label': 'Share'
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Share})), this.state.overlay ? (0, _preact.h)(_preactPortal2.default, {into: '#overlay-portal'}, (0, _preact.h)(_shareOverlay2.default, {
                    player: this.player,
                    onClose: function onClose() {
                      return _this2.toggleOverlay();
                    }
                  })) : null);
                }
              }]);
              return ShareControl;
            }(_base2.default);
            exports.default = ShareControl;
            /***/
          }, /* 152 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _shareOverlay = __webpack_require__(153);
            var _shareOverlay2 = _interopRequireDefault(_shareOverlay);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _shareOverlay2.default;
            /***/
          }, /* 153 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactI18n = __webpack_require__(9);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _share = __webpack_require__(55);
            var _timeFormat = __webpack_require__(26);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _overlay = __webpack_require__(17);
            var _overlay2 = _interopRequireDefault(_overlay);
            var _icon = __webpack_require__(5);
            var _icon2 = _interopRequireDefault(_icon);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @example <ShareOverlay player={this.player} />
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {open: state.share.overlayOpen};
            };
            var shareOverlayState = {Main: 'main', LinkOptions: 'link-options', EmbedOptions: 'embed-options'};
            /**
             * ShareOverlay component
             *
             * @class ShareOverlay
             * @extends {BaseComponent}
             */var ShareOverlay = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_share.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(ShareOverlay, _BaseComponent);

              /**
               * Creates an instance of ShareOverlay.
               * @param {Object} obj obj
               * @memberof ShareOverlay
               */function ShareOverlay(obj) {
                _classCallCheck(this, ShareOverlay);
                return _possibleConstructorReturn(this, (ShareOverlay.__proto__ || Object.getPrototypeOf(ShareOverlay)).call(this, {
                  name: 'ShareOverlay',
                  player: obj.player
                }));
              }

              /**
               * before component mount, set initial state
               *
               * @returns {void}
               * @memberof ShareOverlay
               */_createClass(ShareOverlay, [{
                key: 'componentWillMount', value: function componentWillMount() {
                  this.setState({
                    state: shareOverlayState.Main,
                    shareUrl: 'https://cdnapisec.kaltura.com/index.php?assetId=123456',
                    startFrom: false,
                    startFromValue: 0
                  });
                }/**
                 * before component unmounted, change the overlay state to the initial state
                 *
                 * @returns {void}
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'componentWillUnmount', value: function componentWillUnmount() {
                  this.setState({state: shareOverlayState.Main});
                }/**
                 * changing the overlay state
                 *
                 * @param {string} stateName state name
                 * @returns {void}
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'transitionToState', value: function transitionToState(stateName) {
                  this.setState({state: stateName});
                }/**
                 * copy input text based on input element.
                 * on success, set success internal component state for 2 seconds
                 *
                 * @param {HTMLInputElement} inputElement - start from input element
                 * @returns {void}
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'copyUrl', value: function copyUrl(inputElement) {
                  var _this2 = this;
                  try {
                    inputElement.select();
                    document.execCommand('copy');
                    inputElement.blur();
                    this.setState({copySuccess: true});
                    setTimeout(function () {
                      return _this2.setState({copySuccess: false});
                    }, 2000);
                  } catch (e) {
                    this.setState({copySuccess: false});
                  }
                }/**
                 * toggle start from option checkbox in the internal component state
                 *
                 * @returns {void}
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'toggleStartFrom', value: function toggleStartFrom() {
                  this.setState({startFrom: !this.state.startFrom});
                }/**
                 * get share url method
                 *
                 * @returns {string} - share url
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'getShareUrl', value: function getShareUrl() {
                  var url = this.state.shareUrl;
                  if (this.state.startFrom) {
                    url += '?start=' + this.state.startFromValue;
                  }
                  return url;
                }/**
                 * get embed code
                 * #TODO: complete logic here
                 *
                 * @returns {string} - embed code
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'getEmbedCode', value: function getEmbedCode() {
                  return '<iframe src="//cdnapi.kaltura.com/p/243342/sp/24334200/embedIframeJs/uiconf_id/28685261/partner_id/243342?iframeembed=true&playerId=kdp&entry_id=1_sf5ovm7u&flashvars[streamerType]=auto" width="560" height="395" allowfullscreen webkitallowfullscreen mozAllowFullScreen frameborder="0"></iframe>';
                }/**
                 * start from input change handler.
                 * converts to seconds and save the new value in internal component state
                 *
                 * @param {*} e - input change event
                 * @returns {void}
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'handleStartFromChange', value: function handleStartFromChange(e) {
                  var seconds = (0, _timeFormat.toSecondsFromHHMMSS)(e.target.value);
                  if (seconds >= this.player.duration) {
                    this.setState({startFromValue: 1});
                  }
                  this.setState({startFromValue: seconds});
                }/**
                 * opens new window for share
                 *
                 * @param {string} href - url to open
                 * @returns {boolean} - false
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'share', value: function share(href) {
                  window.open(href, '_blank', 'width=580,height=580');
                  return false;
                }/**
                 * renders main overlay state
                 *
                 * @returns {React$Element} - main state element
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'renderMainState', value: function renderMainState() {
                  var _this3 = this;
                  return (0, _preact.h)('div', {className: this.state.state === shareOverlayState.Main ? 'overlay-screen active' : 'overlay-screen'}, (0, _preact.h)('div', {className: 'title'}, (0, _preact.h)(_preactI18n.Text, {id: 'share.share_title'})), (0, _preact.h)('div', {className: 'share-main-container'}, (0, _preact.h)('div', {className: 'share-icons'}, (0, _preact.h)('a', {
                    href: 'https://player.kaltura.com/video/220277207/share/facebook',
                    target: '_blank',
                    rel: 'noopener noreferrer',
                    title: 'Share on Facebook',
                    role: 'button',
                    'aria-label': 'Share on Facebook',
                    className: 'btn-rounded facebook-share-btn',
                    onClick: function onClick() {
                      return _this3.share('https://player.kaltura.com/video/220277207/share/facebook');
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Facebook})), (0, _preact.h)('a', {
                    href: 'https://player.kaltura.com/video/220277207/share/twitter',
                    target: '_blank',
                    rel: 'noopener noreferrer',
                    title: 'Share on Twitter',
                    role: 'button',
                    'aria-label': 'Share on Twitter',
                    className: 'btn-rounded twitter-share-btn',
                    onClick: function onClick() {
                      return _this3.share('https://player.kaltura.com/video/220277207/share/twitter');
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Twitter})), (0, _preact.h)('a', {
                    href: 'https://player.kaltura.com/video/220277207/share/google-plus',
                    target: '_blank',
                    rel: 'noopener noreferrer',
                    title: 'Share on Google Plus',
                    role: 'button',
                    'aria-label': 'Share on Google Plus',
                    className: 'btn-rounded google-plus-share-btn',
                    onClick: function onClick() {
                      return _this3.share('https://player.kaltura.com/video/220277207/share/google');
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.GooglePlus})), (0, _preact.h)('a', {
                    href: 'https://player.kaltura.com/video/220277207/share/linkedin',
                    target: '_blank',
                    rel: 'noopener noreferrer',
                    title: 'Share on Linkedin',
                    role: 'button',
                    'aria-label': 'Share on Linkedin',
                    className: 'btn-rounded linkedin-share-btn',
                    onClick: function onClick() {
                      return _this3.share('https://player.kaltura.com/video/220277207/share/linkedin');
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Linkedin})), (0, _preact.h)('a', {
                    className: 'btn-rounded email-share-btn',
                    href: 'mailto:?subject=' + encodeURIComponent('email subject') + '&body=' + encodeURIComponent('email body')
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Email})), (0, _preact.h)('a', {
                    className: 'btn-rounded embed-share-btn',
                    onClick: function onClick() {
                      return _this3.transitionToState(shareOverlayState.EmbedOptions);
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Embed}))), (0, _preact.h)('div', null, (0, _preact.h)('div', {className: 'form-group has-icon'}, (0, _preact.h)('input', {
                    type: 'text',
                    placeholder: 'Share URL',
                    className: 'form-control',
                    value: this.state.shareUrl,
                    readOnly: true
                  }), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Link}))), (0, _preact.h)('a', {
                    onClick: function onClick() {
                      return _this3.transitionToState(shareOverlayState.LinkOptions);
                    }
                  }, (0, _preact.h)(_preactI18n.Text, {id: 'share.link_options'}))));
                }/**
                 * renders link options state
                 *
                 * @returns {React$Element} - link options element
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'renderLinkOptionsState', value: function renderLinkOptionsState() {
                  var _this4 = this;
                  var copyUrlClasses = 'btn-rounded btn-branded btn-copy-url';
                  copyUrlClasses += this.state.copySuccess ? ' copied' : '';
                  return (0, _preact.h)('div', {className: this.state.state === shareOverlayState.LinkOptions ? 'overlay-screen active' : 'overlay-screen'}, (0, _preact.h)('div', {className: 'title'}, 'Link options'), (0, _preact.h)('div', {className: 'link-options-container'}, (0, _preact.h)('div', {className: 'copy-url-row'}, (0, _preact.h)('div', {
                    className: 'form-group has-icon input-copy-url',
                    style: 'width: 350px;'
                  }, (0, _preact.h)('input', {
                    type: 'text', ref: function ref(c) {
                      return _this4._shareUrlInput = c;
                    }, placeholder: 'Share URL', className: 'form-control', value: this.getShareUrl(), readOnly: true
                  }), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Link})), (0, _preact.h)('a', {
                    className: copyUrlClasses,
                    onClick: function onClick() {
                      return _this4.copyUrl(_this4._shareUrlInput);
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Copy}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check}))), (0, _preact.h)('div', {className: 'video-start-options-row'}, (0, _preact.h)('div', {className: 'checkbox d-inline-block'}, (0, _preact.h)('input', {
                    type: 'checkbox',
                    id: 'start-from',
                    checked: this.state.startFrom,
                    onClick: function onClick() {
                      return _this4.toggleStartFrom();
                    }
                  }), (0, _preact.h)('label', {htmlFor: 'start-from'}, 'Start video at ')), (0, _preact.h)('div', {className: 'form-group d-inline-block'}, (0, _preact.h)('input', {
                    type: 'text',
                    className: 'form-control',
                    onChange: function onChange(e) {
                      return _this4.handleStartFromChange(e);
                    },
                    value: (0, _timeFormat.toHHMMSS)(this.state.startFromValue),
                    style: 'width: 72px;'
                  })))));
                }/**
                 * renders embed options state
                 *
                 * @returns {React$Element} - embed options element
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'renderEmbedOptionsState', value: function renderEmbedOptionsState() {
                  var _this5 = this;
                  var copyUrlClasses = 'btn-rounded btn-branded btn-copy-url';
                  copyUrlClasses += this.state.copySuccess ? ' copied' : '';
                  return (0, _preact.h)('div', {className: this.state.state === shareOverlayState.EmbedOptions ? 'overlay-screen active' : 'overlay-screen'}, (0, _preact.h)('div', {className: 'title'}, 'Embed options'), (0, _preact.h)('div', {className: 'link-options-container'}, (0, _preact.h)('div', {className: 'copy-url-row'}, (0, _preact.h)('div', {
                    className: 'form-group has-icon input-copy-url',
                    style: 'width: 350px;'
                  }, (0, _preact.h)('input', {
                    type: 'text', ref: function ref(c) {
                      return _this5._embedCodeInput = c;
                    }, placeholder: 'Share URL', className: 'form-control', value: this.getEmbedCode(), readOnly: true
                  }), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Embed})), (0, _preact.h)('a', {
                    className: copyUrlClasses,
                    onClick: function onClick() {
                      return _this5.copyUrl(_this5._embedCodeInput);
                    }
                  }, (0, _preact.h)(_icon2.default, {type: _icon.IconType.Copy}), (0, _preact.h)(_icon2.default, {type: _icon.IconType.Check}))), (0, _preact.h)('div', {className: 'video-start-options-row'}, (0, _preact.h)('div', {className: 'checkbox d-inline-block'}, (0, _preact.h)('input', {
                    type: 'checkbox',
                    id: 'start-from',
                    checked: this.state.startFrom,
                    onClick: function onClick() {
                      return _this5.toggleStartFrom();
                    }
                  }), (0, _preact.h)('label', {htmlFor: 'start-from'}, 'Start video at ')), (0, _preact.h)('div', {className: 'form-group d-inline-block'}, (0, _preact.h)('input', {
                    type: 'text',
                    className: 'form-control',
                    onChange: function onChange(e) {
                      return _this5.handleStartFromChange(e);
                    },
                    value: (0, _timeFormat.toHHMMSS)(this.state.startFromValue),
                    style: 'width: 72px;'
                  })))));
                }/**
                 * utility function to switch and render the right overlay state element based on the overlay state.
                 *
                 * @returns {React$Element} - current state element
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'renderStateContent', value: function renderStateContent() {
                  switch (this.state.state) {
                    case shareOverlayState.Main:
                      return this.renderMainState();
                    case shareOverlayState.LinkOptions:
                      return this.renderLinkOptionsState();
                    case shareOverlayState.EmbedOptions:
                      return this.renderEmbedOptionsState();
                    default:
                      return this.renderMainState();
                  }
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof ShareOverlay
                 */
              }, {
                key: 'render', value: function render(props) {
                  return (0, _preact.h)(_overlay2.default, {
                    open: true, onClose: function onClose() {
                      return props.onClose();
                    }, type: 'share'
                  }, this.renderStateContent());
                }
              }]);
              return ShareOverlay;
            }(_base2.default)) || _class);
            exports.default = ShareOverlay;
            /***/
          }, /* 154 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();// core components for the UI
// ui presets
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _preactI18n = __webpack_require__(9);
            var _redux = __webpack_require__(11);
            var _logger = __webpack_require__(24);
            var _store = __webpack_require__(155);
            var _store2 = _interopRequireDefault(_store);
            var _fr = __webpack_require__(156);
            var _fr2 = _interopRequireDefault(_fr);
            var _config = __webpack_require__(56);
            var _uiOptions = __webpack_require__(57);
            var _uiOptions2 = _interopRequireDefault(_uiOptions);
            var _componentConfig = __webpack_require__(58);
            var _componentConfig2 = _interopRequireDefault(_componentConfig);
            var _engineConnector = __webpack_require__(157);
            var _engineConnector2 = _interopRequireDefault(_engineConnector);
            var _shell = __webpack_require__(159);
            var _shell2 = _interopRequireDefault(_shell);
            var _videoPlayer = __webpack_require__(161);
            var _videoPlayer2 = _interopRequireDefault(_videoPlayer);
            var _playerGui = __webpack_require__(165);
            var _playerGui2 = _interopRequireDefault(_playerGui);
            var _ads = __webpack_require__(50);
            var _ads2 = _interopRequireDefault(_ads);
            var _playback = __webpack_require__(37);
            var _playback2 = _interopRequireDefault(_playback);
            var _live = __webpack_require__(52);
            var _live2 = _interopRequireDefault(_live);
            var _error = __webpack_require__(53);
            var _error2 = _interopRequireDefault(_error);
            __webpack_require__(4);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * API used for building UIs based on state conditions
             *
             * @class UIManager
             */var UIManager = function () {
              /**
               * Creates an instance of UIManager.
               * @param {Player} player - player instance
               * @param {UIOptions} options - UI options
               * @memberof UIManager
               */function UIManager(player, options) {
                _classCallCheck(this, UIManager);
                if (options.logLevel && this.LogLevel[options.logLevel]) {
                  (0, _logger.setLogLevel)(this.LogLevel[options.logLevel]);
                }
                this.player = player;
                this.config = options;
                this.targetId = options.targetId;
                this.store = (0, _redux.createStore)(_store2.default, window.devToolsExtension && window.devToolsExtension({
                  name: 'playkit #' + this.targetId,
                  instanceId: this.targetId
                }));
              }

              /**
               * sets the player and ui config in the store
               *
               * @param {UIComponentConfig} componentConfig - component config
               * @returns {void}
               * @memberof UIManager
               */_createClass(UIManager, [{
                key: 'setComponentConfig', value: function setComponentConfig(componentConfig) {
                  this.store.dispatch(_config.actions.updateComponentConfig(componentConfig.component, componentConfig.config));
                }/**
                 * build default UIs
                 *
                 * @returns {void}
                 * @memberof UIManager
                 */
              }, {
                key: 'buildDefaultUI', value: function buildDefaultUI() {
                  var uis = [{
                    template: function template(props) {
                      return (0, _error2.default)(props);
                    }, condition: function condition(state) {
                      return state.engine.hasError;
                    }
                  }, {
                    template: function template(props) {
                      return (0, _ads2.default)(props);
                    }, condition: function condition(state) {
                      return state.engine.adBreak;
                    }
                  }, {
                    template: function template(props) {
                      return (0, _live2.default)(props);
                    }, condition: function condition(state) {
                      return state.engine.isLive;
                    }
                  }, {
                    template: function template(props) {
                      return (0, _playback2.default)(props);
                    }
                  }];
                  this._buildUI(uis);
                }/**
                 * build custom UIs
                 *
                 * @param {Array<UIPreset>} uis - UIs array with conditions based on state
                 * @returns {void}
                 * @memberof UIManager
                 */
              }, {
                key: 'buildCustomUI', value: function buildCustomUI(uis) {
                  if (uis.length > 0) {
                    this._buildUI(uis);
                  } else {
                    var fallbackUIs = [{
                      template: function template(props) {
                        return (0, _playback2.default)(props);
                      }
                    }];
                    this._buildUI(fallbackUIs);
                  }
                }/**
                 * build the UI and render to targetId configured in player config
                 *
                 * @param {Array<UIPreset>} [uis] - UI array with conditions
                 * @returns {void}
                 * @memberof UIManager
                 */
              }, {
                key: '_buildUI', value: function _buildUI(uis) {
                  if (!this.player) return;// define the store and devtools for redux
                  this.store.dispatch(_config.actions.updateConfig(_extends({targetId: this.targetId}, this.player.config)));
                  var container = document.getElementById(this.targetId);// i18n, redux and initial player-to-store connector setup
                  var template = (0, _preact.h)(_preactRedux.Provider, {store: this.store}, (0, _preact.h)(_preactI18n.IntlProvider, {definition: _fr2.default}, (0, _preact.h)(_shell2.default, {player: this.player}, (0, _preact.h)(_engineConnector2.default, {player: this.player}), (0, _preact.h)(_videoPlayer2.default, {player: this.player}), (0, _preact.h)(_playerGui2.default, {
                    uis: uis,
                    player: this.player,
                    playerContainer: container
                  }))));// render the player
                  (0, _preact.render)(template, container);
                }/**
                 * Get the player log level.
                 * @returns {Object} - The log levels of the player.
                 * @public
                 */
              }, {
                key: 'getLogLevel', /**
                 * get the log level
                 * @param {?string} name - the logger name
                 * @returns {Object} - the log level
                 */value: function getLogLevel(name) {
                  return (0, _logger.getLogLevel)(name);
                }/**
                 * sets the logger level
                 * @param {Object} level - the log level
                 * @param {?string} name - the logger name
                 * @returns {void}
                 */
              }, {
                key: 'setLogLevel', value: function setLogLevel(level, name) {
                  (0, _logger.setLogLevel)(level, name);
                }
              }, {
                key: 'LogLevel', get: function get() {
                  return _logger.LogLevel;
                }
              }]);
              return UIManager;
            }();
            exports.default = UIManager;
            /***/
          }, /* 155 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _redux = __webpack_require__(11);
            var _config = __webpack_require__(56);
            var _config2 = _interopRequireDefault(_config);
            var _engine = __webpack_require__(36);
            var _engine2 = _interopRequireDefault(_engine);
            var _shell = __webpack_require__(10);
            var _shell2 = _interopRequireDefault(_shell);
            var _playPause = __webpack_require__(23);
            var _playPause2 = _interopRequireDefault(_playPause);
            var _seekbar = __webpack_require__(14);
            var _seekbar2 = _interopRequireDefault(_seekbar);
            var _volume = __webpack_require__(27);
            var _volume2 = _interopRequireDefault(_volume);
            var _fullscreen = __webpack_require__(49);
            var _fullscreen2 = _interopRequireDefault(_fullscreen);
            var _loading = __webpack_require__(44);
            var _loading2 = _interopRequireDefault(_loading);
            var _share = __webpack_require__(55);
            var _share2 = _interopRequireDefault(_share);
            var _cvaa = __webpack_require__(31);
            var _cvaa2 = _interopRequireDefault(_cvaa);
            var _settings = __webpack_require__(45);
            var _settings2 = _interopRequireDefault(_settings);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            var reducer = (0, _redux.combineReducers)({
              config: _config2.default,
              engine: _engine2.default,
              shell: _shell2.default,
              seekbar: _seekbar2.default,
              volume: _volume2.default,
              fullscreen: _fullscreen2.default,
              loading: _loading2.default,
              playPause: _playPause2.default,
              share: _share2.default,
              cvaa: _cvaa2.default,
              settings: _settings2.default
            });
            exports.default = reducer;
            /***/
          }, /* 156 *//***/function (module, exports) {
            module.exports = {
              "core": {"disable": "Disable", "auto": "Auto", "close": "Close", "retry": "Retry"},
              "controls": {
                "play": "Play",
                "pause": "Pause",
                "share": "Share",
                "language": "Language",
                "settings": "Settings",
                "fullscreen": "Fullscreen",
                "rewind": "Rewind"
              },
              "settings": {"quality": "Quality", "speed": "Speed"},
              "language": {
                "audio": "Audio",
                "captions": "Captions",
                "advanced_captions_settings": "Advanced captions settings"
              },
              "share": {"share_title": "Share", "link_options": "Link options"},
              "error": {"default_error": "Something went wrong", "default_session_text": "Session ID "}
            };
            /***/
          }, /* 157 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _engineConnector = __webpack_require__(158);
            var _engineConnector2 = _interopRequireDefault(_engineConnector);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _engineConnector2.default;
            /***/
          }, /* 158 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _engine = __webpack_require__(36);
            var _engine2 = _interopRequireDefault(_engine);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * EngineConnector component
             *
             * @class EngineConnector
             * @example <EngineConnector player={this.player} />
             * @extends {BaseComponent}
             */var EngineConnector = (_dec = (0, _preactRedux.connect)(_engine2.default, (0, _bindActions.bindActions)(_engine.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(EngineConnector, _BaseComponent);

              /**
               * Creates an instance of EngineConnector.
               * @param {Object} obj obj
               * @memberof EngineConnector
               */function EngineConnector(obj) {
                _classCallCheck(this, EngineConnector);
                return _possibleConstructorReturn(this, (EngineConnector.__proto__ || Object.getPrototypeOf(EngineConnector)).call(this, {
                  name: 'EngineConnector',
                  player: obj.player
                }));
              }

              /**
               * after component mounted, set event listeners and update redux store
               *
               * @returns {void}
               * @memberof EngineConnector
               */_createClass(EngineConnector, [{
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  var TrackType = this.player.Track;
                  this.player.addEventListener(this.player.Event.CHANGE_SOURCE_STARTED, function () {
                    _this2.props.updateAdBreak(false);
                    _this2.props.updateAdIsPlaying(false);
                    _this2.props.updateIsPlaying(false);
                  });
                  this.player.addEventListener(this.player.Event.CHANGE_SOURCE_ENDED, function () {
                    _this2.props.updatePlayerPoster(_this2.player.poster);
                  });
                  this.player.addEventListener(this.player.Event.PLAYER_STATE_CHANGED, function (e) {
                    _this2.props.updatePlayerState(e.payload.oldState.type, e.payload.newState.type);
                  });
                  this.player.addEventListener(this.player.Event.TIME_UPDATE, function () {
                    _this2.props.updateCurrentTime(_this2.player.currentTime);
                  });
                  this.player.addEventListener(this.player.Event.DURATION_CHANGE, function () {
                    _this2.props.updateDuration(_this2.player.duration);
                  });
                  this.player.addEventListener(this.player.Event.LOADED_DATA, function () {
                    _this2.props.updateDuration(_this2.player.duration);
                  });
                  this.player.addEventListener(this.player.Event.LOADED_METADATA, function () {
                    _this2.props.updateMuted(_this2.player.muted);
                    _this2.props.updateMetadataLoadingStatus(true);
                    _this2.props.updateIsLive(_this2.player.isLive());
                    _this2.props.updateIsDvr(_this2.player.isDvr());
                    _this2.props.updatePlayerPoster(_this2.player.poster);
                  });
                  this.player.addEventListener(this.player.Event.VOLUME_CHANGE, function () {
                    _this2.props.updateVolume(_this2.player.volume);
                  });
                  this.player.addEventListener(this.player.Event.MUTE_CHANGE, function () {
                    _this2.props.updateMuted(_this2.player.muted);
                  });
                  this.player.addEventListener(this.player.Event.PLAY, function () {
                    _this2.props.updateIsPlaying(true);
                    if (_this2.props.engine.isEnded) {
                      _this2.props.updateIsEnded(false);
                    }
                  });
                  this.player.addEventListener(this.player.Event.PAUSE, function () {
                    _this2.props.updateIsPlaying(false);
                  });
                  this.player.addEventListener(this.player.Event.ENDED, function () {
                    _this2.props.updateIsEnded(true);
                  });
                  this.player.addEventListener(this.player.Event.TRACKS_CHANGED, function () {
                    var audioTracks = _this2.player.getTracks(TrackType.AUDIO);
                    var videoTracks = _this2.player.getTracks(TrackType.VIDEO);
                    var textTracks = _this2.player.getTracks(TrackType.TEXT);
                    _this2.props.updateAudioTracks(audioTracks);
                    _this2.props.updateVideoTracks(videoTracks);
                    _this2.props.updateTextTracks(textTracks);
                  });
                  this.player.addEventListener(this.player.Event.TEXT_TRACK_CHANGED, function () {
                    var tracks = _this2.player.getTracks(TrackType.TEXT);
                    _this2.props.updateTextTracks(tracks);
                  });
                  this.player.addEventListener(this.player.Event.AUDIO_TRACK_CHANGED, function () {
                    var tracks = _this2.player.getTracks(TrackType.AUDIO);
                    _this2.props.updateAudioTracks(tracks);
                  });
                  this.player.addEventListener(this.player.Event.VIDEO_TRACK_CHANGED, function () {
                    var tracks = _this2.player.getTracks(TrackType.VIDEO);
                    _this2.props.updateVideoTracks(tracks);
                  });
                  this.player.addEventListener(this.player.Event.AD_BREAK_START, function () {
                    _this2.props.updateAdBreak(true);
                  });
                  this.player.addEventListener(this.player.Event.AD_BREAK_END, function () {
                    _this2.props.updateAdBreak(false);
                  });
                  this.player.addEventListener(this.player.Event.ALL_ADS_COMPLETED, function () {
                    _this2.props.updateAdBreak(false);
                  });
                  this.player.addEventListener(this.player.Event.AD_PROGRESS, function (e) {
                    var currentTime = e.payload.adProgress.currentTime;
                    var duration = e.payload.adProgress.duration;
                    _this2.props.updateAdBreakProgress(currentTime, duration);
                  });
                  this.player.addEventListener(this.player.Event.AD_COMPLETED, function () {
                    _this2.props.updateAdBreakCompleted();
                  });
                  this.player.addEventListener(this.player.Event.AD_STARTED, function () {
                    _this2.props.updateAdIsPlaying(true);
                  });
                  this.player.addEventListener(this.player.Event.AD_RESUMED, function () {
                    _this2.props.updateAdIsPlaying(true);
                  });
                  this.player.addEventListener(this.player.Event.AD_PAUSED, function () {
                    _this2.props.updateAdIsPlaying(false);
                  });
                  this.player.addEventListener(this.player.Event.AD_LOADED, function (e) {
                    _this2.props.updateAdClickUrl(e.payload.ad.g.clickThroughUrl);
                    _this2.props.updateAdSkipTimeOffset(e.payload.ad.getSkipTimeOffset());
                    _this2.props.updateAdSkippableState(e.payload.ad.getAdSkippableState());
                  });
                  this.player.addEventListener(this.player.Event.ERROR, function (e) {
                    if (e.payload && e.payload.severity === 2) {
                      _this2.props.updateHasError(e.payload);
                    }
                  });
                }/**
                 * component shouldn't update the dom if props or internal state changed
                 *
                 * @returns {boolean} - should component update on changes or not
                 * @memberof EngineConnector
                 */
              }, {
                key: 'shouldComponentUpdate', value: function shouldComponentUpdate() {
                  return false;
                }/**
                 * render component
                 *
                 * @returns {React$Element} - component element
                 * @memberof EngineConnector
                 */
              }, {
                key: 'render', value: function render() {
                  return (0, _preact.h)('span', null);
                }
              }]);
              return EngineConnector;
            }(_base2.default)) || _class);
            exports.default = EngineConnector;
            /***/
          }, /* 159 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _shell = __webpack_require__(160);
            var _shell2 = _interopRequireDefault(_shell);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _shell2.default;
            /***/
          }, /* 160 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _style = __webpack_require__(4);
            var _style2 = _interopRequireDefault(_style);
            var _preact = __webpack_require__(0);
            var _base = __webpack_require__(2);
            var _base2 = _interopRequireDefault(_base);
            var _preactRedux = __webpack_require__(1);
            var _bindActions = __webpack_require__(3);
            var _shell = __webpack_require__(10);
            var _keyMap = __webpack_require__(8);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                config: state.config.ui.shell,
                metadataLoaded: state.engine.metadataLoaded,
                currentState: state.engine.playerState.currentState,
                playerClasses: state.shell.playerClasses,
                isMobile: state.shell.isMobile,
                playerWidth: state.shell.playerWidth,
                playerHeight: state.shell.playerHeight,
                playerHover: state.shell.playerHover,
                playerNav: state.shell.playerNav,
                seekbarDraggingActive: state.seekbar.draggingActive,
                adBreak: state.engine.adBreak
              };
            };
            /**
             * The default control bar hover time rendering timeout value
             * @type {number}
             * @const
             */var DEFAULT_CONTROL_BAR_HOVER_TIME = 3000;
            /**
             * Shell component
             *
             * @class Shell
             * @example <Shell player={this.player}>...</Shell>
             * @extends {BaseComponent}
             */var Shell = (_dec = (0, _preactRedux.connect)(mapStateToProps, (0, _bindActions.bindActions)(_shell.actions)), _dec(_class = function (_BaseComponent) {
              _inherits(Shell, _BaseComponent);

              /**
               * Creates an instance of Shell.
               * @param {Object} obj obj
               * @memberof Shell
               */function Shell(obj) {
                _classCallCheck(this, Shell);
                var _this = _possibleConstructorReturn(this, (Shell.__proto__ || Object.getPrototypeOf(Shell)).call(this, {
                  name: 'Shell',
                  player: obj.player
                }));
                _this.fallbackToMutedAutoPlayMode = false;
                _this.player.addEventListener(_this.player.Event.FALLBACK_TO_MUTED_AUTOPLAY, function () {
                  _this.fallbackToMutedAutoPlayMode = true;
                });
                return _this;
              }

              /**
               * on mouse over, add hover class (shows the player ui) and timeout of 3 seconds bt default or what pass as prop configuration to component
               *
               * @returns {void}
               * @memberof Shell
               */_createClass(Shell, [{
                key: 'onMouseOver', value: function onMouseOver() {
                  if (this.state.nav) {
                    this.setState({nav: false});
                    this.props.updatePlayerNavState(false);
                  }
                  this._showAndHideControlBar();
                }/**
                 * on mouse leave, remove the hover class (hide the player gui)
                 *
                 * @returns {void}
                 * @memberof Shell
                 */
              }, {
                key: 'onMouseLeave', value: function onMouseLeave() {
                  if (this.state.hover) {
                    this.setState({hover: false});
                    this.props.updatePlayerHoverState(false);
                  }
                }/**
                 * if ui hidden and mouse move, show the ui by adding the hover class
                 *
                 * @returns {void}
                 * @memberof Shell
                 */
              }, {
                key: 'onMouseMove', value: function onMouseMove() {
                  if (!this.state.hover) {
                    this.setState({hover: true});
                    this.props.updatePlayerHoverState(true);
                  }
                }/**
                 * if the ui is in fallback to muted autoplay mode, unmute the player on any click
                 *
                 * @returns {void}
                 * @memberof Shell
                 */
              }, {
                key: 'onClick', value: function onClick() {
                  if (this.fallbackToMutedAutoPlayMode) {
                    this.player.muted = false;
                    this.fallbackToMutedAutoPlayMode = false;
                  }
                }/**
                 * key down handler
                 *
                 * @param {KeyboardEvent} e - event object
                 * @returns {void}
                 */
              }, {
                key: 'onKeyDown', value: function onKeyDown(e) {
                  if (!this.state.nav && e.keyCode === _keyMap.KeyMap.TAB) {
                    this.setState({nav: true});
                    this.props.updatePlayerNavState(true);
                  }
                }/**
                 * after component mounted, update the isMobile indication in the store state,
                 * add event listener to get the player width and update these on resize as well.
                 * also, update document width initially and on resize.
                 *
                 * @returns {void}
                 * @memberof Shell
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  var _this2 = this;
                  this.props.updateIsMobile(!!this.player.env.device.type || this.props.config.forceTouchUI);
                  if (document.body) {
                    this.props.updateDocumentWidth(document.body.clientWidth);
                  }
                  this.player.addEventListener(this.player.Event.LOADED_METADATA, function () {
                    _this2.props.updatePlayerWidth(_this2.player.getView().parentElement.clientWidth);
                  });
                  window.addEventListener('resize', function () {
                    _this2.props.updatePlayerWidth(_this2.player.getView().parentElement.clientWidth);
                    if (document.body) {
                      _this2.props.updateDocumentWidth(document.body.clientWidth);
                    }
                  });
                  if (this.player.env.device.type) {
                    this.props.updatePlayerHoverState(true);
                  }
                  this._showAndHideControlBar();
                }/**
                 * show the control bar for few seconds and then hide it
                 * @returns {void}
                 * @memberof Shell
                 */
              }, {
                key: '_showAndHideControlBar', value: function _showAndHideControlBar() {
                  var _this3 = this;
                  if (!this.state.hover) {
                    this.props.updatePlayerHoverState(true);
                    this.setState({hover: true});
                  }
                  if (this.hoverTimeout) {
                    clearTimeout(this.hoverTimeout);
                  }
                  this.hoverTimeout = setTimeout(function () {
                    if (!_this3.props.seekbarDraggingActive) {
                      _this3.props.updatePlayerHoverState(false);
                      _this3.setState({hover: false});
                    }
                  }, this.props.hoverTimeout || DEFAULT_CONTROL_BAR_HOVER_TIME);
                }/**
                 * render component
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof Shell
                 */
              }, {
                key: 'render', value: function render(props) {
                  var _this4 = this;
                  var playerClasses = [_style2.default.player, _style2.default.skinDefault];
                  playerClasses.push(props.playerClasses);
                  if (this.props.isMobile) playerClasses.push(_style2.default.touch);
                  if (this.props.playerNav) playerClasses.push(_style2.default.nav);
                  if (this.props.playerHover || this.props.playerNav) playerClasses.push(_style2.default.hover);
                  if (this.props.metadataLoaded) playerClasses.push(_style2.default.metadataLoaded);
                  if (this.props.adBreak) playerClasses.push(_style2.default.adBreak);
                  if (this.props.metadataLoaded) playerClasses.push(_style2.default['state-' + this.props.currentState]);
                  if (this.props.playerWidth <= 480) playerClasses.push(_style2.default.sizeSm); else if (this.props.playerWidth <= 768) playerClasses.push(_style2.default.sizeMd);
                  if (this.props.seekbarDraggingActive) playerClasses.push(_style2.default.hover);
                  playerClasses = playerClasses.join(' ');
                  return (0, _preact.h)('div', {
                    tabIndex: '0', className: playerClasses, onClick: function onClick() {
                      return _this4.onClick();
                    }, onMouseOver: function onMouseOver() {
                      return _this4.onMouseOver();
                    }, onMouseMove: function onMouseMove() {
                      return _this4.onMouseMove();
                    }, onMouseLeave: function onMouseLeave() {
                      return _this4.onMouseLeave();
                    }, onKeyDown: function onKeyDown(e) {
                      return _this4.onKeyDown(e);
                    }
                  }, props.children);
                }
              }]);
              return Shell;
            }(_base2.default)) || _class);
            exports.default = Shell;
            /***/
          }, /* 161 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.default = undefined;
            var _videoPlayer = __webpack_require__(162);
            var _videoPlayer2 = _interopRequireDefault(_videoPlayer);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _videoPlayer2.default;
            /***/
          }, /* 162 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _videoPlayer = __webpack_require__(163);
            var _videoPlayer2 = _interopRequireDefault(_videoPlayer);
            var _preact = __webpack_require__(0);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * VideoPlayer component
             *
             * @class VideoPlayer
             * @example <VideoPlayer>...</VideoPlayer>
             * @extends {Component}
             */var VideoPlayer = function (_Component) {
              _inherits(VideoPlayer, _Component);

              function VideoPlayer() {
                _classCallCheck(this, VideoPlayer);
                return _possibleConstructorReturn(this, (VideoPlayer.__proto__ || Object.getPrototypeOf(VideoPlayer)).apply(this, arguments));
              }

              _createClass(VideoPlayer, [{
                key: 'shouldComponentUpdate', /**
                 * this component should not render itself when player object changes.
                 *
                 * @returns {void}
                 * @memberof VideoPlayer
                 */value: function shouldComponentUpdate() {
                  return false;
                }/**
                 * appending the player view to component after the component was mounted
                 *
                 * @returns {void}
                 * @memberof VideoPlayer
                 */
              }, {
                key: 'componentDidMount', value: function componentDidMount() {
                  this._el.appendChild(this.props.player.getView());
                }/**
                 * render component
                 *
                 * @returns {React$Element} - component element
                 * @memberof VideoPlayer
                 */
              }, {
                key: 'render', value: function render() {
                  var _this2 = this;
                  return (0, _preact.h)('div', {
                    className: _videoPlayer2.default.videoPlayer, ref: function ref(c) {
                      return _this2._el = c;
                    }
                  });
                }
              }]);
              return VideoPlayer;
            }(_preact.Component);
            exports.default = VideoPlayer;
            /***/
          }, /* 163 *//***/function (module, exports, __webpack_require__) {// style-loader: Adds some css to the DOM by adding a <style> tag
// load the styles
            var content = __webpack_require__(164);
            if (typeof content === 'string') content = [[module.i, content, '']];// Prepare cssTransformation
            var transform;
            var options = {};
            options.transform = transform;// add the styles to the DOM
            var update = __webpack_require__(7)(content, options);
            if (content.locals) module.exports = content.locals;// Hot Module Replacement
            if (false) {// When the styles change, update the <style> tags
              if (!content.locals) {
                module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_video-player.scss", function () {
                  var newContent = require("!!../../../node_modules/css-loader/index.js??ref--2-1!../../../node_modules/sass-loader/lib/loader.js!./_video-player.scss");
                  if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
                  update(newContent);
                });
              }// When the module is disposed, remove the <style> tags
              module.hot.dispose(function () {
                update();
              });
            }
            /***/
          }, /* 164 *//***/function (module, exports, __webpack_require__) {
            exports = module.exports = __webpack_require__(6)(undefined);// imports
// module
            exports.push([module.i, ".playkit-video-player {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: black; }\n", ""]);// exports
            exports.locals = {"video-player": "playkit-video-player", "videoPlayer": "playkit-video-player"};
            /***/
          }, /* 165 *//***/function (module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _dec, _class;
            var _preact = __webpack_require__(0);
            var _preactRedux = __webpack_require__(1);

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /**
             * mapping state to props
             * @param {*} state - redux store state
             * @returns {Object} - mapped state to this component
             */var mapStateToProps = function mapStateToProps(state) {
              return {
                state: {
                  shell: state.shell,
                  engine: {adBreak: state.engine.adBreak, isLive: state.engine.isLive, hasError: state.engine.hasError}
                }, config: state.config
              };
            };
            /**
             * Player GUI component
             *
             * @class PlayerGUI
             * @extends {Component}
             */var PlayerGUI = (_dec = (0, _preactRedux.connect)(mapStateToProps), _dec(_class = function (_Component) {
              _inherits(PlayerGUI, _Component);

              function PlayerGUI() {
                _classCallCheck(this, PlayerGUI);
                return _possibleConstructorReturn(this, (PlayerGUI.__proto__ || Object.getPrototypeOf(PlayerGUI)).apply(this, arguments));
              }

              _createClass(PlayerGUI, [{
                key: 'getMatchedUI', /**
                 * get the single matched UI to render based on the UIs and it's conditions
                 *
                 * @param {Array<any>} uis - UIs array with conditions
                 * @param {Object} state - state to be used in the condition check
                 * @returns {*} - matched UI
                 * @memberof PlayerGUI
                 */value: function getMatchedUI(uis, state) {
                  var matchedUI = void 0;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;
                  try {
                    for (var _iterator = uis[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var ui = _step.value;
                      if (typeof ui.condition === 'undefined' || ui.condition(state)) {
                        matchedUI = ui;
                        break;
                      }
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  return matchedUI;
                }/**
                 * render component based on the matched UI.
                 * if no matched UI found, it will choose the first UI configured in the UI array
                 *
                 * @param {*} props - component props
                 * @returns {React$Element} - component element
                 * @memberof PlayerGUI
                 */
              }, {
                key: 'render', value: function render(props) {
                  var uiToRender = void 0;
                  if (this.props.uis.length > 0) {
                    uiToRender = this.getMatchedUI(props.uis, props.state);
                    return uiToRender ? uiToRender.template(props) : this.props.uis[0].template(props);
                  } else {
                    return undefined;
                  }
                }
              }]);
              return PlayerGUI;
            }(_preact.Component)) || _class);
            exports.default = PlayerGUI;
            /***/
          }]/******/));
        });
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(128)(module)))

      /***/
    }),
    /* 93 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";


      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      var _logger = __webpack_require__(32);

      var _logger2 = _interopRequireDefault(_logger);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      if (!window._babelPolyfill) {
        __webpack_require__(134);
      }

      var PolyfillManager = function () {
        function PolyfillManager() {
          _classCallCheck(this, PolyfillManager);
        }

        _createClass(PolyfillManager, null, [{
          key: 'register',
          value: function register(polyfill) {
            PolyfillManager._logger.debug('Register <' + polyfill.id + '> polyfill');
            PolyfillManager._polyfills.push(polyfill);
          }
        }, {
          key: 'installAll',
          value: function installAll() {
            PolyfillManager._logger.debug('Installing all polyfills');
            for (var i = 0; i < PolyfillManager._polyfills.length; i++) {
              PolyfillManager._polyfills[i].install();
            }
          }
        }]);

        return PolyfillManager;
      }();

      PolyfillManager._polyfills = [];
      PolyfillManager._logger = (0, _logger2.default)('PolyfillManager');
      exports.default = PolyfillManager;

      /***/
    }),
    /* 94 */
    /***/ (function (module, exports, __webpack_require__) {

      module.exports = !__webpack_require__(6) && !__webpack_require__(3)(function () {
        return Object.defineProperty(__webpack_require__(66)('div'), 'a', {
          get: function () {
            return 7;
          }
        }).a != 7;
      });


      /***/
    }),
    /* 95 */
    /***/ (function (module, exports, __webpack_require__) {

      exports.f = __webpack_require__(5);


      /***/
    }),
    /* 96 */
    /***/ (function (module, exports, __webpack_require__) {

      var has = __webpack_require__(12);
      var toIObject = __webpack_require__(16);
      var arrayIndexOf = __webpack_require__(52)(false);
      var IE_PROTO = __webpack_require__(68)('IE_PROTO');

      module.exports = function (object, names) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
        // Don't enum bug & hidden keys
        while (names.length > i) if (has(O, key = names[i++])) {
          ~arrayIndexOf(result, key) || result.push(key);
        }
        return result;
      };


      /***/
    }),
    /* 97 */
    /***/ (function (module, exports, __webpack_require__) {

      var dP = __webpack_require__(7);
      var anObject = __webpack_require__(1);
      var getKeys = __webpack_require__(36);

      module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;
        while (length > i) dP.f(O, P = keys[i++], Properties[P]);
        return O;
      };


      /***/
    }),
    /* 98 */
    /***/ (function (module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
      var toIObject = __webpack_require__(16);
      var gOPN = __webpack_require__(39).f;
      var toString = {}.toString;

      var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
        ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function (it) {
        try {
          return gOPN(it);
        } catch (e) {
          return windowNames.slice();
        }
      };

      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
      };


      /***/
    }),
    /* 99 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 19.1.2.1 Object.assign(target, source, ...)
      var getKeys = __webpack_require__(36);
      var gOPS = __webpack_require__(53);
      var pIE = __webpack_require__(49);
      var toObject = __webpack_require__(9);
      var IObject = __webpack_require__(48);
      var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
      module.exports = !$assign || __webpack_require__(3)(function () {
        var A = {};
        var B = {};
        // eslint-disable-next-line no-undef
        var S = Symbol();
        var K = 'abcdefghijklmnopqrst';
        A[S] = 7;
        K.split('').forEach(function (k) {
          B[k] = k;
        });
        return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
      }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var aLen = arguments.length;
        var index = 1;
        var getSymbols = gOPS.f;
        var isEnum = pIE.f;
        while (aLen > index) {
          var S = IObject(arguments[index++]);
          var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
          var length = keys.length;
          var j = 0;
          var key;
          while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
        }
        return T;
      } : $assign;


      /***/
    }),
    /* 100 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var aFunction = __webpack_require__(10);
      var isObject = __webpack_require__(4);
      var invoke = __webpack_require__(101);
      var arraySlice = [].slice;
      var factories = {};

      var construct = function (F, len, args) {
        if (!(len in factories)) {
          for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
          // eslint-disable-next-line no-new-func
          factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
        }
        return factories[len](F, args);
      };

      module.exports = Function.bind || function bind(that /* , ...args */) {
        var fn = aFunction(this);
        var partArgs = arraySlice.call(arguments, 1);
        var bound = function (/* args... */) {
          var args = partArgs.concat(arraySlice.call(arguments));
          return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
        };
        if (isObject(fn.prototype)) bound.prototype = fn.prototype;
        return bound;
      };


      /***/
    }),
    /* 101 */
    /***/ (function (module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
      module.exports = function (fn, args, that) {
        var un = that === undefined;
        switch (args.length) {
          case 0:
            return un ? fn()
              : fn.call(that);
          case 1:
            return un ? fn(args[0])
              : fn.call(that, args[0]);
          case 2:
            return un ? fn(args[0], args[1])
              : fn.call(that, args[0], args[1]);
          case 3:
            return un ? fn(args[0], args[1], args[2])
              : fn.call(that, args[0], args[1], args[2]);
          case 4:
            return un ? fn(args[0], args[1], args[2], args[3])
              : fn.call(that, args[0], args[1], args[2], args[3]);
        }
        return fn.apply(that, args);
      };


      /***/
    }),
    /* 102 */
    /***/ (function (module, exports, __webpack_require__) {

      var $parseInt = __webpack_require__(2).parseInt;
      var $trim = __webpack_require__(45).trim;
      var ws = __webpack_require__(72);
      var hex = /^[-+]?0[xX]/;

      module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
        var string = $trim(String(str), 3);
        return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
      } : $parseInt;


      /***/
    }),
    /* 103 */
    /***/ (function (module, exports, __webpack_require__) {

      var $parseFloat = __webpack_require__(2).parseFloat;
      var $trim = __webpack_require__(45).trim;

      module.exports = 1 / $parseFloat(__webpack_require__(72) + '-0') !== -Infinity ? function parseFloat(str) {
        var string = $trim(String(str), 3);
        var result = $parseFloat(string);
        return result === 0 && string.charAt(0) == '-' ? -0 : result;
      } : $parseFloat;


      /***/
    }),
    /* 104 */
    /***/ (function (module, exports, __webpack_require__) {

      var cof = __webpack_require__(20);
      module.exports = function (it, msg) {
        if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
        return +it;
      };


      /***/
    }),
    /* 105 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
      var isObject = __webpack_require__(4);
      var floor = Math.floor;
      module.exports = function isInteger(it) {
        return !isObject(it) && isFinite(it) && floor(it) === it;
      };


      /***/
    }),
    /* 106 */
    /***/ (function (module, exports) {

// 20.2.2.20 Math.log1p(x)
      module.exports = Math.log1p || function log1p(x) {
        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
      };


      /***/
    }),
    /* 107 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
      var sign = __webpack_require__(75);
      var pow = Math.pow;
      var EPSILON = pow(2, -52);
      var EPSILON32 = pow(2, -23);
      var MAX32 = pow(2, 127) * (2 - EPSILON32);
      var MIN32 = pow(2, -126);

      var roundTiesToEven = function (n) {
        return n + 1 / EPSILON - 1 / EPSILON;
      };

      module.exports = Math.fround || function fround(x) {
        var $abs = Math.abs(x);
        var $sign = sign(x);
        var a, result;
        if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON) * $abs;
        result = a - (a - $abs);
        // eslint-disable-next-line no-self-compare
        if (result > MAX32 || result != result) return $sign * Infinity;
        return $sign * result;
      };


      /***/
    }),
    /* 108 */
    /***/ (function (module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
      var anObject = __webpack_require__(1);
      module.exports = function (iterator, fn, value, entries) {
        try {
          return entries ? fn(anObject(value)[0], value[1]) : fn(value);
          // 7.4.6 IteratorClose(iterator, completion)
        } catch (e) {
          var ret = iterator['return'];
          if (ret !== undefined) anObject(ret.call(iterator));
          throw e;
        }
      };


      /***/
    }),
    /* 109 */
    /***/ (function (module, exports, __webpack_require__) {

      var aFunction = __webpack_require__(10);
      var toObject = __webpack_require__(9);
      var IObject = __webpack_require__(48);
      var toLength = __webpack_require__(8);

      module.exports = function (that, callbackfn, aLen, memo, isRight) {
        aFunction(callbackfn);
        var O = toObject(that);
        var self = IObject(O);
        var length = toLength(O.length);
        var index = isRight ? length - 1 : 0;
        var i = isRight ? -1 : 1;
        if (aLen < 2) for (; ;) {
          if (index in self) {
            memo = self[index];
            index += i;
            break;
          }
          index += i;
          if (isRight ? index < 0 : length <= index) {
            throw TypeError('Reduce of empty array with no initial value');
          }
        }
        for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
          memo = callbackfn(memo, self[index], index, O);
        }
        return memo;
      };


      /***/
    }),
    /* 110 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

      var toObject = __webpack_require__(9);
      var toAbsoluteIndex = __webpack_require__(37);
      var toLength = __webpack_require__(8);

      module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : undefined;
        var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
        var inc = 1;
        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }
        while (count-- > 0) {
          if (from in O) O[to] = O[from];
          else delete O[to];
          to += inc;
          from += inc;
        }
        return O;
      };


      /***/
    }),
    /* 111 */
    /***/ (function (module, exports) {

      module.exports = function (done, value) {
        return {value: value, done: !!done};
      };


      /***/
    }),
    /* 112 */
    /***/ (function (module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
      if (__webpack_require__(6) && /./g.flags != 'g') __webpack_require__(7).f(RegExp.prototype, 'flags', {
        configurable: true,
        get: __webpack_require__(57)
      });


      /***/
    }),
    /* 113 */
    /***/ (function (module, exports) {

      module.exports = function (exec) {
        try {
          return {e: false, v: exec()};
        } catch (e) {
          return {e: true, v: e};
        }
      };


      /***/
    }),
    /* 114 */
    /***/ (function (module, exports, __webpack_require__) {

      var anObject = __webpack_require__(1);
      var isObject = __webpack_require__(4);
      var newPromiseCapability = __webpack_require__(90);

      module.exports = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };


      /***/
    }),
    /* 115 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var strong = __webpack_require__(116);
      var validate = __webpack_require__(47);
      var MAP = 'Map';

// 23.1 Map Objects
      module.exports = __webpack_require__(60)(MAP, function (get) {
        return function Map() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.1.3.6 Map.prototype.get(key)
        get: function get(key) {
          var entry = strong.getEntry(validate(this, MAP), key);
          return entry && entry.v;
        },
        // 23.1.3.9 Map.prototype.set(key, value)
        set: function set(key, value) {
          return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
        }
      }, strong, true);


      /***/
    }),
    /* 116 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var dP = __webpack_require__(7).f;
      var create = __webpack_require__(38);
      var redefineAll = __webpack_require__(43);
      var ctx = __webpack_require__(19);
      var anInstance = __webpack_require__(41);
      var forOf = __webpack_require__(42);
      var $iterDefine = __webpack_require__(78);
      var step = __webpack_require__(111);
      var setSpecies = __webpack_require__(40);
      var DESCRIPTORS = __webpack_require__(6);
      var fastKey = __webpack_require__(30).fastKey;
      var validate = __webpack_require__(47);
      var SIZE = DESCRIPTORS ? '_s' : 'size';

      var getEntry = function (that, key) {
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return that._i[index];
        // frozen object case
        for (entry = that._f; entry; entry = entry.n) {
          if (entry.k == key) return entry;
        }
      };

      module.exports = {
        getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME;         // collection type
            that._i = create(null); // index
            that._f = undefined;    // first entry
            that._l = undefined;    // last entry
            that[SIZE] = 0;         // size
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                entry.r = true;
                if (entry.p) entry.p = entry.p.n = undefined;
                delete data[entry.i];
              }
              that._f = that._l = undefined;
              that[SIZE] = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function (key) {
              var that = validate(this, NAME);
              var entry = getEntry(that, key);
              if (entry) {
                var next = entry.n;
                var prev = entry.p;
                delete that._i[entry.i];
                entry.r = true;
                if (prev) prev.n = next;
                if (next) next.p = prev;
                if (that._f == entry) that._f = next;
                if (that._l == entry) that._l = prev;
                that[SIZE]--;
              }
              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn /* , that = undefined */) {
              validate(this, NAME);
              var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
              var entry;
              while (entry = entry ? entry.n : this._f) {
                f(entry.v, entry.k, this);
                // revert to the last existing entry
                while (entry && entry.r) entry = entry.p;
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(validate(this, NAME), key);
            }
          });
          if (DESCRIPTORS) dP(C.prototype, 'size', {
            get: function () {
              return validate(this, NAME)[SIZE];
            }
          });
          return C;
        },
        def: function (that, key, value) {
          var entry = getEntry(that, key);
          var prev, index;
          // change existing entry
          if (entry) {
            entry.v = value;
            // create new entry
          } else {
            that._l = entry = {
              i: index = fastKey(key, true), // <- index
              k: key,                        // <- key
              v: value,                      // <- value
              p: prev = that._l,             // <- previous entry
              n: undefined,                  // <- next entry
              r: false                       // <- removed
            };
            if (!that._f) that._f = entry;
            if (prev) prev.n = entry;
            that[SIZE]++;
            // add to index
            if (index !== 'F') that._i[index] = entry;
          }
          return that;
        },
        getEntry: getEntry,
        setStrong: function (C, NAME, IS_MAP) {
          // add .keys, .values, .entries, [@@iterator]
          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
          $iterDefine(C, NAME, function (iterated, kind) {
            this._t = validate(iterated, NAME); // target
            this._k = kind;                     // kind
            this._l = undefined;                // previous
          }, function () {
            var that = this;
            var kind = that._k;
            var entry = that._l;
            // revert to the last existing entry
            while (entry && entry.r) entry = entry.p;
            // get next entry
            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
              // or finish the iteration
              that._t = undefined;
              return step(1);
            }
            // return step by kind
            if (kind == 'keys') return step(0, entry.k);
            if (kind == 'values') return step(0, entry.v);
            return step(0, [entry.k, entry.v]);
          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

          // add [@@species], 23.1.2.2, 23.2.2.2
          setSpecies(NAME);
        }
      };


      /***/
    }),
    /* 117 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var strong = __webpack_require__(116);
      var validate = __webpack_require__(47);
      var SET = 'Set';

// 23.2 Set Objects
      module.exports = __webpack_require__(60)(SET, function (get) {
        return function Set() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
        }
      }, strong);


      /***/
    }),
    /* 118 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var each = __webpack_require__(27)(0);
      var redefine = __webpack_require__(14);
      var meta = __webpack_require__(30);
      var assign = __webpack_require__(99);
      var weak = __webpack_require__(119);
      var isObject = __webpack_require__(4);
      var fails = __webpack_require__(3);
      var validate = __webpack_require__(47);
      var WEAK_MAP = 'WeakMap';
      var getWeak = meta.getWeak;
      var isExtensible = Object.isExtensible;
      var uncaughtFrozenStore = weak.ufstore;
      var tmp = {};
      var InternalMap;

      var wrapper = function (get) {
        return function WeakMap() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      };

      var methods = {
        // 23.3.3.3 WeakMap.prototype.get(key)
        get: function get(key) {
          if (isObject(key)) {
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
            return data ? data[this._i] : undefined;
          }
        },
        // 23.3.3.5 WeakMap.prototype.set(key, value)
        set: function set(key, value) {
          return weak.def(validate(this, WEAK_MAP), key, value);
        }
      };

// 23.3 WeakMap Objects
      var $WeakMap = module.exports = __webpack_require__(60)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
      if (fails(function () {
          return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
        })) {
        InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
        assign(InternalMap.prototype, methods);
        meta.NEED = true;
        each(['delete', 'has', 'get', 'set'], function (key) {
          var proto = $WeakMap.prototype;
          var method = proto[key];
          redefine(proto, key, function (a, b) {
            // store frozen objects on internal weakmap shim
            if (isObject(a) && !isExtensible(a)) {
              if (!this._f) this._f = new InternalMap();
              var result = this._f[key](a, b);
              return key == 'set' ? this : result;
              // store all the rest on native weakmap
            }
            return method.call(this, a, b);
          });
        });
      }


      /***/
    }),
    /* 119 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var redefineAll = __webpack_require__(43);
      var getWeak = __webpack_require__(30).getWeak;
      var anObject = __webpack_require__(1);
      var isObject = __webpack_require__(4);
      var anInstance = __webpack_require__(41);
      var forOf = __webpack_require__(42);
      var createArrayMethod = __webpack_require__(27);
      var $has = __webpack_require__(12);
      var validate = __webpack_require__(47);
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var id = 0;

// fallback for uncaught frozen keys
      var uncaughtFrozenStore = function (that) {
        return that._l || (that._l = new UncaughtFrozenStore());
      };
      var UncaughtFrozenStore = function () {
        this.a = [];
      };
      var findUncaughtFrozen = function (store, key) {
        return arrayFind(store.a, function (it) {
          return it[0] === key;
        });
      };
      UncaughtFrozenStore.prototype = {
        get: function (key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) return entry[1];
        },
        has: function (key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function (key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) entry[1] = value;
          else this.a.push([key, value]);
        },
        'delete': function (key) {
          var index = arrayFindIndex(this.a, function (it) {
            return it[0] === key;
          });
          if (~index) this.a.splice(index, 1);
          return !!~index;
        }
      };

      module.exports = {
        getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME;      // collection type
            that._i = id++;      // collection id
            that._l = undefined; // leak store for uncaught frozen objects
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            // 23.3.3.2 WeakMap.prototype.delete(key)
            // 23.4.3.3 WeakSet.prototype.delete(value)
            'delete': function (key) {
              if (!isObject(key)) return false;
              var data = getWeak(key);
              if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
              return data && $has(data, this._i) && delete data[this._i];
            },
            // 23.3.3.4 WeakMap.prototype.has(key)
            // 23.4.3.4 WeakSet.prototype.has(value)
            has: function has(key) {
              if (!isObject(key)) return false;
              var data = getWeak(key);
              if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
              return data && $has(data, this._i);
            }
          });
          return C;
        },
        def: function (that, key, value) {
          var data = getWeak(anObject(key), true);
          if (data === true) uncaughtFrozenStore(that).set(key, value);
          else data[that._i] = value;
          return that;
        },
        ufstore: uncaughtFrozenStore
      };


      /***/
    }),
    /* 120 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
      var toInteger = __webpack_require__(25);
      var toLength = __webpack_require__(8);
      module.exports = function (it) {
        if (it === undefined) return 0;
        var number = toInteger(it);
        var length = toLength(number);
        if (number !== length) throw RangeError('Wrong length!');
        return length;
      };


      /***/
    }),
    /* 121 */
    /***/ (function (module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
      var gOPN = __webpack_require__(39);
      var gOPS = __webpack_require__(53);
      var anObject = __webpack_require__(1);
      var Reflect = __webpack_require__(2).Reflect;
      module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
        var keys = gOPN.f(anObject(it));
        var getSymbols = gOPS.f;
        return getSymbols ? keys.concat(getSymbols(it)) : keys;
      };


      /***/
    }),
    /* 122 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
      var isArray = __webpack_require__(54);
      var isObject = __webpack_require__(4);
      var toLength = __webpack_require__(8);
      var ctx = __webpack_require__(19);
      var IS_CONCAT_SPREADABLE = __webpack_require__(5)('isConcatSpreadable');

      function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
        var element, spreadable;

        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

            spreadable = false;
            if (isObject(element)) {
              spreadable = element[IS_CONCAT_SPREADABLE];
              spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
            }

            if (spreadable && depth > 0) {
              targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 0x1fffffffffffff) throw TypeError();
              target[targetIndex] = element;
            }

            targetIndex++;
          }
          sourceIndex++;
        }
        return targetIndex;
      }

      module.exports = flattenIntoArray;


      /***/
    }),
    /* 123 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
      var toLength = __webpack_require__(8);
      var repeat = __webpack_require__(74);
      var defined = __webpack_require__(24);

      module.exports = function (that, maxLength, fillString, left) {
        var S = String(defined(that));
        var stringLength = S.length;
        var fillStr = fillString === undefined ? ' ' : String(fillString);
        var intMaxLength = toLength(maxLength);
        if (intMaxLength <= stringLength || fillStr == '') return S;
        var fillLen = intMaxLength - stringLength;
        var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
        return left ? stringFiller + S : S + stringFiller;
      };


      /***/
    }),
    /* 124 */
    /***/ (function (module, exports, __webpack_require__) {

      var getKeys = __webpack_require__(36);
      var toIObject = __webpack_require__(16);
      var isEnum = __webpack_require__(49).f;
      module.exports = function (isEntries) {
        return function (it) {
          var O = toIObject(it);
          var keys = getKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;
          while (length > i) if (isEnum.call(O, key = keys[i++])) {
            result.push(isEntries ? [key, O[key]] : O[key]);
          }
          return result;
        };
      };


      /***/
    }),
    /* 125 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var classof = __webpack_require__(50);
      var from = __webpack_require__(126);
      module.exports = function (NAME) {
        return function toJSON() {
          if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
          return from(this);
        };
      };


      /***/
    }),
    /* 126 */
    /***/ (function (module, exports, __webpack_require__) {

      var forOf = __webpack_require__(42);

      module.exports = function (iter, ITERATOR) {
        var result = [];
        forOf(iter, false, result.push, result, ITERATOR);
        return result;
      };


      /***/
    }),
    /* 127 */
    /***/ (function (module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
      module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
        if (
          arguments.length === 0
          // eslint-disable-next-line no-self-compare
          || x != x
          // eslint-disable-next-line no-self-compare
          || inLow != inLow
          // eslint-disable-next-line no-self-compare
          || inHigh != inHigh
          // eslint-disable-next-line no-self-compare
          || outLow != outLow
          // eslint-disable-next-line no-self-compare
          || outHigh != outHigh
        ) return NaN;
        if (x === Infinity || x === -Infinity) return x;
        return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
      };


      /***/
    }),
    /* 128 */
    /***/ (function (module, exports) {

      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {
          };
          module.paths = [];
          // module.parent = undefined by default
          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function () {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function () {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }
        return module;
      };


      /***/
    }),
    /* 129 */,
    /* 130 */,
    /* 131 */,
    /* 132 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";


      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PLAYER_NAME = exports.VERSION = exports.PLAYER_TYPE = exports.MediaInfo = exports.setup = exports.providers = exports.ui = exports.core = undefined;

      var _polyfillManager = __webpack_require__(93);

      var _polyfillManager2 = _interopRequireDefault(_polyfillManager);

      __webpack_require__(336);

      var _logger = __webpack_require__(32);

      var _logger2 = _interopRequireDefault(_logger);

      var _playkitJs = __webpack_require__(11);

      var core = _interopRequireWildcard(_playkitJs);

      var _playkitJsUi = __webpack_require__(92);

      var ui = _interopRequireWildcard(_playkitJsUi);

      var _playkitJsProviders = __webpack_require__(!(function webpackMissingModule() {
        var e = new Error("Cannot find module \"playkit-js-providers\"");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
      }()));

      var providers = _interopRequireWildcard(_playkitJsProviders);

      __webpack_require__(338);

      __webpack_require__(340);

      __webpack_require__(342);

      __webpack_require__(343);

      __webpack_require__(344);

      var _setup = __webpack_require__(345);

      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }

      var currentLogLevel = (0, _logger.getLogLevel)();

      (0, _logger.setLogLevel)(_logger.LogLevel.INFO);
      (0, _logger2.default)().log('%c ' + "kaltura-player-js" + ' ' + "0.17.0", "color: #ff98f9;  font-size: large");
      (0, _logger2.default)().log('%c For more details see ' + "https://github.com/kaltura/kaltura-player-js", "color: #ff98f9;");
      (0, _logger.setLogLevel)(currentLogLevel);

      _polyfillManager2.default.installAll();

// Import core


// Import ui


// Import provider


// Import media source adapters


// Import common plugins


// Import analytics plugin


// Import setup method
      exports.core = core;
      exports.ui = ui;
      exports.providers = providers;
      exports.setup = _setup.setup;
      exports.MediaInfo = _playkitJsProviders.ProviderMediaInfo;
      exports.PLAYER_TYPE = "ovp";
      exports.VERSION = "0.17.0";
      exports.PLAYER_NAME = "kaltura-player-js";

      /***/
    }),
    /* 133 */
    /***/ (function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
      /*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */
      (function (global) {
        "use strict";

        // Top level module for the global, static logger instance.
        var Logger = {};

        // For those that are at home that are keeping score.
        Logger.VERSION = "1.4.1";

        // Function which handles all incoming log messages.
        var logHandler;

        // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
        var contextualLoggersByNameMap = {};

        // Polyfill for ES5's Function.bind.
        var bind = function (scope, func) {
          return function () {
            return func.apply(scope, arguments);
          };
        };

        // Super exciting object merger-matron 9000 adding another 100 bytes to your download.
        var merge = function () {
          var args = arguments, target = args[0], key, i;
          for (i = 1; i < args.length; i++) {
            for (key in args[i]) {
              if (!(key in target) && args[i].hasOwnProperty(key)) {
                target[key] = args[i][key];
              }
            }
          }
          return target;
        };

        // Helper to define a logging level object; helps with optimisation.
        var defineLogLevel = function (value, name) {
          return {value: value, name: name};
        };

        // Predefined logging levels.
        Logger.DEBUG = defineLogLevel(1, 'DEBUG');
        Logger.INFO = defineLogLevel(2, 'INFO');
        Logger.TIME = defineLogLevel(3, 'TIME');
        Logger.WARN = defineLogLevel(4, 'WARN');
        Logger.ERROR = defineLogLevel(8, 'ERROR');
        Logger.OFF = defineLogLevel(99, 'OFF');

        // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
        // of each other.
        var ContextualLogger = function (defaultContext) {
          this.context = defaultContext;
          this.setLevel(defaultContext.filterLevel);
          this.log = this.info;  // Convenience alias.
        };

        ContextualLogger.prototype = {
          // Changes the current logging level for the logging instance.
          setLevel: function (newLevel) {
            // Ensure the supplied Level object looks valid.
            if (newLevel && "value" in newLevel) {
              this.context.filterLevel = newLevel;
            }
          },

          // Gets the current logging level for the logging instance
          getLevel: function () {
            return this.context.filterLevel;
          },

          // Is the logger configured to output messages at the supplied level?
          enabledFor: function (lvl) {
            var filterLevel = this.context.filterLevel;
            return lvl.value >= filterLevel.value;
          },

          debug: function () {
            this.invoke(Logger.DEBUG, arguments);
          },

          info: function () {
            this.invoke(Logger.INFO, arguments);
          },

          warn: function () {
            this.invoke(Logger.WARN, arguments);
          },

          error: function () {
            this.invoke(Logger.ERROR, arguments);
          },

          time: function (label) {
            if (typeof label === 'string' && label.length > 0) {
              this.invoke(Logger.TIME, [label, 'start']);
            }
          },

          timeEnd: function (label) {
            if (typeof label === 'string' && label.length > 0) {
              this.invoke(Logger.TIME, [label, 'end']);
            }
          },

          // Invokes the logger callback if it's not being filtered.
          invoke: function (level, msgArgs) {
            if (logHandler && this.enabledFor(level)) {
              logHandler(msgArgs, merge({level: level}, this.context));
            }
          }
        };

        // Protected instance which all calls to the to level `Logger` module will be routed through.
        var globalLogger = new ContextualLogger({filterLevel: Logger.OFF});

        // Configure the global Logger instance.
        (function () {
          // Shortcut for optimisers.
          var L = Logger;

          L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
          L.debug = bind(globalLogger, globalLogger.debug);
          L.time = bind(globalLogger, globalLogger.time);
          L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
          L.info = bind(globalLogger, globalLogger.info);
          L.warn = bind(globalLogger, globalLogger.warn);
          L.error = bind(globalLogger, globalLogger.error);

          // Don't forget the convenience alias!
          L.log = L.info;
        }());

        // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
        // object with the supplied log messages and the second being a context object which contains a hash of stateful
        // parameters which the logging function can consume.
        Logger.setHandler = function (func) {
          logHandler = func;
        };

        // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
        // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
        Logger.setLevel = function (level) {
          // Set the globalLogger's level.
          globalLogger.setLevel(level);

          // Apply this level to all registered contextual loggers.
          for (var key in contextualLoggersByNameMap) {
            if (contextualLoggersByNameMap.hasOwnProperty(key)) {
              contextualLoggersByNameMap[key].setLevel(level);
            }
          }
        };

        // Gets the global logging filter level
        Logger.getLevel = function () {
          return globalLogger.getLevel();
        };

        // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
        // default context and log handler.
        Logger.get = function (name) {
          // All logger instances are cached so they can be configured ahead of use.
          return contextualLoggersByNameMap[name] ||
            (contextualLoggersByNameMap[name] = new ContextualLogger(merge({name: name}, globalLogger.context)));
        };

        // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
        // write to the window's console object (if present); the optional options object can be used to customise the
        // formatter used to format each log message.
        Logger.createDefaultHandler = function (options) {
          options = options || {};

          options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
            // Prepend the logger's name to the log message for easy identification.
            if (context.name) {
              messages.unshift("[" + context.name + "]");
            }
          };

          // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
          // that don't offer a native console method.
          var timerStartTimeByLabelMap = {};

          // Support for IE8+ (and other, slightly more sane environments)
          var invokeConsoleMethod = function (hdlr, messages) {
            Function.prototype.apply.call(hdlr, console, messages);
          };

          // Check for the presence of a logger.
          if (typeof console === "undefined") {
            return function () { /* no console */
            };
          }

          return function (messages, context) {
            // Convert arguments object to Array.
            messages = Array.prototype.slice.call(messages);

            var hdlr = console.log;
            var timerLabel;

            if (context.level === Logger.TIME) {
              timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];

              if (messages[1] === 'start') {
                if (console.time) {
                  console.time(timerLabel);
                }
                else {
                  timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
                }
              }
              else {
                if (console.timeEnd) {
                  console.timeEnd(timerLabel);
                }
                else {
                  invokeConsoleMethod(hdlr, [timerLabel + ': ' +
                  (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
                }
              }
            }
            else {
              // Delegate through to custom warn/error loggers if present on the console.
              if (context.level === Logger.WARN && console.warn) {
                hdlr = console.warn;
              } else if (context.level === Logger.ERROR && console.error) {
                hdlr = console.error;
              } else if (context.level === Logger.INFO && console.info) {
                hdlr = console.info;
              } else if (context.level === Logger.DEBUG && console.debug) {
                hdlr = console.debug;
              }

              options.formatter(messages, context);
              invokeConsoleMethod(hdlr, messages);
            }
          };
        };

        // Configure and example a Default implementation which writes to the `window.console` (if present).  The
        // `options` hash can be used to configure the default logLevel and provide a custom message formatter.
        Logger.useDefaults = function (options) {
          Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
          Logger.setHandler(Logger.createDefaultHandler(options));
        };

        // Export to popular environments boilerplate.
        if (true) {
          !(__WEBPACK_AMD_DEFINE_FACTORY__ = (Logger),
            __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
              (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
              __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
        else if (typeof module !== 'undefined' && module.exports) {
          module.exports = Logger;
        }
        else {
          Logger._prevLogger = global.Logger;

          Logger.noConflict = function () {
            global.Logger = Logger._prevLogger;
            return Logger;
          };

          global.Logger = Logger;
        }
      }(this));


      /***/
    }),
    /* 134 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
      /* WEBPACK VAR INJECTION */
      (function (global) {

        __webpack_require__(135);

        __webpack_require__(332);

        __webpack_require__(333);

        if (global._babelPolyfill) {
          throw new Error("only one instance of babel-polyfill is allowed");
        }
        global._babelPolyfill = true;

        var DEFINE_PROPERTY = "defineProperty";

        function define(O, key, value) {
          O[key] || Object[DEFINE_PROPERTY](O, key, {
            writable: true,
            configurable: true,
            value: value
          });
        }

        define(String.prototype, "padLeft", "".padStart);
        define(String.prototype, "padRight", "".padEnd);

        "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
          [][key] && define(Array, key, Function.call.bind([][key]));
        });
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(65)))

      /***/
    }),
    /* 135 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(136);
      __webpack_require__(138);
      __webpack_require__(139);
      __webpack_require__(140);
      __webpack_require__(141);
      __webpack_require__(142);
      __webpack_require__(143);
      __webpack_require__(144);
      __webpack_require__(145);
      __webpack_require__(146);
      __webpack_require__(147);
      __webpack_require__(148);
      __webpack_require__(149);
      __webpack_require__(150);
      __webpack_require__(151);
      __webpack_require__(152);
      __webpack_require__(154);
      __webpack_require__(155);
      __webpack_require__(156);
      __webpack_require__(157);
      __webpack_require__(158);
      __webpack_require__(159);
      __webpack_require__(160);
      __webpack_require__(161);
      __webpack_require__(162);
      __webpack_require__(163);
      __webpack_require__(164);
      __webpack_require__(165);
      __webpack_require__(166);
      __webpack_require__(167);
      __webpack_require__(168);
      __webpack_require__(169);
      __webpack_require__(170);
      __webpack_require__(171);
      __webpack_require__(172);
      __webpack_require__(173);
      __webpack_require__(174);
      __webpack_require__(175);
      __webpack_require__(176);
      __webpack_require__(177);
      __webpack_require__(178);
      __webpack_require__(179);
      __webpack_require__(180);
      __webpack_require__(181);
      __webpack_require__(182);
      __webpack_require__(183);
      __webpack_require__(184);
      __webpack_require__(185);
      __webpack_require__(186);
      __webpack_require__(187);
      __webpack_require__(188);
      __webpack_require__(189);
      __webpack_require__(190);
      __webpack_require__(191);
      __webpack_require__(192);
      __webpack_require__(193);
      __webpack_require__(194);
      __webpack_require__(195);
      __webpack_require__(196);
      __webpack_require__(197);
      __webpack_require__(198);
      __webpack_require__(199);
      __webpack_require__(200);
      __webpack_require__(201);
      __webpack_require__(202);
      __webpack_require__(203);
      __webpack_require__(204);
      __webpack_require__(205);
      __webpack_require__(206);
      __webpack_require__(207);
      __webpack_require__(208);
      __webpack_require__(209);
      __webpack_require__(210);
      __webpack_require__(211);
      __webpack_require__(212);
      __webpack_require__(213);
      __webpack_require__(214);
      __webpack_require__(216);
      __webpack_require__(217);
      __webpack_require__(219);
      __webpack_require__(220);
      __webpack_require__(221);
      __webpack_require__(222);
      __webpack_require__(223);
      __webpack_require__(224);
      __webpack_require__(225);
      __webpack_require__(227);
      __webpack_require__(228);
      __webpack_require__(229);
      __webpack_require__(230);
      __webpack_require__(231);
      __webpack_require__(232);
      __webpack_require__(233);
      __webpack_require__(234);
      __webpack_require__(235);
      __webpack_require__(236);
      __webpack_require__(237);
      __webpack_require__(238);
      __webpack_require__(239);
      __webpack_require__(87);
      __webpack_require__(240);
      __webpack_require__(241);
      __webpack_require__(112);
      __webpack_require__(242);
      __webpack_require__(243);
      __webpack_require__(244);
      __webpack_require__(245);
      __webpack_require__(246);
      __webpack_require__(115);
      __webpack_require__(117);
      __webpack_require__(118);
      __webpack_require__(247);
      __webpack_require__(248);
      __webpack_require__(249);
      __webpack_require__(250);
      __webpack_require__(251);
      __webpack_require__(252);
      __webpack_require__(253);
      __webpack_require__(254);
      __webpack_require__(255);
      __webpack_require__(256);
      __webpack_require__(257);
      __webpack_require__(258);
      __webpack_require__(259);
      __webpack_require__(260);
      __webpack_require__(261);
      __webpack_require__(262);
      __webpack_require__(263);
      __webpack_require__(264);
      __webpack_require__(265);
      __webpack_require__(266);
      __webpack_require__(267);
      __webpack_require__(268);
      __webpack_require__(269);
      __webpack_require__(270);
      __webpack_require__(271);
      __webpack_require__(272);
      __webpack_require__(273);
      __webpack_require__(274);
      __webpack_require__(275);
      __webpack_require__(276);
      __webpack_require__(277);
      __webpack_require__(278);
      __webpack_require__(279);
      __webpack_require__(280);
      __webpack_require__(281);
      __webpack_require__(282);
      __webpack_require__(283);
      __webpack_require__(284);
      __webpack_require__(285);
      __webpack_require__(286);
      __webpack_require__(287);
      __webpack_require__(288);
      __webpack_require__(289);
      __webpack_require__(290);
      __webpack_require__(291);
      __webpack_require__(292);
      __webpack_require__(293);
      __webpack_require__(294);
      __webpack_require__(295);
      __webpack_require__(296);
      __webpack_require__(297);
      __webpack_require__(298);
      __webpack_require__(299);
      __webpack_require__(300);
      __webpack_require__(301);
      __webpack_require__(302);
      __webpack_require__(303);
      __webpack_require__(304);
      __webpack_require__(305);
      __webpack_require__(306);
      __webpack_require__(307);
      __webpack_require__(308);
      __webpack_require__(309);
      __webpack_require__(310);
      __webpack_require__(311);
      __webpack_require__(312);
      __webpack_require__(313);
      __webpack_require__(314);
      __webpack_require__(315);
      __webpack_require__(316);
      __webpack_require__(317);
      __webpack_require__(318);
      __webpack_require__(319);
      __webpack_require__(320);
      __webpack_require__(321);
      __webpack_require__(322);
      __webpack_require__(323);
      __webpack_require__(324);
      __webpack_require__(325);
      __webpack_require__(326);
      __webpack_require__(327);
      __webpack_require__(328);
      __webpack_require__(329);
      __webpack_require__(330);
      __webpack_require__(331);
      module.exports = __webpack_require__(22);


      /***/
    }),
    /* 136 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// ECMAScript 6 symbols shim
      var global = __webpack_require__(2);
      var has = __webpack_require__(12);
      var DESCRIPTORS = __webpack_require__(6);
      var $export = __webpack_require__(0);
      var redefine = __webpack_require__(14);
      var META = __webpack_require__(30).KEY;
      var $fails = __webpack_require__(3);
      var shared = __webpack_require__(51);
      var setToStringTag = __webpack_require__(44);
      var uid = __webpack_require__(34);
      var wks = __webpack_require__(5);
      var wksExt = __webpack_require__(95);
      var wksDefine = __webpack_require__(67);
      var enumKeys = __webpack_require__(137);
      var isArray = __webpack_require__(54);
      var anObject = __webpack_require__(1);
      var toIObject = __webpack_require__(16);
      var toPrimitive = __webpack_require__(23);
      var createDesc = __webpack_require__(33);
      var _create = __webpack_require__(38);
      var gOPNExt = __webpack_require__(98);
      var $GOPD = __webpack_require__(17);
      var $DP = __webpack_require__(7);
      var $keys = __webpack_require__(36);
      var gOPD = $GOPD.f;
      var dP = $DP.f;
      var gOPN = gOPNExt.f;
      var $Symbol = global.Symbol;
      var $JSON = global.JSON;
      var _stringify = $JSON && $JSON.stringify;
      var PROTOTYPE = 'prototype';
      var HIDDEN = wks('_hidden');
      var TO_PRIMITIVE = wks('toPrimitive');
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared('symbol-registry');
      var AllSymbols = shared('symbols');
      var OPSymbols = shared('op-symbols');
      var ObjectProto = Object[PROTOTYPE];
      var USE_NATIVE = typeof $Symbol == 'function';
      var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
      var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
      var setSymbolDesc = DESCRIPTORS && $fails(function () {
        return _create(dP({}, 'a', {
          get: function () {
            return dP(this, 'a', {value: 7}).a;
          }
        })).a != 7;
      }) ? function (it, key, D) {
        var protoDesc = gOPD(ObjectProto, key);
        if (protoDesc) delete ObjectProto[key];
        dP(it, key, D);
        if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
      } : dP;

      var wrap = function (tag) {
        var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
        sym._k = tag;
        return sym;
      };

      var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
        return typeof it == 'symbol';
      } : function (it) {
        return it instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);
        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = _create(D, {enumerable: createDesc(0, false)});
          }
          return setSymbolDesc(it, key, D);
        }
        return dP(it, key, D);
      };
      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys = enumKeys(P = toIObject(P));
        var i = 0;
        var l = keys.length;
        var key;
        while (l > i) $defineProperty(it, key = keys[i++], P[key]);
        return it;
      };
      var $create = function create(it, P) {
        return P === undefined ? _create(it) : $defineProperties(_create(it), P);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = isEnum.call(this, key = toPrimitive(key, true));
        if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
        var D = gOPD(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
        return D;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names = gOPN(toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names.length > i) {
          if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
        }
        return result;
      };
      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectProto;
        var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names.length > i) {
          if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
        }
        return result;
      };

// 19.4.1.1 Symbol([description])
      if (!USE_NATIVE) {
        $Symbol = function Symbol() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
          var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
          var $set = function (value) {
            if (this === ObjectProto) $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
          };
          if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
          return wrap(tag);
        };
        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return this._k;
        });

        $GOPD.f = $getOwnPropertyDescriptor;
        $DP.f = $defineProperty;
        __webpack_require__(39).f = gOPNExt.f = $getOwnPropertyNames;
        __webpack_require__(49).f = $propertyIsEnumerable;
        __webpack_require__(53).f = $getOwnPropertySymbols;

        if (DESCRIPTORS && !__webpack_require__(35)) {
          redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
        }

        wksExt.f = function (name) {
          return wrap(wks(name));
        };
      }

      $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

      for (var es6Symbols = (
        // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
        'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
      ).split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);

      for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

      $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
        // 19.4.2.1 Symbol.for(key)
        'for': function (key) {
          return has(SymbolRegistry, key += '')
            ? SymbolRegistry[key]
            : SymbolRegistry[key] = $Symbol(key);
        },
        // 19.4.2.5 Symbol.keyFor(sym)
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
          for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
        },
        useSetter: function () {
          setter = true;
        },
        useSimple: function () {
          setter = false;
        }
      });

      $export($export.S + $export.F * !USE_NATIVE, 'Object', {
        // 19.1.2.2 Object.create(O [, Properties])
        create: $create,
        // 19.1.2.4 Object.defineProperty(O, P, Attributes)
        defineProperty: $defineProperty,
        // 19.1.2.3 Object.defineProperties(O, Properties)
        defineProperties: $defineProperties,
        // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        // 19.1.2.7 Object.getOwnPropertyNames(O)
        getOwnPropertyNames: $getOwnPropertyNames,
        // 19.1.2.8 Object.getOwnPropertySymbols(O)
        getOwnPropertySymbols: $getOwnPropertySymbols
      });

// 24.3.2 JSON.stringify(value [, replacer [, space]])
      $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
        var S = $Symbol();
        // MS Edge converts symbol values to JSON as {}
        // WebKit converts symbol values to JSON as null
        // V8 throws on boxed symbols
        return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
      })), 'JSON', {
        stringify: function stringify(it) {
          if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
          var args = [it];
          var i = 1;
          var replacer, $replacer;
          while (arguments.length > i) args.push(arguments[i++]);
          replacer = args[1];
          if (typeof replacer == 'function') $replacer = replacer;
          if ($replacer || !isArray(replacer)) replacer = function (key, value) {
            if ($replacer) value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
          };
          args[1] = replacer;
          return _stringify.apply($JSON, args);
        }
      });

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
      $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(13)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
      setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
      setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
      setToStringTag(global.JSON, 'JSON', true);


      /***/
    }),
    /* 137 */
    /***/ (function (module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
      var getKeys = __webpack_require__(36);
      var gOPS = __webpack_require__(53);
      var pIE = __webpack_require__(49);
      module.exports = function (it) {
        var result = getKeys(it);
        var getSymbols = gOPS.f;
        if (getSymbols) {
          var symbols = getSymbols(it);
          var isEnum = pIE.f;
          var i = 0;
          var key;
          while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
        }
        return result;
      };


      /***/
    }),
    /* 138 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      $export($export.S, 'Object', {create: __webpack_require__(38)});


      /***/
    }),
    /* 139 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
      $export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(7).f});


      /***/
    }),
    /* 140 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
      $export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperties: __webpack_require__(97)});


      /***/
    }),
    /* 141 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      var toIObject = __webpack_require__(16);
      var $getOwnPropertyDescriptor = __webpack_require__(17).f;

      __webpack_require__(26)('getOwnPropertyDescriptor', function () {
        return function getOwnPropertyDescriptor(it, key) {
          return $getOwnPropertyDescriptor(toIObject(it), key);
        };
      });


      /***/
    }),
    /* 142 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
      var toObject = __webpack_require__(9);
      var $getPrototypeOf = __webpack_require__(18);

      __webpack_require__(26)('getPrototypeOf', function () {
        return function getPrototypeOf(it) {
          return $getPrototypeOf(toObject(it));
        };
      });


      /***/
    }),
    /* 143 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
      var toObject = __webpack_require__(9);
      var $keys = __webpack_require__(36);

      __webpack_require__(26)('keys', function () {
        return function keys(it) {
          return $keys(toObject(it));
        };
      });


      /***/
    }),
    /* 144 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
      __webpack_require__(26)('getOwnPropertyNames', function () {
        return __webpack_require__(98).f;
      });


      /***/
    }),
    /* 145 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
      var isObject = __webpack_require__(4);
      var meta = __webpack_require__(30).onFreeze;

      __webpack_require__(26)('freeze', function ($freeze) {
        return function freeze(it) {
          return $freeze && isObject(it) ? $freeze(meta(it)) : it;
        };
      });


      /***/
    }),
    /* 146 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
      var isObject = __webpack_require__(4);
      var meta = __webpack_require__(30).onFreeze;

      __webpack_require__(26)('seal', function ($seal) {
        return function seal(it) {
          return $seal && isObject(it) ? $seal(meta(it)) : it;
        };
      });


      /***/
    }),
    /* 147 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
      var isObject = __webpack_require__(4);
      var meta = __webpack_require__(30).onFreeze;

      __webpack_require__(26)('preventExtensions', function ($preventExtensions) {
        return function preventExtensions(it) {
          return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
        };
      });


      /***/
    }),
    /* 148 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
      var isObject = __webpack_require__(4);

      __webpack_require__(26)('isFrozen', function ($isFrozen) {
        return function isFrozen(it) {
          return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
        };
      });


      /***/
    }),
    /* 149 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
      var isObject = __webpack_require__(4);

      __webpack_require__(26)('isSealed', function ($isSealed) {
        return function isSealed(it) {
          return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
        };
      });


      /***/
    }),
    /* 150 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
      var isObject = __webpack_require__(4);

      __webpack_require__(26)('isExtensible', function ($isExtensible) {
        return function isExtensible(it) {
          return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
        };
      });


      /***/
    }),
    /* 151 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
      var $export = __webpack_require__(0);

      $export($export.S + $export.F, 'Object', {assign: __webpack_require__(99)});


      /***/
    }),
    /* 152 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
      var $export = __webpack_require__(0);
      $export($export.S, 'Object', {is: __webpack_require__(153)});


      /***/
    }),
    /* 153 */
    /***/ (function (module, exports) {

// 7.2.9 SameValue(x, y)
      module.exports = Object.is || function is(x, y) {
        // eslint-disable-next-line no-self-compare
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };


      /***/
    }),
    /* 154 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
      var $export = __webpack_require__(0);
      $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(71).set});


      /***/
    }),
    /* 155 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 19.1.3.6 Object.prototype.toString()
      var classof = __webpack_require__(50);
      var test = {};
      test[__webpack_require__(5)('toStringTag')] = 'z';
      if (test + '' != '[object z]') {
        __webpack_require__(14)(Object.prototype, 'toString', function toString() {
          return '[object ' + classof(this) + ']';
        }, true);
      }


      /***/
    }),
    /* 156 */
    /***/ (function (module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
      var $export = __webpack_require__(0);

      $export($export.P, 'Function', {bind: __webpack_require__(100)});


      /***/
    }),
    /* 157 */
    /***/ (function (module, exports, __webpack_require__) {

      var dP = __webpack_require__(7).f;
      var FProto = Function.prototype;
      var nameRE = /^\s*function ([^ (]*)/;
      var NAME = 'name';

// 19.2.4.2 name
      NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
        configurable: true,
        get: function () {
          try {
            return ('' + this).match(nameRE)[1];
          } catch (e) {
            return '';
          }
        }
      });


      /***/
    }),
    /* 158 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var isObject = __webpack_require__(4);
      var getPrototypeOf = __webpack_require__(18);
      var HAS_INSTANCE = __webpack_require__(5)('hasInstance');
      var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
      if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(7).f(FunctionProto, HAS_INSTANCE, {
        value: function (O) {
          if (typeof this != 'function' || !isObject(O)) return false;
          if (!isObject(this.prototype)) return O instanceof this;
          // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
          while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
          return false;
        }
      });


      /***/
    }),
    /* 159 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var $parseInt = __webpack_require__(102);
// 18.2.5 parseInt(string, radix)
      $export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});


      /***/
    }),
    /* 160 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var $parseFloat = __webpack_require__(103);
// 18.2.4 parseFloat(string)
      $export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});


      /***/
    }),
    /* 161 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var global = __webpack_require__(2);
      var has = __webpack_require__(12);
      var cof = __webpack_require__(20);
      var inheritIfRequired = __webpack_require__(73);
      var toPrimitive = __webpack_require__(23);
      var fails = __webpack_require__(3);
      var gOPN = __webpack_require__(39).f;
      var gOPD = __webpack_require__(17).f;
      var dP = __webpack_require__(7).f;
      var $trim = __webpack_require__(45).trim;
      var NUMBER = 'Number';
      var $Number = global[NUMBER];
      var Base = $Number;
      var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
      var BROKEN_COF = cof(__webpack_require__(38)(proto)) == NUMBER;
      var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
      var toNumber = function (argument) {
        var it = toPrimitive(argument, false);
        if (typeof it == 'string' && it.length > 2) {
          it = TRIM ? it.trim() : $trim(it, 3);
          var first = it.charCodeAt(0);
          var third, radix, maxCode;
          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break; // fast equal /^0b[01]+$/i
              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break; // fast equal /^0o[0-7]+$/i
              default:
                return +it;
            }
            for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
              code = digits.charCodeAt(i);
              // parseInt parses a string to a first unavailable symbol
              // but ToNumber should return NaN if a string contains unavailable symbols
              if (code < 48 || code > maxCode) return NaN;
            }
            return parseInt(digits, radix);
          }
        }
        return +it;
      };

      if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
        $Number = function Number(value) {
          var it = arguments.length < 1 ? 0 : value;
          var that = this;
          return that instanceof $Number
          // check on 1..constructor(foo) case
          && (BROKEN_COF ? fails(function () {
            proto.valueOf.call(that);
          }) : cof(that) != NUMBER)
            ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
        };
        for (var keys = __webpack_require__(6) ? gOPN(Base) : (
          // ES3:
          'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
          // ES6 (in case, if modules with ES6 Number statics required before):
          'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
          'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
        ).split(','), j = 0, key; keys.length > j; j++) {
          if (has(Base, key = keys[j]) && !has($Number, key)) {
            dP($Number, key, gOPD(Base, key));
          }
        }
        $Number.prototype = proto;
        proto.constructor = $Number;
        __webpack_require__(14)(global, NUMBER, $Number);
      }


      /***/
    }),
    /* 162 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toInteger = __webpack_require__(25);
      var aNumberValue = __webpack_require__(104);
      var repeat = __webpack_require__(74);
      var $toFixed = 1.0.toFixed;
      var floor = Math.floor;
      var data = [0, 0, 0, 0, 0, 0];
      var ERROR = 'Number.toFixed: incorrect invocation!';
      var ZERO = '0';

      var multiply = function (n, c) {
        var i = -1;
        var c2 = c;
        while (++i < 6) {
          c2 += n * data[i];
          data[i] = c2 % 1e7;
          c2 = floor(c2 / 1e7);
        }
      };
      var divide = function (n) {
        var i = 6;
        var c = 0;
        while (--i >= 0) {
          c += data[i];
          data[i] = floor(c / n);
          c = (c % n) * 1e7;
        }
      };
      var numToString = function () {
        var i = 6;
        var s = '';
        while (--i >= 0) {
          if (s !== '' || i === 0 || data[i] !== 0) {
            var t = String(data[i]);
            s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
          }
        }
        return s;
      };
      var pow = function (x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      };
      var log = function (x) {
        var n = 0;
        var x2 = x;
        while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
        }
        while (x2 >= 2) {
          n += 1;
          x2 /= 2;
        }
        return n;
      };

      $export($export.P + $export.F * (!!$toFixed && (
        0.00008.toFixed(3) !== '0.000' ||
        0.9.toFixed(0) !== '1' ||
        1.255.toFixed(2) !== '1.25' ||
        1000000000000000128.0.toFixed(0) !== '1000000000000000128'
      ) || !__webpack_require__(3)(function () {
        // V8 ~ Android 4.3-
        $toFixed.call({});
      })), 'Number', {
        toFixed: function toFixed(fractionDigits) {
          var x = aNumberValue(this, ERROR);
          var f = toInteger(fractionDigits);
          var s = '';
          var m = ZERO;
          var e, z, j, k;
          if (f < 0 || f > 20) throw RangeError(ERROR);
          // eslint-disable-next-line no-self-compare
          if (x != x) return 'NaN';
          if (x <= -1e21 || x >= 1e21) return String(x);
          if (x < 0) {
            s = '-';
            x = -x;
          }
          if (x > 1e-21) {
            e = log(x * pow(2, 69, 1)) - 69;
            z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
            z *= 0x10000000000000;
            e = 52 - e;
            if (e > 0) {
              multiply(0, z);
              j = f;
              while (j >= 7) {
                multiply(1e7, 0);
                j -= 7;
              }
              multiply(pow(10, j, 1), 0);
              j = e - 1;
              while (j >= 23) {
                divide(1 << 23);
                j -= 23;
              }
              divide(1 << j);
              multiply(1, 1);
              divide(2);
              m = numToString();
            } else {
              multiply(0, z);
              multiply(1 << -e, 0);
              m = numToString() + repeat.call(ZERO, f);
            }
          }
          if (f > 0) {
            k = m.length;
            m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
          } else {
            m = s + m;
          }
          return m;
        }
      });


      /***/
    }),
    /* 163 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $fails = __webpack_require__(3);
      var aNumberValue = __webpack_require__(104);
      var $toPrecision = 1.0.toPrecision;

      $export($export.P + $export.F * ($fails(function () {
        // IE7-
        return $toPrecision.call(1, undefined) !== '1';
      }) || !$fails(function () {
        // V8 ~ Android 4.3-
        $toPrecision.call({});
      })), 'Number', {
        toPrecision: function toPrecision(precision) {
          var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
          return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
        }
      });


      /***/
    }),
    /* 164 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
      var $export = __webpack_require__(0);

      $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});


      /***/
    }),
    /* 165 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
      var $export = __webpack_require__(0);
      var _isFinite = __webpack_require__(2).isFinite;

      $export($export.S, 'Number', {
        isFinite: function isFinite(it) {
          return typeof it == 'number' && _isFinite(it);
        }
      });


      /***/
    }),
    /* 166 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
      var $export = __webpack_require__(0);

      $export($export.S, 'Number', {isInteger: __webpack_require__(105)});


      /***/
    }),
    /* 167 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
      var $export = __webpack_require__(0);

      $export($export.S, 'Number', {
        isNaN: function isNaN(number) {
          // eslint-disable-next-line no-self-compare
          return number != number;
        }
      });


      /***/
    }),
    /* 168 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
      var $export = __webpack_require__(0);
      var isInteger = __webpack_require__(105);
      var abs = Math.abs;

      $export($export.S, 'Number', {
        isSafeInteger: function isSafeInteger(number) {
          return isInteger(number) && abs(number) <= 0x1fffffffffffff;
        }
      });


      /***/
    }),
    /* 169 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
      var $export = __webpack_require__(0);

      $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});


      /***/
    }),
    /* 170 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
      var $export = __webpack_require__(0);

      $export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});


      /***/
    }),
    /* 171 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var $parseFloat = __webpack_require__(103);
// 20.1.2.12 Number.parseFloat(string)
      $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});


      /***/
    }),
    /* 172 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var $parseInt = __webpack_require__(102);
// 20.1.2.13 Number.parseInt(string, radix)
      $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});


      /***/
    }),
    /* 173 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
      var $export = __webpack_require__(0);
      var log1p = __webpack_require__(106);
      var sqrt = Math.sqrt;
      var $acosh = Math.acosh;

      $export($export.S + $export.F * !($acosh
        // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
        && Math.floor($acosh(Number.MAX_VALUE)) == 710
        // Tor Browser bug: Math.acosh(Infinity) -> NaN
        && $acosh(Infinity) == Infinity
      ), 'Math', {
        acosh: function acosh(x) {
          return (x = +x) < 1 ? NaN : x > 94906265.62425156
            ? Math.log(x) + Math.LN2
            : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
        }
      });


      /***/
    }),
    /* 174 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
      var $export = __webpack_require__(0);
      var $asinh = Math.asinh;

      function asinh(x) {
        return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
      }

// Tor Browser bug: Math.asinh(0) -> -0
      $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});


      /***/
    }),
    /* 175 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
      var $export = __webpack_require__(0);
      var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
      $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
        atanh: function atanh(x) {
          return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
        }
      });


      /***/
    }),
    /* 176 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
      var $export = __webpack_require__(0);
      var sign = __webpack_require__(75);

      $export($export.S, 'Math', {
        cbrt: function cbrt(x) {
          return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
        }
      });


      /***/
    }),
    /* 177 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        clz32: function clz32(x) {
          return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
        }
      });


      /***/
    }),
    /* 178 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
      var $export = __webpack_require__(0);
      var exp = Math.exp;

      $export($export.S, 'Math', {
        cosh: function cosh(x) {
          return (exp(x = +x) + exp(-x)) / 2;
        }
      });


      /***/
    }),
    /* 179 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
      var $export = __webpack_require__(0);
      var $expm1 = __webpack_require__(76);

      $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});


      /***/
    }),
    /* 180 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {fround: __webpack_require__(107)});


      /***/
    }),
    /* 181 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
      var $export = __webpack_require__(0);
      var abs = Math.abs;

      $export($export.S, 'Math', {
        hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
          var sum = 0;
          var i = 0;
          var aLen = arguments.length;
          var larg = 0;
          var arg, div;
          while (i < aLen) {
            arg = abs(arguments[i++]);
            if (larg < arg) {
              div = larg / arg;
              sum = sum * div * div + 1;
              larg = arg;
            } else if (arg > 0) {
              div = arg / larg;
              sum += div * div;
            } else sum += arg;
          }
          return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
        }
      });


      /***/
    }),
    /* 182 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
      var $export = __webpack_require__(0);
      var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
      $export($export.S + $export.F * __webpack_require__(3)(function () {
        return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
      }), 'Math', {
        imul: function imul(x, y) {
          var UINT16 = 0xffff;
          var xn = +x;
          var yn = +y;
          var xl = UINT16 & xn;
          var yl = UINT16 & yn;
          return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
        }
      });


      /***/
    }),
    /* 183 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        log10: function log10(x) {
          return Math.log(x) * Math.LOG10E;
        }
      });


      /***/
    }),
    /* 184 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {log1p: __webpack_require__(106)});


      /***/
    }),
    /* 185 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        log2: function log2(x) {
          return Math.log(x) / Math.LN2;
        }
      });


      /***/
    }),
    /* 186 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {sign: __webpack_require__(75)});


      /***/
    }),
    /* 187 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
      var $export = __webpack_require__(0);
      var expm1 = __webpack_require__(76);
      var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
      $export($export.S + $export.F * __webpack_require__(3)(function () {
        return !Math.sinh(-2e-17) != -2e-17;
      }), 'Math', {
        sinh: function sinh(x) {
          return Math.abs(x = +x) < 1
            ? (expm1(x) - expm1(-x)) / 2
            : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
        }
      });


      /***/
    }),
    /* 188 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
      var $export = __webpack_require__(0);
      var expm1 = __webpack_require__(76);
      var exp = Math.exp;

      $export($export.S, 'Math', {
        tanh: function tanh(x) {
          var a = expm1(x = +x);
          var b = expm1(-x);
          return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
        }
      });


      /***/
    }),
    /* 189 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        trunc: function trunc(it) {
          return (it > 0 ? Math.floor : Math.ceil)(it);
        }
      });


      /***/
    }),
    /* 190 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var toAbsoluteIndex = __webpack_require__(37);
      var fromCharCode = String.fromCharCode;
      var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
      $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
        // 21.1.2.2 String.fromCodePoint(...codePoints)
        fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
          var res = [];
          var aLen = arguments.length;
          var i = 0;
          var code;
          while (aLen > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
            res.push(code < 0x10000
              ? fromCharCode(code)
              : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
            );
          }
          return res.join('');
        }
      });


      /***/
    }),
    /* 191 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var toIObject = __webpack_require__(16);
      var toLength = __webpack_require__(8);

      $export($export.S, 'String', {
        // 21.1.2.4 String.raw(callSite, ...substitutions)
        raw: function raw(callSite) {
          var tpl = toIObject(callSite.raw);
          var len = toLength(tpl.length);
          var aLen = arguments.length;
          var res = [];
          var i = 0;
          while (len > i) {
            res.push(String(tpl[i++]));
            if (i < aLen) res.push(String(arguments[i]));
          }
          return res.join('');
        }
      });


      /***/
    }),
    /* 192 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 21.1.3.25 String.prototype.trim()
      __webpack_require__(45)('trim', function ($trim) {
        return function trim() {
          return $trim(this, 3);
        };
      });


      /***/
    }),
    /* 193 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $at = __webpack_require__(77)(true);

// 21.1.3.27 String.prototype[@@iterator]()
      __webpack_require__(78)(String, 'String', function (iterated) {
        this._t = String(iterated); // target
        this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length) return {value: undefined, done: true};
        point = $at(O, index);
        this._i += point.length;
        return {value: point, done: false};
      });


      /***/
    }),
    /* 194 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $at = __webpack_require__(77)(false);
      $export($export.P, 'String', {
        // 21.1.3.3 String.prototype.codePointAt(pos)
        codePointAt: function codePointAt(pos) {
          return $at(this, pos);
        }
      });


      /***/
    }),
    /* 195 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

      var $export = __webpack_require__(0);
      var toLength = __webpack_require__(8);
      var context = __webpack_require__(80);
      var ENDS_WITH = 'endsWith';
      var $endsWith = ''[ENDS_WITH];

      $export($export.P + $export.F * __webpack_require__(81)(ENDS_WITH), 'String', {
        endsWith: function endsWith(searchString /* , endPosition = @length */) {
          var that = context(this, searchString, ENDS_WITH);
          var endPosition = arguments.length > 1 ? arguments[1] : undefined;
          var len = toLength(that.length);
          var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
          var search = String(searchString);
          return $endsWith
            ? $endsWith.call(that, search, end)
            : that.slice(end - search.length, end) === search;
        }
      });


      /***/
    }),
    /* 196 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

      var $export = __webpack_require__(0);
      var context = __webpack_require__(80);
      var INCLUDES = 'includes';

      $export($export.P + $export.F * __webpack_require__(81)(INCLUDES), 'String', {
        includes: function includes(searchString /* , position = 0 */) {
          return !!~context(this, searchString, INCLUDES)
            .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
        }
      });


      /***/
    }),
    /* 197 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);

      $export($export.P, 'String', {
        // 21.1.3.13 String.prototype.repeat(count)
        repeat: __webpack_require__(74)
      });


      /***/
    }),
    /* 198 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

      var $export = __webpack_require__(0);
      var toLength = __webpack_require__(8);
      var context = __webpack_require__(80);
      var STARTS_WITH = 'startsWith';
      var $startsWith = ''[STARTS_WITH];

      $export($export.P + $export.F * __webpack_require__(81)(STARTS_WITH), 'String', {
        startsWith: function startsWith(searchString /* , position = 0 */) {
          var that = context(this, searchString, STARTS_WITH);
          var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
          var search = String(searchString);
          return $startsWith
            ? $startsWith.call(that, search, index)
            : that.slice(index, index + search.length) === search;
        }
      });


      /***/
    }),
    /* 199 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.2 String.prototype.anchor(name)
      __webpack_require__(15)('anchor', function (createHTML) {
        return function anchor(name) {
          return createHTML(this, 'a', 'name', name);
        };
      });


      /***/
    }),
    /* 200 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.3 String.prototype.big()
      __webpack_require__(15)('big', function (createHTML) {
        return function big() {
          return createHTML(this, 'big', '', '');
        };
      });


      /***/
    }),
    /* 201 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.4 String.prototype.blink()
      __webpack_require__(15)('blink', function (createHTML) {
        return function blink() {
          return createHTML(this, 'blink', '', '');
        };
      });


      /***/
    }),
    /* 202 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.5 String.prototype.bold()
      __webpack_require__(15)('bold', function (createHTML) {
        return function bold() {
          return createHTML(this, 'b', '', '');
        };
      });


      /***/
    }),
    /* 203 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.6 String.prototype.fixed()
      __webpack_require__(15)('fixed', function (createHTML) {
        return function fixed() {
          return createHTML(this, 'tt', '', '');
        };
      });


      /***/
    }),
    /* 204 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.7 String.prototype.fontcolor(color)
      __webpack_require__(15)('fontcolor', function (createHTML) {
        return function fontcolor(color) {
          return createHTML(this, 'font', 'color', color);
        };
      });


      /***/
    }),
    /* 205 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.8 String.prototype.fontsize(size)
      __webpack_require__(15)('fontsize', function (createHTML) {
        return function fontsize(size) {
          return createHTML(this, 'font', 'size', size);
        };
      });


      /***/
    }),
    /* 206 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.9 String.prototype.italics()
      __webpack_require__(15)('italics', function (createHTML) {
        return function italics() {
          return createHTML(this, 'i', '', '');
        };
      });


      /***/
    }),
    /* 207 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.10 String.prototype.link(url)
      __webpack_require__(15)('link', function (createHTML) {
        return function link(url) {
          return createHTML(this, 'a', 'href', url);
        };
      });


      /***/
    }),
    /* 208 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.11 String.prototype.small()
      __webpack_require__(15)('small', function (createHTML) {
        return function small() {
          return createHTML(this, 'small', '', '');
        };
      });


      /***/
    }),
    /* 209 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.12 String.prototype.strike()
      __webpack_require__(15)('strike', function (createHTML) {
        return function strike() {
          return createHTML(this, 'strike', '', '');
        };
      });


      /***/
    }),
    /* 210 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.13 String.prototype.sub()
      __webpack_require__(15)('sub', function (createHTML) {
        return function sub() {
          return createHTML(this, 'sub', '', '');
        };
      });


      /***/
    }),
    /* 211 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// B.2.3.14 String.prototype.sup()
      __webpack_require__(15)('sup', function (createHTML) {
        return function sup() {
          return createHTML(this, 'sup', '', '');
        };
      });


      /***/
    }),
    /* 212 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
      var $export = __webpack_require__(0);

      $export($export.S, 'Date', {
        now: function () {
          return new Date().getTime();
        }
      });


      /***/
    }),
    /* 213 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toObject = __webpack_require__(9);
      var toPrimitive = __webpack_require__(23);

      $export($export.P + $export.F * __webpack_require__(3)(function () {
        return new Date(NaN).toJSON() !== null
          || Date.prototype.toJSON.call({
            toISOString: function () {
              return 1;
            }
          }) !== 1;
      }), 'Date', {
        // eslint-disable-next-line no-unused-vars
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O);
          return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
        }
      });


      /***/
    }),
    /* 214 */
    /***/ (function (module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
      var $export = __webpack_require__(0);
      var toISOString = __webpack_require__(215);

// PhantomJS / old WebKit has a broken implementations
      $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
        toISOString: toISOString
      });


      /***/
    }),
    /* 215 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
      var fails = __webpack_require__(3);
      var getTime = Date.prototype.getTime;
      var $toISOString = Date.prototype.toISOString;

      var lz = function (num) {
        return num > 9 ? num : '0' + num;
      };

// PhantomJS / old WebKit has a broken implementations
      module.exports = (fails(function () {
        return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
      }) || !fails(function () {
        $toISOString.call(new Date(NaN));
      })) ? function toISOString() {
        if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
        var d = this;
        var y = d.getUTCFullYear();
        var m = d.getUTCMilliseconds();
        var s = y < 0 ? '-' : y > 9999 ? '+' : '';
        return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
          '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
          'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
          ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
      } : $toISOString;


      /***/
    }),
    /* 216 */
    /***/ (function (module, exports, __webpack_require__) {

      var DateProto = Date.prototype;
      var INVALID_DATE = 'Invalid Date';
      var TO_STRING = 'toString';
      var $toString = DateProto[TO_STRING];
      var getTime = DateProto.getTime;
      if (new Date(NaN) + '' != INVALID_DATE) {
        __webpack_require__(14)(DateProto, TO_STRING, function toString() {
          var value = getTime.call(this);
          // eslint-disable-next-line no-self-compare
          return value === value ? $toString.call(this) : INVALID_DATE;
        });
      }


      /***/
    }),
    /* 217 */
    /***/ (function (module, exports, __webpack_require__) {

      var TO_PRIMITIVE = __webpack_require__(5)('toPrimitive');
      var proto = Date.prototype;

      if (!(TO_PRIMITIVE in proto)) __webpack_require__(13)(proto, TO_PRIMITIVE, __webpack_require__(218));


      /***/
    }),
    /* 218 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var anObject = __webpack_require__(1);
      var toPrimitive = __webpack_require__(23);
      var NUMBER = 'number';

      module.exports = function (hint) {
        if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
        return toPrimitive(anObject(this), hint != NUMBER);
      };


      /***/
    }),
    /* 219 */
    /***/ (function (module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
      var $export = __webpack_require__(0);

      $export($export.S, 'Array', {isArray: __webpack_require__(54)});


      /***/
    }),
    /* 220 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var ctx = __webpack_require__(19);
      var $export = __webpack_require__(0);
      var toObject = __webpack_require__(9);
      var call = __webpack_require__(108);
      var isArrayIter = __webpack_require__(82);
      var toLength = __webpack_require__(8);
      var createProperty = __webpack_require__(83);
      var getIterFn = __webpack_require__(84);

      $export($export.S + $export.F * !__webpack_require__(56)(function (iter) {
        Array.from(iter);
      }), 'Array', {
        // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
        from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
          var O = toObject(arrayLike);
          var C = typeof this == 'function' ? this : Array;
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : undefined;
          var mapping = mapfn !== undefined;
          var index = 0;
          var iterFn = getIterFn(O);
          var length, result, step, iterator;
          if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
          // if object isn't iterable or it's array with default iterator - use simple case
          if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
            for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
              createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
            }
          } else {
            length = toLength(O.length);
            for (result = new C(length); length > index; index++) {
              createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
            }
          }
          result.length = index;
          return result;
        }
      });


      /***/
    }),
    /* 221 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var createProperty = __webpack_require__(83);

// WebKit Array.of isn't generic
      $export($export.S + $export.F * __webpack_require__(3)(function () {
        function F() { /* empty */
        }

        return !(Array.of.call(F) instanceof F);
      }), 'Array', {
        // 22.1.2.3 Array.of( ...items)
        of: function of(/* ...args */) {
          var index = 0;
          var aLen = arguments.length;
          var result = new (typeof this == 'function' ? this : Array)(aLen);
          while (aLen > index) createProperty(result, index, arguments[index++]);
          result.length = aLen;
          return result;
        }
      });


      /***/
    }),
    /* 222 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 22.1.3.13 Array.prototype.join(separator)
      var $export = __webpack_require__(0);
      var toIObject = __webpack_require__(16);
      var arrayJoin = [].join;

// fallback for not array-like strings
      $export($export.P + $export.F * (__webpack_require__(48) != Object || !__webpack_require__(21)(arrayJoin)), 'Array', {
        join: function join(separator) {
          return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
        }
      });


      /***/
    }),
    /* 223 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var html = __webpack_require__(70);
      var cof = __webpack_require__(20);
      var toAbsoluteIndex = __webpack_require__(37);
      var toLength = __webpack_require__(8);
      var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
      $export($export.P + $export.F * __webpack_require__(3)(function () {
        if (html) arraySlice.call(html);
      }), 'Array', {
        slice: function slice(begin, end) {
          var len = toLength(this.length);
          var klass = cof(this);
          end = end === undefined ? len : end;
          if (klass == 'Array') return arraySlice.call(this, begin, end);
          var start = toAbsoluteIndex(begin, len);
          var upTo = toAbsoluteIndex(end, len);
          var size = toLength(upTo - start);
          var cloned = Array(size);
          var i = 0;
          for (; i < size; i++) cloned[i] = klass == 'String'
            ? this.charAt(start + i)
            : this[start + i];
          return cloned;
        }
      });


      /***/
    }),
    /* 224 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var aFunction = __webpack_require__(10);
      var toObject = __webpack_require__(9);
      var fails = __webpack_require__(3);
      var $sort = [].sort;
      var test = [1, 2, 3];

      $export($export.P + $export.F * (fails(function () {
        // IE8-
        test.sort(undefined);
      }) || !fails(function () {
        // V8 bug
        test.sort(null);
        // Old WebKit
      }) || !__webpack_require__(21)($sort)), 'Array', {
        // 22.1.3.25 Array.prototype.sort(comparefn)
        sort: function sort(comparefn) {
          return comparefn === undefined
            ? $sort.call(toObject(this))
            : $sort.call(toObject(this), aFunction(comparefn));
        }
      });


      /***/
    }),
    /* 225 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $forEach = __webpack_require__(27)(0);
      var STRICT = __webpack_require__(21)([].forEach, true);

      $export($export.P + $export.F * !STRICT, 'Array', {
        // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
        forEach: function forEach(callbackfn /* , thisArg */) {
          return $forEach(this, callbackfn, arguments[1]);
        }
      });


      /***/
    }),
    /* 226 */
    /***/ (function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(4);
      var isArray = __webpack_require__(54);
      var SPECIES = __webpack_require__(5)('species');

      module.exports = function (original) {
        var C;
        if (isArray(original)) {
          C = original.constructor;
          // cross-realm fallback
          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
          if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }
        return C === undefined ? Array : C;
      };


      /***/
    }),
    /* 227 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $map = __webpack_require__(27)(1);

      $export($export.P + $export.F * !__webpack_require__(21)([].map, true), 'Array', {
        // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
        map: function map(callbackfn /* , thisArg */) {
          return $map(this, callbackfn, arguments[1]);
        }
      });


      /***/
    }),
    /* 228 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $filter = __webpack_require__(27)(2);

      $export($export.P + $export.F * !__webpack_require__(21)([].filter, true), 'Array', {
        // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
        filter: function filter(callbackfn /* , thisArg */) {
          return $filter(this, callbackfn, arguments[1]);
        }
      });


      /***/
    }),
    /* 229 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $some = __webpack_require__(27)(3);

      $export($export.P + $export.F * !__webpack_require__(21)([].some, true), 'Array', {
        // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
        some: function some(callbackfn /* , thisArg */) {
          return $some(this, callbackfn, arguments[1]);
        }
      });


      /***/
    }),
    /* 230 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $every = __webpack_require__(27)(4);

      $export($export.P + $export.F * !__webpack_require__(21)([].every, true), 'Array', {
        // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
        every: function every(callbackfn /* , thisArg */) {
          return $every(this, callbackfn, arguments[1]);
        }
      });


      /***/
    }),
    /* 231 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $reduce = __webpack_require__(109);

      $export($export.P + $export.F * !__webpack_require__(21)([].reduce, true), 'Array', {
        // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
        reduce: function reduce(callbackfn /* , initialValue */) {
          return $reduce(this, callbackfn, arguments.length, arguments[1], false);
        }
      });


      /***/
    }),
    /* 232 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $reduce = __webpack_require__(109);

      $export($export.P + $export.F * !__webpack_require__(21)([].reduceRight, true), 'Array', {
        // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
        reduceRight: function reduceRight(callbackfn /* , initialValue */) {
          return $reduce(this, callbackfn, arguments.length, arguments[1], true);
        }
      });


      /***/
    }),
    /* 233 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $indexOf = __webpack_require__(52)(false);
      var $native = [].indexOf;
      var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

      $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(21)($native)), 'Array', {
        // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
        indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
          return NEGATIVE_ZERO
            // convert -0 to +0
            ? $native.apply(this, arguments) || 0
            : $indexOf(this, searchElement, arguments[1]);
        }
      });


      /***/
    }),
    /* 234 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toIObject = __webpack_require__(16);
      var toInteger = __webpack_require__(25);
      var toLength = __webpack_require__(8);
      var $native = [].lastIndexOf;
      var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

      $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(21)($native)), 'Array', {
        // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
        lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
          // convert -0 to +0
          if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
          var O = toIObject(this);
          var length = toLength(O.length);
          var index = length - 1;
          if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
          if (index < 0) index = length + index;
          for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
          return -1;
        }
      });


      /***/
    }),
    /* 235 */
    /***/ (function (module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
      var $export = __webpack_require__(0);

      $export($export.P, 'Array', {copyWithin: __webpack_require__(110)});

      __webpack_require__(31)('copyWithin');


      /***/
    }),
    /* 236 */
    /***/ (function (module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
      var $export = __webpack_require__(0);

      $export($export.P, 'Array', {fill: __webpack_require__(86)});

      __webpack_require__(31)('fill');


      /***/
    }),
    /* 237 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
      var $export = __webpack_require__(0);
      var $find = __webpack_require__(27)(5);
      var KEY = 'find';
      var forced = true;
// Shouldn't skip holes
      if (KEY in []) Array(1)[KEY](function () {
        forced = false;
      });
      $export($export.P + $export.F * forced, 'Array', {
        find: function find(callbackfn /* , that = undefined */) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      __webpack_require__(31)(KEY);


      /***/
    }),
    /* 238 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
      var $export = __webpack_require__(0);
      var $find = __webpack_require__(27)(6);
      var KEY = 'findIndex';
      var forced = true;
// Shouldn't skip holes
      if (KEY in []) Array(1)[KEY](function () {
        forced = false;
      });
      $export($export.P + $export.F * forced, 'Array', {
        findIndex: function findIndex(callbackfn /* , that = undefined */) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      __webpack_require__(31)(KEY);


      /***/
    }),
    /* 239 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(40)('Array');


      /***/
    }),
    /* 240 */
    /***/ (function (module, exports, __webpack_require__) {

      var global = __webpack_require__(2);
      var inheritIfRequired = __webpack_require__(73);
      var dP = __webpack_require__(7).f;
      var gOPN = __webpack_require__(39).f;
      var isRegExp = __webpack_require__(55);
      var $flags = __webpack_require__(57);
      var $RegExp = global.RegExp;
      var Base = $RegExp;
      var proto = $RegExp.prototype;
      var re1 = /a/g;
      var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
      var CORRECT_NEW = new $RegExp(re1) !== re1;

      if (__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(3)(function () {
          re2[__webpack_require__(5)('match')] = false;
          // RegExp constructor can alter flags and IsRegExp works correct with @@match
          return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
        }))) {
        $RegExp = function RegExp(p, f) {
          var tiRE = this instanceof $RegExp;
          var piRE = isRegExp(p);
          var fiU = f === undefined;
          return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
            : inheritIfRequired(CORRECT_NEW
              ? new Base(piRE && !fiU ? p.source : p, f)
              : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
              , tiRE ? this : proto, $RegExp);
        };
        var proxy = function (key) {
          key in $RegExp || dP($RegExp, key, {
            configurable: true,
            get: function () {
              return Base[key];
            },
            set: function (it) {
              Base[key] = it;
            }
          });
        };
        for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
        proto.constructor = $RegExp;
        $RegExp.prototype = proto;
        __webpack_require__(14)(global, 'RegExp', $RegExp);
      }

      __webpack_require__(40)('RegExp');


      /***/
    }),
    /* 241 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      __webpack_require__(112);
      var anObject = __webpack_require__(1);
      var $flags = __webpack_require__(57);
      var DESCRIPTORS = __webpack_require__(6);
      var TO_STRING = 'toString';
      var $toString = /./[TO_STRING];

      var define = function (fn) {
        __webpack_require__(14)(RegExp.prototype, TO_STRING, fn, true);
      };

// 21.2.5.14 RegExp.prototype.toString()
      if (__webpack_require__(3)(function () {
          return $toString.call({source: 'a', flags: 'b'}) != '/a/b';
        })) {
        define(function toString() {
          var R = anObject(this);
          return '/'.concat(R.source, '/',
            'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
        });
// FF44- RegExp#toString has a wrong name
      } else if ($toString.name != TO_STRING) {
        define(function toString() {
          return $toString.call(this);
        });
      }


      /***/
    }),
    /* 242 */
    /***/ (function (module, exports, __webpack_require__) {

// @@match logic
      __webpack_require__(58)('match', 1, function (defined, MATCH, $match) {
        // 21.1.3.11 String.prototype.match(regexp)
        return [function match(regexp) {
          'use strict';
          var O = defined(this);
          var fn = regexp == undefined ? undefined : regexp[MATCH];
          return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        }, $match];
      });


      /***/
    }),
    /* 243 */
    /***/ (function (module, exports, __webpack_require__) {

// @@replace logic
      __webpack_require__(58)('replace', 2, function (defined, REPLACE, $replace) {
        // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
        return [function replace(searchValue, replaceValue) {
          'use strict';
          var O = defined(this);
          var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
          return fn !== undefined
            ? fn.call(searchValue, O, replaceValue)
            : $replace.call(String(O), searchValue, replaceValue);
        }, $replace];
      });


      /***/
    }),
    /* 244 */
    /***/ (function (module, exports, __webpack_require__) {

// @@search logic
      __webpack_require__(58)('search', 1, function (defined, SEARCH, $search) {
        // 21.1.3.15 String.prototype.search(regexp)
        return [function search(regexp) {
          'use strict';
          var O = defined(this);
          var fn = regexp == undefined ? undefined : regexp[SEARCH];
          return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        }, $search];
      });


      /***/
    }),
    /* 245 */
    /***/ (function (module, exports, __webpack_require__) {

// @@split logic
      __webpack_require__(58)('split', 2, function (defined, SPLIT, $split) {
        'use strict';
        var isRegExp = __webpack_require__(55);
        var _split = $split;
        var $push = [].push;
        var $SPLIT = 'split';
        var LENGTH = 'length';
        var LAST_INDEX = 'lastIndex';
        if (
          'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
          'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
          'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
          '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
          '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
          ''[$SPLIT](/.?/)[LENGTH]
        ) {
          var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
          // based on es5-shim implementation, need to rework it
          $split = function (separator, limit) {
            var string = String(this);
            if (separator === undefined && limit === 0) return [];
            // If `separator` is not a regex, use native split
            if (!isRegExp(separator)) return _split.call(string, separator, limit);
            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') +
              (separator.multiline ? 'm' : '') +
              (separator.unicode ? 'u' : '') +
              (separator.sticky ? 'y' : '');
            var lastLastIndex = 0;
            var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
            // Make `global` and avoid `lastIndex` issues by working with a copy
            var separatorCopy = new RegExp(separator.source, flags + 'g');
            var separator2, match, lastIndex, lastLength, i;
            // Doesn't need flags gy, but they don't hurt
            if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
            while (match = separatorCopy.exec(string)) {
              // `separatorCopy.lastIndex` is not reliable cross-browser
              lastIndex = match.index + match[0][LENGTH];
              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
                // eslint-disable-next-line no-loop-func
                if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
                  for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
                });
                if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
                lastLength = match[0][LENGTH];
                lastLastIndex = lastIndex;
                if (output[LENGTH] >= splitLimit) break;
              }
              if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
            }
            if (lastLastIndex === string[LENGTH]) {
              if (lastLength || !separatorCopy.test('')) output.push('');
            } else output.push(string.slice(lastLastIndex));
            return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
          };
          // Chakra, V8
        } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
          $split = function (separator, limit) {
            return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
          };
        }
        // 21.1.3.17 String.prototype.split(separator, limit)
        return [function split(separator, limit) {
          var O = defined(this);
          var fn = separator == undefined ? undefined : separator[SPLIT];
          return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
        }, $split];
      });


      /***/
    }),
    /* 246 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var LIBRARY = __webpack_require__(35);
      var global = __webpack_require__(2);
      var ctx = __webpack_require__(19);
      var classof = __webpack_require__(50);
      var $export = __webpack_require__(0);
      var isObject = __webpack_require__(4);
      var aFunction = __webpack_require__(10);
      var anInstance = __webpack_require__(41);
      var forOf = __webpack_require__(42);
      var speciesConstructor = __webpack_require__(59);
      var task = __webpack_require__(88).set;
      var microtask = __webpack_require__(89)();
      var newPromiseCapabilityModule = __webpack_require__(90);
      var perform = __webpack_require__(113);
      var promiseResolve = __webpack_require__(114);
      var PROMISE = 'Promise';
      var TypeError = global.TypeError;
      var process = global.process;
      var $Promise = global[PROMISE];
      var isNode = classof(process) == 'process';
      var empty = function () { /* empty */
      };
      var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
      var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

      var USE_NATIVE = !!function () {
        try {
          // correct subclassing with @@species support
          var promise = $Promise.resolve(1);
          var FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function (exec) {
            exec(empty, empty);
          };
          // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
          return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
        } catch (e) { /* empty */
        }
      }();

// helpers
      var isThenable = function (it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
      };
      var notify = function (promise, isReject) {
        if (promise._n) return;
        promise._n = true;
        var chain = promise._c;
        microtask(function () {
          var value = promise._v;
          var ok = promise._s == 1;
          var i = 0;
          var run = function (reaction) {
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then;
            try {
              if (handler) {
                if (!ok) {
                  if (promise._h == 2) onHandleUnhandled(promise);
                  promise._h = 1;
                }
                if (handler === true) result = value;
                else {
                  if (domain) domain.enter();
                  result = handler(value);
                  if (domain) domain.exit();
                }
                if (result === reaction.promise) {
                  reject(TypeError('Promise-chain cycle'));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else resolve(result);
              } else reject(value);
            } catch (e) {
              reject(e);
            }
          };
          while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
          promise._c = [];
          promise._n = false;
          if (isReject && !promise._h) onUnhandled(promise);
        });
      };
      var onUnhandled = function (promise) {
        task.call(global, function () {
          var value = promise._v;
          var unhandled = isUnhandled(promise);
          var result, handler, console;
          if (unhandled) {
            result = perform(function () {
              if (isNode) {
                process.emit('unhandledRejection', value, promise);
              } else if (handler = global.onunhandledrejection) {
                handler({promise: promise, reason: value});
              } else if ((console = global.console) && console.error) {
                console.error('Unhandled promise rejection', value);
              }
            });
            // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
            promise._h = isNode || isUnhandled(promise) ? 2 : 1;
          }
          promise._a = undefined;
          if (unhandled && result.e) throw result.v;
        });
      };
      var isUnhandled = function (promise) {
        if (promise._h == 1) return false;
        var chain = promise._a || promise._c;
        var i = 0;
        var reaction;
        while (chain.length > i) {
          reaction = chain[i++];
          if (reaction.fail || !isUnhandled(reaction.promise)) return false;
        }
        return true;
      };
      var onHandleUnhandled = function (promise) {
        task.call(global, function () {
          var handler;
          if (isNode) {
            process.emit('rejectionHandled', promise);
          } else if (handler = global.onrejectionhandled) {
            handler({promise: promise, reason: promise._v});
          }
        });
      };
      var $reject = function (value) {
        var promise = this;
        if (promise._d) return;
        promise._d = true;
        promise = promise._w || promise; // unwrap
        promise._v = value;
        promise._s = 2;
        if (!promise._a) promise._a = promise._c.slice();
        notify(promise, true);
      };
      var $resolve = function (value) {
        var promise = this;
        var then;
        if (promise._d) return;
        promise._d = true;
        promise = promise._w || promise; // unwrap
        try {
          if (promise === value) throw TypeError("Promise can't be resolved itself");
          if (then = isThenable(value)) {
            microtask(function () {
              var wrapper = {_w: promise, _d: false}; // wrap
              try {
                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
              } catch (e) {
                $reject.call(wrapper, e);
              }
            });
          } else {
            promise._v = value;
            promise._s = 1;
            notify(promise, false);
          }
        } catch (e) {
          $reject.call({_w: promise, _d: false}, e); // wrap
        }
      };

// constructor polyfill
      if (!USE_NATIVE) {
        // 25.4.3.1 Promise(executor)
        $Promise = function Promise(executor) {
          anInstance(this, $Promise, PROMISE, '_h');
          aFunction(executor);
          Internal.call(this);
          try {
            executor(ctx($resolve, this, 1), ctx($reject, this, 1));
          } catch (err) {
            $reject.call(this, err);
          }
        };
        // eslint-disable-next-line no-unused-vars
        Internal = function Promise(executor) {
          this._c = [];             // <- awaiting reactions
          this._a = undefined;      // <- checked in isUnhandled reactions
          this._s = 0;              // <- state
          this._d = false;          // <- done
          this._v = undefined;      // <- value
          this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
          this._n = false;          // <- notify
        };
        Internal.prototype = __webpack_require__(43)($Promise.prototype, {
          // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
          then: function then(onFulfilled, onRejected) {
            var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = isNode ? process.domain : undefined;
            this._c.push(reaction);
            if (this._a) this._a.push(reaction);
            if (this._s) notify(this, false);
            return reaction.promise;
          },
          // 25.4.5.1 Promise.prototype.catch(onRejected)
          'catch': function (onRejected) {
            return this.then(undefined, onRejected);
          }
        });
        OwnPromiseCapability = function () {
          var promise = new Internal();
          this.promise = promise;
          this.resolve = ctx($resolve, promise, 1);
          this.reject = ctx($reject, promise, 1);
        };
        newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
          return C === $Promise || C === Wrapper
            ? new OwnPromiseCapability(C)
            : newGenericPromiseCapability(C);
        };
      }

      $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
      __webpack_require__(44)($Promise, PROMISE);
      __webpack_require__(40)(PROMISE);
      Wrapper = __webpack_require__(22)[PROMISE];

// statics
      $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
        // 25.4.4.5 Promise.reject(r)
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          var $$reject = capability.reject;
          $$reject(r);
          return capability.promise;
        }
      });
      $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
        // 25.4.4.6 Promise.resolve(x)
        resolve: function resolve(x) {
          return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
        }
      });
      $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(56)(function (iter) {
        $Promise.all(iter)['catch'](empty);
      })), PROMISE, {
        // 25.4.4.1 Promise.all(iterable)
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var values = [];
            var index = 0;
            var remaining = 1;
            forOf(iterable, false, function (promise) {
              var $index = index++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              C.resolve(promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[$index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.e) reject(result.v);
          return capability.promise;
        },
        // 25.4.4.4 Promise.race(iterable)
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function () {
            forOf(iterable, false, function (promise) {
              C.resolve(promise).then(capability.resolve, reject);
            });
          });
          if (result.e) reject(result.v);
          return capability.promise;
        }
      });


      /***/
    }),
    /* 247 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var weak = __webpack_require__(119);
      var validate = __webpack_require__(47);
      var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
      __webpack_require__(60)(WEAK_SET, function (get) {
        return function WeakSet() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.4.3.1 WeakSet.prototype.add(value)
        add: function add(value) {
          return weak.def(validate(this, WEAK_SET), value, true);
        }
      }, weak, false, true);


      /***/
    }),
    /* 248 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var $typed = __webpack_require__(61);
      var buffer = __webpack_require__(91);
      var anObject = __webpack_require__(1);
      var toAbsoluteIndex = __webpack_require__(37);
      var toLength = __webpack_require__(8);
      var isObject = __webpack_require__(4);
      var ArrayBuffer = __webpack_require__(2).ArrayBuffer;
      var speciesConstructor = __webpack_require__(59);
      var $ArrayBuffer = buffer.ArrayBuffer;
      var $DataView = buffer.DataView;
      var $isView = $typed.ABV && ArrayBuffer.isView;
      var $slice = $ArrayBuffer.prototype.slice;
      var VIEW = $typed.VIEW;
      var ARRAY_BUFFER = 'ArrayBuffer';

      $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

      $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
        // 24.1.3.1 ArrayBuffer.isView(arg)
        isView: function isView(it) {
          return $isView && $isView(it) || isObject(it) && VIEW in it;
        }
      });

      $export($export.P + $export.U + $export.F * __webpack_require__(3)(function () {
        return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
      }), ARRAY_BUFFER, {
        // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
        slice: function slice(start, end) {
          if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
          var len = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, len);
          var final = toAbsoluteIndex(end === undefined ? len : end, len);
          var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
          var viewS = new $DataView(this);
          var viewT = new $DataView(result);
          var index = 0;
          while (first < final) {
            viewT.setUint8(index++, viewS.getUint8(first++));
          }
          return result;
        }
      });

      __webpack_require__(40)(ARRAY_BUFFER);


      /***/
    }),
    /* 249 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      $export($export.G + $export.W + $export.F * !__webpack_require__(61).ABV, {
        DataView: __webpack_require__(91).DataView
      });


      /***/
    }),
    /* 250 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Int8', 1, function (init) {
        return function Int8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 251 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Uint8', 1, function (init) {
        return function Uint8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 252 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Uint8', 1, function (init) {
        return function Uint8ClampedArray(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      }, true);


      /***/
    }),
    /* 253 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Int16', 2, function (init) {
        return function Int16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 254 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Uint16', 2, function (init) {
        return function Uint16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 255 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Int32', 4, function (init) {
        return function Int32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 256 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Uint32', 4, function (init) {
        return function Uint32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 257 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Float32', 4, function (init) {
        return function Float32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 258 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(28)('Float64', 8, function (init) {
        return function Float64Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });


      /***/
    }),
    /* 259 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
      var $export = __webpack_require__(0);
      var aFunction = __webpack_require__(10);
      var anObject = __webpack_require__(1);
      var rApply = (__webpack_require__(2).Reflect || {}).apply;
      var fApply = Function.apply;
// MS Edge argumentsList argument is optional
      $export($export.S + $export.F * !__webpack_require__(3)(function () {
        rApply(function () { /* empty */
        });
      }), 'Reflect', {
        apply: function apply(target, thisArgument, argumentsList) {
          var T = aFunction(target);
          var L = anObject(argumentsList);
          return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
        }
      });


      /***/
    }),
    /* 260 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
      var $export = __webpack_require__(0);
      var create = __webpack_require__(38);
      var aFunction = __webpack_require__(10);
      var anObject = __webpack_require__(1);
      var isObject = __webpack_require__(4);
      var fails = __webpack_require__(3);
      var bind = __webpack_require__(100);
      var rConstruct = (__webpack_require__(2).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
      var NEW_TARGET_BUG = fails(function () {
        function F() { /* empty */
        }

        return !(rConstruct(function () { /* empty */
        }, [], F) instanceof F);
      });
      var ARGS_BUG = !fails(function () {
        rConstruct(function () { /* empty */
        });
      });

      $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
        construct: function construct(Target, args /* , newTarget */) {
          aFunction(Target);
          anObject(args);
          var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
          if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
          if (Target == newTarget) {
            // w/o altered newTarget, optimization for 0-4 arguments
            switch (args.length) {
              case 0:
                return new Target();
              case 1:
                return new Target(args[0]);
              case 2:
                return new Target(args[0], args[1]);
              case 3:
                return new Target(args[0], args[1], args[2]);
              case 4:
                return new Target(args[0], args[1], args[2], args[3]);
            }
            // w/o altered newTarget, lot of arguments case
            var $args = [null];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
          }
          // with altered newTarget, not support built-in constructors
          var proto = newTarget.prototype;
          var instance = create(isObject(proto) ? proto : Object.prototype);
          var result = Function.apply.call(Target, instance, args);
          return isObject(result) ? result : instance;
        }
      });


      /***/
    }),
    /* 261 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
      var dP = __webpack_require__(7);
      var $export = __webpack_require__(0);
      var anObject = __webpack_require__(1);
      var toPrimitive = __webpack_require__(23);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
      $export($export.S + $export.F * __webpack_require__(3)(function () {
        // eslint-disable-next-line no-undef
        Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
      }), 'Reflect', {
        defineProperty: function defineProperty(target, propertyKey, attributes) {
          anObject(target);
          propertyKey = toPrimitive(propertyKey, true);
          anObject(attributes);
          try {
            dP.f(target, propertyKey, attributes);
            return true;
          } catch (e) {
            return false;
          }
        }
      });


      /***/
    }),
    /* 262 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
      var $export = __webpack_require__(0);
      var gOPD = __webpack_require__(17).f;
      var anObject = __webpack_require__(1);

      $export($export.S, 'Reflect', {
        deleteProperty: function deleteProperty(target, propertyKey) {
          var desc = gOPD(anObject(target), propertyKey);
          return desc && !desc.configurable ? false : delete target[propertyKey];
        }
      });


      /***/
    }),
    /* 263 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// 26.1.5 Reflect.enumerate(target)
      var $export = __webpack_require__(0);
      var anObject = __webpack_require__(1);
      var Enumerate = function (iterated) {
        this._t = anObject(iterated); // target
        this._i = 0;                  // next index
        var keys = this._k = [];      // keys
        var key;
        for (key in iterated) keys.push(key);
      };
      __webpack_require__(79)(Enumerate, 'Object', function () {
        var that = this;
        var keys = that._k;
        var key;
        do {
          if (that._i >= keys.length) return {value: undefined, done: true};
        } while (!((key = keys[that._i++]) in that._t));
        return {value: key, done: false};
      });

      $export($export.S, 'Reflect', {
        enumerate: function enumerate(target) {
          return new Enumerate(target);
        }
      });


      /***/
    }),
    /* 264 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
      var gOPD = __webpack_require__(17);
      var getPrototypeOf = __webpack_require__(18);
      var has = __webpack_require__(12);
      var $export = __webpack_require__(0);
      var isObject = __webpack_require__(4);
      var anObject = __webpack_require__(1);

      function get(target, propertyKey /* , receiver */) {
        var receiver = arguments.length < 3 ? target : arguments[2];
        var desc, proto;
        if (anObject(target) === receiver) return target[propertyKey];
        if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
          ? desc.value
          : desc.get !== undefined
            ? desc.get.call(receiver)
            : undefined;
        if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
      }

      $export($export.S, 'Reflect', {get: get});


      /***/
    }),
    /* 265 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
      var gOPD = __webpack_require__(17);
      var $export = __webpack_require__(0);
      var anObject = __webpack_require__(1);

      $export($export.S, 'Reflect', {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
          return gOPD.f(anObject(target), propertyKey);
        }
      });


      /***/
    }),
    /* 266 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
      var $export = __webpack_require__(0);
      var getProto = __webpack_require__(18);
      var anObject = __webpack_require__(1);

      $export($export.S, 'Reflect', {
        getPrototypeOf: function getPrototypeOf(target) {
          return getProto(anObject(target));
        }
      });


      /***/
    }),
    /* 267 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
      var $export = __webpack_require__(0);

      $export($export.S, 'Reflect', {
        has: function has(target, propertyKey) {
          return propertyKey in target;
        }
      });


      /***/
    }),
    /* 268 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
      var $export = __webpack_require__(0);
      var anObject = __webpack_require__(1);
      var $isExtensible = Object.isExtensible;

      $export($export.S, 'Reflect', {
        isExtensible: function isExtensible(target) {
          anObject(target);
          return $isExtensible ? $isExtensible(target) : true;
        }
      });


      /***/
    }),
    /* 269 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
      var $export = __webpack_require__(0);

      $export($export.S, 'Reflect', {ownKeys: __webpack_require__(121)});


      /***/
    }),
    /* 270 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
      var $export = __webpack_require__(0);
      var anObject = __webpack_require__(1);
      var $preventExtensions = Object.preventExtensions;

      $export($export.S, 'Reflect', {
        preventExtensions: function preventExtensions(target) {
          anObject(target);
          try {
            if ($preventExtensions) $preventExtensions(target);
            return true;
          } catch (e) {
            return false;
          }
        }
      });


      /***/
    }),
    /* 271 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
      var dP = __webpack_require__(7);
      var gOPD = __webpack_require__(17);
      var getPrototypeOf = __webpack_require__(18);
      var has = __webpack_require__(12);
      var $export = __webpack_require__(0);
      var createDesc = __webpack_require__(33);
      var anObject = __webpack_require__(1);
      var isObject = __webpack_require__(4);

      function set(target, propertyKey, V /* , receiver */) {
        var receiver = arguments.length < 4 ? target : arguments[3];
        var ownDesc = gOPD.f(anObject(target), propertyKey);
        var existingDescriptor, proto;
        if (!ownDesc) {
          if (isObject(proto = getPrototypeOf(target))) {
            return set(proto, propertyKey, V, receiver);
          }
          ownDesc = createDesc(0);
        }
        if (has(ownDesc, 'value')) {
          if (ownDesc.writable === false || !isObject(receiver)) return false;
          existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
          existingDescriptor.value = V;
          dP.f(receiver, propertyKey, existingDescriptor);
          return true;
        }
        return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
      }

      $export($export.S, 'Reflect', {set: set});


      /***/
    }),
    /* 272 */
    /***/ (function (module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
      var $export = __webpack_require__(0);
      var setProto = __webpack_require__(71);

      if (setProto) $export($export.S, 'Reflect', {
        setPrototypeOf: function setPrototypeOf(target, proto) {
          setProto.check(target, proto);
          try {
            setProto.set(target, proto);
            return true;
          } catch (e) {
            return false;
          }
        }
      });


      /***/
    }),
    /* 273 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/tc39/Array.prototype.includes
      var $export = __webpack_require__(0);
      var $includes = __webpack_require__(52)(true);

      $export($export.P, 'Array', {
        includes: function includes(el /* , fromIndex = 0 */) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
      });

      __webpack_require__(31)('includes');


      /***/
    }),
    /* 274 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
      var $export = __webpack_require__(0);
      var flattenIntoArray = __webpack_require__(122);
      var toObject = __webpack_require__(9);
      var toLength = __webpack_require__(8);
      var aFunction = __webpack_require__(10);
      var arraySpeciesCreate = __webpack_require__(85);

      $export($export.P, 'Array', {
        flatMap: function flatMap(callbackfn /* , thisArg */) {
          var O = toObject(this);
          var sourceLen, A;
          aFunction(callbackfn);
          sourceLen = toLength(O.length);
          A = arraySpeciesCreate(O, 0);
          flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
          return A;
        }
      });

      __webpack_require__(31)('flatMap');


      /***/
    }),
    /* 275 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
      var $export = __webpack_require__(0);
      var flattenIntoArray = __webpack_require__(122);
      var toObject = __webpack_require__(9);
      var toLength = __webpack_require__(8);
      var toInteger = __webpack_require__(25);
      var arraySpeciesCreate = __webpack_require__(85);

      $export($export.P, 'Array', {
        flatten: function flatten(/* depthArg = 1 */) {
          var depthArg = arguments[0];
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A = arraySpeciesCreate(O, 0);
          flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
          return A;
        }
      });

      __webpack_require__(31)('flatten');


      /***/
    }),
    /* 276 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/mathiasbynens/String.prototype.at
      var $export = __webpack_require__(0);
      var $at = __webpack_require__(77)(true);

      $export($export.P, 'String', {
        at: function at(pos) {
          return $at(this, pos);
        }
      });


      /***/
    }),
    /* 277 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/tc39/proposal-string-pad-start-end
      var $export = __webpack_require__(0);
      var $pad = __webpack_require__(123);

      $export($export.P, 'String', {
        padStart: function padStart(maxLength /* , fillString = ' ' */) {
          return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
        }
      });


      /***/
    }),
    /* 278 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/tc39/proposal-string-pad-start-end
      var $export = __webpack_require__(0);
      var $pad = __webpack_require__(123);

      $export($export.P, 'String', {
        padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
          return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
        }
      });


      /***/
    }),
    /* 279 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
      __webpack_require__(45)('trimLeft', function ($trim) {
        return function trimLeft() {
          return $trim(this, 1);
        };
      }, 'trimStart');


      /***/
    }),
    /* 280 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
      __webpack_require__(45)('trimRight', function ($trim) {
        return function trimRight() {
          return $trim(this, 2);
        };
      }, 'trimEnd');


      /***/
    }),
    /* 281 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://tc39.github.io/String.prototype.matchAll/
      var $export = __webpack_require__(0);
      var defined = __webpack_require__(24);
      var toLength = __webpack_require__(8);
      var isRegExp = __webpack_require__(55);
      var getFlags = __webpack_require__(57);
      var RegExpProto = RegExp.prototype;

      var $RegExpStringIterator = function (regexp, string) {
        this._r = regexp;
        this._s = string;
      };

      __webpack_require__(79)($RegExpStringIterator, 'RegExp String', function next() {
        var match = this._r.exec(this._s);
        return {value: match, done: match === null};
      });

      $export($export.P, 'String', {
        matchAll: function matchAll(regexp) {
          defined(this);
          if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
          var S = String(this);
          var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
          var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
          rx.lastIndex = toLength(regexp.lastIndex);
          return new $RegExpStringIterator(rx, S);
        }
      });


      /***/
    }),
    /* 282 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(67)('asyncIterator');


      /***/
    }),
    /* 283 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(67)('observable');


      /***/
    }),
    /* 284 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
      var $export = __webpack_require__(0);
      var ownKeys = __webpack_require__(121);
      var toIObject = __webpack_require__(16);
      var gOPD = __webpack_require__(17);
      var createProperty = __webpack_require__(83);

      $export($export.S, 'Object', {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIObject(object);
          var getDesc = gOPD.f;
          var keys = ownKeys(O);
          var result = {};
          var i = 0;
          var key, desc;
          while (keys.length > i) {
            desc = getDesc(O, key = keys[i++]);
            if (desc !== undefined) createProperty(result, key, desc);
          }
          return result;
        }
      });


      /***/
    }),
    /* 285 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
      var $export = __webpack_require__(0);
      var $values = __webpack_require__(124)(false);

      $export($export.S, 'Object', {
        values: function values(it) {
          return $values(it);
        }
      });


      /***/
    }),
    /* 286 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
      var $export = __webpack_require__(0);
      var $entries = __webpack_require__(124)(true);

      $export($export.S, 'Object', {
        entries: function entries(it) {
          return $entries(it);
        }
      });


      /***/
    }),
    /* 287 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toObject = __webpack_require__(9);
      var aFunction = __webpack_require__(10);
      var $defineProperty = __webpack_require__(7);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
      __webpack_require__(6) && $export($export.P + __webpack_require__(62), 'Object', {
        __defineGetter__: function __defineGetter__(P, getter) {
          $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
        }
      });


      /***/
    }),
    /* 288 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toObject = __webpack_require__(9);
      var aFunction = __webpack_require__(10);
      var $defineProperty = __webpack_require__(7);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
      __webpack_require__(6) && $export($export.P + __webpack_require__(62), 'Object', {
        __defineSetter__: function __defineSetter__(P, setter) {
          $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
        }
      });


      /***/
    }),
    /* 289 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toObject = __webpack_require__(9);
      var toPrimitive = __webpack_require__(23);
      var getPrototypeOf = __webpack_require__(18);
      var getOwnPropertyDescriptor = __webpack_require__(17).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
      __webpack_require__(6) && $export($export.P + __webpack_require__(62), 'Object', {
        __lookupGetter__: function __lookupGetter__(P) {
          var O = toObject(this);
          var K = toPrimitive(P, true);
          var D;
          do {
            if (D = getOwnPropertyDescriptor(O, K)) return D.get;
          } while (O = getPrototypeOf(O));
        }
      });


      /***/
    }),
    /* 290 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

      var $export = __webpack_require__(0);
      var toObject = __webpack_require__(9);
      var toPrimitive = __webpack_require__(23);
      var getPrototypeOf = __webpack_require__(18);
      var getOwnPropertyDescriptor = __webpack_require__(17).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
      __webpack_require__(6) && $export($export.P + __webpack_require__(62), 'Object', {
        __lookupSetter__: function __lookupSetter__(P) {
          var O = toObject(this);
          var K = toPrimitive(P, true);
          var D;
          do {
            if (D = getOwnPropertyDescriptor(O, K)) return D.set;
          } while (O = getPrototypeOf(O));
        }
      });


      /***/
    }),
    /* 291 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var $export = __webpack_require__(0);

      $export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(125)('Map')});


      /***/
    }),
    /* 292 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var $export = __webpack_require__(0);

      $export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(125)('Set')});


      /***/
    }),
    /* 293 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
      __webpack_require__(63)('Map');


      /***/
    }),
    /* 294 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
      __webpack_require__(63)('Set');


      /***/
    }),
    /* 295 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
      __webpack_require__(63)('WeakMap');


      /***/
    }),
    /* 296 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
      __webpack_require__(63)('WeakSet');


      /***/
    }),
    /* 297 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
      __webpack_require__(64)('Map');


      /***/
    }),
    /* 298 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
      __webpack_require__(64)('Set');


      /***/
    }),
    /* 299 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
      __webpack_require__(64)('WeakMap');


      /***/
    }),
    /* 300 */
    /***/ (function (module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
      __webpack_require__(64)('WeakSet');


      /***/
    }),
    /* 301 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
      var $export = __webpack_require__(0);

      $export($export.G, {global: __webpack_require__(2)});


      /***/
    }),
    /* 302 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
      var $export = __webpack_require__(0);

      $export($export.S, 'System', {global: __webpack_require__(2)});


      /***/
    }),
    /* 303 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
      var $export = __webpack_require__(0);
      var cof = __webpack_require__(20);

      $export($export.S, 'Error', {
        isError: function isError(it) {
          return cof(it) === 'Error';
        }
      });


      /***/
    }),
    /* 304 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        clamp: function clamp(x, lower, upper) {
          return Math.min(upper, Math.max(lower, x));
        }
      });


      /***/
    }),
    /* 305 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {DEG_PER_RAD: Math.PI / 180});


      /***/
    }),
    /* 306 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);
      var RAD_PER_DEG = 180 / Math.PI;

      $export($export.S, 'Math', {
        degrees: function degrees(radians) {
          return radians * RAD_PER_DEG;
        }
      });


      /***/
    }),
    /* 307 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);
      var scale = __webpack_require__(127);
      var fround = __webpack_require__(107);

      $export($export.S, 'Math', {
        fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
          return fround(scale(x, inLow, inHigh, outLow, outHigh));
        }
      });


      /***/
    }),
    /* 308 */
    /***/ (function (module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        iaddh: function iaddh(x0, x1, y0, y1) {
          var $x0 = x0 >>> 0;
          var $x1 = x1 >>> 0;
          var $y0 = y0 >>> 0;
          return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
        }
      });


      /***/
    }),
    /* 309 */
    /***/ (function (module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        isubh: function isubh(x0, x1, y0, y1) {
          var $x0 = x0 >>> 0;
          var $x1 = x1 >>> 0;
          var $y0 = y0 >>> 0;
          return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
        }
      });


      /***/
    }),
    /* 310 */
    /***/ (function (module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        imulh: function imulh(u, v) {
          var UINT16 = 0xffff;
          var $u = +u;
          var $v = +v;
          var u0 = $u & UINT16;
          var v0 = $v & UINT16;
          var u1 = $u >> 16;
          var v1 = $v >> 16;
          var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
          return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
        }
      });


      /***/
    }),
    /* 311 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {RAD_PER_DEG: 180 / Math.PI});


      /***/
    }),
    /* 312 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);
      var DEG_PER_RAD = Math.PI / 180;

      $export($export.S, 'Math', {
        radians: function radians(degrees) {
          return degrees * DEG_PER_RAD;
        }
      });


      /***/
    }),
    /* 313 */
    /***/ (function (module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {scale: __webpack_require__(127)});


      /***/
    }),
    /* 314 */
    /***/ (function (module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        umulh: function umulh(u, v) {
          var UINT16 = 0xffff;
          var $u = +u;
          var $v = +v;
          var u0 = $u & UINT16;
          var v0 = $v & UINT16;
          var u1 = $u >>> 16;
          var v1 = $v >>> 16;
          var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
          return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
        }
      });


      /***/
    }),
    /* 315 */
    /***/ (function (module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
      var $export = __webpack_require__(0);

      $export($export.S, 'Math', {
        signbit: function signbit(x) {
          // eslint-disable-next-line no-self-compare
          return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
        }
      });


      /***/
    }),
    /* 316 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// https://github.com/tc39/proposal-promise-finally

      var $export = __webpack_require__(0);
      var core = __webpack_require__(22);
      var global = __webpack_require__(2);
      var speciesConstructor = __webpack_require__(59);
      var promiseResolve = __webpack_require__(114);

      $export($export.P + $export.R, 'Promise', {
        'finally': function (onFinally) {
          var C = speciesConstructor(this, core.Promise || global.Promise);
          var isFunction = typeof onFinally == 'function';
          return this.then(
            isFunction ? function (x) {
              return promiseResolve(C, onFinally()).then(function () {
                return x;
              });
            } : onFinally,
            isFunction ? function (e) {
              return promiseResolve(C, onFinally()).then(function () {
                throw e;
              });
            } : onFinally
          );
        }
      });


      /***/
    }),
    /* 317 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/tc39/proposal-promise-try
      var $export = __webpack_require__(0);
      var newPromiseCapability = __webpack_require__(90);
      var perform = __webpack_require__(113);

      $export($export.S, 'Promise', {
        'try': function (callbackfn) {
          var promiseCapability = newPromiseCapability.f(this);
          var result = perform(callbackfn);
          (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
          return promiseCapability.promise;
        }
      });


      /***/
    }),
    /* 318 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var toMetaKey = metadata.key;
      var ordinaryDefineOwnMetadata = metadata.set;

      metadata.exp({
        defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
          ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
        }
      });


      /***/
    }),
    /* 319 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var toMetaKey = metadata.key;
      var getOrCreateMetadataMap = metadata.map;
      var store = metadata.store;

      metadata.exp({
        deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
          var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
          var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
          if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
          if (metadataMap.size) return true;
          var targetMetadata = store.get(target);
          targetMetadata['delete'](targetKey);
          return !!targetMetadata.size || store['delete'](target);
        }
      });


      /***/
    }),
    /* 320 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var getPrototypeOf = __webpack_require__(18);
      var ordinaryHasOwnMetadata = metadata.has;
      var ordinaryGetOwnMetadata = metadata.get;
      var toMetaKey = metadata.key;

      var ordinaryGetMetadata = function (MetadataKey, O, P) {
        var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = getPrototypeOf(O);
        return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
      };

      metadata.exp({
        getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
          return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });


      /***/
    }),
    /* 321 */
    /***/ (function (module, exports, __webpack_require__) {

      var Set = __webpack_require__(117);
      var from = __webpack_require__(126);
      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var getPrototypeOf = __webpack_require__(18);
      var ordinaryOwnMetadataKeys = metadata.keys;
      var toMetaKey = metadata.key;

      var ordinaryMetadataKeys = function (O, P) {
        var oKeys = ordinaryOwnMetadataKeys(O, P);
        var parent = getPrototypeOf(O);
        if (parent === null) return oKeys;
        var pKeys = ordinaryMetadataKeys(parent, P);
        return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
      };

      metadata.exp({
        getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
          return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
        }
      });


      /***/
    }),
    /* 322 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var ordinaryGetOwnMetadata = metadata.get;
      var toMetaKey = metadata.key;

      metadata.exp({
        getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
          return ordinaryGetOwnMetadata(metadataKey, anObject(target)
            , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });


      /***/
    }),
    /* 323 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var ordinaryOwnMetadataKeys = metadata.keys;
      var toMetaKey = metadata.key;

      metadata.exp({
        getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
          return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
        }
      });


      /***/
    }),
    /* 324 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var getPrototypeOf = __webpack_require__(18);
      var ordinaryHasOwnMetadata = metadata.has;
      var toMetaKey = metadata.key;

      var ordinaryHasMetadata = function (MetadataKey, O, P) {
        var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn) return true;
        var parent = getPrototypeOf(O);
        return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
      };

      metadata.exp({
        hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
          return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });


      /***/
    }),
    /* 325 */
    /***/ (function (module, exports, __webpack_require__) {

      var metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var ordinaryHasOwnMetadata = metadata.has;
      var toMetaKey = metadata.key;

      metadata.exp({
        hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
          return ordinaryHasOwnMetadata(metadataKey, anObject(target)
            , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });


      /***/
    }),
    /* 326 */
    /***/ (function (module, exports, __webpack_require__) {

      var $metadata = __webpack_require__(29);
      var anObject = __webpack_require__(1);
      var aFunction = __webpack_require__(10);
      var toMetaKey = $metadata.key;
      var ordinaryDefineOwnMetadata = $metadata.set;

      $metadata.exp({
        metadata: function metadata(metadataKey, metadataValue) {
          return function decorator(target, targetKey) {
            ordinaryDefineOwnMetadata(
              metadataKey, metadataValue,
              (targetKey !== undefined ? anObject : aFunction)(target),
              toMetaKey(targetKey)
            );
          };
        }
      });


      /***/
    }),
    /* 327 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
      var $export = __webpack_require__(0);
      var microtask = __webpack_require__(89)();
      var process = __webpack_require__(2).process;
      var isNode = __webpack_require__(20)(process) == 'process';

      $export($export.G, {
        asap: function asap(fn) {
          var domain = isNode && process.domain;
          microtask(domain ? domain.bind(fn) : fn);
        }
      });


      /***/
    }),
    /* 328 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";

// https://github.com/zenparsing/es-observable
      var $export = __webpack_require__(0);
      var global = __webpack_require__(2);
      var core = __webpack_require__(22);
      var microtask = __webpack_require__(89)();
      var OBSERVABLE = __webpack_require__(5)('observable');
      var aFunction = __webpack_require__(10);
      var anObject = __webpack_require__(1);
      var anInstance = __webpack_require__(41);
      var redefineAll = __webpack_require__(43);
      var hide = __webpack_require__(13);
      var forOf = __webpack_require__(42);
      var RETURN = forOf.RETURN;

      var getMethod = function (fn) {
        return fn == null ? undefined : aFunction(fn);
      };

      var cleanupSubscription = function (subscription) {
        var cleanup = subscription._c;
        if (cleanup) {
          subscription._c = undefined;
          cleanup();
        }
      };

      var subscriptionClosed = function (subscription) {
        return subscription._o === undefined;
      };

      var closeSubscription = function (subscription) {
        if (!subscriptionClosed(subscription)) {
          subscription._o = undefined;
          cleanupSubscription(subscription);
        }
      };

      var Subscription = function (observer, subscriber) {
        anObject(observer);
        this._c = undefined;
        this._o = observer;
        observer = new SubscriptionObserver(this);
        try {
          var cleanup = subscriber(observer);
          var subscription = cleanup;
          if (cleanup != null) {
            if (typeof cleanup.unsubscribe === 'function') cleanup = function () {
              subscription.unsubscribe();
            };
            else aFunction(cleanup);
            this._c = cleanup;
          }
        } catch (e) {
          observer.error(e);
          return;
        }
        if (subscriptionClosed(this)) cleanupSubscription(this);
      };

      Subscription.prototype = redefineAll({}, {
        unsubscribe: function unsubscribe() {
          closeSubscription(this);
        }
      });

      var SubscriptionObserver = function (subscription) {
        this._s = subscription;
      };

      SubscriptionObserver.prototype = redefineAll({}, {
        next: function next(value) {
          var subscription = this._s;
          if (!subscriptionClosed(subscription)) {
            var observer = subscription._o;
            try {
              var m = getMethod(observer.next);
              if (m) return m.call(observer, value);
            } catch (e) {
              try {
                closeSubscription(subscription);
              } finally {
                throw e;
              }
            }
          }
        },
        error: function error(value) {
          var subscription = this._s;
          if (subscriptionClosed(subscription)) throw value;
          var observer = subscription._o;
          subscription._o = undefined;
          try {
            var m = getMethod(observer.error);
            if (!m) throw value;
            value = m.call(observer, value);
          } catch (e) {
            try {
              cleanupSubscription(subscription);
            } finally {
              throw e;
            }
          }
          cleanupSubscription(subscription);
          return value;
        },
        complete: function complete(value) {
          var subscription = this._s;
          if (!subscriptionClosed(subscription)) {
            var observer = subscription._o;
            subscription._o = undefined;
            try {
              var m = getMethod(observer.complete);
              value = m ? m.call(observer, value) : undefined;
            } catch (e) {
              try {
                cleanupSubscription(subscription);
              } finally {
                throw e;
              }
            }
            cleanupSubscription(subscription);
            return value;
          }
        }
      });

      var $Observable = function Observable(subscriber) {
        anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
      };

      redefineAll($Observable.prototype, {
        subscribe: function subscribe(observer) {
          return new Subscription(observer, this._f);
        },
        forEach: function forEach(fn) {
          var that = this;
          return new (core.Promise || global.Promise)(function (resolve, reject) {
            aFunction(fn);
            var subscription = that.subscribe({
              next: function (value) {
                try {
                  return fn(value);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      });

      redefineAll($Observable, {
        from: function from(x) {
          var C = typeof this === 'function' ? this : $Observable;
          var method = getMethod(anObject(x)[OBSERVABLE]);
          if (method) {
            var observable = anObject(method.call(x));
            return observable.constructor === C ? observable : new C(function (observer) {
              return observable.subscribe(observer);
            });
          }
          return new C(function (observer) {
            var done = false;
            microtask(function () {
              if (!done) {
                try {
                  if (forOf(x, false, function (it) {
                      observer.next(it);
                      if (done) return RETURN;
                    }) === RETURN) return;
                } catch (e) {
                  if (done) throw e;
                  observer.error(e);
                  return;
                }
                observer.complete();
              }
            });
            return function () {
              done = true;
            };
          });
        },
        of: function of() {
          for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
          return new (typeof this === 'function' ? this : $Observable)(function (observer) {
            var done = false;
            microtask(function () {
              if (!done) {
                for (var j = 0; j < items.length; ++j) {
                  observer.next(items[j]);
                  if (done) return;
                }
                observer.complete();
              }
            });
            return function () {
              done = true;
            };
          });
        }
      });

      hide($Observable.prototype, OBSERVABLE, function () {
        return this;
      });

      $export($export.G, {Observable: $Observable});

      __webpack_require__(40)('Observable');


      /***/
    }),
    /* 329 */
    /***/ (function (module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
      var global = __webpack_require__(2);
      var $export = __webpack_require__(0);
      var navigator = global.navigator;
      var slice = [].slice;
      var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
      var wrap = function (set) {
        return function (fn, time /* , ...args */) {
          var boundArgs = arguments.length > 2;
          var args = boundArgs ? slice.call(arguments, 2) : false;
          return set(boundArgs ? function () {
            // eslint-disable-next-line no-new-func
            (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
          } : fn, time);
        };
      };
      $export($export.G + $export.B + $export.F * MSIE, {
        setTimeout: wrap(global.setTimeout),
        setInterval: wrap(global.setInterval)
      });


      /***/
    }),
    /* 330 */
    /***/ (function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(0);
      var $task = __webpack_require__(88);
      $export($export.G + $export.B, {
        setImmediate: $task.set,
        clearImmediate: $task.clear
      });


      /***/
    }),
    /* 331 */
    /***/ (function (module, exports, __webpack_require__) {

      var $iterators = __webpack_require__(87);
      var getKeys = __webpack_require__(36);
      var redefine = __webpack_require__(14);
      var global = __webpack_require__(2);
      var hide = __webpack_require__(13);
      var Iterators = __webpack_require__(46);
      var wks = __webpack_require__(5);
      var ITERATOR = wks('iterator');
      var TO_STRING_TAG = wks('toStringTag');
      var ArrayValues = Iterators.Array;

      var DOMIterables = {
        CSSRuleList: true, // TODO: Not spec compliant, should be false.
        CSSStyleDeclaration: false,
        CSSValueList: false,
        ClientRectList: false,
        DOMRectList: false,
        DOMStringList: false,
        DOMTokenList: true,
        DataTransferItemList: false,
        FileList: false,
        HTMLAllCollection: false,
        HTMLCollection: false,
        HTMLFormElement: false,
        HTMLSelectElement: false,
        MediaList: true, // TODO: Not spec compliant, should be false.
        MimeTypeArray: false,
        NamedNodeMap: false,
        NodeList: true,
        PaintRequestList: false,
        Plugin: false,
        PluginArray: false,
        SVGLengthList: false,
        SVGNumberList: false,
        SVGPathSegList: false,
        SVGPointList: false,
        SVGStringList: false,
        SVGTransformList: false,
        SourceBufferList: false,
        StyleSheetList: true, // TODO: Not spec compliant, should be false.
        TextTrackCueList: false,
        TextTrackList: false,
        TouchList: false
      };

      for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
        var NAME = collections[i];
        var explicit = DOMIterables[NAME];
        var Collection = global[NAME];
        var proto = Collection && Collection.prototype;
        var key;
        if (proto) {
          if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
          if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
          Iterators[NAME] = ArrayValues;
          if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
        }
      }


      /***/
    }),
    /* 332 */
    /***/ (function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */
      (function (global) {
        /**
         * Copyright (c) 2014, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
         * additional grant of patent rights can be found in the PATENTS file in
         * the same directory.
         */

        !(function (global) {
          "use strict";

          var Op = Object.prototype;
          var hasOwn = Op.hasOwnProperty;
          var undefined; // More compressible than void 0.
          var $Symbol = typeof Symbol === "function" ? Symbol : {};
          var iteratorSymbol = $Symbol.iterator || "@@iterator";
          var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
          var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

          var inModule = typeof module === "object";
          var runtime = global.regeneratorRuntime;
          if (runtime) {
            if (inModule) {
              // If regeneratorRuntime is defined globally and we're in a module,
              // make the exports object identical to regeneratorRuntime.
              module.exports = runtime;
            }
            // Don't bother evaluating the rest of this file if the runtime was
            // already defined globally.
            return;
          }

          // Define the runtime globally (as expected by generated code) as either
          // module.exports (if we're in a module) or a new, empty object.
          runtime = global.regeneratorRuntime = inModule ? module.exports : {};

          function wrap(innerFn, outerFn, self, tryLocsList) {
            // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
            var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
            var generator = Object.create(protoGenerator.prototype);
            var context = new Context(tryLocsList || []);

            // The ._invoke method unifies the implementations of the .next,
            // .throw, and .return methods.
            generator._invoke = makeInvokeMethod(innerFn, self, context);

            return generator;
          }

          runtime.wrap = wrap;

          // Try/catch helper to minimize deoptimizations. Returns a completion
          // record like context.tryEntries[i].completion. This interface could
          // have been (and was previously) designed to take a closure to be
          // invoked without arguments, but in all the cases we care about we
          // already have an existing method we want to call, so there's no need
          // to create a new function object. We can even get away with assuming
          // the method takes exactly one argument, since that happens to be true
          // in every case, so we don't have to touch the arguments object. The
          // only additional allocation required is the completion record, which
          // has a stable shape and so hopefully should be cheap to allocate.
          function tryCatch(fn, obj, arg) {
            try {
              return {type: "normal", arg: fn.call(obj, arg)};
            } catch (err) {
              return {type: "throw", arg: err};
            }
          }

          var GenStateSuspendedStart = "suspendedStart";
          var GenStateSuspendedYield = "suspendedYield";
          var GenStateExecuting = "executing";
          var GenStateCompleted = "completed";

          // Returning this object from the innerFn has the same effect as
          // breaking out of the dispatch switch statement.
          var ContinueSentinel = {};

          // Dummy constructor functions that we use as the .constructor and
          // .constructor.prototype properties for functions that return Generator
          // objects. For full spec compliance, you may wish to configure your
          // minifier not to mangle the names of these two functions.
          function Generator() {
          }

          function GeneratorFunction() {
          }

          function GeneratorFunctionPrototype() {
          }

          // This is a polyfill for %IteratorPrototype% for environments that
          // don't natively support it.
          var IteratorPrototype = {};
          IteratorPrototype[iteratorSymbol] = function () {
            return this;
          };

          var getProto = Object.getPrototypeOf;
          var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
          if (NativeIteratorPrototype &&
            NativeIteratorPrototype !== Op &&
            hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
            // This environment has a native %IteratorPrototype%; use it instead
            // of the polyfill.
            IteratorPrototype = NativeIteratorPrototype;
          }

          var Gp = GeneratorFunctionPrototype.prototype =
            Generator.prototype = Object.create(IteratorPrototype);
          GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
          GeneratorFunctionPrototype.constructor = GeneratorFunction;
          GeneratorFunctionPrototype[toStringTagSymbol] =
            GeneratorFunction.displayName = "GeneratorFunction";

          // Helper for defining the .next, .throw, and .return methods of the
          // Iterator interface in terms of a single ._invoke method.
          function defineIteratorMethods(prototype) {
            ["next", "throw", "return"].forEach(function (method) {
              prototype[method] = function (arg) {
                return this._invoke(method, arg);
              };
            });
          }

          runtime.isGeneratorFunction = function (genFun) {
            var ctor = typeof genFun === "function" && genFun.constructor;
            return ctor
              ? ctor === GeneratorFunction ||
              // For the native GeneratorFunction constructor, the best we can
              // do is to check its .name property.
              (ctor.displayName || ctor.name) === "GeneratorFunction"
              : false;
          };

          runtime.mark = function (genFun) {
            if (Object.setPrototypeOf) {
              Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
            } else {
              genFun.__proto__ = GeneratorFunctionPrototype;
              if (!(toStringTagSymbol in genFun)) {
                genFun[toStringTagSymbol] = "GeneratorFunction";
              }
            }
            genFun.prototype = Object.create(Gp);
            return genFun;
          };

          // Within the body of any async function, `await x` is transformed to
          // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
          // `hasOwn.call(value, "__await")` to determine if the yielded value is
          // meant to be awaited.
          runtime.awrap = function (arg) {
            return {__await: arg};
          };

          function AsyncIterator(generator) {
            function invoke(method, arg, resolve, reject) {
              var record = tryCatch(generator[method], generator, arg);
              if (record.type === "throw") {
                reject(record.arg);
              } else {
                var result = record.arg;
                var value = result.value;
                if (value &&
                  typeof value === "object" &&
                  hasOwn.call(value, "__await")) {
                  return Promise.resolve(value.__await).then(function (value) {
                    invoke("next", value, resolve, reject);
                  }, function (err) {
                    invoke("throw", err, resolve, reject);
                  });
                }

                return Promise.resolve(value).then(function (unwrapped) {
                  // When a yielded Promise is resolved, its final value becomes
                  // the .value of the Promise<{value,done}> result for the
                  // current iteration. If the Promise is rejected, however, the
                  // result for this iteration will be rejected with the same
                  // reason. Note that rejections of yielded Promises are not
                  // thrown back into the generator function, as is the case
                  // when an awaited Promise is rejected. This difference in
                  // behavior between yield and await is important, because it
                  // allows the consumer to decide what to do with the yielded
                  // rejection (swallow it and continue, manually .throw it back
                  // into the generator, abandon iteration, whatever). With
                  // await, by contrast, there is no opportunity to examine the
                  // rejection reason outside the generator function, so the
                  // only option is to throw it from the await expression, and
                  // let the generator function handle the exception.
                  result.value = unwrapped;
                  resolve(result);
                }, reject);
              }
            }

            if (typeof global.process === "object" && global.process.domain) {
              invoke = global.process.domain.bind(invoke);
            }

            var previousPromise;

            function enqueue(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new Promise(function (resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }

              return previousPromise =
                // If enqueue has been called before, then we want to wait until
                // all previous Promises have been resolved before calling invoke,
                // so that results are always delivered in the correct order. If
                // enqueue has not been called before, then it is important to
                // call invoke immediately, without waiting on a callback to fire,
                // so that the async generator function has the opportunity to do
                // any necessary setup in a predictable way. This predictability
                // is why the Promise constructor synchronously invokes its
                // executor callback, and why async functions synchronously
                // execute code before the first await. Since we implement simple
                // async functions in terms of async generators, it is especially
                // important to get this right, even though it requires care.
                previousPromise ? previousPromise.then(
                  callInvokeWithMethodAndArg,
                  // Avoid propagating failures to Promises returned by later
                  // invocations of the iterator.
                  callInvokeWithMethodAndArg
                ) : callInvokeWithMethodAndArg();
            }

            // Define the unified helper method that is used to implement .next,
            // .throw, and .return (see defineIteratorMethods).
            this._invoke = enqueue;
          }

          defineIteratorMethods(AsyncIterator.prototype);
          AsyncIterator.prototype[asyncIteratorSymbol] = function () {
            return this;
          };
          runtime.AsyncIterator = AsyncIterator;

          // Note that simple async functions are implemented on top of
          // AsyncIterator objects; they just return a Promise for the value of
          // the final result produced by the iterator.
          runtime.async = function (innerFn, outerFn, self, tryLocsList) {
            var iter = new AsyncIterator(
              wrap(innerFn, outerFn, self, tryLocsList)
            );

            return runtime.isGeneratorFunction(outerFn)
              ? iter // If outerFn is a generator, return the full iterator.
              : iter.next().then(function (result) {
                return result.done ? result.value : iter.next();
              });
          };

          function makeInvokeMethod(innerFn, self, context) {
            var state = GenStateSuspendedStart;

            return function invoke(method, arg) {
              if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
              }

              if (state === GenStateCompleted) {
                if (method === "throw") {
                  throw arg;
                }

                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
              }

              context.method = method;
              context.arg = arg;

              while (true) {
                var delegate = context.delegate;
                if (delegate) {
                  var delegateResult = maybeInvokeDelegate(delegate, context);
                  if (delegateResult) {
                    if (delegateResult === ContinueSentinel) continue;
                    return delegateResult;
                  }
                }

                if (context.method === "next") {
                  // Setting context._sent for legacy support of Babel's
                  // function.sent implementation.
                  context.sent = context._sent = context.arg;

                } else if (context.method === "throw") {
                  if (state === GenStateSuspendedStart) {
                    state = GenStateCompleted;
                    throw context.arg;
                  }

                  context.dispatchException(context.arg);

                } else if (context.method === "return") {
                  context.abrupt("return", context.arg);
                }

                state = GenStateExecuting;

                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                  // If an exception is thrown from innerFn, we leave state ===
                  // GenStateExecuting and loop back for another invocation.
                  state = context.done
                    ? GenStateCompleted
                    : GenStateSuspendedYield;

                  if (record.arg === ContinueSentinel) {
                    continue;
                  }

                  return {
                    value: record.arg,
                    done: context.done
                  };

                } else if (record.type === "throw") {
                  state = GenStateCompleted;
                  // Dispatch the exception by looping back around to the
                  // context.dispatchException(context.arg) call above.
                  context.method = "throw";
                  context.arg = record.arg;
                }
              }
            };
          }

          // Call delegate.iterator[context.method](context.arg) and handle the
          // result, either by returning a { value, done } result from the
          // delegate iterator, or by modifying context.method and context.arg,
          // setting context.delegate to null, and returning the ContinueSentinel.
          function maybeInvokeDelegate(delegate, context) {
            var method = delegate.iterator[context.method];
            if (method === undefined) {
              // A .throw or .return when the delegate iterator has no .throw
              // method always terminates the yield* loop.
              context.delegate = null;

              if (context.method === "throw") {
                if (delegate.iterator.return) {
                  // If the delegate iterator has a return method, give it a
                  // chance to clean up.
                  context.method = "return";
                  context.arg = undefined;
                  maybeInvokeDelegate(delegate, context);

                  if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                  }
                }

                context.method = "throw";
                context.arg = new TypeError(
                  "The iterator does not provide a 'throw' method");
              }

              return ContinueSentinel;
            }

            var record = tryCatch(method, delegate.iterator, context.arg);

            if (record.type === "throw") {
              context.method = "throw";
              context.arg = record.arg;
              context.delegate = null;
              return ContinueSentinel;
            }

            var info = record.arg;

            if (!info) {
              context.method = "throw";
              context.arg = new TypeError("iterator result is not an object");
              context.delegate = null;
              return ContinueSentinel;
            }

            if (info.done) {
              // Assign the result of the finished delegate to the temporary
              // variable specified by delegate.resultName (see delegateYield).
              context[delegate.resultName] = info.value;

              // Resume execution at the desired location (see delegateYield).
              context.next = delegate.nextLoc;

              // If context.method was "throw" but the delegate handled the
              // exception, let the outer generator proceed normally. If
              // context.method was "next", forget context.arg since it has been
              // "consumed" by the delegate iterator. If context.method was
              // "return", allow the original .return call to continue in the
              // outer generator.
              if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
              }

            } else {
              // Re-yield the result returned by the delegate method.
              return info;
            }

            // The delegate iterator is finished, so forget it and continue with
            // the outer generator.
            context.delegate = null;
            return ContinueSentinel;
          }

          // Define Generator.prototype.{next,throw,return} in terms of the
          // unified ._invoke helper method.
          defineIteratorMethods(Gp);

          Gp[toStringTagSymbol] = "Generator";

          // A Generator should always return itself as the iterator object when the
          // @@iterator function is called on it. Some browsers' implementations of the
          // iterator prototype chain incorrectly implement this, causing the Generator
          // object to not be returned from this call. This ensures that doesn't happen.
          // See https://github.com/facebook/regenerator/issues/274 for more details.
          Gp[iteratorSymbol] = function () {
            return this;
          };

          Gp.toString = function () {
            return "[object Generator]";
          };

          function pushTryEntry(locs) {
            var entry = {tryLoc: locs[0]};

            if (1 in locs) {
              entry.catchLoc = locs[1];
            }

            if (2 in locs) {
              entry.finallyLoc = locs[2];
              entry.afterLoc = locs[3];
            }

            this.tryEntries.push(entry);
          }

          function resetTryEntry(entry) {
            var record = entry.completion || {};
            record.type = "normal";
            delete record.arg;
            entry.completion = record;
          }

          function Context(tryLocsList) {
            // The root entry object (effectively a try statement without a catch
            // or a finally block) gives us a place to store values thrown from
            // locations where there is no enclosing try statement.
            this.tryEntries = [{tryLoc: "root"}];
            tryLocsList.forEach(pushTryEntry, this);
            this.reset(true);
          }

          runtime.keys = function (object) {
            var keys = [];
            for (var key in object) {
              keys.push(key);
            }
            keys.reverse();

            // Rather than returning an object with a next method, we keep
            // things simple and return the next function itself.
            return function next() {
              while (keys.length) {
                var key = keys.pop();
                if (key in object) {
                  next.value = key;
                  next.done = false;
                  return next;
                }
              }

              // To avoid creating an additional object, we just hang the .value
              // and .done properties off the next function object itself. This
              // also ensures that the minifier will not anonymize the function.
              next.done = true;
              return next;
            };
          };

          function values(iterable) {
            if (iterable) {
              var iteratorMethod = iterable[iteratorSymbol];
              if (iteratorMethod) {
                return iteratorMethod.call(iterable);
              }

              if (typeof iterable.next === "function") {
                return iterable;
              }

              if (!isNaN(iterable.length)) {
                var i = -1, next = function next() {
                  while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                      next.value = iterable[i];
                      next.done = false;
                      return next;
                    }
                  }

                  next.value = undefined;
                  next.done = true;

                  return next;
                };

                return next.next = next;
              }
            }

            // Return an iterator with no values.
            return {next: doneResult};
          }

          runtime.values = values;

          function doneResult() {
            return {value: undefined, done: true};
          }

          Context.prototype = {
            constructor: Context,

            reset: function (skipTempReset) {
              this.prev = 0;
              this.next = 0;
              // Resetting context._sent for legacy support of Babel's
              // function.sent implementation.
              this.sent = this._sent = undefined;
              this.done = false;
              this.delegate = null;

              this.method = "next";
              this.arg = undefined;

              this.tryEntries.forEach(resetTryEntry);

              if (!skipTempReset) {
                for (var name in this) {
                  // Not sure about the optimal order of these conditions:
                  if (name.charAt(0) === "t" &&
                    hasOwn.call(this, name) &&
                    !isNaN(+name.slice(1))) {
                    this[name] = undefined;
                  }
                }
              }
            },

            stop: function () {
              this.done = true;

              var rootEntry = this.tryEntries[0];
              var rootRecord = rootEntry.completion;
              if (rootRecord.type === "throw") {
                throw rootRecord.arg;
              }

              return this.rval;
            },

            dispatchException: function (exception) {
              if (this.done) {
                throw exception;
              }

              var context = this;

              function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;

                if (caught) {
                  // If the dispatched exception was caught by a catch block,
                  // then let that catch block handle the exception normally.
                  context.method = "next";
                  context.arg = undefined;
                }

                return !!caught;
              }

              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                var record = entry.completion;

                if (entry.tryLoc === "root") {
                  // Exception thrown outside of any try block that could handle
                  // it, so set the completion value of the entire function to
                  // throw the exception.
                  return handle("end");
                }

                if (entry.tryLoc <= this.prev) {
                  var hasCatch = hasOwn.call(entry, "catchLoc");
                  var hasFinally = hasOwn.call(entry, "finallyLoc");

                  if (hasCatch && hasFinally) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    } else if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }

                  } else if (hasCatch) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    }

                  } else if (hasFinally) {
                    if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }

                  } else {
                    throw new Error("try statement without catch or finally");
                  }
                }
              }
            },

            abrupt: function (type, arg) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev &&
                  hasOwn.call(entry, "finallyLoc") &&
                  this.prev < entry.finallyLoc) {
                  var finallyEntry = entry;
                  break;
                }
              }

              if (finallyEntry &&
                (type === "break" ||
                  type === "continue") &&
                finallyEntry.tryLoc <= arg &&
                arg <= finallyEntry.finallyLoc) {
                // Ignore the finally entry if control is not jumping to a
                // location outside the try/catch block.
                finallyEntry = null;
              }

              var record = finallyEntry ? finallyEntry.completion : {};
              record.type = type;
              record.arg = arg;

              if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
              }

              return this.complete(record);
            },

            complete: function (record, afterLoc) {
              if (record.type === "throw") {
                throw record.arg;
              }

              if (record.type === "break" ||
                record.type === "continue") {
                this.next = record.arg;
              } else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
              } else if (record.type === "normal" && afterLoc) {
                this.next = afterLoc;
              }

              return ContinueSentinel;
            },

            finish: function (finallyLoc) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                  this.complete(entry.completion, entry.afterLoc);
                  resetTryEntry(entry);
                  return ContinueSentinel;
                }
              }
            },

            "catch": function (tryLoc) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                  var record = entry.completion;
                  if (record.type === "throw") {
                    var thrown = record.arg;
                    resetTryEntry(entry);
                  }
                  return thrown;
                }
              }

              // The context.catch method must only be called with a location
              // argument that corresponds to a known catch block.
              throw new Error("illegal catch attempt");
            },

            delegateYield: function (iterable, resultName, nextLoc) {
              this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
              };

              if (this.method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                this.arg = undefined;
              }

              return ContinueSentinel;
            }
          };
        })(
          // Among the various tricks for obtaining a reference to the global
          // object, this seems to be the most reliable technique that does not
          // use indirect eval (which violates Content Security Policy).
          typeof global === "object" ? global :
            typeof window === "object" ? window :
              typeof self === "object" ? self : this
        );

        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(65)))

      /***/
    }),
    /* 333 */
    /***/ (function (module, exports, __webpack_require__) {

      __webpack_require__(334);
      module.exports = __webpack_require__(22).RegExp.escape;


      /***/
    }),
    /* 334 */
    /***/ (function (module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
      var $export = __webpack_require__(0);
      var $re = __webpack_require__(335)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

      $export($export.S, 'RegExp', {
        escape: function escape(it) {
          return $re(it);
        }
      });


      /***/
    }),
    /* 335 */
    /***/ (function (module, exports) {

      module.exports = function (regExp, replace) {
        var replacer = replace === Object(replace) ? function (part) {
          return replace[part];
        } : replace;
        return function (it) {
          return String(it).replace(regExp, replacer);
        };
      };


      /***/
    }),
    /* 336 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";


      __webpack_require__(337);

      /***/
    }),
    /* 337 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
      /* WEBPACK VAR INJECTION */
      (function (global) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _polyfillManager = __webpack_require__(93);

        var _polyfillManager2 = _interopRequireDefault(_polyfillManager);

        var _logger = __webpack_require__(32);

        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        var PerformanceNowPolyfill = function () {
          function PerformanceNowPolyfill() {
            _classCallCheck(this, PerformanceNowPolyfill);
          }

          _createClass(PerformanceNowPolyfill, null, [{
            key: 'install',
            value: function install() {
              if (global.performance && global.performance.now) {
                PerformanceNowPolyfill._logger.debug('No need to install polyfill');
                return;
              }
              PerformanceNowPolyfill._logger.debug('Installing polyfill');
              var startTime = Date.now();
              if (!global.performance) {
                global.performance = {};
              }
              global.performance.now = function () {
                return Date.now() - startTime;
              };
            }
          }]);

          return PerformanceNowPolyfill;
        }();

        PerformanceNowPolyfill.id = 'performance.now';
        PerformanceNowPolyfill._logger = (0, _logger2.default)('PerformanceNowPolyfill');
        exports.default = PerformanceNowPolyfill;


        _polyfillManager2.default.register(PerformanceNowPolyfill);
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(65)))

      /***/
    }),
    /* 338 */
    /***/ (function (module, exports, __webpack_require__) {

      !function (e, r) {
        true ? module.exports = r(__webpack_require__(11), __webpack_require__(339)) : "function" == typeof define && define.amd ? define(["playkit-js", "hls.js"], r) : "object" == typeof exports ? exports.PlaykitJsHls = r(require("playkit-js"), require("hls.js")) : e.PlaykitJsHls = r(e.Playkit, e.Hls)
      }(this, function (e, r) {
        return function (e) {
          function r(o) {
            if (t[o]) return t[o].exports;
            var a = t[o] = {i: o, l: !1, exports: {}};
            return e[o].call(a.exports, a, a.exports, r), a.l = !0, a.exports
          }

          var t = {};
          return r.m = e, r.c = t, r.d = function (e, t, o) {
            r.o(e, t) || Object.defineProperty(e, t, {configurable: !1, enumerable: !0, get: o})
          }, r.n = function (e) {
            var t = e && e.__esModule ? function () {
              return e.default
            } : function () {
              return e
            };
            return r.d(t, "a", t), t
          }, r.o = function (e, r) {
            return Object.prototype.hasOwnProperty.call(e, r)
          }, r.p = "", r(r.s = 2)
        }([function (r, t) {
          r.exports = e
        }, function (e, t) {
          e.exports = r
        }, function (e, r, t) {
          "use strict";
          Object.defineProperty(r, "__esModule", {value: !0}), r.NAME = r.VERSION = void 0;
          var o = t(0), a = t(3), i = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(a);
          r.default = i.default, r.VERSION = "1.5.0", r.NAME = "playkit-js-hls", i.default.isSupported() && (0, o.registerMediaSourceAdapter)(i.default)
        }, function (e, r, t) {
          "use strict";

          function o(e, r) {
            if (!(e instanceof r)) throw new TypeError("Cannot call a class as a function")
          }

          function a(e, r) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !r || "object" != typeof r && "function" != typeof r ? e : r
          }

          function i(e, r) {
            if ("function" != typeof r && null !== r) throw new TypeError("Super expression must either be null or a function, not " + typeof r);
            e.prototype = Object.create(r && r.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), r && (Object.setPrototypeOf ? Object.setPrototypeOf(e, r) : e.__proto__ = r)
          }

          Object.defineProperty(r, "__esModule", {value: !0});
          var n = function e(r, t, o) {
            null === r && (r = Function.prototype);
            var a = Object.getOwnPropertyDescriptor(r, t);
            if (void 0 === a) {
              var i = Object.getPrototypeOf(r);
              return null === i ? void 0 : e(i, t, o)
            }
            if ("value" in a) return a.value;
            var n = a.get;
            if (void 0 !== n) return n.call(o)
          }, s = function () {
            function e(e, r) {
              for (var t = 0; t < r.length; t++) {
                var o = r[t];
                o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
              }
            }

            return function (r, t, o) {
              return t && e(r.prototype, t), o && e(r, o), r
            }
          }(), l = t(1), u = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(l), c = t(4), d = t(5), _ = t(0), E = function (e) {
            function r(e, t, i) {
              o(this, r), r._logger.debug("Creating adapter. Hls version: " + u.default.version);
              var n = a(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this, e, t, i));
              return n._config = _.Utils.Object.mergeDeep({}, n._config, c.DefaultConfig), n._hls = new u.default(n._config), n._addBindings(), n
            }

            return i(r, e), s(r, null, [{
              key: "createAdapter", value: function (e, r, t) {
                var o = {};
                return _.Utils.Object.hasPropertyPath(t, "playback.options.html5.hls") && (o = t.playback.options.html5.hls), new this(e, r, o)
              }
            }, {
              key: "canPlayType", value: function (e) {
                var t = "string" == typeof e && r._hlsMimeTypes.includes(e.toLowerCase());
                return r._logger.debug("canPlayType result for mimeType:" + e + " is " + t.toString()), t
              }
            }, {
              key: "canPlayDrm", value: function () {
                return r._logger.warn("canPlayDrm result is false"), !1
              }
            }, {
              key: "isSupported", value: function () {
                var e = u.default.isSupported();
                return r._logger.debug("isSupported:" + e), e
              }
            }]), s(r, [{
              key: "_addBindings", value: function () {
                var e = this;
                this._hls.on(u.default.Events.ERROR, function (r, t) {
                  e._onError(t)
                }), this._hls.on(u.default.Events.MANIFEST_LOADED, this._onManifestLoaded.bind(this)), this._hls.on(u.default.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this)), this._hls.on(u.default.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched.bind(this))
              }
            }, {
              key: "load", value: function (e) {
                var r = this;
                return this._loadPromise || (this._loadPromise = new Promise(function (t) {
                  var o = function e() {
                    r._hls.off(u.default.Events.LEVEL_UPDATED, e), t({tracks: r._playerTracks})
                  };
                  r._hls.on(u.default.Events.LEVEL_UPDATED, o), e && (r._hls.startPosition = e), r._sourceObj && r._sourceObj.url && (r._hls.loadSource(r._sourceObj.url), r._hls.attachMedia(r._videoElement), r._trigger(_.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: r.isAdaptiveBitrateEnabled() ? "auto" : "manual"}))
                })), this._loadPromise
              }
            }, {
              key: "destroy", value: function () {
                var e = this;
                return n(r.prototype.__proto__ || Object.getPrototypeOf(r.prototype), "destroy", this).call(this).then(function () {
                  r._logger.debug("destroy"), e._loadPromise = null, e._playerTracks = [], e._removeBindings(), e._hls.detachMedia(), e._hls.destroy()
                })
              }
            }, {
              key: "_parseTracks", value: function (e) {
                var r = this._parseAudioTracks(e.audioTracks || []), t = this._parseVideoTracks(e.levels || []),
                  o = this._parseTextTracks(this._hls.subtitleTracks || []);
                return r.concat(t).concat(o)
              }
            }, {
              key: "_parseAudioTracks", value: function (e) {
                for (var r = [], t = 0; t < e.length; t++) {
                  var o = {
                    id: e[t].id,
                    active: this._hls.audioTrack === e[t].id,
                    label: e[t].name,
                    language: e[t].lang,
                    index: t
                  };
                  r.push(new _.AudioTrack(o))
                }
                return r
              }
            }, {
              key: "_parseVideoTracks", value: function (e) {
                for (var r = [], t = 0; t < e.length; t++) {
                  var o = {
                    active: this._hls.startLevel === t,
                    label: e[t].name,
                    bandwidth: e[t].bitrate,
                    width: e[t].width,
                    height: e[t].height,
                    language: "",
                    index: t
                  };
                  r.push(new _.VideoTrack(o))
                }
                return r
              }
            }, {
              key: "_parseTextTracks", value: function (e) {
                for (var r = [], t = 0; t < e.length; t++) {
                  var o = {
                    id: e[t].id,
                    active: e[t].default,
                    label: e[t].name,
                    kind: e[t].type.toLowerCase(),
                    language: e[t].lang,
                    index: t
                  };
                  r.push(new _.TextTrack(o))
                }
                return r
              }
            }, {
              key: "selectAudioTrack", value: function (e) {
                e instanceof _.AudioTrack && !e.active && this._hls.audioTracks && (this._hls.audioTrack = e.id)
              }
            }, {
              key: "selectVideoTrack", value: function (e) {
                e instanceof _.VideoTrack && (!e.active || this.isAdaptiveBitrateEnabled()) && this._hls.levels && (this.isAdaptiveBitrateEnabled() && this._trigger(_.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: "manual"}), this._hls.currentLevel = e.index)
              }
            }, {
              key: "selectTextTrack", value: function (e) {
                e instanceof _.TextTrack && !e.active && this._videoElement.textTracks && (this._disableAllTextTracks(), this._videoElement.textTracks[e.index].mode = "hidden", r._logger.debug("Text track changed", e), this._onTrackChanged(e))
              }
            }, {
              key: "hideTextTrack", value: function () {
                this._disableAllTextTracks()
              }
            }, {
              key: "enableAdaptiveBitrate", value: function () {
                this.isAdaptiveBitrateEnabled() || (this._trigger(_.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: "auto"}), this._hls.nextLevel = -1)
              }
            }, {
              key: "isAdaptiveBitrateEnabled", value: function () {
                return this._hls.autoLevelEnabled
              }
            }, {
              key: "_getLiveEdge", value: function () {
                try {
                  var e = void 0;
                  return e = this._hls.config.liveSyncDuration ? this._videoElement.duration - this._hls.config.liveSyncDuration : this._videoElement.duration - this._hls.config.liveSyncDurationCount * this._hls.levels[0].details.targetduration, e > 0 ? e : 0
                } catch (e) {
                  return NaN
                }
              }
            }, {
              key: "seekToLiveEdge", value: function () {
                try {
                  this._videoElement.currentTime = this._getLiveEdge()
                } catch (e) {
                  return
                }
              }
            }, {
              key: "isLive", value: function () {
                try {
                  return this._hls.levels[0].details.live
                } catch (e) {
                  return !1
                }
              }
            }, {
              key: "_onManifestLoaded", value: function (e, t) {
                r._logger.debug("The source has been loaded successfully"), this._hls.startLoad(), this._playerTracks = this._parseTracks(t)
              }
            }, {
              key: "_onLevelSwitched", value: function (e, t) {
                var o = this._playerTracks.find(function (e) {
                  return e instanceof _.VideoTrack && e.index === t.level
                });
                r._logger.debug("Video track changed", o), this._onTrackChanged(o)
              }
            }, {
              key: "_onAudioTrackSwitched", value: function (e, t) {
                var o = this._playerTracks.find(function (e) {
                  return e instanceof _.AudioTrack && e.id === t.id
                });
                r._logger.debug("Audio track changed", o), this._onTrackChanged(o)
              }
            }, {
              key: "_disableAllTextTracks", value: function () {
                for (var e = this._videoElement.textTracks, r = 0; r < e.length; r++) e[r].mode = "disabled"
              }
            }, {
              key: "_onError", value: function (e) {
                var t = e.type, o = e.details;
                if (e.fatal) {
                  var a = void 0;
                  switch (t) {
                    case u.default.ErrorTypes.NETWORK_ERROR:
                      a = new _.Error(_.Error.Severity.CRITICAL, _.Error.Category.NETWORK, _.Error.Code.HTTP_ERROR, o);
                      break;
                    case u.default.ErrorTypes.MEDIA_ERROR:
                      a = this._handleMediaError() ? new _.Error(_.Error.Severity.RECOVERABLE, _.Error.Category.MEDIA, _.Error.Code.HLS_FATAL_MEDIA_ERROR, o) : new _.Error(_.Error.Severity.CRITICAL, _.Error.Category.MEDIA, _.Error.Code.HLS_FATAL_MEDIA_ERROR, o);
                      break;
                    default:
                      a = new _.Error(_.Error.Severity.CRITICAL, _.Error.Category.PLAYER, _.Error.Code.HLS_FATAL_MEDIA_ERROR, o)
                  }
                  this._trigger(_.BaseMediaSourceAdapter.Html5Events.ERROR, a), a && a.severity === _.Error.Severity.CRITICAL && this.destroy()
                } else {
                  var i = d.HlsJsErrorMap[o] || {category: 0, code: 0}, n = i.category, s = i.code;
                  r._logger.warn(new _.Error(_.Error.Severity.RECOVERABLE, n, s, o))
                }
              }
            }, {
              key: "_handleMediaError", value: function () {
                var e = performance.now(), t = !0;
                return this._checkTimeDeltaHasPassed(e, this._recoverDecodingErrorDate, this._config.recoverDecodingErrorDelay) ? this._recoverDecodingError() : this._checkTimeDeltaHasPassed(e, this._recoverSwapAudioCodecDate, this._config.recoverSwapAudioCodecDelay) ? this._recoverSwapAudioCodec() : (t = !1, r._logger.error("cannot recover, last media error recovery failed")), t
              }
            }, {
              key: "_checkTimeDeltaHasPassed", value: function (e, r, t) {
                return !r || e - r > t
              }
            }, {
              key: "_recoverDecodingError", value: function () {
                this._recoverDecodingErrorDate = performance.now(), r._logger.warn("try to recover media Error"), this.hls.recoverMediaError()
              }
            }, {
              key: "_recoverSwapAudioCodec", value: function () {
                this._recoverSwapAudioCodecDate = performance.now(), r._logger.warn("try to swap Audio Codec and recover media Error"), this.hls.swapAudioCodec(), this.hls.recoverMediaError()
              }
            }, {
              key: "_removeBindings", value: function () {
                this._hls.off(u.default.Events.ERROR, this._onError), this._hls.off(u.default.Events.LEVEL_SWITCHED, this._onLevelSwitched), this._hls.off(u.default.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched)
              }
            }, {
              key: "src", get: function () {
                return this._loadPromise && this._sourceObj ? this._sourceObj.url : ""
              }
            }, {
              key: "duration", get: function () {
                return this.isLive() ? this._getLiveEdge() : n(r.prototype.__proto__ || Object.getPrototypeOf(r.prototype), "duration", this)
              }
            }]), r
          }(_.BaseMediaSourceAdapter);
          E.id = "HlsAdapter", E._logger = _.BaseMediaSourceAdapter.getLogger(E.id), E._hlsMimeTypes = ["application/x-mpegurl", "application/vnd.apple.mpegurl", "audio/mpegurl", "audio/x-mpegurl", "video/x-mpegurl", "video/mpegurl", "application/mpegurl"], r.default = E
        }, function (e, r) {
          e.exports = {recoverDecodingErrorDelay: 3e3, recoverSwapAudioCodecDelay: 3e3, fragLoadingMaxRetry: 4}
        }, function (e, r, t) {
          "use strict";

          function o(e, r, t) {
            return r in e ? Object.defineProperty(e, r, {
              value: t,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[r] = t, e
          }

          Object.defineProperty(r, "__esModule", {value: !0}), r.HlsJsErrorMap = void 0;
          var a, i = t(1), n = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(i), s = t(0), l = (a = {}, o(a, n.default.ErrorDetails.MANIFEST_LOAD_ERROR, {
            category: s.Error.Category.MANIFEST,
            code: s.Error.Code.HTTP_ERROR
          }), o(a, n.default.ErrorDetails.MANIFEST_LOAD_TIMEOUT, {
            category: s.Error.Category.MANIFEST,
            code: s.Error.Code.TIMEOUT
          }), o(a, n.default.ErrorDetails.MANIFEST_PARSING_ERROR, {
            category: s.Error.Category.MANIFEST,
            code: s.Error.Code.HLSJS_CANNOT_PARSE
          }), o(a, n.default.ErrorDetails.LEVEL_LOAD_ERROR, {
            category: s.Error.Category.NETWORK,
            code: s.Error.Code.HTTP_ERROR
          }), o(a, n.default.ErrorDetails.LEVEL_LOAD_TIMEOUT, {
            category: s.Error.Category.NETWORK,
            code: s.Error.Code.TIMEOUT
          }), o(a, n.default.ErrorDetails.LEVEL_SWITCH_ERROR, {
            category: s.Error.Category.PLAYER,
            code: s.Error.Code.BITRATE_SWITCH_ISSUE
          }), o(a, n.default.ErrorDetails.FRAG_LOAD_ERROR, {
            category: s.Error.Category.NETWORK,
            code: s.Error.Code.HTTP_ERROR
          }), o(a, n.default.ErrorDetails.FRAG_LOOP_LOADING_ERROR, {
            category: s.Error.Category.NETWORK,
            code: s.Error.Code.HTTP_ERROR
          }), o(a, n.default.ErrorDetails.FRAG_LOAD_TIMEOUT, {
            category: s.Error.Category.NETWORK,
            code: s.Error.Code.TIMEOUT
          }), o(a, n.default.ErrorDetails.FRAG_PARSING_ERROR, {
            category: s.Error.Category.MEDIA,
            code: s.Error.Code.HLS_FRAG_PARSING_ERROR
          }), o(a, n.default.ErrorDetails.BUFFER_APPEND_ERROR, {
            category: s.Error.Category.MEDIA,
            code: s.Error.Code.HLS_BUFFER_APPEND_ISSUE
          }), o(a, n.default.ErrorDetails.BUFFER_APPENDING_ERROR, {
            category: s.Error.Category.MEDIA,
            code: s.Error.Code.HLS_BUFFER_APPENDING_ISSUE
          }), o(a, n.default.ErrorDetails.BUFFER_STALLED_ERROR, {
            category: s.Error.Category.MEDIA,
            code: s.Error.Code.HLS_BUFFER_STALLED_ERROR
          }), a);
          r.HlsJsErrorMap = l
        }])
      });


      /***/
    }),
    /* 339 */
    /***/ (function (module, exports, __webpack_require__) {

      (function webpackUniversalModuleDefinition(root, factory) {
        if (true)
          module.exports = factory();
        else if (typeof define === 'function' && define.amd)
          define([], factory);
        else if (typeof exports === 'object')
          exports["Hls"] = factory();
        else
          root["Hls"] = factory();
      })(this, function () {
        return /******/ (function (modules) { // webpackBootstrap
          /******/ 	// The module cache
          /******/
          var installedModules = {};
          /******/
          /******/ 	// The require function
          /******/
          function __webpack_require__(moduleId) {
            /******/
            /******/ 		// Check if module is in cache
            /******/
            if (installedModules[moduleId]) {
              /******/
              return installedModules[moduleId].exports;
              /******/
            }
            /******/ 		// Create a new module (and put it into the cache)
            /******/
            var module = installedModules[moduleId] = {
              /******/      i: moduleId,
              /******/      l: false,
              /******/      exports: {}
              /******/
            };
            /******/
            /******/ 		// Execute the module function
            /******/
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ 		// Flag the module as loaded
            /******/
            module.l = true;
            /******/
            /******/ 		// Return the exports of the module
            /******/
            return module.exports;
            /******/
          }

          /******/
          /******/
          /******/ 	// expose the modules object (__webpack_modules__)
          /******/
          __webpack_require__.m = modules;
          /******/
          /******/ 	// expose the module cache
          /******/
          __webpack_require__.c = installedModules;
          /******/
          /******/ 	// define getter function for harmony exports
          /******/
          __webpack_require__.d = function (exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
              /******/
              Object.defineProperty(exports, name, {
                /******/        configurable: false,
                /******/        enumerable: true,
                /******/        get: getter
                /******/
              });
              /******/
            }
            /******/
          };
          /******/
          /******/ 	// getDefaultExport function for compatibility with non-harmony modules
          /******/
          __webpack_require__.n = function (module) {
            /******/
            var getter = module && module.__esModule ?
              /******/      function getDefault() {
                return module['default'];
              } :
              /******/      function getModuleExports() {
                return module;
              };
            /******/
            __webpack_require__.d(getter, 'a', getter);
            /******/
            return getter;
            /******/
          };
          /******/
          /******/ 	// Object.prototype.hasOwnProperty.call
          /******/
          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/
          /******/ 	// __webpack_public_path__
          /******/
          __webpack_require__.p = "/dist/";
          /******/
          /******/ 	// Load entry module and return exports
          /******/
          return __webpack_require__(__webpack_require__.s = 8);
          /******/
        })
        /************************************************************************/
        /******/([
          /* 0 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";
            /* harmony export (binding) */
            __webpack_require__.d(__webpack_exports__, "a", function () {
              return enableLogs;
            });
            /* harmony export (binding) */
            __webpack_require__.d(__webpack_exports__, "b", function () {
              return logger;
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
              return typeof obj;
            } : function (obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };

            function noop() {
            }

            var fakeLogger = {
              trace: noop,
              debug: noop,
              log: noop,
              warn: noop,
              info: noop,
              error: noop
            };

            var exportedLogger = fakeLogger;

            /*globals self: false */

//let lastCallTime;
// function formatMsgWithTimeInfo(type, msg) {
//   const now = Date.now();
//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
//   lastCallTime = now;
//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
//   return msg;
// }

            function formatMsg(type, msg) {
              msg = '[' + type + '] > ' + msg;
              return msg;
            }

            function consolePrintFn(type) {
              var func = self.console[type];
              if (func) {
                return function () {
                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  if (args[0]) {
                    args[0] = formatMsg(type, args[0]);
                  }
                  func.apply(self.console, args);
                };
              }
              return noop;
            }

            function exportLoggerFunctions(debugConfig) {
              for (var _len2 = arguments.length, functions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                functions[_key2 - 1] = arguments[_key2];
              }

              functions.forEach(function (type) {
                exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
              });
            }

            var enableLogs = function enableLogs(debugConfig) {
              if (debugConfig === true || (typeof debugConfig === 'undefined' ? 'undefined' : _typeof(debugConfig)) === 'object') {
                exportLoggerFunctions(debugConfig,
                  // Remove out from list here to hard-disable a log-level
                  //'trace',
                  'debug', 'log', 'info', 'warn', 'error');
                // Some browsers don't allow to use bind on console object anyway
                // fallback to default if needed
                try {
                  exportedLogger.log();
                } catch (e) {
                  exportedLogger = fakeLogger;
                }
              } else {
                exportedLogger = fakeLogger;
              }
            };

            var logger = exportedLogger;

            /***/
          }),
          /* 1 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";
            /* harmony default export */
            __webpack_exports__["a"] = ({
              // fired before MediaSource is attaching to media element - data: { media }
              MEDIA_ATTACHING: 'hlsMediaAttaching',
              // fired when MediaSource has been succesfully attached to media element - data: { }
              MEDIA_ATTACHED: 'hlsMediaAttached',
              // fired before detaching MediaSource from media element - data: { }
              MEDIA_DETACHING: 'hlsMediaDetaching',
              // fired when MediaSource has been detached from media element - data: { }
              MEDIA_DETACHED: 'hlsMediaDetached',
              // fired when we buffer is going to be reset - data: { }
              BUFFER_RESET: 'hlsBufferReset',
              // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}
              BUFFER_CODECS: 'hlsBufferCodecs',
              // fired when sourcebuffers have been created - data: { tracks : tracks }
              BUFFER_CREATED: 'hlsBufferCreated',
              // fired when we append a segment to the buffer - data: { segment: segment object }
              BUFFER_APPENDING: 'hlsBufferAppending',
              // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}
              BUFFER_APPENDED: 'hlsBufferAppended',
              // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }
              BUFFER_EOS: 'hlsBufferEos',
              // fired when the media buffer should be flushed - data { startOffset, endOffset }
              BUFFER_FLUSHING: 'hlsBufferFlushing',
              // fired when the media buffer has been flushed - data: { }
              BUFFER_FLUSHED: 'hlsBufferFlushed',
              // fired to signal that a manifest loading starts - data: { url : manifestURL}
              MANIFEST_LOADING: 'hlsManifestLoading',
              // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}
              MANIFEST_LOADED: 'hlsManifestLoaded',
              // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}
              MANIFEST_PARSED: 'hlsManifestParsed',
              // fired when a level switch is requested - data: { level : id of new level } // deprecated in favor LEVEL_SWITCHING
              LEVEL_SWITCH: 'hlsLevelSwitch',
              // fired when a level switch is requested - data: { level : id of new level }
              LEVEL_SWITCHING: 'hlsLevelSwitching',
              // fired when a level switch is effective - data: { level : id of new level }
              LEVEL_SWITCHED: 'hlsLevelSwitched',
              // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}
              LEVEL_LOADING: 'hlsLevelLoading',
              // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }
              LEVEL_LOADED: 'hlsLevelLoaded',
              // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }
              LEVEL_UPDATED: 'hlsLevelUpdated',
              // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }
              LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',
              // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }
              AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',
              // fired when an audio track switch occurs - data: { id : audio track id } // deprecated in favor AUDIO_TRACK_SWITCHING
              AUDIO_TRACK_SWITCH: 'hlsAudioTrackSwitch',
              // fired when an audio track switching is requested - data: { id : audio track id }
              AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',
              // fired when an audio track switch actually occurs - data: { id : audio track id }
              AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',
              // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }
              AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',
              // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }
              AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',
              // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }
              SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',
              // fired when an subtitle track switch occurs - data: { id : subtitle track id }
              SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',
              // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }
              SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',
              // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }
              SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',
              // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }
              SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',
              // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }
              INIT_PTS_FOUND: 'hlsInitPtsFound',
              // fired when a fragment loading starts - data: { frag : fragment object }
              FRAG_LOADING: 'hlsFragLoading',
              // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }
              FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',
              // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }
              FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',
              // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }
              FRAG_LOADED: 'hlsFragLoaded',
              // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }
              FRAG_DECRYPTED: 'hlsFragDecrypted',
              // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }
              FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',
              // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }
              FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',
              // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }
              FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',
              // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}
              FRAG_PARSING_DATA: 'hlsFragParsingData',
              // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }
              FRAG_PARSED: 'hlsFragParsed',
              // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }
              FRAG_BUFFERED: 'hlsFragBuffered',
              // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }
              FRAG_CHANGED: 'hlsFragChanged',
              // Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }
              FPS_DROP: 'hlsFpsDrop',
              //triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }
              FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',
              // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }
              ERROR: 'hlsError',
              // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }
              DESTROYING: 'hlsDestroying',
              // fired when a decrypt key loading starts - data: { frag : fragment object }
              KEY_LOADING: 'hlsKeyLoading',
              // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }
              KEY_LOADED: 'hlsKeyLoaded',
              // fired upon stream controller state transitions - data: { previousState, nextState }
              STREAM_STATE_TRANSITION: 'hlsStreamStateTransition'
            });

            /***/
          }),
          /* 2 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";
            /* harmony export (binding) */
            __webpack_require__.d(__webpack_exports__, "b", function () {
              return ErrorTypes;
            });
            /* harmony export (binding) */
            __webpack_require__.d(__webpack_exports__, "a", function () {
              return ErrorDetails;
            });
            var ErrorTypes = {
              // Identifier for a network error (loading error / timeout ...)
              NETWORK_ERROR: 'networkError',
              // Identifier for a media Error (video/parsing/mediasource error)
              MEDIA_ERROR: 'mediaError',
              // Identifier for a mux Error (demuxing/remuxing)
              MUX_ERROR: 'muxError',
              // Identifier for all other errors
              OTHER_ERROR: 'otherError'
            };

            var ErrorDetails = {
              // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}
              MANIFEST_LOAD_ERROR: 'manifestLoadError',
              // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
              MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',
              // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}
              MANIFEST_PARSING_ERROR: 'manifestParsingError',
              // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}
              MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',
              // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}
              LEVEL_LOAD_ERROR: 'levelLoadError',
              // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
              LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',
              // Identifier for a level switch error - data: { level : faulty level Id, event : error description}
              LEVEL_SWITCH_ERROR: 'levelSwitchError',
              // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}
              AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',
              // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
              AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',
              // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}
              FRAG_LOAD_ERROR: 'fragLoadError',
              // Identifier for fragment loop loading error - data: { frag : fragment object}
              FRAG_LOOP_LOADING_ERROR: 'fragLoopLoadingError',
              // Identifier for fragment load timeout error - data: { frag : fragment object}
              FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',
              // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }
              FRAG_DECRYPT_ERROR: 'fragDecryptError',
              // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }
              // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release
              FRAG_PARSING_ERROR: 'fragParsingError',
              // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }
              REMUX_ALLOC_ERROR: 'remuxAllocError',
              // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}
              KEY_LOAD_ERROR: 'keyLoadError',
              // Identifier for decrypt key load timeout error - data: { frag : fragment object}
              KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',
              // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }
              BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',
              // Identifier for a buffer append error - data: append error description
              BUFFER_APPEND_ERROR: 'bufferAppendError',
              // Identifier for a buffer appending error event - data: appending error description
              BUFFER_APPENDING_ERROR: 'bufferAppendingError',
              // Identifier for a buffer stalled error event
              BUFFER_STALLED_ERROR: 'bufferStalledError',
              // Identifier for a buffer full event
              BUFFER_FULL_ERROR: 'bufferFullError',
              // Identifier for a buffer seek over hole event
              BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',
              // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)
              BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',
              // Identifier for an internal exception happening inside hls.js while handling an event
              INTERNAL_EXCEPTION: 'internalException'
            };

            /***/
          }),
          /* 3 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";

// CONCATENATED MODULE: ./src/crypt/aes-crypto.js
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var AESCrypto = function () {
              function AESCrypto(subtle, iv) {
                _classCallCheck(this, AESCrypto);

                this.subtle = subtle;
                this.aesIV = iv;
              }

              AESCrypto.prototype.decrypt = function decrypt(data, key) {
                return this.subtle.decrypt({name: 'AES-CBC', iv: this.aesIV}, key, data);
              };

              return AESCrypto;
            }();

            /* harmony default export */
            var aes_crypto = (AESCrypto);

// CONCATENATED MODULE: ./src/crypt/fast-aes-key.js
            function fast_aes_key__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var FastAESKey = function () {
              function FastAESKey(subtle, key) {
                fast_aes_key__classCallCheck(this, FastAESKey);

                this.subtle = subtle;
                this.key = key;
              }

              FastAESKey.prototype.expandKey = function expandKey() {
                return this.subtle.importKey('raw', this.key, {name: 'AES-CBC'}, false, ['encrypt', 'decrypt']);
              };

              return FastAESKey;
            }();

            /* harmony default export */
            var fast_aes_key = (FastAESKey);

// CONCATENATED MODULE: ./src/crypt/aes-decryptor.js
            function aes_decryptor__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var AESDecryptor = function () {
              function AESDecryptor() {
                aes_decryptor__classCallCheck(this, AESDecryptor);

                // Static after running initTable
                this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
                this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
                this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
                this.sBox = new Uint32Array(256);
                this.invSBox = new Uint32Array(256);

                // Changes during runtime
                this.key = new Uint32Array(0);

                this.initTable();
              }

              // Using view.getUint32() also swaps the byte order.


              AESDecryptor.prototype.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {
                var view = new DataView(arrayBuffer);
                var newArray = new Uint32Array(4);
                for (var i = 0; i < 4; i++) {
                  newArray[i] = view.getUint32(i * 4);
                }
                return newArray;
              };

              AESDecryptor.prototype.initTable = function initTable() {
                var sBox = this.sBox;
                var invSBox = this.invSBox;
                var subMix = this.subMix;
                var subMix0 = subMix[0];
                var subMix1 = subMix[1];
                var subMix2 = subMix[2];
                var subMix3 = subMix[3];
                var invSubMix = this.invSubMix;
                var invSubMix0 = invSubMix[0];
                var invSubMix1 = invSubMix[1];
                var invSubMix2 = invSubMix[2];
                var invSubMix3 = invSubMix[3];

                var d = new Uint32Array(256);
                var x = 0;
                var xi = 0;
                var i = 0;
                for (i = 0; i < 256; i++) {
                  if (i < 128) {
                    d[i] = i << 1;
                  } else {
                    d[i] = i << 1 ^ 0x11b;
                  }
                }

                for (i = 0; i < 256; i++) {
                  var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                  sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
                  sBox[x] = sx;
                  invSBox[sx] = x;

                  // Compute multiplication
                  var x2 = d[x];
                  var x4 = d[x2];
                  var x8 = d[x4];

                  // Compute sub/invSub bytes, mix columns tables
                  var t = d[sx] * 0x101 ^ sx * 0x1010100;
                  subMix0[x] = t << 24 | t >>> 8;
                  subMix1[x] = t << 16 | t >>> 16;
                  subMix2[x] = t << 8 | t >>> 24;
                  subMix3[x] = t;

                  // Compute inv sub bytes, inv mix columns tables
                  t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
                  invSubMix0[sx] = t << 24 | t >>> 8;
                  invSubMix1[sx] = t << 16 | t >>> 16;
                  invSubMix2[sx] = t << 8 | t >>> 24;
                  invSubMix3[sx] = t;

                  // Compute next counter
                  if (!x) {
                    x = xi = 1;
                  } else {
                    x = x2 ^ d[d[d[x8 ^ x2]]];
                    xi ^= d[d[xi]];
                  }
                }
              };

              AESDecryptor.prototype.expandKey = function expandKey(keyBuffer) {
                // convert keyBuffer to Uint32Array
                var key = this.uint8ArrayToUint32Array_(keyBuffer);
                var sameKey = true;
                var offset = 0;

                while (offset < key.length && sameKey) {
                  sameKey = key[offset] === this.key[offset];
                  offset++;
                }

                if (sameKey) {
                  return;
                }

                this.key = key;
                var keySize = this.keySize = key.length;

                if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
                  throw new Error('Invalid aes key size=' + keySize);
                }

                var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
                var ksRow = void 0;
                var invKsRow = void 0;

                var keySchedule = this.keySchedule = new Uint32Array(ksRows);
                var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
                var sbox = this.sBox;
                var rcon = this.rcon;

                var invSubMix = this.invSubMix;
                var invSubMix0 = invSubMix[0];
                var invSubMix1 = invSubMix[1];
                var invSubMix2 = invSubMix[2];
                var invSubMix3 = invSubMix[3];

                var prev = void 0;
                var t = void 0;

                for (ksRow = 0; ksRow < ksRows; ksRow++) {
                  if (ksRow < keySize) {
                    prev = keySchedule[ksRow] = key[ksRow];
                    continue;
                  }
                  t = prev;

                  if (ksRow % keySize === 0) {
                    // Rot word
                    t = t << 8 | t >>> 24;

                    // Sub word
                    t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];

                    // Mix Rcon
                    t ^= rcon[ksRow / keySize | 0] << 24;
                  } else if (keySize > 6 && ksRow % keySize === 4) {
                    // Sub word
                    t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];
                  }

                  keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;
                }

                for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                  ksRow = ksRows - invKsRow;
                  if (invKsRow & 3) {
                    t = keySchedule[ksRow];
                  } else {
                    t = keySchedule[ksRow - 4];
                  }

                  if (invKsRow < 4 || ksRow <= 4) {
                    invKeySchedule[invKsRow] = t;
                  } else {
                    invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];
                  }

                  invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
                }
              };

              // Adding this as a method greatly improves performance.


              AESDecryptor.prototype.networkToHostOrderSwap = function networkToHostOrderSwap(word) {
                return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
              };

              AESDecryptor.prototype.decrypt = function decrypt(inputArrayBuffer, offset, aesIV) {
                var nRounds = this.keySize + 6;
                var invKeySchedule = this.invKeySchedule;
                var invSBOX = this.invSBox;

                var invSubMix = this.invSubMix;
                var invSubMix0 = invSubMix[0];
                var invSubMix1 = invSubMix[1];
                var invSubMix2 = invSubMix[2];
                var invSubMix3 = invSubMix[3];

                var initVector = this.uint8ArrayToUint32Array_(aesIV);
                var initVector0 = initVector[0];
                var initVector1 = initVector[1];
                var initVector2 = initVector[2];
                var initVector3 = initVector[3];

                var inputInt32 = new Int32Array(inputArrayBuffer);
                var outputInt32 = new Int32Array(inputInt32.length);

                var t0 = void 0,
                  t1 = void 0,
                  t2 = void 0,
                  t3 = void 0;
                var s0 = void 0,
                  s1 = void 0,
                  s2 = void 0,
                  s3 = void 0;
                var inputWords0 = void 0,
                  inputWords1 = void 0,
                  inputWords2 = void 0,
                  inputWords3 = void 0;

                var ksRow, i;
                var swapWord = this.networkToHostOrderSwap;

                while (offset < inputInt32.length) {
                  inputWords0 = swapWord(inputInt32[offset]);
                  inputWords1 = swapWord(inputInt32[offset + 1]);
                  inputWords2 = swapWord(inputInt32[offset + 2]);
                  inputWords3 = swapWord(inputInt32[offset + 3]);

                  s0 = inputWords0 ^ invKeySchedule[0];
                  s1 = inputWords3 ^ invKeySchedule[1];
                  s2 = inputWords2 ^ invKeySchedule[2];
                  s3 = inputWords1 ^ invKeySchedule[3];

                  ksRow = 4;

                  // Iterate through the rounds of decryption
                  for (i = 1; i < nRounds; i++) {
                    t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];
                    t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
                    t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
                    t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3];
                    // Update state
                    s0 = t0;
                    s1 = t1;
                    s2 = t2;
                    s3 = t3;

                    ksRow = ksRow + 4;
                  }

                  // Shift rows, sub bytes, add round key
                  t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];
                  t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
                  t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
                  t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3];
                  ksRow = ksRow + 3;

                  // Write
                  outputInt32[offset] = swapWord(t0 ^ initVector0);
                  outputInt32[offset + 1] = swapWord(t3 ^ initVector1);
                  outputInt32[offset + 2] = swapWord(t2 ^ initVector2);
                  outputInt32[offset + 3] = swapWord(t1 ^ initVector3);

                  // reset initVector to last 4 unsigned int
                  initVector0 = inputWords0;
                  initVector1 = inputWords1;
                  initVector2 = inputWords2;
                  initVector3 = inputWords3;

                  offset = offset + 4;
                }

                return outputInt32.buffer;
              };

              AESDecryptor.prototype.destroy = function destroy() {
                this.key = undefined;
                this.keySize = undefined;
                this.ksRows = undefined;

                this.sBox = undefined;
                this.invSBox = undefined;
                this.subMix = undefined;
                this.invSubMix = undefined;
                this.keySchedule = undefined;
                this.invKeySchedule = undefined;

                this.rcon = undefined;
              };

              return AESDecryptor;
            }();

            /* harmony default export */
            var aes_decryptor = (AESDecryptor);
// EXTERNAL MODULE: ./src/errors.js
            var errors = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/logger.js
            var logger = __webpack_require__(0);

// CONCATENATED MODULE: ./src/crypt/decrypter.js
            function decrypter__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }


            /*globals self: false */

            var decrypter_Decrypter = function () {
              function Decrypter(observer, config) {
                decrypter__classCallCheck(this, Decrypter);

                this.observer = observer;
                this.config = config;
                this.logEnabled = true;
                try {
                  var browserCrypto = crypto ? crypto : self.crypto;
                  this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
                } catch (e) {
                }
                this.disableWebCrypto = !this.subtle;
              }

              Decrypter.prototype.isSync = function isSync() {
                return this.disableWebCrypto && this.config.enableSoftwareAES;
              };

              Decrypter.prototype.decrypt = function decrypt(data, key, iv, callback) {
                var _this = this;

                if (this.disableWebCrypto && this.config.enableSoftwareAES) {
                  if (this.logEnabled) {
                    logger["b" /* logger */].log('JS AES decrypt');
                    this.logEnabled = false;
                  }
                  var decryptor = this.decryptor;
                  if (!decryptor) {
                    this.decryptor = decryptor = new aes_decryptor();
                  }
                  decryptor.expandKey(key);
                  callback(decryptor.decrypt(data, 0, iv));
                } else {
                  if (this.logEnabled) {
                    logger["b" /* logger */].log('WebCrypto AES decrypt');
                    this.logEnabled = false;
                  }
                  var subtle = this.subtle;
                  if (this.key !== key) {
                    this.key = key;
                    this.fastAesKey = new fast_aes_key(subtle, key);
                  }

                  this.fastAesKey.expandKey().then(function (aesKey) {
                    // decrypt using web crypto
                    var crypto = new aes_crypto(subtle, iv);
                    crypto.decrypt(data, aesKey).catch(function (err) {
                      _this.onWebCryptoError(err, data, key, iv, callback);
                    }).then(function (result) {
                      callback(result);
                    });
                  }).catch(function (err) {
                    _this.onWebCryptoError(err, data, key, iv, callback);
                  });
                }
              };

              Decrypter.prototype.onWebCryptoError = function onWebCryptoError(err, data, key, iv, callback) {
                if (this.config.enableSoftwareAES) {
                  logger["b" /* logger */].log('WebCrypto Error, disable WebCrypto API');
                  this.disableWebCrypto = true;
                  this.logEnabled = true;
                  this.decrypt(data, key, iv, callback);
                } else {
                  logger["b" /* logger */].error('decrypting error : ' + err.message);
                  this.observer.trigger(Event.ERROR, {
                    type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                    details: errors["a" /* ErrorDetails */].FRAG_DECRYPT_ERROR,
                    fatal: true,
                    reason: err.message
                  });
                }
              };

              Decrypter.prototype.destroy = function destroy() {
                var decryptor = this.decryptor;
                if (decryptor) {
                  decryptor.destroy();
                  this.decryptor = undefined;
                }
              };

              return Decrypter;
            }();

            /* harmony default export */
            var decrypter = __webpack_exports__["a"] = (decrypter_Decrypter);

            /***/
          }),
          /* 4 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * ID3 parser
             */
            var ID3 = function () {
              function ID3() {
                _classCallCheck(this, ID3);
              }

              /**
               * Returns true if an ID3 header can be found at offset in data
               * @param {Uint8Array} data - The data to search in
               * @param {number} offset - The offset at which to start searching
               * @return {boolean} - True if an ID3 header is found
               */
              ID3.isHeader = function isHeader(data, offset) {
                /*
    * http://id3.org/id3v2.3.0
    * [0]     = 'I'
    * [1]     = 'D'
    * [2]     = '3'
    * [3,4]   = {Version}
    * [5]     = {Flags}
    * [6-9]   = {ID3 Size}
    *
    * An ID3v2 tag can be detected with the following pattern:
    *  $49 44 33 yy yy xx zz zz zz zz
    * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80
    */
                if (offset + 10 <= data.length) {
                  //look for 'ID3' identifier
                  if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {
                    //check version is within range
                    if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {
                      //check size is within range
                      if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {
                        return true;
                      }
                    }
                  }
                }

                return false;
              };

              /**
               * Returns true if an ID3 footer can be found at offset in data
               * @param {Uint8Array} data - The data to search in
               * @param {number} offset - The offset at which to start searching
               * @return {boolean} - True if an ID3 footer is found
               */


              ID3.isFooter = function isFooter(data, offset) {
                /*
    * The footer is a copy of the header, but with a different identifier
    */
                if (offset + 10 <= data.length) {
                  //look for '3DI' identifier
                  if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {
                    //check version is within range
                    if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {
                      //check size is within range
                      if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {
                        return true;
                      }
                    }
                  }
                }

                return false;
              };

              /**
               * Returns any adjacent ID3 tags found in data starting at offset, as one block of data
               * @param {Uint8Array} data - The data to search in
               * @param {number} offset - The offset at which to start searching
               * @return {Uint8Array} - The block of data containing any ID3 tags found
               */


              ID3.getID3Data = function getID3Data(data, offset) {
                var front = offset;
                var length = 0;

                while (ID3.isHeader(data, offset)) {
                  //ID3 header is 10 bytes
                  length += 10;

                  var size = ID3._readSize(data, offset + 6);
                  length += size;

                  if (ID3.isFooter(data, offset + 10)) {
                    //ID3 footer is 10 bytes
                    length += 10;
                  }

                  offset += length;
                }

                if (length > 0) {
                  return data.subarray(front, front + length);
                }

                return undefined;
              };

              ID3._readSize = function _readSize(data, offset) {
                var size = 0;
                size = (data[offset] & 0x7f) << 21;
                size |= (data[offset + 1] & 0x7f) << 14;
                size |= (data[offset + 2] & 0x7f) << 7;
                size |= data[offset + 3] & 0x7f;
                return size;
              };

              /**
               * Searches for the Elementary Stream timestamp found in the ID3 data chunk
               * @param {Uint8Array} data - Block of data containing one or more ID3 tags
               * @return {number} - The timestamp
               */


              ID3.getTimeStamp = function getTimeStamp(data) {
                var frames = ID3.getID3Frames(data);
                for (var i = 0; i < frames.length; i++) {
                  var frame = frames[i];
                  if (ID3.isTimeStampFrame(frame)) {
                    return ID3._readTimeStamp(frame);
                  }
                }

                return undefined;
              };

              /**
               * Returns true if the ID3 frame is an Elementary Stream timestamp frame
               * @param {ID3 frame} frame
               */


              ID3.isTimeStampFrame = function isTimeStampFrame(frame) {
                return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';
              };

              ID3._getFrameData = function _getFrameData(data) {
                /*
    Frame ID       $xx xx xx xx (four characters)
    Size           $xx xx xx xx
    Flags          $xx xx
    */
                var type = String.fromCharCode(data[0], data[1], data[2], data[3]);
                var size = ID3._readSize(data, 4);

                //skip frame id, size, and flags
                var offset = 10;

                return {type: type, size: size, data: data.subarray(offset, offset + size)};
              };

              /**
               * Returns an array of ID3 frames found in all the ID3 tags in the id3Data
               * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags
               * @return {ID3 frame[]} - Array of ID3 frame objects
               */


              ID3.getID3Frames = function getID3Frames(id3Data) {
                var offset = 0;
                var frames = [];

                while (ID3.isHeader(id3Data, offset)) {
                  var size = ID3._readSize(id3Data, offset + 6);
                  //skip past ID3 header
                  offset += 10;
                  var end = offset + size;
                  //loop through frames in the ID3 tag
                  while (offset + 8 < end) {
                    var frameData = ID3._getFrameData(id3Data.subarray(offset));
                    var frame = ID3._decodeFrame(frameData);
                    if (frame) {
                      frames.push(frame);
                    }
                    //skip frame header and frame data
                    offset += frameData.size + 10;
                  }

                  if (ID3.isFooter(id3Data, offset)) {
                    offset += 10;
                  }
                }

                return frames;
              };

              ID3._decodeFrame = function _decodeFrame(frame) {
                if (frame.type === 'PRIV') {
                  return ID3._decodePrivFrame(frame);
                } else if (frame.type[0] === 'T') {
                  return ID3._decodeTextFrame(frame);
                } else if (frame.type[0] === 'W') {
                  return ID3._decodeURLFrame(frame);
                }

                return undefined;
              };

              ID3._readTimeStamp = function _readTimeStamp(timeStampFrame) {
                if (timeStampFrame.data.byteLength === 8) {
                  var data = new Uint8Array(timeStampFrame.data);
                  // timestamp is 33 bit expressed as a big-endian eight-octet number,
                  // with the upper 31 bits set to zero.
                  var pts33Bit = data[3] & 0x1;
                  var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
                  timestamp /= 45;

                  if (pts33Bit) {
                    timestamp += 47721858.84; // 2^32 / 90
                  }

                  return Math.round(timestamp);
                }

                return undefined;
              };

              ID3._decodePrivFrame = function _decodePrivFrame(frame) {
                /*
    Format: <text string>\0<binary data>
    */
                if (frame.size < 2) {
                  return undefined;
                }

                var owner = ID3._utf8ArrayToStr(frame.data);
                var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));

                return {key: frame.type, info: owner, data: privateData.buffer};
              };

              ID3._decodeTextFrame = function _decodeTextFrame(frame) {
                if (frame.size < 2) {
                  return undefined;
                }

                if (frame.type === 'TXXX') {
                  /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Description}\0{Value}
      */
                  var index = 1;
                  var description = ID3._utf8ArrayToStr(frame.data.subarray(index));

                  index += description.length + 1;
                  var value = ID3._utf8ArrayToStr(frame.data.subarray(index));

                  return {key: frame.type, info: description, data: value};
                } else {
                  /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Value}
      */
                  var text = ID3._utf8ArrayToStr(frame.data.subarray(1));
                  return {key: frame.type, data: text};
                }
              };

              ID3._decodeURLFrame = function _decodeURLFrame(frame) {
                if (frame.type === 'WXXX') {
                  /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Description}\0{URL}
      */
                  if (frame.size < 2) {
                    return undefined;
                  }

                  var index = 1;
                  var description = ID3._utf8ArrayToStr(frame.data.subarray(index));

                  index += description.length + 1;
                  var value = ID3._utf8ArrayToStr(frame.data.subarray(index));

                  return {key: frame.type, info: description, data: value};
                } else {
                  /*
      Format:
      [0-?] = {URL}
      */
                  var url = ID3._utf8ArrayToStr(frame.data);
                  return {key: frame.type, data: url};
                }
              };

              // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197
              // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt
              /* utf.js - UTF-8 <=> UTF-16 convertion
   *
   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
   * Version: 1.0
   * LastModified: Dec 25 1999
   * This library is free.  You can redistribute it and/or modify it.
   */


              ID3._utf8ArrayToStr = function _utf8ArrayToStr(array) {

                var char2 = void 0;
                var char3 = void 0;
                var out = '';
                var i = 0;
                var length = array.length;

                while (i < length) {
                  var c = array[i++];
                  switch (c >> 4) {
                    case 0:
                      return out;
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                      // 0xxxxxxx
                      out += String.fromCharCode(c);
                      break;
                    case 12:
                    case 13:
                      // 110x xxxx   10xx xxxx
                      char2 = array[i++];
                      out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
                      break;
                    case 14:
                      // 1110 xxxx  10xx xxxx  10xx xxxx
                      char2 = array[i++];
                      char3 = array[i++];
                      out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
                      break;
                  }
                }

                return out;
              };

              return ID3;
            }();

            /* harmony default export */
            __webpack_exports__["a"] = (ID3);

            /***/
          }),
          /* 5 */
          /***/ (function (module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            function EventEmitter() {
              this._events = this._events || {};
              this._maxListeners = this._maxListeners || undefined;
            }

            module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
            EventEmitter.EventEmitter = EventEmitter;

            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
            EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
            EventEmitter.prototype.setMaxListeners = function (n) {
              if (!isNumber(n) || n < 0 || isNaN(n))
                throw TypeError('n must be a positive number');
              this._maxListeners = n;
              return this;
            };

            EventEmitter.prototype.emit = function (type) {
              var er, handler, len, args, i, listeners;

              if (!this._events)
                this._events = {};

              // If there is no 'error' event listener then throw.
              if (type === 'error') {
                if (!this._events.error ||
                  (isObject(this._events.error) && !this._events.error.length)) {
                  er = arguments[1];
                  if (er instanceof Error) {
                    throw er; // Unhandled 'error' event
                  } else {
                    // At least give some kind of context to the user
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                    err.context = er;
                    throw err;
                  }
                }
              }

              handler = this._events[type];

              if (isUndefined(handler))
                return false;

              if (isFunction(handler)) {
                switch (arguments.length) {
                  // fast cases
                  case 1:
                    handler.call(this);
                    break;
                  case 2:
                    handler.call(this, arguments[1]);
                    break;
                  case 3:
                    handler.call(this, arguments[1], arguments[2]);
                    break;
                  // slower
                  default:
                    args = Array.prototype.slice.call(arguments, 1);
                    handler.apply(this, args);
                }
              } else if (isObject(handler)) {
                args = Array.prototype.slice.call(arguments, 1);
                listeners = handler.slice();
                len = listeners.length;
                for (i = 0; i < len; i++)
                  listeners[i].apply(this, args);
              }

              return true;
            };

            EventEmitter.prototype.addListener = function (type, listener) {
              var m;

              if (!isFunction(listener))
                throw TypeError('listener must be a function');

              if (!this._events)
                this._events = {};

              // To avoid recursion in the case that type === "newListener"! Before
              // adding it to the listeners, first emit "newListener".
              if (this._events.newListener)
                this.emit('newListener', type,
                  isFunction(listener.listener) ?
                    listener.listener : listener);

              if (!this._events[type])
              // Optimize the case of one listener. Don't need the extra array object.
                this._events[type] = listener;
              else if (isObject(this._events[type]))
              // If we've already got an array, just append.
                this._events[type].push(listener);
              else
              // Adding the second element, need to change to array.
                this._events[type] = [this._events[type], listener];

              // Check for listener leak
              if (isObject(this._events[type]) && !this._events[type].warned) {
                if (!isUndefined(this._maxListeners)) {
                  m = this._maxListeners;
                } else {
                  m = EventEmitter.defaultMaxListeners;
                }

                if (m && m > 0 && this._events[type].length > m) {
                  this._events[type].warned = true;
                  console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
                  if (typeof console.trace === 'function') {
                    // not supported in IE 10
                    console.trace();
                  }
                }
              }

              return this;
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.once = function (type, listener) {
              if (!isFunction(listener))
                throw TypeError('listener must be a function');

              var fired = false;

              function g() {
                this.removeListener(type, g);

                if (!fired) {
                  fired = true;
                  listener.apply(this, arguments);
                }
              }

              g.listener = listener;
              this.on(type, g);

              return this;
            };

// emits a 'removeListener' event iff the listener was removed
            EventEmitter.prototype.removeListener = function (type, listener) {
              var list, position, length, i;

              if (!isFunction(listener))
                throw TypeError('listener must be a function');

              if (!this._events || !this._events[type])
                return this;

              list = this._events[type];
              length = list.length;
              position = -1;

              if (list === listener ||
                (isFunction(list.listener) && list.listener === listener)) {
                delete this._events[type];
                if (this._events.removeListener)
                  this.emit('removeListener', type, listener);

              } else if (isObject(list)) {
                for (i = length; i-- > 0;) {
                  if (list[i] === listener ||
                    (list[i].listener && list[i].listener === listener)) {
                    position = i;
                    break;
                  }
                }

                if (position < 0)
                  return this;

                if (list.length === 1) {
                  list.length = 0;
                  delete this._events[type];
                } else {
                  list.splice(position, 1);
                }

                if (this._events.removeListener)
                  this.emit('removeListener', type, listener);
              }

              return this;
            };

            EventEmitter.prototype.removeAllListeners = function (type) {
              var key, listeners;

              if (!this._events)
                return this;

              // not listening for removeListener, no need to emit
              if (!this._events.removeListener) {
                if (arguments.length === 0)
                  this._events = {};
                else if (this._events[type])
                  delete this._events[type];
                return this;
              }

              // emit removeListener for all listeners on all events
              if (arguments.length === 0) {
                for (key in this._events) {
                  if (key === 'removeListener') continue;
                  this.removeAllListeners(key);
                }
                this.removeAllListeners('removeListener');
                this._events = {};
                return this;
              }

              listeners = this._events[type];

              if (isFunction(listeners)) {
                this.removeListener(type, listeners);
              } else if (listeners) {
                // LIFO order
                while (listeners.length)
                  this.removeListener(type, listeners[listeners.length - 1]);
              }
              delete this._events[type];

              return this;
            };

            EventEmitter.prototype.listeners = function (type) {
              var ret;
              if (!this._events || !this._events[type])
                ret = [];
              else if (isFunction(this._events[type]))
                ret = [this._events[type]];
              else
                ret = this._events[type].slice();
              return ret;
            };

            EventEmitter.prototype.listenerCount = function (type) {
              if (this._events) {
                var evlistener = this._events[type];

                if (isFunction(evlistener))
                  return 1;
                else if (evlistener)
                  return evlistener.length;
              }
              return 0;
            };

            EventEmitter.listenerCount = function (emitter, type) {
              return emitter.listenerCount(type);
            };

            function isFunction(arg) {
              return typeof arg === 'function';
            }

            function isNumber(arg) {
              return typeof arg === 'number';
            }

            function isObject(arg) {
              return typeof arg === 'object' && arg !== null;
            }

            function isUndefined(arg) {
              return arg === void 0;
            }


            /***/
          }),
          /* 6 */
          /***/ (function (module, exports, __webpack_require__) {

// see https://tools.ietf.org/html/rfc1808

            /* jshint ignore:start */
            (function (root) {
              /* jshint ignore:end */

              var URL_REGEX = /^((?:[^\/;?#]+:)?)(\/\/[^\/\;?#]*)?(.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;
              var FIRST_SEGMENT_REGEX = /^([^\/;?#]*)(.*)$/;
              var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
              var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;

              var URLToolkit = { // jshint ignore:line
                // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
                // E.g
                // With opts.alwaysNormalize = false (default, spec compliant)
                // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
                // With opts.alwaysNormalize = true (default, not spec compliant)
                // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
                buildAbsoluteURL: function (baseURL, relativeURL, opts) {
                  opts = opts || {};
                  // remove any remaining space and CRLF
                  baseURL = baseURL.trim();
                  relativeURL = relativeURL.trim();
                  if (!relativeURL) {
                    // 2a) If the embedded URL is entirely empty, it inherits the
                    // entire base URL (i.e., is set equal to the base URL)
                    // and we are done.
                    if (!opts.alwaysNormalize) {
                      return baseURL;
                    }
                    var basePartsForNormalise = this.parseURL(baseURL);
                    if (!baseParts) {
                      throw new Error('Error trying to parse base URL.');
                    }
                    basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
                    return URLToolkit.buildURLFromParts(basePartsForNormalise);
                  }
                  var relativeParts = this.parseURL(relativeURL);
                  if (!relativeParts) {
                    throw new Error('Error trying to parse relative URL.');
                  }
                  if (relativeParts.scheme) {
                    // 2b) If the embedded URL starts with a scheme name, it is
                    // interpreted as an absolute URL and we are done.
                    if (!opts.alwaysNormalize) {
                      return relativeURL;
                    }
                    relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
                    return URLToolkit.buildURLFromParts(relativeParts);
                  }
                  var baseParts = this.parseURL(baseURL);
                  if (!baseParts) {
                    throw new Error('Error trying to parse base URL.');
                  }
                  if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
                    // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
                    // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
                    var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
                    baseParts.netLoc = pathParts[1];
                    baseParts.path = pathParts[2];
                  }
                  if (baseParts.netLoc && !baseParts.path) {
                    baseParts.path = '/';
                  }
                  var builtParts = {
                    // 2c) Otherwise, the embedded URL inherits the scheme of
                    // the base URL.
                    scheme: baseParts.scheme,
                    netLoc: relativeParts.netLoc,
                    path: null,
                    params: relativeParts.params,
                    query: relativeParts.query,
                    fragment: relativeParts.fragment
                  };
                  if (!relativeParts.netLoc) {
                    // 3) If the embedded URL's <net_loc> is non-empty, we skip to
                    // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
                    // (if any) of the base URL.
                    builtParts.netLoc = baseParts.netLoc;
                    // 4) If the embedded URL path is preceded by a slash "/", the
                    // path is not relative and we skip to Step 7.
                    if (relativeParts.path[0] !== '/') {
                      if (!relativeParts.path) {
                        // 5) If the embedded URL path is empty (and not preceded by a
                        // slash), then the embedded URL inherits the base URL path
                        builtParts.path = baseParts.path;
                        // 5a) if the embedded URL's <params> is non-empty, we skip to
                        // step 7; otherwise, it inherits the <params> of the base
                        // URL (if any) and
                        if (!relativeParts.params) {
                          builtParts.params = baseParts.params;
                          // 5b) if the embedded URL's <query> is non-empty, we skip to
                          // step 7; otherwise, it inherits the <query> of the base
                          // URL (if any) and we skip to step 7.
                          if (!relativeParts.query) {
                            builtParts.query = baseParts.query;
                          }
                        }
                      } else {
                        // 6) The last segment of the base URL's path (anything
                        // following the rightmost slash "/", or the entire path if no
                        // slash is present) is removed and the embedded URL's path is
                        // appended in its place.
                        var baseURLPath = baseParts.path;
                        var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
                        builtParts.path = URLToolkit.normalizePath(newPath);
                      }
                    }
                  }
                  if (builtParts.path === null) {
                    builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
                  }
                  return URLToolkit.buildURLFromParts(builtParts);
                },
                parseURL: function (url) {
                  var parts = URL_REGEX.exec(url);
                  if (!parts) {
                    return null;
                  }
                  return {
                    scheme: parts[1] || '',
                    netLoc: parts[2] || '',
                    path: parts[3] || '',
                    params: parts[4] || '',
                    query: parts[5] || '',
                    fragment: parts[6] || ''
                  };
                },
                normalizePath: function (path) {
                  // The following operations are
                  // then applied, in order, to the new path:
                  // 6a) All occurrences of "./", where "." is a complete path
                  // segment, are removed.
                  // 6b) If the path ends with "." as a complete path segment,
                  // that "." is removed.
                  path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
                  // 6c) All occurrences of "<segment>/../", where <segment> is a
                  // complete path segment not equal to "..", are removed.
                  // Removal of these path segments is performed iteratively,
                  // removing the leftmost matching pattern on each iteration,
                  // until no matching pattern remains.
                  // 6d) If the path ends with "<segment>/..", where <segment> is a
                  // complete path segment not equal to "..", that
                  // "<segment>/.." is removed.
                  while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {
                  } // jshint ignore:line
                  return path.split('').reverse().join('');
                },
                buildURLFromParts: function (parts) {
                  return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
                }
              };

              /* jshint ignore:start */
              if (true)
                module.exports = URLToolkit;
              else if (typeof define === 'function' && define.amd)
                define([], function () {
                  return URLToolkit;
                });
              else if (typeof exports === 'object')
                exports["URLToolkit"] = URLToolkit;
              else
                root["URLToolkit"] = URLToolkit;
            })(this);
            /* jshint ignore:end */


            /***/
          }),
          /* 7 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";

// EXTERNAL MODULE: ./src/events.js
            var events = __webpack_require__(1);

// EXTERNAL MODULE: ./src/errors.js
            var errors = __webpack_require__(2);

// EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules
            var crypt_decrypter = __webpack_require__(3);

// EXTERNAL MODULE: ./src/utils/logger.js
            var logger = __webpack_require__(0);

// CONCATENATED MODULE: ./src/demux/adts.js
            /**
             *  ADTS parser helper
             */



            function getAudioConfig(observer, data, offset, audioCodec) {
              var adtsObjectType,
                // :int
                adtsSampleingIndex,
                // :int
                adtsExtensionSampleingIndex,
                // :int
                adtsChanelConfig,
                // :int
                config,
                userAgent = navigator.userAgent.toLowerCase(),
                manifestCodec = audioCodec,
                adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];
              // byte 2
              adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;
              adtsSampleingIndex = (data[offset + 2] & 0x3C) >>> 2;
              if (adtsSampleingIndex > adtsSampleingRates.length - 1) {
                observer.trigger(Event.ERROR, {
                  type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                  details: errors["a" /* ErrorDetails */].FRAG_PARSING_ERROR,
                  fatal: true,
                  reason: 'invalid ADTS sampling index:' + adtsSampleingIndex
                });
                return;
              }
              adtsChanelConfig = (data[offset + 2] & 0x01) << 2;
              // byte 3
              adtsChanelConfig |= (data[offset + 3] & 0xC0) >>> 6;
              logger["b" /* logger */].log('manifest codec:' + audioCodec + ',ADTS data:type:' + adtsObjectType + ',sampleingIndex:' + adtsSampleingIndex + '[' + adtsSampleingRates[adtsSampleingIndex] + 'Hz],channelConfig:' + adtsChanelConfig);
              // firefox: freq less than 24kHz = AAC SBR (HE-AAC)
              if (/firefox/i.test(userAgent)) {
                if (adtsSampleingIndex >= 6) {
                  adtsObjectType = 5;
                  config = new Array(4);
                  // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
                  // there is a factor 2 between frame sample rate and output sample rate
                  // multiply frequency by 2 (see table below, equivalent to substract 3)
                  adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
                } else {
                  adtsObjectType = 2;
                  config = new Array(2);
                  adtsExtensionSampleingIndex = adtsSampleingIndex;
                }
                // Android : always use AAC
              } else if (userAgent.indexOf('android') !== -1) {
                adtsObjectType = 2;
                config = new Array(2);
                adtsExtensionSampleingIndex = adtsSampleingIndex;
              } else {
                /*  for other browsers (Chrome/Vivaldi/Opera ...)
        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
    */
                adtsObjectType = 5;
                config = new Array(4);
                // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)
                if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSampleingIndex >= 6) {
                  // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
                  // there is a factor 2 between frame sample rate and output sample rate
                  // multiply frequency by 2 (see table below, equivalent to substract 3)
                  adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
                } else {
                  // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
                  // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
                  if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && (adtsSampleingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {
                    adtsObjectType = 2;
                    config = new Array(2);
                  }
                  adtsExtensionSampleingIndex = adtsSampleingIndex;
                }
              }
              /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
    Audio Profile / Audio Object Type
    0: Null
    1: AAC Main
    2: AAC LC (Low Complexity)
    3: AAC SSR (Scalable Sample Rate)
    4: AAC LTP (Long Term Prediction)
    5: SBR (Spectral Band Replication)
    6: AAC Scalable
   sampling freq
    0: 96000 Hz
    1: 88200 Hz
    2: 64000 Hz
    3: 48000 Hz
    4: 44100 Hz
    5: 32000 Hz
    6: 24000 Hz
    7: 22050 Hz
    8: 16000 Hz
    9: 12000 Hz
    10: 11025 Hz
    11: 8000 Hz
    12: 7350 Hz
    13: Reserved
    14: Reserved
    15: frequency is written explictly
    Channel Configurations
    These are the channel configurations:
    0: Defined in AOT Specifc Config
    1: 1 channel: front-center
    2: 2 channels: front-left, front-right
  */
              // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1
              config[0] = adtsObjectType << 3;
              // samplingFrequencyIndex
              config[0] |= (adtsSampleingIndex & 0x0E) >> 1;
              config[1] |= (adtsSampleingIndex & 0x01) << 7;
              // channelConfiguration
              config[1] |= adtsChanelConfig << 3;
              if (adtsObjectType === 5) {
                // adtsExtensionSampleingIndex
                config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;
                config[2] = (adtsExtensionSampleingIndex & 0x01) << 7;
                // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
                //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc
                config[2] |= 2 << 2;
                config[3] = 0;
              }
              return {
                config: config,
                samplerate: adtsSampleingRates[adtsSampleingIndex],
                channelCount: adtsChanelConfig,
                codec: 'mp4a.40.' + adtsObjectType,
                manifestCodec: manifestCodec
              };
            }

            function isHeaderPattern(data, offset) {
              return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;
            }

            function getHeaderLength(data, offset) {
              return !!(data[offset + 1] & 0x01) ? 7 : 9;
            }

            function getFullFrameLength(data, offset) {
              return (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;
            }

            function isHeader(data, offset) {
              // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
              // Layer bits (position 14 and 15) in header should be always 0 for ADTS
              // More info https://wiki.multimedia.cx/index.php?title=ADTS
              if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
                return true;
              }
              return false;
            }

            function adts_probe(data, offset) {
              // same as isHeader but we also check that ADTS frame follows last ADTS frame
              // or end of data is reached
              if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
                // ADTS header Length
                var headerLength = getHeaderLength(data, offset);
                // ADTS frame Length
                var frameLength = headerLength;
                if (offset + 5 < data.length) {
                  frameLength = getFullFrameLength(data, offset);
                }
                var newOffset = offset + frameLength;
                if (newOffset === data.length || newOffset + 1 < data.length && isHeaderPattern(data, newOffset)) {
                  return true;
                }
              }
              return false;
            }

            function initTrackConfig(track, observer, data, offset, audioCodec) {
              if (!track.samplerate) {
                var config = getAudioConfig(observer, data, offset, audioCodec);
                track.config = config.config;
                track.samplerate = config.samplerate;
                track.channelCount = config.channelCount;
                track.codec = config.codec;
                track.manifestCodec = config.manifestCodec;
                logger["b" /* logger */].log('parsed codec:' + track.codec + ',rate:' + config.samplerate + ',nb channel:' + config.channelCount);
              }
            }

            function getFrameDuration(samplerate) {
              return 1024 * 90000 / samplerate;
            }

            function parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {
              var headerLength, frameLength, stamp;
              var length = data.length;

              // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
              headerLength = getHeaderLength(data, offset);
              // retrieve frame size
              frameLength = getFullFrameLength(data, offset);
              frameLength -= headerLength;

              if (frameLength > 0 && offset + headerLength + frameLength <= length) {
                stamp = pts + frameIndex * frameDuration;
                //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
                return {headerLength: headerLength, frameLength: frameLength, stamp: stamp};
              }

              return undefined;
            }

            function appendFrame(track, data, offset, pts, frameIndex) {
              var frameDuration = getFrameDuration(track.samplerate);
              var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);
              if (header) {
                var stamp = header.stamp;
                var headerLength = header.headerLength;
                var frameLength = header.frameLength;

                //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
                var aacSample = {
                  unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),
                  pts: stamp,
                  dts: stamp
                };

                track.samples.push(aacSample);
                track.len += frameLength;

                return {sample: aacSample, length: frameLength + headerLength};
              }

              return undefined;
            }

// EXTERNAL MODULE: ./src/demux/id3.js
            var id3 = __webpack_require__(4);

// CONCATENATED MODULE: ./src/demux/aacdemuxer.js
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * AAC demuxer
             */




            var aacdemuxer_AACDemuxer = function () {
              function AACDemuxer(observer, remuxer, config) {
                _classCallCheck(this, AACDemuxer);

                this.observer = observer;
                this.config = config;
                this.remuxer = remuxer;
              }

              AACDemuxer.prototype.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                this._audioTrack = {
                  container: 'audio/adts',
                  type: 'audio',
                  id: 0,
                  sequenceNumber: 0,
                  isAAC: true,
                  samples: [],
                  len: 0,
                  manifestCodec: audioCodec,
                  duration: duration,
                  inputTimeScale: 90000
                };
              };

              AACDemuxer.prototype.resetTimeStamp = function resetTimeStamp() {
              };

              AACDemuxer.probe = function probe(data) {
                if (!data) {
                  return false;
                }
                // Check for the ADTS sync word
                // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
                // Layer bits (position 14 and 15) in header should be always 0 for ADTS
                // More info https://wiki.multimedia.cx/index.php?title=ADTS
                var id3Data = id3["a" /* default */].getID3Data(data, 0) || [];
                var offset = id3Data.length;

                for (var length = data.length; offset < length; offset++) {
                  if (adts_probe(data, offset)) {
                    logger["b" /* logger */].log('ADTS sync word found !');
                    return true;
                  }
                }
                return false;
              };

              // feed incoming data to the front of the parsing pipeline


              AACDemuxer.prototype.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                var track = this._audioTrack;
                var id3Data = id3["a" /* default */].getID3Data(data, 0) || [];
                var timestamp = id3["a" /* default */].getTimeStamp(id3Data);
                var pts = timestamp ? 90 * timestamp : timeOffset * 90000;
                var frameIndex = 0;
                var stamp = pts;
                var length = data.length;
                var offset = id3Data.length;

                var id3Samples = [{pts: stamp, dts: stamp, data: id3Data}];

                while (offset < length - 1) {
                  if (isHeader(data, offset) && offset + 5 < length) {
                    initTrackConfig(track, this.observer, data, offset, track.manifestCodec);
                    var frame = appendFrame(track, data, offset, pts, frameIndex);
                    if (frame) {
                      offset += frame.length;
                      stamp = frame.sample.pts;
                      frameIndex++;
                    } else {
                      logger["b" /* logger */].log('Unable to parse AAC frame');
                      break;
                    }
                  } else if (id3["a" /* default */].isHeader(data, offset)) {
                    id3Data = id3["a" /* default */].getID3Data(data, offset);
                    id3Samples.push({pts: stamp, dts: stamp, data: id3Data});
                    offset += id3Data.length;
                  } else {
                    //nothing found, keep looking
                    offset++;
                  }
                }

                this.remuxer.remux(track, {samples: []}, {
                  samples: id3Samples,
                  inputTimeScale: 90000
                }, {samples: []}, timeOffset, contiguous, accurateTimeOffset);
              };

              AACDemuxer.prototype.destroy = function destroy() {
              };

              return AACDemuxer;
            }();

            /* harmony default export */
            var aacdemuxer = (aacdemuxer_AACDemuxer);

// CONCATENATED MODULE: ./src/demux/mp4demuxer.js
            function mp4demuxer__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * MP4 demuxer
             */



            var UINT32_MAX = Math.pow(2, 32) - 1;

            var mp4demuxer_MP4Demuxer = function () {
              function MP4Demuxer(observer, remuxer) {
                mp4demuxer__classCallCheck(this, MP4Demuxer);

                this.observer = observer;
                this.remuxer = remuxer;
              }

              MP4Demuxer.prototype.resetTimeStamp = function resetTimeStamp(initPTS) {
                this.initPTS = initPTS;
              };

              MP4Demuxer.prototype.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                //jshint unused:false
                if (initSegment && initSegment.byteLength) {
                  var initData = this.initData = MP4Demuxer.parseInitSegment(initSegment);

                  // default audio codec if nothing specified
                  // TODO : extract that from initsegment
                  if (audioCodec == null) {
                    audioCodec = 'mp4a.40.5';
                  }
                  if (videoCodec == null) {
                    videoCodec = 'avc1.42e01e';
                  }
                  var tracks = {};
                  if (initData.audio && initData.video) {
                    tracks.audiovideo = {
                      container: 'video/mp4',
                      codec: audioCodec + ',' + videoCodec,
                      initSegment: duration ? initSegment : null
                    };
                  } else {
                    if (initData.audio) {
                      tracks.audio = {
                        container: 'audio/mp4',
                        codec: audioCodec,
                        initSegment: duration ? initSegment : null
                      };
                    }
                    if (initData.video) {
                      tracks.video = {
                        container: 'video/mp4',
                        codec: videoCodec,
                        initSegment: duration ? initSegment : null
                      };
                    }
                  }
                  this.observer.trigger(events["a" /* default */].FRAG_PARSING_INIT_SEGMENT, {tracks: tracks});
                } else {
                  if (audioCodec) {
                    this.audioCodec = audioCodec;
                  }
                  if (videoCodec) {
                    this.videoCodec = videoCodec;
                  }
                }
              };

              MP4Demuxer.probe = function probe(data) {
                // ensure we find a moof box in the first 16 kB
                return MP4Demuxer.findBox({
                  data: data,
                  start: 0,
                  end: Math.min(data.length, 16384)
                }, ['moof']).length > 0;
              };

              MP4Demuxer.bin2str = function bin2str(buffer) {
                return String.fromCharCode.apply(null, buffer);
              };

              MP4Demuxer.readUint32 = function readUint32(buffer, offset) {
                if (buffer.data) {
                  offset += buffer.start;
                  buffer = buffer.data;
                }

                var val = buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
                return val < 0 ? 4294967296 + val : val;
              };

              MP4Demuxer.writeUint32 = function writeUint32(buffer, offset, value) {
                if (buffer.data) {
                  offset += buffer.start;
                  buffer = buffer.data;
                }
                buffer[offset] = value >> 24;
                buffer[offset + 1] = value >> 16 & 0xff;
                buffer[offset + 2] = value >> 8 & 0xff;
                buffer[offset + 3] = value & 0xff;
              };

              // Find the data for a box specified by its path


              MP4Demuxer.findBox = function findBox(data, path) {
                var results = [],
                  i,
                  size,
                  type,
                  end,
                  subresults,
                  start,
                  endbox;

                if (data.data) {
                  start = data.start;
                  end = data.end;
                  data = data.data;
                } else {
                  start = 0;
                  end = data.byteLength;
                }

                if (!path.length) {
                  // short-circuit the search for empty paths
                  return null;
                }

                for (i = start; i < end;) {
                  size = MP4Demuxer.readUint32(data, i);
                  type = MP4Demuxer.bin2str(data.subarray(i + 4, i + 8));
                  endbox = size > 1 ? i + size : end;

                  if (type === path[0]) {

                    if (path.length === 1) {
                      // this is the end of the path and we've found the box we were
                      // looking for
                      results.push({data: data, start: i + 8, end: endbox});
                    } else {
                      // recursively search for the next box along the path
                      subresults = MP4Demuxer.findBox({data: data, start: i + 8, end: endbox}, path.slice(1));
                      if (subresults.length) {
                        results = results.concat(subresults);
                      }
                    }
                  }
                  i = endbox;
                }

                // we've finished searching all of data
                return results;
              };

              /**
               * Parses an MP4 initialization segment and extracts stream type and
               * timescale values for any declared tracks. Timescale values indicate the
               * number of clock ticks per second to assume for time-based values
               * elsewhere in the MP4.
               *
               * To determine the start time of an MP4, you need two pieces of
               * information: the timescale unit and the earliest base media decode
               * time. Multiple timescales can be specified within an MP4 but the
               * base media decode time is always expressed in the timescale from
               * the media header box for the track:
               * ```
               * moov > trak > mdia > mdhd.timescale
               * moov > trak > mdia > hdlr
               * ```
               * @param init {Uint8Array} the bytes of the init segment
               * @return {object} a hash of track type to timescale values or null if
               * the init segment is malformed.
               */


              MP4Demuxer.parseInitSegment = function parseInitSegment(initSegment) {
                var result = [];
                var traks = MP4Demuxer.findBox(initSegment, ['moov', 'trak']);

                traks.forEach(function (trak) {
                  var tkhd = MP4Demuxer.findBox(trak, ['tkhd'])[0];
                  if (tkhd) {
                    var version = tkhd.data[tkhd.start];
                    var index = version === 0 ? 12 : 20;
                    var trackId = MP4Demuxer.readUint32(tkhd, index);

                    var mdhd = MP4Demuxer.findBox(trak, ['mdia', 'mdhd'])[0];
                    if (mdhd) {
                      version = mdhd.data[mdhd.start];
                      index = version === 0 ? 12 : 20;
                      var timescale = MP4Demuxer.readUint32(mdhd, index);

                      var hdlr = MP4Demuxer.findBox(trak, ['mdia', 'hdlr'])[0];
                      if (hdlr) {
                        var hdlrType = MP4Demuxer.bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));
                        var type = {'soun': 'audio', 'vide': 'video'}[hdlrType];
                        if (type) {
                          // extract codec info. TODO : parse codec details to be able to build MIME type
                          var codecBox = MP4Demuxer.findBox(trak, ['mdia', 'minf', 'stbl', 'stsd']);
                          if (codecBox.length) {
                            codecBox = codecBox[0];
                            var codecType = MP4Demuxer.bin2str(codecBox.data.subarray(codecBox.start + 12, codecBox.start + 16));
                            logger["b" /* logger */].log('MP4Demuxer:' + type + ':' + codecType + ' found');
                          }
                          result[trackId] = {timescale: timescale, type: type};
                          result[type] = {timescale: timescale, id: trackId};
                        }
                      }
                    }
                  }
                });
                return result;
              };

              /**
               * Determine the base media decode start time, in seconds, for an MP4
               * fragment. If multiple fragments are specified, the earliest time is
               * returned.
               *
               * The base media decode time can be parsed from track fragment
               * metadata:
               * ```
               * moof > traf > tfdt.baseMediaDecodeTime
               * ```
               * It requires the timescale value from the mdhd to interpret.
               *
               * @param timescale {object} a hash of track ids to timescale values.
               * @return {number} the earliest base media decode start time for the
               * fragment, in seconds
               */


              MP4Demuxer.getStartDTS = function getStartDTS(initData, fragment) {
                var trafs, baseTimes, result;

                // we need info from two childrend of each track fragment box
                trafs = MP4Demuxer.findBox(fragment, ['moof', 'traf']);

                // determine the start times for each track
                baseTimes = [].concat.apply([], trafs.map(function (traf) {
                  return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {
                    var id, scale, baseTime;

                    // get the track id from the tfhd
                    id = MP4Demuxer.readUint32(tfhd, 4);
                    // assume a 90kHz clock if no timescale was specified
                    scale = initData[id].timescale || 90e3;

                    // get the base media decode time from the tfdt
                    baseTime = MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {
                      var version, result;

                      version = tfdt.data[tfdt.start];
                      result = MP4Demuxer.readUint32(tfdt, 4);
                      if (version === 1) {
                        result *= Math.pow(2, 32);

                        result += MP4Demuxer.readUint32(tfdt, 8);
                      }
                      return result;
                    })[0];
                    // convert base time to seconds
                    return baseTime / scale;
                  });
                }));

                // return the minimum
                result = Math.min.apply(null, baseTimes);
                return isFinite(result) ? result : 0;
              };

              MP4Demuxer.offsetStartDTS = function offsetStartDTS(initData, fragment, timeOffset) {
                MP4Demuxer.findBox(fragment, ['moof', 'traf']).map(function (traf) {
                  return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {
                    // get the track id from the tfhd
                    var id = MP4Demuxer.readUint32(tfhd, 4);
                    // assume a 90kHz clock if no timescale was specified
                    var timescale = initData[id].timescale || 90e3;

                    // get the base media decode time from the tfdt
                    MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {
                      var version = tfdt.data[tfdt.start];
                      var baseMediaDecodeTime = MP4Demuxer.readUint32(tfdt, 4);
                      if (version === 0) {
                        MP4Demuxer.writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);
                      } else {
                        baseMediaDecodeTime *= Math.pow(2, 32);
                        baseMediaDecodeTime += MP4Demuxer.readUint32(tfdt, 8);
                        baseMediaDecodeTime -= timeOffset * timescale;
                        baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
                        var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
                        var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
                        MP4Demuxer.writeUint32(tfdt, 4, upper);
                        MP4Demuxer.writeUint32(tfdt, 8, lower);
                      }
                    });
                  });
                });
              };

              // feed incoming data to the front of the parsing pipeline


              MP4Demuxer.prototype.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                var initData = this.initData;
                if (!initData) {
                  this.resetInitSegment(data, this.audioCodec, this.videoCodec);
                  initData = this.initData;
                }
                var startDTS = void 0,
                  initPTS = this.initPTS;
                if (initPTS === undefined) {
                  var _startDTS = MP4Demuxer.getStartDTS(initData, data);
                  this.initPTS = initPTS = _startDTS - timeOffset;
                  this.observer.trigger(events["a" /* default */].INIT_PTS_FOUND, {initPTS: initPTS});
                }
                MP4Demuxer.offsetStartDTS(initData, data, initPTS);
                startDTS = MP4Demuxer.getStartDTS(initData, data);
                this.remuxer.remux(initData.audio, initData.video, null, null, startDTS, contiguous, accurateTimeOffset, data);
              };

              MP4Demuxer.prototype.destroy = function destroy() {
              };

              return MP4Demuxer;
            }();

            /* harmony default export */
            var mp4demuxer = (mp4demuxer_MP4Demuxer);
// CONCATENATED MODULE: ./src/demux/mpegaudio.js
            /**
             *  MPEG parser helper
             */

            var MpegAudio = {

              BitratesMap: [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],

              SamplingRateMap: [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000],

              appendFrame: function appendFrame(track, data, offset, pts, frameIndex) {
                // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
                if (offset + 24 > data.length) {
                  return undefined;
                }

                var header = this.parseHeader(data, offset);
                if (header && offset + header.frameLength <= data.length) {
                  var frameDuration = 1152 * 90000 / header.sampleRate;
                  var stamp = pts + frameIndex * frameDuration;
                  var sample = {unit: data.subarray(offset, offset + header.frameLength), pts: stamp, dts: stamp};

                  track.config = [];
                  track.channelCount = header.channelCount;
                  track.samplerate = header.sampleRate;
                  track.samples.push(sample);
                  track.len += header.frameLength;

                  return {sample: sample, length: header.frameLength};
                }

                return undefined;
              },

              parseHeader: function parseHeader(data, offset) {
                var headerB = data[offset + 1] >> 3 & 3;
                var headerC = data[offset + 1] >> 1 & 3;
                var headerE = data[offset + 2] >> 4 & 15;
                var headerF = data[offset + 2] >> 2 & 3;
                var headerG = !!(data[offset + 2] & 2);
                if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {
                  var columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;
                  var bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;
                  var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;
                  var sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];
                  var padding = headerG ? 1 : 0;
                  var channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)
                  var frameLength = headerC === 3 ? (headerB === 3 ? 12 : 6) * bitRate / sampleRate + padding << 2 : (headerB === 3 ? 144 : 72) * bitRate / sampleRate + padding | 0;

                  return {sampleRate: sampleRate, channelCount: channelCount, frameLength: frameLength};
                }

                return undefined;
              },

              isHeaderPattern: function isHeaderPattern(data, offset) {
                return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;
              },

              isHeader: function isHeader(data, offset) {
                // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
                // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
                // More info http://www.mp3-tech.org/programmer/frame_header.html
                if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {
                  return true;
                }
                return false;
              },

              probe: function probe(data, offset) {
                // same as isHeader but we also check that MPEG frame follows last MPEG frame
                // or end of data is reached
                if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {
                  // MPEG header Length
                  var headerLength = 4;
                  // MPEG frame Length
                  var header = this.parseHeader(data, offset);
                  var frameLength = headerLength;
                  if (header && header.frameLength) {
                    frameLength = header.frameLength;
                  }
                  var newOffset = offset + frameLength;
                  if (newOffset === data.length || newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset)) {
                    return true;
                  }
                }
                return false;
              }
            };

            /* harmony default export */
            var mpegaudio = (MpegAudio);

// CONCATENATED MODULE: ./src/demux/exp-golomb.js
            function exp_golomb__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
             */



            var exp_golomb_ExpGolomb = function () {
              function ExpGolomb(data) {
                exp_golomb__classCallCheck(this, ExpGolomb);

                this.data = data;
                // the number of bytes left to examine in this.data
                this.bytesAvailable = data.byteLength;
                // the current word being examined
                this.word = 0; // :uint
                // the number of bits left to examine in the current word
                this.bitsAvailable = 0; // :uint
              }

              // ():void


              ExpGolomb.prototype.loadWord = function loadWord() {
                var data = this.data,
                  bytesAvailable = this.bytesAvailable,
                  position = data.byteLength - bytesAvailable,
                  workingBytes = new Uint8Array(4),
                  availableBytes = Math.min(4, bytesAvailable);
                if (availableBytes === 0) {
                  throw new Error('no bytes available');
                }
                workingBytes.set(data.subarray(position, position + availableBytes));
                this.word = new DataView(workingBytes.buffer).getUint32(0);
                // track the amount of this.data that has been processed
                this.bitsAvailable = availableBytes * 8;
                this.bytesAvailable -= availableBytes;
              };

              // (count:int):void


              ExpGolomb.prototype.skipBits = function skipBits(count) {
                var skipBytes; // :int
                if (this.bitsAvailable > count) {
                  this.word <<= count;
                  this.bitsAvailable -= count;
                } else {
                  count -= this.bitsAvailable;
                  skipBytes = count >> 3;
                  count -= skipBytes >> 3;
                  this.bytesAvailable -= skipBytes;
                  this.loadWord();
                  this.word <<= count;
                  this.bitsAvailable -= count;
                }
              };

              // (size:int):uint


              ExpGolomb.prototype.readBits = function readBits(size) {
                var bits = Math.min(this.bitsAvailable, size),
                  // :uint
                  valu = this.word >>> 32 - bits; // :uint
                if (size > 32) {
                  logger["b" /* logger */].error('Cannot read more than 32 bits at a time');
                }
                this.bitsAvailable -= bits;
                if (this.bitsAvailable > 0) {
                  this.word <<= bits;
                } else if (this.bytesAvailable > 0) {
                  this.loadWord();
                }
                bits = size - bits;
                if (bits > 0 && this.bitsAvailable) {
                  return valu << bits | this.readBits(bits);
                } else {
                  return valu;
                }
              };

              // ():uint


              ExpGolomb.prototype.skipLZ = function skipLZ() {
                var leadingZeroCount; // :uint
                for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
                  if (0 !== (this.word & 0x80000000 >>> leadingZeroCount)) {
                    // the first bit of working word is 1
                    this.word <<= leadingZeroCount;
                    this.bitsAvailable -= leadingZeroCount;
                    return leadingZeroCount;
                  }
                }
                // we exhausted word and still have not found a 1
                this.loadWord();
                return leadingZeroCount + this.skipLZ();
              };

              // ():void


              ExpGolomb.prototype.skipUEG = function skipUEG() {
                this.skipBits(1 + this.skipLZ());
              };

              // ():void


              ExpGolomb.prototype.skipEG = function skipEG() {
                this.skipBits(1 + this.skipLZ());
              };

              // ():uint


              ExpGolomb.prototype.readUEG = function readUEG() {
                var clz = this.skipLZ(); // :uint
                return this.readBits(clz + 1) - 1;
              };

              // ():int


              ExpGolomb.prototype.readEG = function readEG() {
                var valu = this.readUEG(); // :int
                if (0x01 & valu) {
                  // the number is odd if the low order bit is set
                  return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
                } else {
                  return -1 * (valu >>> 1); // divide by two then make it negative
                }
              };

              // Some convenience functions
              // :Boolean


              ExpGolomb.prototype.readBoolean = function readBoolean() {
                return 1 === this.readBits(1);
              };

              // ():int


              ExpGolomb.prototype.readUByte = function readUByte() {
                return this.readBits(8);
              };

              // ():int


              ExpGolomb.prototype.readUShort = function readUShort() {
                return this.readBits(16);
              };
              // ():int


              ExpGolomb.prototype.readUInt = function readUInt() {
                return this.readBits(32);
              };

              /**
               * Advance the ExpGolomb decoder past a scaling list. The scaling
               * list is optionally transmitted as part of a sequence parameter
               * set and is not relevant to transmuxing.
               * @param count {number} the number of entries in this scaling list
               * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
               */


              ExpGolomb.prototype.skipScalingList = function skipScalingList(count) {
                var lastScale = 8,
                  nextScale = 8,
                  j,
                  deltaScale;
                for (j = 0; j < count; j++) {
                  if (nextScale !== 0) {
                    deltaScale = this.readEG();
                    nextScale = (lastScale + deltaScale + 256) % 256;
                  }
                  lastScale = nextScale === 0 ? lastScale : nextScale;
                }
              };

              /**
               * Read a sequence parameter set and return some interesting video
               * properties. A sequence parameter set is the H264 metadata that
               * describes the properties of upcoming video frames.
               * @param data {Uint8Array} the bytes of a sequence parameter set
               * @return {object} an object with configuration parsed from the
               * sequence parameter set, including the dimensions of the
               * associated video frames.
               */


              ExpGolomb.prototype.readSPS = function readSPS() {
                var frameCropLeftOffset = 0,
                  frameCropRightOffset = 0,
                  frameCropTopOffset = 0,
                  frameCropBottomOffset = 0,
                  profileIdc,
                  profileCompat,
                  levelIdc,
                  numRefFramesInPicOrderCntCycle,
                  picWidthInMbsMinus1,
                  picHeightInMapUnitsMinus1,
                  frameMbsOnlyFlag,
                  scalingListCount,
                  i,
                  readUByte = this.readUByte.bind(this),
                  readBits = this.readBits.bind(this),
                  readUEG = this.readUEG.bind(this),
                  readBoolean = this.readBoolean.bind(this),
                  skipBits = this.skipBits.bind(this),
                  skipEG = this.skipEG.bind(this),
                  skipUEG = this.skipUEG.bind(this),
                  skipScalingList = this.skipScalingList.bind(this);

                readUByte();
                profileIdc = readUByte(); // profile_idc
                profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)
                skipBits(3); // reserved_zero_3bits u(3),
                levelIdc = readUByte(); //level_idc u(8)
                skipUEG(); // seq_parameter_set_id
                // some profiles have more optional data we don't need
                if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
                  var chromaFormatIdc = readUEG();
                  if (chromaFormatIdc === 3) {
                    skipBits(1); // separate_colour_plane_flag
                  }
                  skipUEG(); // bit_depth_luma_minus8
                  skipUEG(); // bit_depth_chroma_minus8
                  skipBits(1); // qpprime_y_zero_transform_bypass_flag
                  if (readBoolean()) {
                    // seq_scaling_matrix_present_flag
                    scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
                    for (i = 0; i < scalingListCount; i++) {
                      if (readBoolean()) {
                        // seq_scaling_list_present_flag[ i ]
                        if (i < 6) {
                          skipScalingList(16);
                        } else {
                          skipScalingList(64);
                        }
                      }
                    }
                  }
                }
                skipUEG(); // log2_max_frame_num_minus4
                var picOrderCntType = readUEG();
                if (picOrderCntType === 0) {
                  readUEG(); //log2_max_pic_order_cnt_lsb_minus4
                } else if (picOrderCntType === 1) {
                  skipBits(1); // delta_pic_order_always_zero_flag
                  skipEG(); // offset_for_non_ref_pic
                  skipEG(); // offset_for_top_to_bottom_field
                  numRefFramesInPicOrderCntCycle = readUEG();
                  for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
                    skipEG(); // offset_for_ref_frame[ i ]
                  }
                }
                skipUEG(); // max_num_ref_frames
                skipBits(1); // gaps_in_frame_num_value_allowed_flag
                picWidthInMbsMinus1 = readUEG();
                picHeightInMapUnitsMinus1 = readUEG();
                frameMbsOnlyFlag = readBits(1);
                if (frameMbsOnlyFlag === 0) {
                  skipBits(1); // mb_adaptive_frame_field_flag
                }
                skipBits(1); // direct_8x8_inference_flag
                if (readBoolean()) {
                  // frame_cropping_flag
                  frameCropLeftOffset = readUEG();
                  frameCropRightOffset = readUEG();
                  frameCropTopOffset = readUEG();
                  frameCropBottomOffset = readUEG();
                }
                var pixelRatio = [1, 1];
                if (readBoolean()) {
                  // vui_parameters_present_flag
                  if (readBoolean()) {
                    // aspect_ratio_info_present_flag
                    var aspectRatioIdc = readUByte();
                    switch (aspectRatioIdc) {
                      case 1:
                        pixelRatio = [1, 1];
                        break;
                      case 2:
                        pixelRatio = [12, 11];
                        break;
                      case 3:
                        pixelRatio = [10, 11];
                        break;
                      case 4:
                        pixelRatio = [16, 11];
                        break;
                      case 5:
                        pixelRatio = [40, 33];
                        break;
                      case 6:
                        pixelRatio = [24, 11];
                        break;
                      case 7:
                        pixelRatio = [20, 11];
                        break;
                      case 8:
                        pixelRatio = [32, 11];
                        break;
                      case 9:
                        pixelRatio = [80, 33];
                        break;
                      case 10:
                        pixelRatio = [18, 11];
                        break;
                      case 11:
                        pixelRatio = [15, 11];
                        break;
                      case 12:
                        pixelRatio = [64, 33];
                        break;
                      case 13:
                        pixelRatio = [160, 99];
                        break;
                      case 14:
                        pixelRatio = [4, 3];
                        break;
                      case 15:
                        pixelRatio = [3, 2];
                        break;
                      case 16:
                        pixelRatio = [2, 1];
                        break;
                      case 255: {
                        pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
                        break;
                      }
                    }
                  }
                }
                return {
                  width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
                  height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
                  pixelRatio: pixelRatio
                };
              };

              ExpGolomb.prototype.readSliceType = function readSliceType() {
                // skip NALu type
                this.readUByte();
                // discard first_mb_in_slice
                this.readUEG();
                // return slice_type
                return this.readUEG();
              };

              return ExpGolomb;
            }();

            /* harmony default export */
            var exp_golomb = (exp_golomb_ExpGolomb);

// CONCATENATED MODULE: ./src/demux/sample-aes.js
            function sample_aes__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * SAMPLE-AES decrypter
             */



            var sample_aes_SampleAesDecrypter = function () {
              function SampleAesDecrypter(observer, config, decryptdata, discardEPB) {
                sample_aes__classCallCheck(this, SampleAesDecrypter);

                this.decryptdata = decryptdata;
                this.discardEPB = discardEPB;
                this.decrypter = new crypt_decrypter["a" /* default */](observer, config);
              }

              SampleAesDecrypter.prototype.decryptBuffer = function decryptBuffer(encryptedData, callback) {
                this.decrypter.decrypt(encryptedData, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, callback);
              };

              // AAC - encrypt all full 16 bytes blocks starting from offset 16


              SampleAesDecrypter.prototype.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {
                var curUnit = samples[sampleIndex].unit;
                var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
                var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);

                var localthis = this;
                this.decryptBuffer(encryptedBuffer, function (decryptedData) {
                  decryptedData = new Uint8Array(decryptedData);
                  curUnit.set(decryptedData, 16);

                  if (!sync) {
                    localthis.decryptAacSamples(samples, sampleIndex + 1, callback);
                  }
                });
              };

              SampleAesDecrypter.prototype.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {
                for (; ; sampleIndex++) {
                  if (sampleIndex >= samples.length) {
                    callback();
                    return;
                  }

                  if (samples[sampleIndex].unit.length < 32) {
                    continue;
                  }

                  var sync = this.decrypter.isSync();

                  this.decryptAacSample(samples, sampleIndex, callback, sync);

                  if (!sync) {
                    return;
                  }
                }
              };

              // AVC - encrypt one 16 bytes block out of ten, starting from offset 32


              SampleAesDecrypter.prototype.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {
                var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
                var encryptedData = new Int8Array(encryptedDataLen);
                var outputPos = 0;
                for (var inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16) {
                  encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
                }
                return encryptedData;
              };

              SampleAesDecrypter.prototype.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {
                decryptedData = new Uint8Array(decryptedData);
                var inputPos = 0;
                for (var outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16) {
                  decodedData.set(decryptedData.subarray(inputPos, inputPos + 16), outputPos);
                }
                return decodedData;
              };

              SampleAesDecrypter.prototype.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {
                var decodedData = this.discardEPB(curUnit.data);
                var encryptedData = this.getAvcEncryptedData(decodedData);
                var localthis = this;

                this.decryptBuffer(encryptedData.buffer, function (decryptedData) {
                  curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedData);

                  if (!sync) {
                    localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
                  }
                });
              };

              SampleAesDecrypter.prototype.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
                for (; ; sampleIndex++, unitIndex = 0) {
                  if (sampleIndex >= samples.length) {
                    callback();
                    return;
                  }

                  var curUnits = samples[sampleIndex].units;
                  for (; ; unitIndex++) {
                    if (unitIndex >= curUnits.length) {
                      break;
                    }

                    var curUnit = curUnits[unitIndex];
                    if (curUnit.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {
                      continue;
                    }

                    var sync = this.decrypter.isSync();

                    this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);

                    if (!sync) {
                      return;
                    }
                  }
                }
              };

              return SampleAesDecrypter;
            }();

            /* harmony default export */
            var sample_aes = (sample_aes_SampleAesDecrypter);

// CONCATENATED MODULE: ./src/demux/tsdemuxer.js
            function tsdemuxer__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * highly optimized TS demuxer:
             * parse PAT, PMT
             * extract PES packet from audio and video PIDs
             * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet
             * trigger the remuxer upon parsing completion
             * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.
             * it also controls the remuxing process :
             * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.
             */






// import Hex from '../utils/hex';


            var tsdemuxer_TSDemuxer = function () {
              function TSDemuxer(observer, remuxer, config, typeSupported) {
                tsdemuxer__classCallCheck(this, TSDemuxer);

                this.observer = observer;
                this.config = config;
                this.typeSupported = typeSupported;
                this.remuxer = remuxer;
                this.sampleAes = null;
              }

              TSDemuxer.prototype.setDecryptData = function setDecryptData(decryptdata) {
                if (decryptdata != null && decryptdata.key != null && decryptdata.method === 'SAMPLE-AES') {
                  this.sampleAes = new sample_aes(this.observer, this.config, decryptdata, this.discardEPB);
                } else {
                  this.sampleAes = null;
                }
              };

              TSDemuxer.probe = function probe(data) {
                var syncOffset = TSDemuxer._syncOffset(data);
                if (syncOffset < 0) {
                  return false;
                } else {
                  if (syncOffset) {
                    logger["b" /* logger */].warn('MPEG2-TS detected but first sync word found @ offset ' + syncOffset + ', junk ahead ?');
                  }
                  return true;
                }
              };

              TSDemuxer._syncOffset = function _syncOffset(data) {
                // scan 1000 first bytes
                var scanwindow = Math.min(1000, data.length - 3 * 188);
                var i = 0;
                while (i < scanwindow) {
                  // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47
                  if (data[i] === 0x47 && data[i + 188] === 0x47 && data[i + 2 * 188] === 0x47) {
                    return i;
                  } else {
                    i++;
                  }
                }
                return -1;
              };

              TSDemuxer.prototype.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                this.pmtParsed = false;
                this._pmtId = -1;
                this._avcTrack = {
                  container: 'video/mp2t',
                  type: 'video',
                  id: -1,
                  inputTimeScale: 90000,
                  sequenceNumber: 0,
                  samples: [],
                  len: 0,
                  dropped: 0
                };
                this._audioTrack = {
                  container: 'video/mp2t',
                  type: 'audio',
                  id: -1,
                  inputTimeScale: 90000,
                  duration: duration,
                  sequenceNumber: 0,
                  samples: [],
                  len: 0,
                  isAAC: true
                };
                this._id3Track = {type: 'id3', id: -1, inputTimeScale: 90000, sequenceNumber: 0, samples: [], len: 0};
                this._txtTrack = {type: 'text', id: -1, inputTimeScale: 90000, sequenceNumber: 0, samples: [], len: 0};
                // flush any partial content
                this.aacOverFlow = null;
                this.aacLastPTS = null;
                this.avcSample = null;
                this.audioCodec = audioCodec;
                this.videoCodec = videoCodec;
                this._duration = duration;
              };

              TSDemuxer.prototype.resetTimeStamp = function resetTimeStamp() {
              };

              // feed incoming data to the front of the parsing pipeline


              TSDemuxer.prototype.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                var start,
                  len = data.length,
                  stt,
                  pid,
                  atf,
                  offset,
                  pes,
                  unknownPIDs = false;
                this.contiguous = contiguous;
                var pmtParsed = this.pmtParsed,
                  avcTrack = this._avcTrack,
                  audioTrack = this._audioTrack,
                  id3Track = this._id3Track,
                  avcId = avcTrack.id,
                  audioId = audioTrack.id,
                  id3Id = id3Track.id,
                  pmtId = this._pmtId,
                  avcData = avcTrack.pesData,
                  audioData = audioTrack.pesData,
                  id3Data = id3Track.pesData,
                  parsePAT = this._parsePAT,
                  parsePMT = this._parsePMT,
                  parsePES = this._parsePES,
                  parseAVCPES = this._parseAVCPES.bind(this),
                  parseAACPES = this._parseAACPES.bind(this),
                  parseMPEGPES = this._parseMPEGPES.bind(this),
                  parseID3PES = this._parseID3PES.bind(this);

                var syncOffset = TSDemuxer._syncOffset(data);

                // don't parse last TS packet if incomplete
                len -= (len + syncOffset) % 188;

                // loop through TS packets
                for (start = syncOffset; start < len; start += 188) {
                  if (data[start] === 0x47) {
                    stt = !!(data[start + 1] & 0x40);
                    // pid is a 13-bit field starting at the last bit of TS[1]
                    pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];
                    atf = (data[start + 3] & 0x30) >> 4;
                    // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.
                    if (atf > 1) {
                      offset = start + 5 + data[start + 4];
                      // continue if there is only adaptation field
                      if (offset === start + 188) {
                        continue;
                      }
                    } else {
                      offset = start + 4;
                    }
                    switch (pid) {
                      case avcId:
                        if (stt) {
                          if (avcData && (pes = parsePES(avcData))) {
                            parseAVCPES(pes, false);
                          }
                          avcData = {data: [], size: 0};
                        }
                        if (avcData) {
                          avcData.data.push(data.subarray(offset, start + 188));
                          avcData.size += start + 188 - offset;
                        }
                        break;
                      case audioId:
                        if (stt) {
                          if (audioData && (pes = parsePES(audioData))) {
                            if (audioTrack.isAAC) {
                              parseAACPES(pes);
                            } else {
                              parseMPEGPES(pes);
                            }
                          }
                          audioData = {data: [], size: 0};
                        }
                        if (audioData) {
                          audioData.data.push(data.subarray(offset, start + 188));
                          audioData.size += start + 188 - offset;
                        }
                        break;
                      case id3Id:
                        if (stt) {
                          if (id3Data && (pes = parsePES(id3Data))) {
                            parseID3PES(pes);
                          }
                          id3Data = {data: [], size: 0};
                        }
                        if (id3Data) {
                          id3Data.data.push(data.subarray(offset, start + 188));
                          id3Data.size += start + 188 - offset;
                        }
                        break;
                      case 0:
                        if (stt) {
                          offset += data[offset] + 1;
                        }
                        pmtId = this._pmtId = parsePAT(data, offset);
                        break;
                      case pmtId:
                        if (stt) {
                          offset += data[offset] + 1;
                        }
                        var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, this.sampleAes != null);

                        // only update track id if track PID found while parsing PMT
                        // this is to avoid resetting the PID to -1 in case
                        // track PID transiently disappears from the stream
                        // this could happen in case of transient missing audio samples for example
                        avcId = parsedPIDs.avc;
                        if (avcId > 0) {
                          avcTrack.id = avcId;
                        }
                        audioId = parsedPIDs.audio;
                        if (audioId > 0) {
                          audioTrack.id = audioId;
                          audioTrack.isAAC = parsedPIDs.isAAC;
                        }
                        id3Id = parsedPIDs.id3;
                        if (id3Id > 0) {
                          id3Track.id = id3Id;
                        }
                        if (unknownPIDs && !pmtParsed) {
                          logger["b" /* logger */].log('reparse from beginning');
                          unknownPIDs = false;
                          // we set it to -188, the += 188 in the for loop will reset start to 0
                          start = syncOffset - 188;
                        }
                        pmtParsed = this.pmtParsed = true;
                        break;
                      case 17:
                      case 0x1fff:
                        break;
                      default:
                        unknownPIDs = true;
                        break;
                    }
                  } else {
                    this.observer.trigger(events["a" /* default */].ERROR, {
                      type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                      details: errors["a" /* ErrorDetails */].FRAG_PARSING_ERROR,
                      fatal: false,
                      reason: 'TS packet did not start with 0x47'
                    });
                  }
                }
                // try to parse last PES packets
                if (avcData && (pes = parsePES(avcData))) {
                  parseAVCPES(pes, true);
                  avcTrack.pesData = null;
                } else {
                  // either avcData null or PES truncated, keep it for next frag parsing
                  avcTrack.pesData = avcData;
                }

                if (audioData && (pes = parsePES(audioData))) {
                  if (audioTrack.isAAC) {
                    parseAACPES(pes);
                  } else {
                    parseMPEGPES(pes);
                  }
                  audioTrack.pesData = null;
                } else {
                  if (audioData && audioData.size) {
                    logger["b" /* logger */].log('last AAC PES packet truncated,might overlap between fragments');
                  }
                  // either audioData null or PES truncated, keep it for next frag parsing
                  audioTrack.pesData = audioData;
                }

                if (id3Data && (pes = parsePES(id3Data))) {
                  parseID3PES(pes);
                  id3Track.pesData = null;
                } else {
                  // either id3Data null or PES truncated, keep it for next frag parsing
                  id3Track.pesData = id3Data;
                }

                if (this.sampleAes == null) {
                  this.remuxer.remux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);
                } else {
                  this.decryptAndRemux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);
                }
              };

              TSDemuxer.prototype.decryptAndRemux = function decryptAndRemux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
                if (audioTrack.samples && audioTrack.isAAC) {
                  var localthis = this;
                  this.sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {
                    localthis.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                  });
                } else {
                  this.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                }
              };

              TSDemuxer.prototype.decryptAndRemuxAvc = function decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
                if (videoTrack.samples) {
                  var localthis = this;
                  this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {
                    localthis.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                  });
                } else {
                  this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                }
              };

              TSDemuxer.prototype.destroy = function destroy() {
                this._initPTS = this._initDTS = undefined;
                this._duration = 0;
              };

              TSDemuxer.prototype._parsePAT = function _parsePAT(data, offset) {
                // skip the PSI header and parse the first PMT entry
                return (data[offset + 10] & 0x1F) << 8 | data[offset + 11];
                //logger.log('PMT PID:'  + this._pmtId);
              };

              TSDemuxer.prototype._parsePMT = function _parsePMT(data, offset, mpegSupported, isSampleAes) {
                var sectionLength,
                  tableEnd,
                  programInfoLength,
                  pid,
                  result = {audio: -1, avc: -1, id3: -1, isAAC: true};
                sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];
                tableEnd = offset + 3 + sectionLength - 4;
                // to determine where the table is, we have to figure out how
                // long the program info descriptors are
                programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11];
                // advance the offset to the first entry in the mapping table
                offset += 12 + programInfoLength;
                while (offset < tableEnd) {
                  pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];
                  switch (data[offset]) {
                    case 0xcf:
                      // SAMPLE-AES AAC
                      if (!isSampleAes) {
                        logger["b" /* logger */].log('unkown stream type:' + data[offset]);
                        break;
                      }
                    /* falls through */

                    // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)
                    case 0x0f:
                      //logger.log('AAC PID:'  + pid);
                      if (result.audio === -1) {
                        result.audio = pid;
                      }
                      break;

                    // Packetized metadata (ID3)
                    case 0x15:
                      //logger.log('ID3 PID:'  + pid);
                      if (result.id3 === -1) {
                        result.id3 = pid;
                      }
                      break;

                    case 0xdb:
                      // SAMPLE-AES AVC
                      if (!isSampleAes) {
                        logger["b" /* logger */].log('unkown stream type:' + data[offset]);
                        break;
                      }
                    /* falls through */

                    // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)
                    case 0x1b:
                      //logger.log('AVC PID:'  + pid);
                      if (result.avc === -1) {
                        result.avc = pid;
                      }
                      break;

                    // ISO/IEC 11172-3 (MPEG-1 audio)
                    // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)
                    case 0x03:
                    case 0x04:
                      //logger.log('MPEG PID:'  + pid);
                      if (!mpegSupported) {
                        logger["b" /* logger */].log('MPEG audio found, not supported in this browser for now');
                      } else if (result.audio === -1) {
                        result.audio = pid;
                        result.isAAC = false;
                      }
                      break;

                    case 0x24:
                      logger["b" /* logger */].warn('HEVC stream type found, not supported for now');
                      break;

                    default:
                      logger["b" /* logger */].log('unkown stream type:' + data[offset]);
                      break;
                  }
                  // move to the next table entry
                  // skip past the elementary stream descriptors, if present
                  offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;
                }
                return result;
              };

              TSDemuxer.prototype._parsePES = function _parsePES(stream) {
                var i = 0,
                  frag,
                  pesFlags,
                  pesPrefix,
                  pesLen,
                  pesHdrLen,
                  pesData,
                  pesPts,
                  pesDts,
                  payloadStartOffset,
                  data = stream.data;
                // safety check
                if (!stream || stream.size === 0) {
                  return null;
                }

                // we might need up to 19 bytes to read PES header
                // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
                // usually only one merge is needed (and this is rare ...)
                while (data[0].length < 19 && data.length > 1) {
                  var newData = new Uint8Array(data[0].length + data[1].length);
                  newData.set(data[0]);
                  newData.set(data[1], data[0].length);
                  data[0] = newData;
                  data.splice(1, 1);
                }
                //retrieve PTS/DTS from first fragment
                frag = data[0];
                pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];
                if (pesPrefix === 1) {
                  pesLen = (frag[4] << 8) + frag[5];
                  // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
                  // minus 6 : PES header size
                  if (pesLen && pesLen > stream.size - 6) {
                    return null;
                  }
                  pesFlags = frag[7];
                  if (pesFlags & 0xC0) {
                    /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
            as Bitwise operators treat their operands as a sequence of 32 bits */
                    pesPts = (frag[9] & 0x0E) * 536870912 + // 1 << 29
                      (frag[10] & 0xFF) * 4194304 + // 1 << 22
                      (frag[11] & 0xFE) * 16384 + // 1 << 14
                      (frag[12] & 0xFF) * 128 + // 1 << 7
                      (frag[13] & 0xFE) / 2;
                    // check if greater than 2^32 -1
                    if (pesPts > 4294967295) {
                      // decrement 2^33
                      pesPts -= 8589934592;
                    }
                    if (pesFlags & 0x40) {
                      pesDts = (frag[14] & 0x0E) * 536870912 + // 1 << 29
                        (frag[15] & 0xFF) * 4194304 + // 1 << 22
                        (frag[16] & 0xFE) * 16384 + // 1 << 14
                        (frag[17] & 0xFF) * 128 + // 1 << 7
                        (frag[18] & 0xFE) / 2;
                      // check if greater than 2^32 -1
                      if (pesDts > 4294967295) {
                        // decrement 2^33
                        pesDts -= 8589934592;
                      }
                      if (pesPts - pesDts > 60 * 90000) {
                        logger["b" /* logger */].warn(Math.round((pesPts - pesDts) / 90000) + 's delta between PTS and DTS, align them');
                        pesPts = pesDts;
                      }
                    } else {
                      pesDts = pesPts;
                    }
                  }
                  pesHdrLen = frag[8];
                  // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension
                  payloadStartOffset = pesHdrLen + 9;

                  stream.size -= payloadStartOffset;
                  //reassemble PES packet
                  pesData = new Uint8Array(stream.size);
                  for (var j = 0, dataLen = data.length; j < dataLen; j++) {
                    frag = data[j];
                    var len = frag.byteLength;
                    if (payloadStartOffset) {
                      if (payloadStartOffset > len) {
                        // trim full frag if PES header bigger than frag
                        payloadStartOffset -= len;
                        continue;
                      } else {
                        // trim partial frag if PES header smaller than frag
                        frag = frag.subarray(payloadStartOffset);
                        len -= payloadStartOffset;
                        payloadStartOffset = 0;
                      }
                    }
                    pesData.set(frag, i);
                    i += len;
                  }
                  if (pesLen) {
                    // payload size : remove PES header + PES extension
                    pesLen -= pesHdrLen + 3;
                  }
                  return {data: pesData, pts: pesPts, dts: pesDts, len: pesLen};
                } else {
                  return null;
                }
              };

              TSDemuxer.prototype.pushAccesUnit = function pushAccesUnit(avcSample, avcTrack) {
                if (avcSample.units.length && avcSample.frame) {
                  var samples = avcTrack.samples;
                  var nbSamples = samples.length;
                  // only push AVC sample if starting with a keyframe is not mandatory OR
                  //    if keyframe already found in this fragment OR
                  //       keyframe found in last fragment (track.sps) AND
                  //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous
                  if (!this.config.forceKeyFrameOnDiscontinuity || avcSample.key === true || avcTrack.sps && (nbSamples || this.contiguous)) {
                    avcSample.id = nbSamples;
                    samples.push(avcSample);
                  } else {
                    // dropped samples, track it
                    avcTrack.dropped++;
                  }
                }
                if (avcSample.debug.length) {
                  logger["b" /* logger */].log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);
                }
              };

              TSDemuxer.prototype._parseAVCPES = function _parseAVCPES(pes, last) {
                var _this = this;

                //logger.log('parse new PES');
                var track = this._avcTrack,
                  units = this._parseAVCNALu(pes.data),
                  debug = false,
                  expGolombDecoder,
                  avcSample = this.avcSample,
                  push,
                  spsfound = false,
                  i,
                  pushAccesUnit = this.pushAccesUnit.bind(this),
                  createAVCSample = function createAVCSample(key, pts, dts, debug) {
                    return {key: key, pts: pts, dts: dts, units: [], debug: debug};
                  };
                //free pes.data to save up some memory
                pes.data = null;

                // if new NAL units found and last sample still there, let's push ...
                // this helps parsing streams with missing AUD (only do this if AUD never found)
                if (avcSample && units.length && !track.audFound) {
                  pushAccesUnit(avcSample, track);
                  avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');
                }

                units.forEach(function (unit) {
                  switch (unit.type) {
                    //NDR
                    case 1:
                      push = true;
                      if (!avcSample) {
                        avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
                      }
                      if (debug) {
                        avcSample.debug += 'NDR ';
                      }
                      avcSample.frame = true;
                      var data = unit.data;
                      // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)
                      if (spsfound && data.length > 4) {
                        // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
                        var sliceType = new exp_golomb(data).readSliceType();
                        // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
                        // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
                        // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
                        // I slice: A slice that is not an SI slice that is decoded using intra prediction only.
                        //if (sliceType === 2 || sliceType === 7) {
                        if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
                          avcSample.key = true;
                        }
                      }
                      break;
                    //IDR
                    case 5:
                      push = true;
                      // handle PES not starting with AUD
                      if (!avcSample) {
                        avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
                      }
                      if (debug) {
                        avcSample.debug += 'IDR ';
                      }
                      avcSample.key = true;
                      avcSample.frame = true;
                      break;
                    //SEI
                    case 6:
                      push = true;
                      if (debug && avcSample) {
                        avcSample.debug += 'SEI ';
                      }
                      expGolombDecoder = new exp_golomb(_this.discardEPB(unit.data));

                      // skip frameType
                      expGolombDecoder.readUByte();

                      var payloadType = 0;
                      var payloadSize = 0;
                      var endOfCaptions = false;
                      var b = 0;

                      while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {
                        payloadType = 0;
                        do {
                          b = expGolombDecoder.readUByte();
                          payloadType += b;
                        } while (b === 0xFF);

                        // Parse payload size.
                        payloadSize = 0;
                        do {
                          b = expGolombDecoder.readUByte();
                          payloadSize += b;
                        } while (b === 0xFF);

                        // TODO: there can be more than one payload in an SEI packet...
                        // TODO: need to read type and size in a while loop to get them all
                        if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {

                          endOfCaptions = true;

                          var countryCode = expGolombDecoder.readUByte();

                          if (countryCode === 181) {
                            var providerCode = expGolombDecoder.readUShort();

                            if (providerCode === 49) {
                              var userStructure = expGolombDecoder.readUInt();

                              if (userStructure === 0x47413934) {
                                var userDataType = expGolombDecoder.readUByte();

                                // Raw CEA-608 bytes wrapped in CEA-708 packet
                                if (userDataType === 3) {
                                  var firstByte = expGolombDecoder.readUByte();
                                  var secondByte = expGolombDecoder.readUByte();

                                  var totalCCs = 31 & firstByte;
                                  var byteArray = [firstByte, secondByte];

                                  for (i = 0; i < totalCCs; i++) {
                                    // 3 bytes per CC
                                    byteArray.push(expGolombDecoder.readUByte());
                                    byteArray.push(expGolombDecoder.readUByte());
                                    byteArray.push(expGolombDecoder.readUByte());
                                  }

                                  _this._insertSampleInOrder(_this._txtTrack.samples, {
                                    type: 3,
                                    pts: pes.pts,
                                    bytes: byteArray
                                  });
                                }
                              }
                            }
                          }
                        } else if (payloadSize < expGolombDecoder.bytesAvailable) {
                          for (i = 0; i < payloadSize; i++) {
                            expGolombDecoder.readUByte();
                          }
                        }
                      }
                      break;
                    //SPS
                    case 7:
                      push = true;
                      spsfound = true;
                      if (debug && avcSample) {
                        avcSample.debug += 'SPS ';
                      }
                      if (!track.sps) {
                        expGolombDecoder = new exp_golomb(unit.data);
                        var config = expGolombDecoder.readSPS();
                        track.width = config.width;
                        track.height = config.height;
                        track.pixelRatio = config.pixelRatio;
                        track.sps = [unit.data];
                        track.duration = _this._duration;
                        var codecarray = unit.data.subarray(1, 4);
                        var codecstring = 'avc1.';
                        for (i = 0; i < 3; i++) {
                          var h = codecarray[i].toString(16);
                          if (h.length < 2) {
                            h = '0' + h;
                          }
                          codecstring += h;
                        }
                        track.codec = codecstring;
                      }
                      break;
                    //PPS
                    case 8:
                      push = true;
                      if (debug && avcSample) {
                        avcSample.debug += 'PPS ';
                      }
                      if (!track.pps) {
                        track.pps = [unit.data];
                      }
                      break;
                    // AUD
                    case 9:
                      push = false;
                      track.audFound = true;
                      if (avcSample) {
                        pushAccesUnit(avcSample, track);
                      }
                      avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');
                      break;
                    // Filler Data
                    case 12:
                      push = false;
                      break;
                    default:
                      push = false;
                      if (avcSample) {
                        avcSample.debug += 'unknown NAL ' + unit.type + ' ';
                      }
                      break;
                  }
                  if (avcSample && push) {
                    var _units = avcSample.units;
                    _units.push(unit);
                  }
                });
                // if last PES packet, push samples
                if (last && avcSample) {
                  pushAccesUnit(avcSample, track);
                  this.avcSample = null;
                }
              };

              TSDemuxer.prototype._insertSampleInOrder = function _insertSampleInOrder(arr, data) {
                var len = arr.length;
                if (len > 0) {
                  if (data.pts >= arr[len - 1].pts) {
                    arr.push(data);
                  } else {
                    for (var pos = len - 1; pos >= 0; pos--) {
                      if (data.pts < arr[pos].pts) {
                        arr.splice(pos, 0, data);
                        break;
                      }
                    }
                  }
                } else {
                  arr.push(data);
                }
              };

              TSDemuxer.prototype._getLastNalUnit = function _getLastNalUnit() {
                var avcSample = this.avcSample,
                  lastUnit = void 0;
                // try to fallback to previous sample if current one is empty
                if (!avcSample || avcSample.units.length === 0) {
                  var track = this._avcTrack,
                    samples = track.samples;
                  avcSample = samples[samples.length - 1];
                }
                if (avcSample) {
                  var units = avcSample.units;
                  lastUnit = units[units.length - 1];
                }
                return lastUnit;
              };

              TSDemuxer.prototype._parseAVCNALu = function _parseAVCNALu(array) {
                var i = 0,
                  len = array.byteLength,
                  value,
                  overflow,
                  track = this._avcTrack,
                  state = track.naluState || 0,
                  lastState = state;
                var units = [],
                  unit,
                  unitType,
                  lastUnitStart = -1,
                  lastUnitType;
                //logger.log('PES:' + Hex.hexDump(array));

                if (state === -1) {
                  // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
                  lastUnitStart = 0;
                  // NALu type is value read from offset 0
                  lastUnitType = array[0] & 0x1f;
                  state = 0;
                  i = 1;
                }

                while (i < len) {
                  value = array[i++];
                  // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case
                  if (!state) {
                    state = value ? 0 : 1;
                    continue;
                  }
                  if (state === 1) {
                    state = value ? 0 : 2;
                    continue;
                  }
                  // here we have state either equal to 2 or 3
                  if (!value) {
                    state = 3;
                  } else if (value === 1) {
                    if (lastUnitStart >= 0) {
                      unit = {data: array.subarray(lastUnitStart, i - state - 1), type: lastUnitType};
                      //logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);
                      units.push(unit);
                    } else {
                      // lastUnitStart is undefined => this is the first start code found in this PES packet
                      // first check if start code delimiter is overlapping between 2 PES packets,
                      // ie it started in last packet (lastState not zero)
                      // and ended at the beginning of this PES packet (i <= 4 - lastState)
                      var lastUnit = this._getLastNalUnit();
                      if (lastUnit) {
                        if (lastState && i <= 4 - lastState) {
                          // start delimiter overlapping between PES packets
                          // strip start delimiter bytes from the end of last NAL unit
                          // check if lastUnit had a state different from zero
                          if (lastUnit.state) {
                            // strip last bytes
                            lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
                          }
                        }
                        // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.
                        overflow = i - state - 1;
                        if (overflow > 0) {
                          //logger.log('first NALU found with overflow:' + overflow);
                          var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);
                          tmp.set(lastUnit.data, 0);
                          tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);
                          lastUnit.data = tmp;
                        }
                      }
                    }
                    // check if we can read unit type
                    if (i < len) {
                      unitType = array[i] & 0x1f;
                      //logger.log('find NALU @ offset:' + i + ',type:' + unitType);
                      lastUnitStart = i;
                      lastUnitType = unitType;
                      state = 0;
                    } else {
                      // not enough byte to read unit type. let's read it on next PES parsing
                      state = -1;
                    }
                  } else {
                    state = 0;
                  }
                }
                if (lastUnitStart >= 0 && state >= 0) {
                  unit = {data: array.subarray(lastUnitStart, len), type: lastUnitType, state: state};
                  units.push(unit);
                  //logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
                }
                // no NALu found
                if (units.length === 0) {
                  // append pes.data to previous NAL unit
                  var _lastUnit = this._getLastNalUnit();
                  if (_lastUnit) {
                    var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);
                    _tmp.set(_lastUnit.data, 0);
                    _tmp.set(array, _lastUnit.data.byteLength);
                    _lastUnit.data = _tmp;
                  }
                }
                track.naluState = state;
                return units;
              };

              /**
               * remove Emulation Prevention bytes from a RBSP
               */


              TSDemuxer.prototype.discardEPB = function discardEPB(data) {
                var length = data.byteLength,
                  EPBPositions = [],
                  i = 1,
                  newLength,
                  newData;

                // Find all `Emulation Prevention Bytes`
                while (i < length - 2) {
                  if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
                    EPBPositions.push(i + 2);
                    i += 2;
                  } else {
                    i++;
                  }
                }

                // If no Emulation Prevention Bytes were found just return the original
                // array
                if (EPBPositions.length === 0) {
                  return data;
                }

                // Create a new array to hold the NAL unit data
                newLength = length - EPBPositions.length;
                newData = new Uint8Array(newLength);
                var sourceIndex = 0;

                for (i = 0; i < newLength; sourceIndex++, i++) {
                  if (sourceIndex === EPBPositions[0]) {
                    // Skip this byte
                    sourceIndex++;
                    // Remove this position index
                    EPBPositions.shift();
                  }
                  newData[i] = data[sourceIndex];
                }
                return newData;
              };

              TSDemuxer.prototype._parseAACPES = function _parseAACPES(pes) {
                var track = this._audioTrack,
                  data = pes.data,
                  pts = pes.pts,
                  startOffset = 0,
                  aacOverFlow = this.aacOverFlow,
                  aacLastPTS = this.aacLastPTS,
                  frameDuration,
                  frameIndex,
                  offset,
                  stamp,
                  len;
                if (aacOverFlow) {
                  var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);
                  tmp.set(aacOverFlow, 0);
                  tmp.set(data, aacOverFlow.byteLength);
                  //logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);
                  data = tmp;
                }
                // look for ADTS header (0xFFFx)
                for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
                  if (isHeader(data, offset)) {
                    break;
                  }
                }
                // if ADTS header does not start straight from the beginning of the PES payload, raise an error
                if (offset) {
                  var reason, fatal;
                  if (offset < len - 1) {
                    reason = 'AAC PES did not start with ADTS header,offset:' + offset;
                    fatal = false;
                  } else {
                    reason = 'no ADTS header found in AAC PES';
                    fatal = true;
                  }
                  logger["b" /* logger */].warn('parsing error:' + reason);
                  this.observer.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                    details: errors["a" /* ErrorDetails */].FRAG_PARSING_ERROR,
                    fatal: fatal,
                    reason: reason
                  });
                  if (fatal) {
                    return;
                  }
                }

                initTrackConfig(track, this.observer, data, offset, this.audioCodec);
                frameIndex = 0;
                frameDuration = getFrameDuration(track.samplerate);

                // if last AAC frame is overflowing, we should ensure timestamps are contiguous:
                // first sample PTS should be equal to last sample PTS + frameDuration
                if (aacOverFlow && aacLastPTS) {
                  var newPTS = aacLastPTS + frameDuration;
                  if (Math.abs(newPTS - pts) > 1) {
                    logger["b" /* logger */].log('AAC: align PTS for overlapping frames by ' + Math.round((newPTS - pts) / 90));
                    pts = newPTS;
                  }
                }

                //scan for aac samples
                while (offset < len) {
                  if (isHeader(data, offset) && offset + 5 < len) {
                    var frame = appendFrame(track, data, offset, pts, frameIndex);
                    if (frame) {
                      //logger.log(`${Math.round(frame.sample.pts)} : AAC`);
                      offset += frame.length;
                      stamp = frame.sample.pts;
                      frameIndex++;
                    } else {
                      //logger.log('Unable to parse AAC frame');
                      break;
                    }
                  } else {
                    //nothing found, keep looking
                    offset++;
                  }
                }

                if (offset < len) {
                  aacOverFlow = data.subarray(offset, len);
                  //logger.log(`AAC: overflow detected:${len-offset}`);
                } else {
                  aacOverFlow = null;
                }
                this.aacOverFlow = aacOverFlow;
                this.aacLastPTS = stamp;
              };

              TSDemuxer.prototype._parseMPEGPES = function _parseMPEGPES(pes) {
                var data = pes.data;
                var length = data.length;
                var frameIndex = 0;
                var offset = 0;
                var pts = pes.pts;

                while (offset < length) {
                  if (mpegaudio.isHeader(data, offset)) {
                    var frame = mpegaudio.appendFrame(this._audioTrack, data, offset, pts, frameIndex);
                    if (frame) {
                      offset += frame.length;
                      frameIndex++;
                    } else {
                      //logger.log('Unable to parse Mpeg audio frame');
                      break;
                    }
                  } else {
                    //nothing found, keep looking
                    offset++;
                  }
                }
              };

              TSDemuxer.prototype._parseID3PES = function _parseID3PES(pes) {
                this._id3Track.samples.push(pes);
              };

              return TSDemuxer;
            }();

            /* harmony default export */
            var tsdemuxer = (tsdemuxer_TSDemuxer);

// CONCATENATED MODULE: ./src/demux/mp3demuxer.js
            function mp3demuxer__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * MP3 demuxer
             */




            var mp3demuxer_MP3Demuxer = function () {
              function MP3Demuxer(observer, remuxer, config) {
                mp3demuxer__classCallCheck(this, MP3Demuxer);

                this.observer = observer;
                this.config = config;
                this.remuxer = remuxer;
              }

              MP3Demuxer.prototype.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                this._audioTrack = {
                  container: 'audio/mpeg',
                  type: 'audio',
                  id: -1,
                  sequenceNumber: 0,
                  isAAC: false,
                  samples: [],
                  len: 0,
                  manifestCodec: audioCodec,
                  duration: duration,
                  inputTimeScale: 90000
                };
              };

              MP3Demuxer.prototype.resetTimeStamp = function resetTimeStamp() {
              };

              MP3Demuxer.probe = function probe(data) {
                // check if data contains ID3 timestamp and MPEG sync word
                var offset, length;
                var id3Data = id3["a" /* default */].getID3Data(data, 0);
                if (id3Data && id3["a" /* default */].getTimeStamp(id3Data) !== undefined) {
                  // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
                  // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
                  // More info http://www.mp3-tech.org/programmer/frame_header.html
                  for (offset = id3Data.length, length = Math.min(data.length - 1, offset + 100); offset < length; offset++) {
                    if (mpegaudio.probe(data, offset)) {
                      logger["b" /* logger */].log('MPEG Audio sync word found !');
                      return true;
                    }
                  }
                }
                return false;
              };

              // feed incoming data to the front of the parsing pipeline


              MP3Demuxer.prototype.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                var id3Data = id3["a" /* default */].getID3Data(data, 0);
                var pts = 90 * id3["a" /* default */].getTimeStamp(id3Data);
                var offset = id3Data.length;
                var length = data.length;
                var frameIndex = 0,
                  stamp = 0;
                var track = this._audioTrack;

                var id3Samples = [{pts: pts, dts: pts, data: id3Data}];

                while (offset < length) {
                  if (mpegaudio.isHeader(data, offset)) {
                    var frame = mpegaudio.appendFrame(track, data, offset, pts, frameIndex);
                    if (frame) {
                      offset += frame.length;
                      stamp = frame.sample.pts;
                      frameIndex++;
                    } else {
                      //logger.log('Unable to parse Mpeg audio frame');
                      break;
                    }
                  } else if (id3["a" /* default */].isHeader(data, offset)) {
                    id3Data = id3["a" /* default */].getID3Data(data, offset);
                    id3Samples.push({pts: stamp, dts: stamp, data: id3Data});
                    offset += id3Data.length;
                  } else {
                    //nothing found, keep looking
                    offset++;
                  }
                }

                this.remuxer.remux(track, {samples: []}, {
                  samples: id3Samples,
                  inputTimeScale: 90000
                }, {samples: []}, timeOffset, contiguous, accurateTimeOffset);
              };

              MP3Demuxer.prototype.destroy = function destroy() {
              };

              return MP3Demuxer;
            }();

            /* harmony default export */
            var mp3demuxer = (mp3demuxer_MP3Demuxer);

// CONCATENATED MODULE: ./src/helper/aac.js
            function aac__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             *  AAC helper
             */

            var AAC = function () {
              function AAC() {
                aac__classCallCheck(this, AAC);
              }

              AAC.getSilentFrame = function getSilentFrame(codec, channelCount) {
                switch (codec) {
                  case 'mp4a.40.2':
                    if (channelCount === 1) {
                      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
                    } else if (channelCount === 2) {
                      return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
                    } else if (channelCount === 3) {
                      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
                    } else if (channelCount === 4) {
                      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
                    } else if (channelCount === 5) {
                      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
                    } else if (channelCount === 6) {
                      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
                    }
                    break;
                  // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)
                  default:
                    if (channelCount === 1) {
                      // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                      return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                    } else if (channelCount === 2) {
                      // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                      return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                    } else if (channelCount === 3) {
                      // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                      return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                    }
                    break;
                }
                return null;
              };

              return AAC;
            }();

            /* harmony default export */
            var aac = (AAC);

// CONCATENATED MODULE: ./src/remux/mp4-generator.js
            function mp4_generator__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * Generate MP4 Box
             */

//import Hex from '../utils/hex';

            var mp4_generator_UINT32_MAX = Math.pow(2, 32) - 1;

            var MP4 = function () {
              function MP4() {
                mp4_generator__classCallCheck(this, MP4);
              }

              MP4.init = function init() {
                MP4.types = {
                  avc1: [], // codingname
                  avcC: [],
                  btrt: [],
                  dinf: [],
                  dref: [],
                  esds: [],
                  ftyp: [],
                  hdlr: [],
                  mdat: [],
                  mdhd: [],
                  mdia: [],
                  mfhd: [],
                  minf: [],
                  moof: [],
                  moov: [],
                  mp4a: [],
                  '.mp3': [],
                  mvex: [],
                  mvhd: [],
                  pasp: [],
                  sdtp: [],
                  stbl: [],
                  stco: [],
                  stsc: [],
                  stsd: [],
                  stsz: [],
                  stts: [],
                  tfdt: [],
                  tfhd: [],
                  traf: [],
                  trak: [],
                  trun: [],
                  trex: [],
                  tkhd: [],
                  vmhd: [],
                  smhd: []
                };

                var i;
                for (i in MP4.types) {
                  if (MP4.types.hasOwnProperty(i)) {
                    MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
                  }
                }

                var videoHdlr = new Uint8Array([0x00, // version 0
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x00, // pre_defined
                  0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
                ]);

                var audioHdlr = new Uint8Array([0x00, // version 0
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x00, // pre_defined
                  0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
                ]);

                MP4.HDLR_TYPES = {
                  'video': videoHdlr,
                  'audio': audioHdlr
                };

                var dref = new Uint8Array([0x00, // version 0
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x01, // entry_count
                  0x00, 0x00, 0x00, 0x0c, // entry_size
                  0x75, 0x72, 0x6c, 0x20, // 'url' type
                  0x00, // version 0
                  0x00, 0x00, 0x01 // entry_flags
                ]);

                var stco = new Uint8Array([0x00, // version
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x00 // entry_count
                ]);

                MP4.STTS = MP4.STSC = MP4.STCO = stco;

                MP4.STSZ = new Uint8Array([0x00, // version
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x00, // sample_size
                  0x00, 0x00, 0x00, 0x00]);
                MP4.VMHD = new Uint8Array([0x00, // version
                  0x00, 0x00, 0x01, // flags
                  0x00, 0x00, // graphicsmode
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
                ]);
                MP4.SMHD = new Uint8Array([0x00, // version
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, // balance
                  0x00, 0x00 // reserved
                ]);

                MP4.STSD = new Uint8Array([0x00, // version 0
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x01]); // entry_count

                var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom
                var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1
                var minorVersion = new Uint8Array([0, 0, 0, 1]);

                MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
                MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));
              };

              MP4.box = function box(type) {
                var payload = Array.prototype.slice.call(arguments, 1),
                  size = 8,
                  i = payload.length,
                  len = i,
                  result;
                // calculate the total size we need to allocate
                while (i--) {
                  size += payload[i].byteLength;
                }
                result = new Uint8Array(size);
                result[0] = size >> 24 & 0xff;
                result[1] = size >> 16 & 0xff;
                result[2] = size >> 8 & 0xff;
                result[3] = size & 0xff;
                result.set(type, 4);
                // copy the payload into the result
                for (i = 0, size = 8; i < len; i++) {
                  // copy payload[i] array @ offset size
                  result.set(payload[i], size);
                  size += payload[i].byteLength;
                }
                return result;
              };

              MP4.hdlr = function hdlr(type) {
                return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);
              };

              MP4.mdat = function mdat(data) {
                return MP4.box(MP4.types.mdat, data);
              };

              MP4.mdhd = function mdhd(timescale, duration) {
                duration *= timescale;
                var upperWordDuration = Math.floor(duration / (mp4_generator_UINT32_MAX + 1));
                var lowerWordDuration = Math.floor(duration % (mp4_generator_UINT32_MAX + 1));
                return MP4.box(MP4.types.mdhd, new Uint8Array([0x01, // version 1
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
                  timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale
                  upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x55, 0xc4, // 'und' language (undetermined)
                  0x00, 0x00]));
              };

              MP4.mdia = function mdia(track) {
                return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));
              };

              MP4.mfhd = function mfhd(sequenceNumber) {
                return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
                  sequenceNumber >> 24, sequenceNumber >> 16 & 0xFF, sequenceNumber >> 8 & 0xFF, sequenceNumber & 0xFF]) // sequence_number
                );
              };

              MP4.minf = function minf(track) {
                if (track.type === 'audio') {
                  return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));
                } else {
                  return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));
                }
              };

              MP4.moof = function moof(sn, baseMediaDecodeTime, track) {
                return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));
              };
              /**
               * @param tracks... (optional) {array} the tracks associated with this movie
               */


              MP4.moov = function moov(tracks) {
                var i = tracks.length,
                  boxes = [];

                while (i--) {
                  boxes[i] = MP4.trak(tracks[i]);
                }

                return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));
              };

              MP4.mvex = function mvex(tracks) {
                var i = tracks.length,
                  boxes = [];

                while (i--) {
                  boxes[i] = MP4.trex(tracks[i]);
                }
                return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));
              };

              MP4.mvhd = function mvhd(timescale, duration) {
                duration *= timescale;
                var upperWordDuration = Math.floor(duration / (mp4_generator_UINT32_MAX + 1));
                var lowerWordDuration = Math.floor(duration % (mp4_generator_UINT32_MAX + 1));
                var bytes = new Uint8Array([0x01, // version 1
                  0x00, 0x00, 0x00, // flags
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
                  timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale
                  upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x00, 0x01, 0x00, 0x00, // 1.0 rate
                  0x01, 0x00, // 1.0 volume
                  0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
                  0xff, 0xff, 0xff, 0xff // next_track_ID
                ]);
                return MP4.box(MP4.types.mvhd, bytes);
              };

              MP4.sdtp = function sdtp(track) {
                var samples = track.samples || [],
                  bytes = new Uint8Array(4 + samples.length),
                  flags,
                  i;
                // leave the full box header (4 bytes) all zero
                // write the sample table
                for (i = 0; i < samples.length; i++) {
                  flags = samples[i].flags;
                  bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
                }

                return MP4.box(MP4.types.sdtp, bytes);
              };

              MP4.stbl = function stbl(track) {
                return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));
              };

              MP4.avc1 = function avc1(track) {
                var sps = [],
                  pps = [],
                  i,
                  data,
                  len;
                // assemble the SPSs

                for (i = 0; i < track.sps.length; i++) {
                  data = track.sps[i];
                  len = data.byteLength;
                  sps.push(len >>> 8 & 0xFF);
                  sps.push(len & 0xFF);
                  sps = sps.concat(Array.prototype.slice.call(data)); // SPS
                }

                // assemble the PPSs
                for (i = 0; i < track.pps.length; i++) {
                  data = track.pps[i];
                  len = data.byteLength;
                  pps.push(len >>> 8 & 0xFF);
                  pps.push(len & 0xFF);
                  pps = pps.concat(Array.prototype.slice.call(data));
                }

                var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version
                    sps[3], // profile
                    sps[4], // profile compat
                    sps[5], // level
                    0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes
                    0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets
                  ].concat(sps).concat([track.pps.length // numOfPictureParameterSets
                  ]).concat(pps))),
                  // "PPS"
                  width = track.width,
                  height = track.height,
                  hSpacing = track.pixelRatio[0],
                  vSpacing = track.pixelRatio[1];
                //console.log('avcc:' + Hex.hexDump(avcc));
                return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved
                    0x00, 0x00, 0x00, // reserved
                    0x00, 0x01, // data_reference_index
                    0x00, 0x00, // pre_defined
                    0x00, 0x00, // reserved
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
                    width >> 8 & 0xFF, width & 0xff, // width
                    height >> 8 & 0xFF, height & 0xff, // height
                    0x00, 0x48, 0x00, 0x00, // horizresolution
                    0x00, 0x48, 0x00, 0x00, // vertresolution
                    0x00, 0x00, 0x00, 0x00, // reserved
                    0x00, 0x01, // frame_count
                    0x12, 0x64, 0x61, 0x69, 0x6C, //dailymotion/hls.js
                    0x79, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x68, 0x6C, 0x73, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
                    0x00, 0x18, // depth = 24
                    0x11, 0x11]), // pre_defined = -1
                  avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
                    0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
                    0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate
                  MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24, // hSpacing
                    hSpacing >> 16 & 0xFF, hSpacing >> 8 & 0xFF, hSpacing & 0xFF, vSpacing >> 24, // vSpacing
                    vSpacing >> 16 & 0xFF, vSpacing >> 8 & 0xFF, vSpacing & 0xFF])));
              };

              MP4.esds = function esds(track) {
                var configlen = track.config.length;
                return new Uint8Array([0x00, // version 0
                  0x00, 0x00, 0x00, // flags

                  0x03, // descriptor_type
                  0x17 + configlen, // length
                  0x00, 0x01, //es_id
                  0x00, // stream_priority

                  0x04, // descriptor_type
                  0x0f + configlen, // length
                  0x40, //codec : mpeg4_audio
                  0x15, // stream_type
                  0x00, 0x00, 0x00, // buffer_size
                  0x00, 0x00, 0x00, 0x00, // maxBitrate
                  0x00, 0x00, 0x00, 0x00, // avgBitrate

                  0x05 // descriptor_type
                ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor
              };

              MP4.mp4a = function mp4a(track) {
                var samplerate = track.samplerate;
                return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, // reserved
                  0x00, 0x01, // data_reference_index
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, track.channelCount, // channelcount
                  0x00, 0x10, // sampleSize:16bits
                  0x00, 0x00, 0x00, 0x00, // reserved2
                  samplerate >> 8 & 0xFF, samplerate & 0xff, //
                  0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));
              };

              MP4.mp3 = function mp3(track) {
                var samplerate = track.samplerate;
                return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, 0x00, // reserved
                  0x00, 0x01, // data_reference_index
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, track.channelCount, // channelcount
                  0x00, 0x10, // sampleSize:16bits
                  0x00, 0x00, 0x00, 0x00, // reserved2
                  samplerate >> 8 & 0xFF, samplerate & 0xff, //
                  0x00, 0x00]));
              };

              MP4.stsd = function stsd(track) {
                if (track.type === 'audio') {
                  if (!track.isAAC && track.codec === 'mp3') {
                    return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));
                  }
                  return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));
                } else {
                  return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));
                }
              };

              MP4.tkhd = function tkhd(track) {
                var id = track.id,
                  duration = track.duration * track.timescale,
                  width = track.width,
                  height = track.height,
                  upperWordDuration = Math.floor(duration / (mp4_generator_UINT32_MAX + 1)),
                  lowerWordDuration = Math.floor(duration % (mp4_generator_UINT32_MAX + 1));
                return MP4.box(MP4.types.tkhd, new Uint8Array([0x01, // version 1
                  0x00, 0x00, 0x07, // flags
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
                  id >> 24 & 0xFF, id >> 16 & 0xFF, id >> 8 & 0xFF, id & 0xFF, // track_ID
                  0x00, 0x00, 0x00, 0x00, // reserved
                  upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
                  0x00, 0x00, // layer
                  0x00, 0x00, // alternate_group
                  0x00, 0x00, // non-audio track volume
                  0x00, 0x00, // reserved
                  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
                  width >> 8 & 0xFF, width & 0xFF, 0x00, 0x00, // width
                  height >> 8 & 0xFF, height & 0xFF, 0x00, 0x00 // height
                ]));
              };

              MP4.traf = function traf(track, baseMediaDecodeTime) {
                var sampleDependencyTable = MP4.sdtp(track),
                  id = track.id,
                  upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (mp4_generator_UINT32_MAX + 1)),
                  lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (mp4_generator_UINT32_MAX + 1));
                return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0
                    0x00, 0x00, 0x00, // flags
                    id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF]) // track_ID
                  ), MP4.box(MP4.types.tfdt, new Uint8Array([0x01, // version 1
                    0x00, 0x00, 0x00, // flags
                    upperWordBaseMediaDecodeTime >> 24, upperWordBaseMediaDecodeTime >> 16 & 0XFF, upperWordBaseMediaDecodeTime >> 8 & 0XFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >> 24, lowerWordBaseMediaDecodeTime >> 16 & 0XFF, lowerWordBaseMediaDecodeTime >> 8 & 0XFF, lowerWordBaseMediaDecodeTime & 0xFF])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd
                  20 + // tfdt
                  8 + // traf header
                  16 + // mfhd
                  8 + // moof header
                  8), // mdat header
                  sampleDependencyTable);
              };

              /**
               * Generate a track box.
               * @param track {object} a track definition
               * @return {Uint8Array} the track box
               */


              MP4.trak = function trak(track) {
                track.duration = track.duration || 0xffffffff;
                return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));
              };

              MP4.trex = function trex(track) {
                var id = track.id;
                return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0
                  0x00, 0x00, 0x00, // flags
                  id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF, // track_ID
                  0x00, 0x00, 0x00, 0x01, // default_sample_description_index
                  0x00, 0x00, 0x00, 0x00, // default_sample_duration
                  0x00, 0x00, 0x00, 0x00, // default_sample_size
                  0x00, 0x01, 0x00, 0x01 // default_sample_flags
                ]));
              };

              MP4.trun = function trun(track, offset) {
                var samples = track.samples || [],
                  len = samples.length,
                  arraylen = 12 + 16 * len,
                  array = new Uint8Array(arraylen),
                  i,
                  sample,
                  duration,
                  size,
                  flags,
                  cts;
                offset += 8 + arraylen;
                array.set([0x00, // version 0
                  0x00, 0x0f, 0x01, // flags
                  len >>> 24 & 0xFF, len >>> 16 & 0xFF, len >>> 8 & 0xFF, len & 0xFF, // sample_count
                  offset >>> 24 & 0xFF, offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF // data_offset
                ], 0);
                for (i = 0; i < len; i++) {
                  sample = samples[i];
                  duration = sample.duration;
                  size = sample.size;
                  flags = sample.flags;
                  cts = sample.cts;
                  array.set([duration >>> 24 & 0xFF, duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, // sample_duration
                    size >>> 24 & 0xFF, size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, // sample_size
                    flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xF0 << 8, flags.degradPrio & 0x0F, // sample_flags
                    cts >>> 24 & 0xFF, cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF // sample_composition_time_offset
                  ], 12 + 16 * i);
                }
                return MP4.box(MP4.types.trun, array);
              };

              MP4.initSegment = function initSegment(tracks) {
                if (!MP4.types) {
                  MP4.init();
                }
                var movie = MP4.moov(tracks),
                  result;
                result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);
                result.set(MP4.FTYP);
                result.set(movie, MP4.FTYP.byteLength);
                return result;
              };

              return MP4;
            }();

            /* harmony default export */
            var mp4_generator = (MP4);

// CONCATENATED MODULE: ./src/remux/mp4-remuxer.js
            function mp4_remuxer__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * fMP4 remuxer
             */







// 10 seconds
            var MAX_SILENT_FRAME_DURATION = 10 * 1000;

            var mp4_remuxer_MP4Remuxer = function () {
              function MP4Remuxer(observer, config, typeSupported, vendor) {
                mp4_remuxer__classCallCheck(this, MP4Remuxer);

                this.observer = observer;
                this.config = config;
                this.typeSupported = typeSupported;
                var userAgent = navigator.userAgent;
                this.isSafari = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');
                this.ISGenerated = false;
              }

              MP4Remuxer.prototype.destroy = function destroy() {
              };

              MP4Remuxer.prototype.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {
                this._initPTS = this._initDTS = defaultTimeStamp;
              };

              MP4Remuxer.prototype.resetInitSegment = function resetInitSegment() {
                this.ISGenerated = false;
              };

              MP4Remuxer.prototype.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
                // generate Init Segment if needed
                if (!this.ISGenerated) {
                  this.generateIS(audioTrack, videoTrack, timeOffset);
                }

                if (this.ISGenerated) {
                  var nbAudioSamples = audioTrack.samples.length;
                  var nbVideoSamples = videoTrack.samples.length;
                  var audioTimeOffset = timeOffset;
                  var videoTimeOffset = timeOffset;
                  if (nbAudioSamples && nbVideoSamples) {
                    // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)
                    // if first audio DTS is not aligned with first video DTS then we need to take that into account
                    // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small
                    // drift between audio and video streams
                    var audiovideoDeltaDts = (audioTrack.samples[0].dts - videoTrack.samples[0].dts) / videoTrack.inputTimeScale;
                    audioTimeOffset += Math.max(0, audiovideoDeltaDts);
                    videoTimeOffset += Math.max(0, -audiovideoDeltaDts);
                  }
                  // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is
                  // calculated in remuxAudio.
                  //logger.log('nb AAC samples:' + audioTrack.samples.length);
                  if (nbAudioSamples) {
                    // if initSegment was generated without video samples, regenerate it again
                    if (!audioTrack.timescale) {
                      logger["b" /* logger */].warn('regenerate InitSegment as audio detected');
                      this.generateIS(audioTrack, videoTrack, timeOffset);
                    }
                    var audioData = this.remuxAudio(audioTrack, audioTimeOffset, contiguous, accurateTimeOffset);
                    //logger.log('nb AVC samples:' + videoTrack.samples.length);
                    if (nbVideoSamples) {
                      var audioTrackLength = void 0;
                      if (audioData) {
                        audioTrackLength = audioData.endPTS - audioData.startPTS;
                      }
                      // if initSegment was generated without video samples, regenerate it again
                      if (!videoTrack.timescale) {
                        logger["b" /* logger */].warn('regenerate InitSegment as video detected');
                        this.generateIS(audioTrack, videoTrack, timeOffset);
                      }
                      this.remuxVideo(videoTrack, videoTimeOffset, contiguous, audioTrackLength, accurateTimeOffset);
                    }
                  } else {
                    var videoData = void 0;
                    //logger.log('nb AVC samples:' + videoTrack.samples.length);
                    if (nbVideoSamples) {
                      videoData = this.remuxVideo(videoTrack, videoTimeOffset, contiguous, accurateTimeOffset);
                    }
                    if (videoData && audioTrack.codec) {
                      this.remuxEmptyAudio(audioTrack, audioTimeOffset, contiguous, videoData);
                    }
                  }
                }
                //logger.log('nb ID3 samples:' + audioTrack.samples.length);
                if (id3Track.samples.length) {
                  this.remuxID3(id3Track, timeOffset);
                }
                //logger.log('nb ID3 samples:' + audioTrack.samples.length);
                if (textTrack.samples.length) {
                  this.remuxText(textTrack, timeOffset);
                }
                //notify end of parsing
                this.observer.trigger(events["a" /* default */].FRAG_PARSED);
              };

              MP4Remuxer.prototype.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {
                var observer = this.observer,
                  audioSamples = audioTrack.samples,
                  videoSamples = videoTrack.samples,
                  typeSupported = this.typeSupported,
                  container = 'audio/mp4',
                  tracks = {},
                  data = {tracks: tracks},
                  computePTSDTS = this._initPTS === undefined,
                  initPTS,
                  initDTS;

                if (computePTSDTS) {
                  initPTS = initDTS = Infinity;
                }
                if (audioTrack.config && audioSamples.length) {
                  // let's use audio sampling rate as MP4 time scale.
                  // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)
                  // using audio sampling rate here helps having an integer MP4 frame duration
                  // this avoids potential rounding issue and AV sync issue
                  audioTrack.timescale = audioTrack.samplerate;
                  logger["b" /* logger */].log('audio sampling rate : ' + audioTrack.samplerate);
                  if (!audioTrack.isAAC) {
                    if (typeSupported.mpeg) {
                      // Chrome and Safari
                      container = 'audio/mpeg';
                      audioTrack.codec = '';
                    } else if (typeSupported.mp3) {
                      // Firefox
                      audioTrack.codec = 'mp3';
                    }
                  }
                  tracks.audio = {
                    container: container,
                    codec: audioTrack.codec,
                    initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : mp4_generator.initSegment([audioTrack]),
                    metadata: {
                      channelCount: audioTrack.channelCount
                    }
                  };
                  if (computePTSDTS) {
                    // remember first PTS of this demuxing context. for audio, PTS = DTS
                    initPTS = initDTS = audioSamples[0].pts - audioTrack.inputTimeScale * timeOffset;
                  }
                }

                if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
                  // let's use input time scale as MP4 video timescale
                  // we use input time scale straight away to avoid rounding issues on frame duration / cts computation
                  var inputTimeScale = videoTrack.inputTimeScale;
                  videoTrack.timescale = inputTimeScale;
                  tracks.video = {
                    container: 'video/mp4',
                    codec: videoTrack.codec,
                    initSegment: mp4_generator.initSegment([videoTrack]),
                    metadata: {
                      width: videoTrack.width,
                      height: videoTrack.height
                    }
                  };
                  if (computePTSDTS) {
                    initPTS = Math.min(initPTS, videoSamples[0].pts - inputTimeScale * timeOffset);
                    initDTS = Math.min(initDTS, videoSamples[0].dts - inputTimeScale * timeOffset);
                    this.observer.trigger(events["a" /* default */].INIT_PTS_FOUND, {initPTS: initPTS});
                  }
                }

                if (Object.keys(tracks).length) {
                  observer.trigger(events["a" /* default */].FRAG_PARSING_INIT_SEGMENT, data);
                  this.ISGenerated = true;
                  if (computePTSDTS) {
                    this._initPTS = initPTS;
                    this._initDTS = initDTS;
                  }
                } else {
                  observer.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                    details: errors["a" /* ErrorDetails */].FRAG_PARSING_ERROR,
                    fatal: false,
                    reason: 'no audio/video samples found'
                  });
                }
              };

              MP4Remuxer.prototype.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength, accurateTimeOffset) {
                var offset = 8,
                  timeScale = track.timescale,
                  mp4SampleDuration,
                  mdat,
                  moof,
                  firstPTS,
                  firstDTS,
                  nextDTS,
                  lastPTS,
                  lastDTS,
                  inputSamples = track.samples,
                  outputSamples = [],
                  nbSamples = inputSamples.length,
                  ptsNormalize = this._PTSNormalize,
                  initDTS = this._initDTS;

                // for (let i = 0; i < track.samples.length; i++) {
                //   let avcSample = track.samples[i];
                //   let units = avcSample.units;
                //   let unitsString = '';
                //   for (let j = 0; j < units.length ; j++) {
                //     unitsString += units[j].type + ',';
                //     if (units[j].data.length < 500) {
                //       unitsString += Hex.hexDump(units[j].data);
                //     }
                //   }
                //   logger.log(avcSample.pts + '/' + avcSample.dts + ',' + unitsString + avcSample.units.length);
                // }

                // if parsed fragment is contiguous with last one, let's use last DTS value as reference
                var nextAvcDts = this.nextAvcDts;

                var isSafari = this.isSafari;

                // Safari does not like overlapping DTS on consecutive fragments. let's use nextAvcDts to overcome this if fragments are consecutive
                if (isSafari) {
                  // also consider consecutive fragments as being contiguous (even if a level switch occurs),
                  // for sake of clarity:
                  // consecutive fragments are frags with
                  //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
                  //  - less than 200 ms PTS gaps (timeScale/5)
                  contiguous |= inputSamples.length && nextAvcDts && (accurateTimeOffset && Math.abs(timeOffset - nextAvcDts / timeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAvcDts - initDTS) < timeScale / 5);
                }

                if (!contiguous) {
                  // if not contiguous, let's use target timeOffset
                  nextAvcDts = timeOffset * timeScale;
                }

                // PTS is coded on 33bits, and can loop from -2^32 to 2^32
                // ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value
                inputSamples.forEach(function (sample) {
                  sample.pts = ptsNormalize(sample.pts - initDTS, nextAvcDts);
                  sample.dts = ptsNormalize(sample.dts - initDTS, nextAvcDts);
                });

                // sort video samples by DTS then PTS then demux id order
                inputSamples.sort(function (a, b) {
                  var deltadts = a.dts - b.dts;
                  var deltapts = a.pts - b.pts;
                  return deltadts ? deltadts : deltapts ? deltapts : a.id - b.id;
                });

                // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)
                var PTSDTSshift = inputSamples.reduce(function (prev, curr) {
                  return Math.max(Math.min(prev, curr.pts - curr.dts), -18000);
                }, 0);
                if (PTSDTSshift < 0) {
                  logger["b" /* logger */].warn('PTS < DTS detected in video samples, shifting DTS by ' + Math.round(PTSDTSshift / 90) + ' ms to overcome this issue');
                  for (var i = 0; i < inputSamples.length; i++) {
                    inputSamples[i].dts += PTSDTSshift;
                  }
                }

                // compute first DTS and last DTS, normalize them against reference value
                var sample = inputSamples[0];
                firstDTS = Math.max(sample.dts, 0);
                firstPTS = Math.max(sample.pts, 0);

                // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)
                var delta = Math.round((firstDTS - nextAvcDts) / 90);
                // if fragment are contiguous, detect hole/overlapping between fragments
                if (contiguous) {
                  if (delta) {
                    if (delta > 1) {
                      logger["b" /* logger */].log('AVC:' + delta + ' ms hole between fragments detected,filling it');
                    } else if (delta < -1) {
                      logger["b" /* logger */].log('AVC:' + -delta + ' ms overlapping between fragments detected');
                    }
                    // remove hole/gap : set DTS to next expected DTS
                    firstDTS = nextAvcDts;
                    inputSamples[0].dts = firstDTS;
                    // offset PTS as well, ensure that PTS is smaller or equal than new DTS
                    firstPTS = Math.max(firstPTS - delta, nextAvcDts);
                    inputSamples[0].pts = firstPTS;
                    logger["b" /* logger */].log('Video/PTS/DTS adjusted: ' + Math.round(firstPTS / 90) + '/' + Math.round(firstDTS / 90) + ',delta:' + delta + ' ms');
                  }
                }
                nextDTS = firstDTS;

                // compute lastPTS/lastDTS
                sample = inputSamples[inputSamples.length - 1];
                lastDTS = Math.max(sample.dts, 0);
                lastPTS = Math.max(sample.pts, 0, lastDTS);

                // on Safari let's signal the same sample duration for all samples
                // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
                // set this constant duration as being the avg delta between consecutive DTS.
                if (isSafari) {
                  mp4SampleDuration = Math.round((lastDTS - firstDTS) / (inputSamples.length - 1));
                }

                var nbNalu = 0,
                  naluLen = 0;
                for (var _i = 0; _i < nbSamples; _i++) {
                  // compute total/avc sample length and nb of NAL units
                  var _sample = inputSamples[_i],
                    units = _sample.units,
                    nbUnits = units.length,
                    sampleLen = 0;
                  for (var j = 0; j < nbUnits; j++) {
                    sampleLen += units[j].data.length;
                  }
                  naluLen += sampleLen;
                  nbNalu += nbUnits;
                  _sample.length = sampleLen;

                  // normalize PTS/DTS
                  if (isSafari) {
                    // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples
                    _sample.dts = firstDTS + _i * mp4SampleDuration;
                  } else {
                    // ensure sample monotonic DTS
                    _sample.dts = Math.max(_sample.dts, firstDTS);
                  }
                  // ensure that computed value is greater or equal than sample DTS
                  _sample.pts = Math.max(_sample.pts, _sample.dts);
                }

                /* concatenate the video data and construct the mdat in place
      (need 8 more bytes to fill length and mpdat type) */
                var mdatSize = naluLen + 4 * nbNalu + 8;
                try {
                  mdat = new Uint8Array(mdatSize);
                } catch (err) {
                  this.observer.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].MUX_ERROR,
                    details: errors["a" /* ErrorDetails */].REMUX_ALLOC_ERROR,
                    fatal: false,
                    bytes: mdatSize,
                    reason: 'fail allocating video mdat ' + mdatSize
                  });
                  return;
                }
                var view = new DataView(mdat.buffer);
                view.setUint32(0, mdatSize);
                mdat.set(mp4_generator.types.mdat, 4);

                for (var _i2 = 0; _i2 < nbSamples; _i2++) {
                  var avcSample = inputSamples[_i2],
                    avcSampleUnits = avcSample.units,
                    mp4SampleLength = 0,
                    compositionTimeOffset = void 0;
                  // convert NALU bitstream to MP4 format (prepend NALU with size field)
                  for (var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++) {
                    var unit = avcSampleUnits[_j],
                      unitData = unit.data,
                      unitDataLen = unit.data.byteLength;
                    view.setUint32(offset, unitDataLen);
                    offset += 4;
                    mdat.set(unitData, offset);
                    offset += unitDataLen;
                    mp4SampleLength += 4 + unitDataLen;
                  }

                  if (!isSafari) {
                    // expected sample duration is the Decoding Timestamp diff of consecutive samples
                    if (_i2 < nbSamples - 1) {
                      mp4SampleDuration = inputSamples[_i2 + 1].dts - avcSample.dts;
                    } else {
                      var config = this.config,
                        lastFrameDuration = avcSample.dts - inputSamples[_i2 > 0 ? _i2 - 1 : _i2].dts;
                      if (config.stretchShortVideoTrack) {
                        // In some cases, a segment's audio track duration may exceed the video track duration.
                        // Since we've already remuxed audio, and we know how long the audio track is, we look to
                        // see if the delta to the next segment is longer than the minimum of maxBufferHole and
                        // maxSeekHole. If so, playback would potentially get stuck, so we artificially inflate
                        // the duration of the last frame to minimize any potential gap between segments.
                        var maxBufferHole = config.maxBufferHole,
                          maxSeekHole = config.maxSeekHole,
                          gapTolerance = Math.floor(Math.min(maxBufferHole, maxSeekHole) * timeScale),
                          deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;
                        if (deltaToFrameEnd > gapTolerance) {
                          // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
                          // frame overlap. maxBufferHole/maxSeekHole should be >> lastFrameDuration anyway.
                          mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;
                          if (mp4SampleDuration < 0) {
                            mp4SampleDuration = lastFrameDuration;
                          }
                          logger["b" /* logger */].log('It is approximately ' + deltaToFrameEnd / 90 + ' ms to the next segment; using duration ' + mp4SampleDuration / 90 + ' ms for the last video frame.');
                        } else {
                          mp4SampleDuration = lastFrameDuration;
                        }
                      } else {
                        mp4SampleDuration = lastFrameDuration;
                      }
                    }
                    compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);
                  } else {
                    compositionTimeOffset = Math.max(0, mp4SampleDuration * Math.round((avcSample.pts - avcSample.dts) / mp4SampleDuration));
                  }

                  //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');
                  outputSamples.push({
                    size: mp4SampleLength,
                    // constant duration
                    duration: mp4SampleDuration,
                    cts: compositionTimeOffset,
                    flags: {
                      isLeading: 0,
                      isDependedOn: 0,
                      hasRedundancy: 0,
                      degradPrio: 0,
                      dependsOn: avcSample.key ? 2 : 1,
                      isNonSync: avcSample.key ? 0 : 1
                    }
                  });
                }
                // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)
                this.nextAvcDts = lastDTS + mp4SampleDuration;
                var dropped = track.dropped;
                track.len = 0;
                track.nbNalu = 0;
                track.dropped = 0;
                if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
                  var flags = outputSamples[0].flags;
                  // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue
                  // https://code.google.com/p/chromium/issues/detail?id=229412
                  flags.dependsOn = 2;
                  flags.isNonSync = 0;
                }
                track.samples = outputSamples;
                moof = mp4_generator.moof(track.sequenceNumber++, firstDTS, track);
                track.samples = [];

                var data = {
                  data1: moof,
                  data2: mdat,
                  startPTS: firstPTS / timeScale,
                  endPTS: (lastPTS + mp4SampleDuration) / timeScale,
                  startDTS: firstDTS / timeScale,
                  endDTS: this.nextAvcDts / timeScale,
                  type: 'video',
                  nb: outputSamples.length,
                  dropped: dropped
                };
                this.observer.trigger(events["a" /* default */].FRAG_PARSING_DATA, data);
                return data;
              };

              MP4Remuxer.prototype.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset) {
                var inputTimeScale = track.inputTimeScale,
                  mp4timeScale = track.timescale,
                  scaleFactor = inputTimeScale / mp4timeScale,
                  mp4SampleDuration = track.isAAC ? 1024 : 1152,
                  inputSampleDuration = mp4SampleDuration * scaleFactor,
                  ptsNormalize = this._PTSNormalize,
                  initDTS = this._initDTS,
                  rawMPEG = !track.isAAC && this.typeSupported.mpeg;

                var offset,
                  mp4Sample,
                  fillFrame,
                  mdat,
                  moof,
                  firstPTS,
                  lastPTS,
                  inputSamples = track.samples,
                  outputSamples = [],
                  nextAudioPts = this.nextAudioPts;

                // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
                // for sake of clarity:
                // consecutive fragments are frags with
                //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
                //  - less than 20 audio frames distance
                // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
                // this helps ensuring audio continuity
                // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame
                contiguous |= inputSamples.length && nextAudioPts && (accurateTimeOffset && Math.abs(timeOffset - nextAudioPts / inputTimeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAudioPts - initDTS) < 20 * inputSampleDuration);

                if (!contiguous) {
                  // if fragments are not contiguous, let's use timeOffset to compute next Audio PTS
                  nextAudioPts = timeOffset * inputTimeScale;
                }

                // compute normalized PTS
                inputSamples.forEach(function (sample) {
                  sample.pts = sample.dts = ptsNormalize(sample.pts - initDTS, nextAudioPts);
                });

                // sort based on normalized PTS (this is to avoid sorting issues in case timestamp
                // reloop in the middle of our samples array)
                inputSamples.sort(function (a, b) {
                  return a.pts - b.pts;
                });

                // If the audio track is missing samples, the frames seem to get "left-shifted" within the
                // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
                // In an effort to prevent this from happening, we inject frames here where there are gaps.
                // When possible, we inject a silent frame; when that's not possible, we duplicate the last
                // frame.

                // only inject/drop audio frames in case time offset is accurate
                if (accurateTimeOffset && track.isAAC) {
                  var maxAudioFramesDrift = this.config.maxAudioFramesDrift;
                  for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length;) {
                    // First, let's see how far off this frame is from where we expect it to be
                    var sample = inputSamples[i],
                      delta;
                    var pts = sample.pts;
                    delta = pts - nextPts;

                    //console.log(Math.round(pts) + '/' + Math.round(nextPts) + '/' + Math.round(delta));
                    var duration = Math.abs(1000 * delta / inputTimeScale);

                    // If we're overlapping by more than a duration, drop this sample
                    if (delta <= -maxAudioFramesDrift * inputSampleDuration) {
                      logger["b" /* logger */].warn('Dropping 1 audio frame @ ' + (nextPts / inputTimeScale).toFixed(3) + 's due to ' + Math.round(duration) + ' ms overlap.');
                      inputSamples.splice(i, 1);
                      track.len -= sample.unit.length;
                      // Don't touch nextPtsNorm or i
                    }

                    // Insert missing frames if:
                    // 1: We're more than maxAudioFramesDrift frame away
                    // 2: Not more than MAX_SILENT_FRAME_DURATION away
                    // 3: currentTime (aka nextPtsNorm) is not 0
                    else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && nextPts) {
                      var missing = Math.round(delta / inputSampleDuration);
                      logger["b" /* logger */].warn('Injecting ' + missing + ' audio frame @ ' + (nextPts / inputTimeScale).toFixed(3) + 's due to ' + Math.round(1000 * delta / inputTimeScale) + ' ms gap.');
                      for (var j = 0; j < missing; j++) {
                        var newStamp = Math.max(nextPts, 0);
                        fillFrame = aac.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                        if (!fillFrame) {
                          logger["b" /* logger */].log('Unable to get silent frame for given audio codec; duplicating last frame instead.');
                          fillFrame = sample.unit.subarray();
                        }
                        inputSamples.splice(i, 0, {unit: fillFrame, pts: newStamp, dts: newStamp});
                        track.len += fillFrame.length;
                        nextPts += inputSampleDuration;
                        i++;
                      }

                      // Adjust sample to next expected pts
                      sample.pts = sample.dts = nextPts;
                      nextPts += inputSampleDuration;
                      i++;
                    } else {
                      // Otherwise, just adjust pts
                      if (Math.abs(delta) > 0.1 * inputSampleDuration) {
                        //logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);
                      }
                      sample.pts = sample.dts = nextPts;
                      nextPts += inputSampleDuration;
                      i++;
                    }
                  }
                }

                for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {
                  var audioSample = inputSamples[_j2];
                  var unit = audioSample.unit;
                  var _pts = audioSample.pts;
                  //logger.log(`Audio/PTS:${Math.round(pts/90)}`);
                  // if not first sample
                  if (lastPTS !== undefined) {
                    mp4Sample.duration = Math.round((_pts - lastPTS) / scaleFactor);
                  } else {
                    var _delta = Math.round(1000 * (_pts - nextAudioPts) / inputTimeScale),
                      numMissingFrames = 0;
                    // if fragment are contiguous, detect hole/overlapping between fragments
                    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
                    if (contiguous && track.isAAC) {
                      // log delta
                      if (_delta) {
                        if (_delta > 0 && _delta < MAX_SILENT_FRAME_DURATION) {
                          numMissingFrames = Math.round((_pts - nextAudioPts) / inputSampleDuration);
                          logger["b" /* logger */].log(_delta + ' ms hole between AAC samples detected,filling it');
                          if (numMissingFrames > 0) {
                            fillFrame = aac.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                            if (!fillFrame) {
                              fillFrame = unit.subarray();
                            }
                            track.len += numMissingFrames * fillFrame.length;
                          }
                          // if we have frame overlap, overlapping for more than half a frame duraion
                        } else if (_delta < -12) {
                          // drop overlapping audio frames... browser will deal with it
                          logger["b" /* logger */].log('drop overlapping AAC sample, expected/parsed/delta:' + (nextAudioPts / inputTimeScale).toFixed(3) + 's/' + (_pts / inputTimeScale).toFixed(3) + 's/' + -_delta + 'ms');
                          track.len -= unit.byteLength;
                          continue;
                        }
                        // set PTS/DTS to expected PTS/DTS
                        _pts = nextAudioPts;
                      }
                    }
                    // remember first PTS of our audioSamples, ensure value is positive
                    firstPTS = Math.max(0, _pts);
                    if (track.len > 0) {
                      /* concatenate the audio data and construct the mdat in place
            (need 8 more bytes to fill length and mdat type) */
                      var mdatSize = rawMPEG ? track.len : track.len + 8;
                      offset = rawMPEG ? 0 : 8;
                      try {
                        mdat = new Uint8Array(mdatSize);
                      } catch (err) {
                        this.observer.trigger(events["a" /* default */].ERROR, {
                          type: errors["b" /* ErrorTypes */].MUX_ERROR,
                          details: errors["a" /* ErrorDetails */].REMUX_ALLOC_ERROR,
                          fatal: false,
                          bytes: mdatSize,
                          reason: 'fail allocating audio mdat ' + mdatSize
                        });
                        return;
                      }
                      if (!rawMPEG) {
                        var view = new DataView(mdat.buffer);
                        view.setUint32(0, mdatSize);
                        mdat.set(mp4_generator.types.mdat, 4);
                      }
                    } else {
                      // no audio samples
                      return;
                    }
                    for (var _i3 = 0; _i3 < numMissingFrames; _i3++) {
                      fillFrame = aac.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                      if (!fillFrame) {
                        logger["b" /* logger */].log('Unable to get silent frame for given audio codec; duplicating this frame instead.');
                        fillFrame = unit.subarray();
                      }
                      mdat.set(fillFrame, offset);
                      offset += fillFrame.byteLength;
                      mp4Sample = {
                        size: fillFrame.byteLength,
                        cts: 0,
                        duration: 1024,
                        flags: {
                          isLeading: 0,
                          isDependedOn: 0,
                          hasRedundancy: 0,
                          degradPrio: 0,
                          dependsOn: 1
                        }
                      };
                      outputSamples.push(mp4Sample);
                    }
                  }
                  mdat.set(unit, offset);
                  var unitLen = unit.byteLength;
                  offset += unitLen;
                  //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');
                  mp4Sample = {
                    size: unitLen,
                    cts: 0,
                    duration: 0,
                    flags: {
                      isLeading: 0,
                      isDependedOn: 0,
                      hasRedundancy: 0,
                      degradPrio: 0,
                      dependsOn: 1
                    }
                  };
                  outputSamples.push(mp4Sample);
                  lastPTS = _pts;
                }
                var lastSampleDuration = 0;
                var nbSamples = outputSamples.length;
                //set last sample duration as being identical to previous sample
                if (nbSamples >= 2) {
                  lastSampleDuration = outputSamples[nbSamples - 2].duration;
                  mp4Sample.duration = lastSampleDuration;
                }
                if (nbSamples) {
                  // next audio sample PTS should be equal to last sample PTS + duration
                  this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSampleDuration;
                  //logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));
                  track.len = 0;
                  track.samples = outputSamples;
                  if (rawMPEG) {
                    moof = new Uint8Array();
                  } else {
                    moof = mp4_generator.moof(track.sequenceNumber++, firstPTS / scaleFactor, track);
                  }
                  track.samples = [];
                  var start = firstPTS / inputTimeScale;
                  var end = nextAudioPts / inputTimeScale;
                  var audioData = {
                    data1: moof,
                    data2: mdat,
                    startPTS: start,
                    endPTS: end,
                    startDTS: start,
                    endDTS: end,
                    type: 'audio',
                    nb: nbSamples
                  };
                  this.observer.trigger(events["a" /* default */].FRAG_PARSING_DATA, audioData);
                  return audioData;
                }
                return null;
              };

              MP4Remuxer.prototype.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
                var inputTimeScale = track.inputTimeScale,
                  mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale,
                  scaleFactor = inputTimeScale / mp4timeScale,
                  nextAudioPts = this.nextAudioPts,


                  // sync with video's timestamp
                  startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS,
                  endDTS = videoData.endDTS * inputTimeScale + this._initDTS,

                  // one sample's duration value
                  sampleDuration = 1024,
                  frameDuration = scaleFactor * sampleDuration,


                  // samples count of this segment's duration
                  nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),


                  // silent frame
                  silentFrame = aac.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);

                logger["b" /* logger */].warn('remux empty Audio');
                // Can't remux if we can't generate a silent frame...
                if (!silentFrame) {
                  logger["b" /* logger */].trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');
                  return;
                }

                var samples = [];
                for (var i = 0; i < nbSamples; i++) {
                  var stamp = startDTS + i * frameDuration;
                  samples.push({unit: silentFrame, pts: stamp, dts: stamp});
                  track.len += silentFrame.length;
                }
                track.samples = samples;

                this.remuxAudio(track, timeOffset, contiguous);
              };

              MP4Remuxer.prototype.remuxID3 = function remuxID3(track, timeOffset) {
                var length = track.samples.length,
                  sample;
                var inputTimeScale = track.inputTimeScale;
                var initPTS = this._initPTS;
                var initDTS = this._initDTS;
                // consume samples
                if (length) {
                  for (var index = 0; index < length; index++) {
                    sample = track.samples[index];
                    // setting id3 pts, dts to relative time
                    // using this._initPTS and this._initDTS to calculate relative time
                    sample.pts = (sample.pts - initPTS) / inputTimeScale;
                    sample.dts = (sample.dts - initDTS) / inputTimeScale;
                  }
                  this.observer.trigger(events["a" /* default */].FRAG_PARSING_METADATA, {
                    samples: track.samples
                  });
                }

                track.samples = [];
                timeOffset = timeOffset;
              };

              MP4Remuxer.prototype.remuxText = function remuxText(track, timeOffset) {
                track.samples.sort(function (a, b) {
                  return a.pts - b.pts;
                });

                var length = track.samples.length,
                  sample;
                var inputTimeScale = track.inputTimeScale;
                var initPTS = this._initPTS;
                // consume samples
                if (length) {
                  for (var index = 0; index < length; index++) {
                    sample = track.samples[index];
                    // setting text pts, dts to relative time
                    // using this._initPTS and this._initDTS to calculate relative time
                    sample.pts = (sample.pts - initPTS) / inputTimeScale;
                  }
                  this.observer.trigger(events["a" /* default */].FRAG_PARSING_USERDATA, {
                    samples: track.samples
                  });
                }

                track.samples = [];
                timeOffset = timeOffset;
              };

              MP4Remuxer.prototype._PTSNormalize = function _PTSNormalize(value, reference) {
                var offset;
                if (reference === undefined) {
                  return value;
                }
                if (reference < value) {
                  // - 2^33
                  offset = -8589934592;
                } else {
                  // + 2^33
                  offset = 8589934592;
                }
                /* PTS is 33bit (from 0 to 2^33 -1)
      if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
      PTS looping occured. fill the gap */
                while (Math.abs(value - reference) > 4294967296) {
                  value += offset;
                }
                return value;
              };

              return MP4Remuxer;
            }();

            /* harmony default export */
            var mp4_remuxer = (mp4_remuxer_MP4Remuxer);

// CONCATENATED MODULE: ./src/remux/passthrough-remuxer.js
            function passthrough_remuxer__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * passthrough remuxer
             */


            var passthrough_remuxer_PassThroughRemuxer = function () {
              function PassThroughRemuxer(observer) {
                passthrough_remuxer__classCallCheck(this, PassThroughRemuxer);

                this.observer = observer;
              }

              PassThroughRemuxer.prototype.destroy = function destroy() {
              };

              PassThroughRemuxer.prototype.resetTimeStamp = function resetTimeStamp() {
              };

              PassThroughRemuxer.prototype.resetInitSegment = function resetInitSegment() {
              };

              PassThroughRemuxer.prototype.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset, rawData) {
                var observer = this.observer;
                var streamType = '';
                if (audioTrack) {
                  streamType += 'audio';
                }
                if (videoTrack) {
                  streamType += 'video';
                }
                observer.trigger(events["a" /* default */].FRAG_PARSING_DATA, {
                  data1: rawData,
                  startPTS: timeOffset,
                  startDTS: timeOffset,
                  type: streamType,
                  nb: 1,
                  dropped: 0
                });
                //notify end of parsing
                observer.trigger(events["a" /* default */].FRAG_PARSED);
              };

              return PassThroughRemuxer;
            }();

            /* harmony default export */
            var passthrough_remuxer = (passthrough_remuxer_PassThroughRemuxer);

// CONCATENATED MODULE: ./src/demux/demuxer-inline.js
            function demuxer_inline__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /*  inline demuxer.
 *   probe fragments and instantiate appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)
 */


            var demuxer_inline_DemuxerInline = function () {
              function DemuxerInline(observer, typeSupported, config, vendor) {
                demuxer_inline__classCallCheck(this, DemuxerInline);

                this.observer = observer;
                this.typeSupported = typeSupported;
                this.config = config;
                this.vendor = vendor;
              }

              DemuxerInline.prototype.destroy = function destroy() {
                var demuxer = this.demuxer;
                if (demuxer) {
                  demuxer.destroy();
                }
              };

              DemuxerInline.prototype.push = function push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {
                if (data.byteLength > 0 && decryptdata != null && decryptdata.key != null && decryptdata.method === 'AES-128') {
                  var decrypter = this.decrypter;
                  if (decrypter == null) {
                    decrypter = this.decrypter = new crypt_decrypter["a" /* default */](this.observer, this.config);
                  }
                  var localthis = this;
                  // performance.now() not available on WebWorker, at least on Safari Desktop
                  var startTime;
                  try {
                    startTime = performance.now();
                  } catch (error) {
                    startTime = Date.now();
                  }
                  decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, function (decryptedData) {
                    var endTime;
                    try {
                      endTime = performance.now();
                    } catch (error) {
                      endTime = Date.now();
                    }
                    localthis.observer.trigger(events["a" /* default */].FRAG_DECRYPTED, {
                      stats: {
                        tstart: startTime,
                        tdecrypt: endTime
                      }
                    });
                    localthis.pushDecrypted(new Uint8Array(decryptedData), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
                  });
                } else {
                  this.pushDecrypted(new Uint8Array(data), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
                }
              };

              DemuxerInline.prototype.pushDecrypted = function pushDecrypted(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {
                var demuxer = this.demuxer;
                if (!demuxer ||
                  // in case of continuity change, we might switch from content type (AAC container to TS container for example)
                  // so let's check that current demuxer is still valid
                  discontinuity && !this.probe(data)) {
                  var observer = this.observer;
                  var typeSupported = this.typeSupported;
                  var config = this.config;
                  // probing order is TS/AAC/MP3/MP4
                  var muxConfig = [{demux: tsdemuxer, remux: mp4_remuxer}, {
                    demux: aacdemuxer,
                    remux: mp4_remuxer
                  }, {demux: mp3demuxer, remux: mp4_remuxer}, {demux: mp4demuxer, remux: passthrough_remuxer}];

                  // probe for content type
                  for (var i = 0, len = muxConfig.length; i < len; i++) {
                    var mux = muxConfig[i];
                    var probe = mux.demux.probe;
                    if (probe(data)) {
                      var _remuxer = this.remuxer = new mux.remux(observer, config, typeSupported, this.vendor);
                      demuxer = new mux.demux(observer, _remuxer, config, typeSupported);
                      this.probe = probe;
                      break;
                    }
                  }
                  if (!demuxer) {
                    observer.trigger(events["a" /* default */].ERROR, {
                      type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                      details: errors["a" /* ErrorDetails */].FRAG_PARSING_ERROR,
                      fatal: true,
                      reason: 'no demux matching with content found'
                    });
                    return;
                  }
                  this.demuxer = demuxer;
                }
                var remuxer = this.remuxer;

                if (discontinuity || trackSwitch) {
                  demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);
                  remuxer.resetInitSegment();
                }
                if (discontinuity) {
                  demuxer.resetTimeStamp(defaultInitPTS);
                  remuxer.resetTimeStamp(defaultInitPTS);
                }
                if (typeof demuxer.setDecryptData === 'function') {
                  demuxer.setDecryptData(decryptdata);
                }
                demuxer.append(data, timeOffset, contiguous, accurateTimeOffset);
              };

              return DemuxerInline;
            }();

            /* harmony default export */
            var demuxer_inline = __webpack_exports__["a"] = (demuxer_inline_DemuxerInline);

            /***/
          }),
          /* 8 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";
            Object.defineProperty(__webpack_exports__, "__esModule", {value: true});
            var cues_namespaceObject = {};
            __webpack_require__.d(cues_namespaceObject, "newCue", function () {
              return newCue;
            });

// EXTERNAL MODULE: ./node_modules/url-toolkit/src/url-toolkit.js
            var url_toolkit = __webpack_require__(6);
            var url_toolkit_default = /*#__PURE__*/__webpack_require__.n(url_toolkit);

// EXTERNAL MODULE: ./src/events.js
            var events = __webpack_require__(1);

// EXTERNAL MODULE: ./src/errors.js
            var errors = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/logger.js
            var logger = __webpack_require__(0);

// CONCATENATED MODULE: ./src/event-handler.js
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
              return typeof obj;
            } : function (obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /*
*
* All objects in the event handling chain should inherit from this class
*
*/


            var event_handler_EventHandler = function () {
              function EventHandler(hls) {
                _classCallCheck(this, EventHandler);

                this.hls = hls;
                this.onEvent = this.onEvent.bind(this);

                for (var _len = arguments.length, events = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  events[_key - 1] = arguments[_key];
                }

                this.handledEvents = events;
                this.useGenericHandler = true;

                this.registerListeners();
              }

              EventHandler.prototype.destroy = function destroy() {
                this.unregisterListeners();
              };

              EventHandler.prototype.isEventHandler = function isEventHandler() {
                return _typeof(this.handledEvents) === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';
              };

              EventHandler.prototype.registerListeners = function registerListeners() {
                if (this.isEventHandler()) {
                  this.handledEvents.forEach(function (event) {
                    if (event === 'hlsEventGeneric') {
                      throw new Error('Forbidden event name: ' + event);
                    }
                    this.hls.on(event, this.onEvent);
                  }, this);
                }
              };

              EventHandler.prototype.unregisterListeners = function unregisterListeners() {
                if (this.isEventHandler()) {
                  this.handledEvents.forEach(function (event) {
                    this.hls.off(event, this.onEvent);
                  }, this);
                }
              };

              /**
               * arguments: event (string), data (any)
               */


              EventHandler.prototype.onEvent = function onEvent(event, data) {
                this.onEventGeneric(event, data);
              };

              EventHandler.prototype.onEventGeneric = function onEventGeneric(event, data) {
                var eventToFunction = function eventToFunction(event, data) {
                  var funcName = 'on' + event.replace('hls', '');
                  if (typeof this[funcName] !== 'function') {
                    throw new Error('Event ' + event + ' has no generic handler in this ' + this.constructor.name + ' class (tried ' + funcName + ')');
                  }
                  return this[funcName].bind(this, data);
                };
                try {
                  eventToFunction.call(this, event, data).call();
                } catch (err) {
                  logger["b" /* logger */].error('internal error happened while processing ' + event + ':' + err.message);
                  this.hls.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].OTHER_ERROR,
                    details: errors["a" /* ErrorDetails */].INTERNAL_EXCEPTION,
                    fatal: false,
                    event: event,
                    err: err
                  });
                }
              };

              return EventHandler;
            }();

            /* harmony default export */
            var event_handler = (event_handler_EventHandler);

// CONCATENATED MODULE: ./src/utils/attr-list.js
            function attr_list__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/;
            var ATTR_LIST_REGEX = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g;

// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js

            var AttrList = function () {
              function AttrList(attrs) {
                attr_list__classCallCheck(this, AttrList);

                if (typeof attrs === 'string') {
                  attrs = AttrList.parseAttrList(attrs);
                }
                for (var attr in attrs) {
                  if (attrs.hasOwnProperty(attr)) {
                    this[attr] = attrs[attr];
                  }
                }
              }

              AttrList.prototype.decimalInteger = function decimalInteger(attrName) {
                var intValue = parseInt(this[attrName], 10);
                if (intValue > Number.MAX_SAFE_INTEGER) {
                  return Infinity;
                }
                return intValue;
              };

              AttrList.prototype.hexadecimalInteger = function hexadecimalInteger(attrName) {
                if (this[attrName]) {
                  var stringValue = (this[attrName] || '0x').slice(2);
                  stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;

                  var value = new Uint8Array(stringValue.length / 2);
                  for (var i = 0; i < stringValue.length / 2; i++) {
                    value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
                  }
                  return value;
                } else {
                  return null;
                }
              };

              AttrList.prototype.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {
                var intValue = parseInt(this[attrName], 16);
                if (intValue > Number.MAX_SAFE_INTEGER) {
                  return Infinity;
                }
                return intValue;
              };

              AttrList.prototype.decimalFloatingPoint = function decimalFloatingPoint(attrName) {
                return parseFloat(this[attrName]);
              };

              AttrList.prototype.enumeratedString = function enumeratedString(attrName) {
                return this[attrName];
              };

              AttrList.prototype.decimalResolution = function decimalResolution(attrName) {
                var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);
                if (res === null) {
                  return undefined;
                }
                return {
                  width: parseInt(res[1], 10),
                  height: parseInt(res[2], 10)
                };
              };

              AttrList.parseAttrList = function parseAttrList(input) {
                var match,
                  attrs = {};
                ATTR_LIST_REGEX.lastIndex = 0;
                while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
                  var value = match[2],
                    quote = '"';

                  if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
                    value = value.slice(1, -1);
                  }
                  attrs[match[1]] = value;
                }
                return attrs;
              };

              return AttrList;
            }();

            /* harmony default export */
            var attr_list = (AttrList);
// CONCATENATED MODULE: ./src/utils/codecs.js
// from http://mp4ra.org/codecs.html
            var sampleEntryCodesISO = {
              audio: {
                'a3ds': true,
                'ac-3': true,
                'ac-4': true,
                'alac': true,
                'alaw': true,
                'dra1': true,
                'dts+': true,
                'dts-': true,
                'dtsc': true,
                'dtse': true,
                'dtsh': true,
                'ec-3': true,
                'enca': true,
                'g719': true,
                'g726': true,
                'm4ae': true,
                'mha1': true,
                'mha2': true,
                'mhm1': true,
                'mhm2': true,
                'mlpa': true,
                'mp4a': true,
                'raw ': true,
                'Opus': true,
                'samr': true,
                'sawb': true,
                'sawp': true,
                'sevc': true,
                'sqcp': true,
                'ssmv': true,
                'twos': true,
                'ulaw': true
              },
              video: {
                'avc1': true,
                'avc2': true,
                'avc3': true,
                'avc4': true,
                'avcp': true,
                'drac': true,
                'dvav': true,
                'dvhe': true,
                'encv': true,
                'hev1': true,
                'hvc1': true,
                'mjp2': true,
                'mp4v': true,
                'mvc1': true,
                'mvc2': true,
                'mvc3': true,
                'mvc4': true,
                'resv': true,
                'rv60': true,
                's263': true,
                'svc1': true,
                'svc2': true,
                'vc-1': true,
                'vp08': true,
                'vp09': true
              }
            };

            function isCodecType(codec, type) {
              var typeCodes = sampleEntryCodesISO[type];
              return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;
            }

            function isCodecSupportedInMp4(codec) {
              return MediaSource.isTypeSupported('video/mp4;codecs="' + codec + '"');
            }


// CONCATENATED MODULE: ./src/loader/playlist-loader.js
            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            function playlist_loader__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * Playlist Loader
             */









// https://regex101.com is your friend
            var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g;
            var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;

            var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([/#EXTINF:(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title
              /|(?!#)(\S+)/.source, // segment URI, group 3 => the URI (note newline is not eaten)
              /|#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)
              /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec
              /|#.*/.source // All other non-segment oriented tags will match with all groups empty
            ].join(''), 'g');

            var LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)(.*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/;

            var playlist_loader_LevelKey = function () {
              function LevelKey() {
                playlist_loader__classCallCheck(this, LevelKey);

                this.method = null;
                this.key = null;
                this.iv = null;
                this._uri = null;
              }

              _createClass(LevelKey, [{
                key: 'uri',
                get: function get() {
                  if (!this._uri && this.reluri) {
                    this._uri = url_toolkit_default.a.buildAbsoluteURL(this.baseuri, this.reluri, {alwaysNormalize: true});
                  }
                  return this._uri;
                }
              }]);

              return LevelKey;
            }();

            var playlist_loader_Fragment = function () {
              function Fragment() {
                playlist_loader__classCallCheck(this, Fragment);

                this._url = null;
                this._byteRange = null;
                this._decryptdata = null;
                this.tagList = [];
              }

              /**
               * Utility method for parseLevelPlaylist to create an initialization vector for a given segment
               * @returns {Uint8Array}
               */
              Fragment.prototype.createInitializationVector = function createInitializationVector(segmentNumber) {
                var uint8View = new Uint8Array(16);

                for (var i = 12; i < 16; i++) {
                  uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;
                }

                return uint8View;
              };

              /**
               * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data
               * @param levelkey - a playlist's encryption info
               * @param segmentNumber - the fragment's segment number
               * @returns {*} - an object to be applied as a fragment's decryptdata
               */


              Fragment.prototype.fragmentDecryptdataFromLevelkey = function fragmentDecryptdataFromLevelkey(levelkey, segmentNumber) {
                var decryptdata = levelkey;

                if (levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {
                  decryptdata = new playlist_loader_LevelKey();
                  decryptdata.method = levelkey.method;
                  decryptdata.baseuri = levelkey.baseuri;
                  decryptdata.reluri = levelkey.reluri;
                  decryptdata.iv = this.createInitializationVector(segmentNumber);
                }

                return decryptdata;
              };

              Fragment.prototype.cloneObj = function cloneObj(obj) {
                return JSON.parse(JSON.stringify(obj));
              };

              _createClass(Fragment, [{
                key: 'url',
                get: function get() {
                  if (!this._url && this.relurl) {
                    this._url = url_toolkit_default.a.buildAbsoluteURL(this.baseurl, this.relurl, {alwaysNormalize: true});
                  }
                  return this._url;
                },
                set: function set(value) {
                  this._url = value;
                }
              }, {
                key: 'programDateTime',
                get: function get() {
                  if (!this._programDateTime && this.rawProgramDateTime) {
                    this._programDateTime = new Date(Date.parse(this.rawProgramDateTime));
                  }
                  return this._programDateTime;
                }
              }, {
                key: 'byteRange',
                get: function get() {
                  if (!this._byteRange) {
                    var byteRange = this._byteRange = [];
                    if (this.rawByteRange) {
                      var params = this.rawByteRange.split('@', 2);
                      if (params.length === 1) {
                        var lastByteRangeEndOffset = this.lastByteRangeEndOffset;
                        byteRange[0] = lastByteRangeEndOffset ? lastByteRangeEndOffset : 0;
                      } else {
                        byteRange[0] = parseInt(params[1]);
                      }
                      byteRange[1] = parseInt(params[0]) + byteRange[0];
                    }
                  }
                  return this._byteRange;
                }
              }, {
                key: 'byteRangeStartOffset',
                get: function get() {
                  return this.byteRange[0];
                }
              }, {
                key: 'byteRangeEndOffset',
                get: function get() {
                  return this.byteRange[1];
                }
              }, {
                key: 'decryptdata',
                get: function get() {
                  if (!this._decryptdata) {
                    this._decryptdata = this.fragmentDecryptdataFromLevelkey(this.levelkey, this.sn);
                  }
                  return this._decryptdata;
                }
              }]);

              return Fragment;
            }();

            var playlist_loader_PlaylistLoader = function (_EventHandler) {
              _inherits(PlaylistLoader, _EventHandler);

              function PlaylistLoader(hls) {
                playlist_loader__classCallCheck(this, PlaylistLoader);

                var _this = _possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MANIFEST_LOADING, events["a" /* default */].LEVEL_LOADING, events["a" /* default */].AUDIO_TRACK_LOADING, events["a" /* default */].SUBTITLE_TRACK_LOADING));

                _this.loaders = {};
                return _this;
              }

              PlaylistLoader.prototype.destroy = function destroy() {
                for (var loaderName in this.loaders) {
                  var loader = this.loaders[loaderName];
                  if (loader) {
                    loader.destroy();
                  }
                }
                this.loaders = {};
                event_handler.prototype.destroy.call(this);
              };

              PlaylistLoader.prototype.onManifestLoading = function onManifestLoading(data) {
                this.load(data.url, {type: 'manifest'});
              };

              PlaylistLoader.prototype.onLevelLoading = function onLevelLoading(data) {
                this.load(data.url, {type: 'level', level: data.level, id: data.id});
              };

              PlaylistLoader.prototype.onAudioTrackLoading = function onAudioTrackLoading(data) {
                this.load(data.url, {type: 'audioTrack', id: data.id});
              };

              PlaylistLoader.prototype.onSubtitleTrackLoading = function onSubtitleTrackLoading(data) {
                this.load(data.url, {type: 'subtitleTrack', id: data.id});
              };

              PlaylistLoader.prototype.load = function load(url, context) {
                var loader = this.loaders[context.type];
                if (loader) {
                  var loaderContext = loader.context;
                  if (loaderContext && loaderContext.url === url) {
                    logger["b" /* logger */].trace('playlist request ongoing');
                    return;
                  } else {
                    logger["b" /* logger */].warn('abort previous loader for type:' + context.type);
                    loader.abort();
                  }
                }
                var config = this.hls.config,
                  retry = void 0,
                  timeout = void 0,
                  retryDelay = void 0,
                  maxRetryDelay = void 0;
                if (context.type === 'manifest') {
                  retry = config.manifestLoadingMaxRetry;
                  timeout = config.manifestLoadingTimeOut;
                  retryDelay = config.manifestLoadingRetryDelay;
                  maxRetryDelay = config.manifestLoadingMaxRetryTimeout;
                } else {
                  retry = config.levelLoadingMaxRetry;
                  timeout = config.levelLoadingTimeOut;
                  retryDelay = config.levelLoadingRetryDelay;
                  maxRetryDelay = config.levelLoadingMaxRetryTimeout;
                  logger["b" /* logger */].log('loading playlist for ' + context.type + ' ' + (context.level || context.id));
                }
                loader = this.loaders[context.type] = context.loader = typeof config.pLoader !== 'undefined' ? new config.pLoader(config) : new config.loader(config);
                context.url = url;
                context.responseType = '';

                var loaderConfig = void 0,
                  loaderCallbacks = void 0;
                loaderConfig = {
                  timeout: timeout,
                  maxRetry: retry,
                  retryDelay: retryDelay,
                  maxRetryDelay: maxRetryDelay
                };
                loaderCallbacks = {
                  onSuccess: this.loadsuccess.bind(this),
                  onError: this.loaderror.bind(this),
                  onTimeout: this.loadtimeout.bind(this)
                };
                loader.load(context, loaderConfig, loaderCallbacks);
              };

              PlaylistLoader.prototype.resolve = function resolve(url, baseUrl) {
                return url_toolkit_default.a.buildAbsoluteURL(baseUrl, url, {alwaysNormalize: true});
              };

              PlaylistLoader.prototype.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {
                var levels = [],
                  result = void 0;
                MASTER_PLAYLIST_REGEX.lastIndex = 0;

                function setCodecs(codecs, level) {
                  ['video', 'audio'].forEach(function (type) {
                    var filtered = codecs.filter(function (codec) {
                      return isCodecType(codec, type);
                    });
                    if (filtered.length) {
                      var preferred = filtered.filter(function (codec) {
                        return codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0;
                      });
                      level[type + 'Codec'] = preferred.length > 0 ? preferred[0] : filtered[0];

                      // remove from list
                      codecs = codecs.filter(function (codec) {
                        return filtered.indexOf(codec) === -1;
                      });
                    }
                  });

                  level.unknownCodecs = codecs;
                }

                while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
                  var level = {};

                  var attrs = level.attrs = new attr_list(result[1]);
                  level.url = this.resolve(result[2], baseurl);

                  var resolution = attrs.decimalResolution('RESOLUTION');
                  if (resolution) {
                    level.width = resolution.width;
                    level.height = resolution.height;
                  }
                  level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');
                  level.name = attrs.NAME;

                  setCodecs([].concat((attrs.CODECS || '').split(/[ ,]+/)), level);

                  if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {
                    level.videoCodec = this.avc1toavcoti(level.videoCodec);
                  }

                  levels.push(level);
                }
                return levels;
              };

              PlaylistLoader.prototype.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type) {
                var audioCodec = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                var result = void 0,
                  medias = [],
                  id = 0;
                MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;
                while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) != null) {
                  var media = {};
                  var attrs = new attr_list(result[1]);
                  if (attrs.TYPE === type) {
                    media.groupId = attrs['GROUP-ID'];
                    media.name = attrs.NAME;
                    media.type = type;
                    media.default = attrs.DEFAULT === 'YES';
                    media.autoselect = attrs.AUTOSELECT === 'YES';
                    media.forced = attrs.FORCED === 'YES';
                    if (attrs.URI) {
                      media.url = this.resolve(attrs.URI, baseurl);
                    }
                    media.lang = attrs.LANGUAGE;
                    if (!media.name) {
                      media.name = media.lang;
                    }
                    if (audioCodec) {
                      media.audioCodec = audioCodec;
                    }
                    media.id = id++;
                    medias.push(media);
                  }
                }
                return medias;
              };

              PlaylistLoader.prototype.avc1toavcoti = function avc1toavcoti(codec) {
                var result,
                  avcdata = codec.split('.');
                if (avcdata.length > 2) {
                  result = avcdata.shift() + '.';
                  result += parseInt(avcdata.shift()).toString(16);
                  result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);
                } else {
                  result = codec;
                }
                return result;
              };

              PlaylistLoader.prototype.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type) {
                var currentSN = 0,
                  totalduration = 0,
                  level = {type: null, version: null, url: baseurl, fragments: [], live: true, startSN: 0},
                  levelkey = new playlist_loader_LevelKey(),
                  cc = 0,
                  prevFrag = null,
                  frag = new playlist_loader_Fragment(),
                  result,
                  i;

                LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;

                while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
                  var duration = result[1];
                  if (duration) {
                    // INF
                    frag.duration = parseFloat(duration);
                    // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                    var title = (' ' + result[2]).slice(1);
                    frag.title = title ? title : null;
                    frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);
                  } else if (result[3]) {
                    // url
                    if (!isNaN(frag.duration)) {
                      var sn = currentSN++;
                      frag.type = type;
                      frag.start = totalduration;
                      frag.levelkey = levelkey;
                      frag.sn = sn;
                      frag.level = id;
                      frag.cc = cc;
                      frag.baseurl = baseurl;
                      // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                      frag.relurl = (' ' + result[3]).slice(1);

                      level.fragments.push(frag);
                      prevFrag = frag;
                      totalduration += frag.duration;

                      frag = new playlist_loader_Fragment();
                    }
                  } else if (result[4]) {
                    // X-BYTERANGE
                    frag.rawByteRange = (' ' + result[4]).slice(1);
                    if (prevFrag) {
                      var lastByteRangeEndOffset = prevFrag.byteRangeEndOffset;
                      if (lastByteRangeEndOffset) {
                        frag.lastByteRangeEndOffset = lastByteRangeEndOffset;
                      }
                    }
                  } else if (result[5]) {
                    // PROGRAM-DATE-TIME
                    // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                    frag.rawProgramDateTime = (' ' + result[5]).slice(1);
                    frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);
                    if (level.programDateTime === undefined) {
                      level.programDateTime = new Date(new Date(Date.parse(result[5])) - 1000 * totalduration);
                    }
                  } else {
                    result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);
                    for (i = 1; i < result.length; i++) {
                      if (result[i] !== undefined) {
                        break;
                      }
                    }

                    // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                    var value1 = (' ' + result[i + 1]).slice(1);
                    var value2 = (' ' + result[i + 2]).slice(1);

                    switch (result[i]) {
                      case '#':
                        frag.tagList.push(value2 ? [value1, value2] : [value1]);
                        break;
                      case 'PLAYLIST-TYPE':
                        level.type = value1.toUpperCase();
                        break;
                      case 'MEDIA-SEQUENCE':
                        currentSN = level.startSN = parseInt(value1);
                        break;
                      case 'TARGETDURATION':
                        level.targetduration = parseFloat(value1);
                        break;
                      case 'VERSION':
                        level.version = parseInt(value1);
                        break;
                      case 'EXTM3U':
                        break;
                      case 'ENDLIST':
                        level.live = false;
                        break;
                      case 'DIS':
                        cc++;
                        frag.tagList.push(['DIS']);
                        break;
                      case 'DISCONTINUITY-SEQ':
                        cc = parseInt(value1);
                        break;
                      case 'KEY':
                        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4
                        var decryptparams = value1;
                        var keyAttrs = new attr_list(decryptparams);
                        var decryptmethod = keyAttrs.enumeratedString('METHOD'),
                          decrypturi = keyAttrs.URI,
                          decryptiv = keyAttrs.hexadecimalInteger('IV');
                        if (decryptmethod) {
                          levelkey = new playlist_loader_LevelKey();
                          if (decrypturi && ['AES-128', 'SAMPLE-AES'].indexOf(decryptmethod) >= 0) {
                            levelkey.method = decryptmethod;
                            // URI to get the key
                            levelkey.baseuri = baseurl;
                            levelkey.reluri = decrypturi;
                            levelkey.key = null;
                            // Initialization Vector (IV)
                            levelkey.iv = decryptiv;
                          }
                        }
                        break;
                      case 'START':
                        var startParams = value1;
                        var startAttrs = new attr_list(startParams);
                        var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET');
                        //TIME-OFFSET can be 0
                        if (!isNaN(startTimeOffset)) {
                          level.startTimeOffset = startTimeOffset;
                        }
                        break;
                      case 'MAP':
                        var mapAttrs = new attr_list(value1);
                        frag.relurl = mapAttrs.URI;
                        frag.rawByteRange = mapAttrs.BYTERANGE;
                        frag.baseurl = baseurl;
                        frag.level = id;
                        frag.type = type;
                        frag.sn = 'initSegment';
                        level.initSegment = frag;
                        frag = new playlist_loader_Fragment();
                        break;
                      default:
                        logger["b" /* logger */].warn('line parsed but not handled: ' + result);
                        break;
                    }
                  }
                }
                frag = prevFrag;
                //logger.log('found ' + level.fragments.length + ' fragments');
                if (frag && !frag.relurl) {
                  level.fragments.pop();
                  totalduration -= frag.duration;
                }
                level.totalduration = totalduration;
                level.averagetargetduration = totalduration / level.fragments.length;
                level.endSN = currentSN - 1;
                level.startCC = level.fragments[0] ? level.fragments[0].cc : 0;
                level.endCC = cc;
                return level;
              };

              PlaylistLoader.prototype.loadsuccess = function loadsuccess(response, stats, context) {
                var networkDetails = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                var string = response.data,
                  url = response.url,
                  type = context.type,
                  id = context.id,
                  level = context.level,
                  hls = this.hls;

                this.loaders[type] = undefined;
                // responseURL not supported on some browsers (it is used to detect URL redirection)
                // data-uri mode also not supported (but no need to detect redirection)
                if (url === undefined || url.indexOf('data:') === 0) {
                  // fallback to initial URL
                  url = context.url;
                }
                stats.tload = performance.now();
                //stats.mtime = new Date(target.getResponseHeader('Last-Modified'));
                if (string.indexOf('#EXTM3U') === 0) {
                  if (string.indexOf('#EXTINF:') > 0) {
                    var isLevel = type !== 'audioTrack' && type !== 'subtitleTrack',
                      levelId = !isNaN(level) ? level : !isNaN(id) ? id : 0,
                      levelDetails = this.parseLevelPlaylist(string, url, levelId, type === 'audioTrack' ? 'audio' : type === 'subtitleTrack' ? 'subtitle' : 'main');
                    levelDetails.tload = stats.tload;
                    if (type === 'manifest') {
                      // first request, stream manifest (no master playlist), fire manifest loaded event with level details
                      hls.trigger(events["a" /* default */].MANIFEST_LOADED, {
                        levels: [{
                          url: url,
                          details: levelDetails
                        }], audioTracks: [], url: url, stats: stats, networkDetails: networkDetails
                      });
                    }
                    stats.tparsed = performance.now();
                    if (levelDetails.targetduration) {
                      if (isLevel) {
                        hls.trigger(events["a" /* default */].LEVEL_LOADED, {
                          details: levelDetails,
                          level: level || 0,
                          id: id || 0,
                          stats: stats,
                          networkDetails: networkDetails
                        });
                      } else {
                        if (type === 'audioTrack') {
                          hls.trigger(events["a" /* default */].AUDIO_TRACK_LOADED, {
                            details: levelDetails,
                            id: id,
                            stats: stats,
                            networkDetails: networkDetails
                          });
                        } else if (type === 'subtitleTrack') {
                          hls.trigger(events["a" /* default */].SUBTITLE_TRACK_LOADED, {
                            details: levelDetails,
                            id: id,
                            stats: stats,
                            networkDetails: networkDetails
                          });
                        }
                      }
                    } else {
                      hls.trigger(events["a" /* default */].ERROR, {
                        type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                        details: errors["a" /* ErrorDetails */].MANIFEST_PARSING_ERROR,
                        fatal: true,
                        url: url,
                        reason: 'invalid targetduration',
                        networkDetails: networkDetails
                      });
                    }
                  } else {
                    var levels = this.parseMasterPlaylist(string, url);
                    // multi level playlist, parse level info
                    if (levels.length) {
                      var audioTracks = this.parseMasterPlaylistMedia(string, url, 'AUDIO', levels[0].audioCodec);
                      var subtitles = this.parseMasterPlaylistMedia(string, url, 'SUBTITLES');
                      if (audioTracks.length) {
                        // check if we have found an audio track embedded in main playlist (audio track without URI attribute)
                        var embeddedAudioFound = false;
                        audioTracks.forEach(function (audioTrack) {
                          if (!audioTrack.url) {
                            embeddedAudioFound = true;
                          }
                        });
                        // if no embedded audio track defined, but audio codec signaled in quality level, we need to signal this main audio track
                        // this could happen with playlists with alt audio rendition in which quality levels (main) contains both audio+video. but with mixed audio track not signaled
                        if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
                          logger["b" /* logger */].log('audio codec signaled in quality level, but no embedded audio track signaled, create one');
                          audioTracks.unshift({type: 'main', name: 'main'});
                        }
                      }
                      hls.trigger(events["a" /* default */].MANIFEST_LOADED, {
                        levels: levels,
                        audioTracks: audioTracks,
                        subtitles: subtitles,
                        url: url,
                        stats: stats,
                        networkDetails: networkDetails
                      });
                    } else {
                      hls.trigger(events["a" /* default */].ERROR, {
                        type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                        details: errors["a" /* ErrorDetails */].MANIFEST_PARSING_ERROR,
                        fatal: true,
                        url: url,
                        reason: 'no level found in manifest',
                        networkDetails: networkDetails
                      });
                    }
                  }
                } else {
                  hls.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                    details: errors["a" /* ErrorDetails */].MANIFEST_PARSING_ERROR,
                    fatal: true,
                    url: url,
                    reason: 'no EXTM3U delimiter',
                    networkDetails: networkDetails
                  });
                }
              };

              PlaylistLoader.prototype.loaderror = function loaderror(response, context) {
                var networkDetails = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                var details,
                  fatal,
                  loader = context.loader;
                switch (context.type) {
                  case 'manifest':
                    details = errors["a" /* ErrorDetails */].MANIFEST_LOAD_ERROR;
                    fatal = true;
                    break;
                  case 'level':
                    details = errors["a" /* ErrorDetails */].LEVEL_LOAD_ERROR;
                    fatal = false;
                    break;
                  case 'audioTrack':
                    details = errors["a" /* ErrorDetails */].AUDIO_TRACK_LOAD_ERROR;
                    fatal = false;
                    break;
                }
                if (loader) {
                  loader.abort();
                  this.loaders[context.type] = undefined;
                }
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                  details: details,
                  fatal: fatal,
                  url: loader.url,
                  loader: loader,
                  response: response,
                  context: context,
                  networkDetails: networkDetails
                });
              };

              PlaylistLoader.prototype.loadtimeout = function loadtimeout(stats, context) {
                var networkDetails = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                var details,
                  fatal,
                  loader = context.loader;
                switch (context.type) {
                  case 'manifest':
                    details = errors["a" /* ErrorDetails */].MANIFEST_LOAD_TIMEOUT;
                    fatal = true;
                    break;
                  case 'level':
                    details = errors["a" /* ErrorDetails */].LEVEL_LOAD_TIMEOUT;
                    fatal = false;
                    break;
                  case 'audioTrack':
                    details = errors["a" /* ErrorDetails */].AUDIO_TRACK_LOAD_TIMEOUT;
                    fatal = false;
                    break;
                }
                if (loader) {
                  loader.abort();
                  this.loaders[context.type] = undefined;
                }
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                  details: details,
                  fatal: fatal,
                  url: loader.url,
                  loader: loader,
                  context: context,
                  networkDetails: networkDetails
                });
              };

              return PlaylistLoader;
            }(event_handler);

            /* harmony default export */
            var playlist_loader = (playlist_loader_PlaylistLoader);

// CONCATENATED MODULE: ./src/loader/fragment-loader.js
            function fragment_loader__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function fragment_loader__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function fragment_loader__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Fragment Loader
*/


            var fragment_loader_FragmentLoader = function (_EventHandler) {
              fragment_loader__inherits(FragmentLoader, _EventHandler);

              function FragmentLoader(hls) {
                fragment_loader__classCallCheck(this, FragmentLoader);

                var _this = fragment_loader__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].FRAG_LOADING));

                _this.loaders = {};
                return _this;
              }

              FragmentLoader.prototype.destroy = function destroy() {
                var loaders = this.loaders;
                for (var loaderName in loaders) {
                  var loader = loaders[loaderName];
                  if (loader) {
                    loader.destroy();
                  }
                }
                this.loaders = {};
                event_handler.prototype.destroy.call(this);
              };

              FragmentLoader.prototype.onFragLoading = function onFragLoading(data) {
                var frag = data.frag,
                  type = frag.type,
                  loader = this.loaders[type],
                  config = this.hls.config;

                frag.loaded = 0;
                if (loader) {
                  logger["b" /* logger */].warn('abort previous fragment loader for type:' + type);
                  loader.abort();
                }
                loader = this.loaders[type] = frag.loader = typeof config.fLoader !== 'undefined' ? new config.fLoader(config) : new config.loader(config);

                var loaderContext = void 0,
                  loaderConfig = void 0,
                  loaderCallbacks = void 0;
                loaderContext = {url: frag.url, frag: frag, responseType: 'arraybuffer', progressData: false};
                var start = frag.byteRangeStartOffset,
                  end = frag.byteRangeEndOffset;
                if (!isNaN(start) && !isNaN(end)) {
                  loaderContext.rangeStart = start;
                  loaderContext.rangeEnd = end;
                }
                loaderConfig = {
                  timeout: config.fragLoadingTimeOut,
                  maxRetry: 0,
                  retryDelay: 0,
                  maxRetryDelay: config.fragLoadingMaxRetryTimeout
                };
                loaderCallbacks = {
                  onSuccess: this.loadsuccess.bind(this),
                  onError: this.loaderror.bind(this),
                  onTimeout: this.loadtimeout.bind(this),
                  onProgress: this.loadprogress.bind(this)
                };
                loader.load(loaderContext, loaderConfig, loaderCallbacks);
              };

              FragmentLoader.prototype.loadsuccess = function loadsuccess(response, stats, context) {
                var networkDetails = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                var payload = response.data,
                  frag = context.frag;
                // detach fragment loader on load success
                frag.loader = undefined;
                this.loaders[frag.type] = undefined;
                this.hls.trigger(events["a" /* default */].FRAG_LOADED, {
                  payload: payload,
                  frag: frag,
                  stats: stats,
                  networkDetails: networkDetails
                });
              };

              FragmentLoader.prototype.loaderror = function loaderror(response, context) {
                var networkDetails = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                var loader = context.loader;
                if (loader) {
                  loader.abort();
                }
                this.loaders[context.type] = undefined;
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                  details: errors["a" /* ErrorDetails */].FRAG_LOAD_ERROR,
                  fatal: false,
                  frag: context.frag,
                  response: response,
                  networkDetails: networkDetails
                });
              };

              FragmentLoader.prototype.loadtimeout = function loadtimeout(stats, context) {
                var networkDetails = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                var loader = context.loader;
                if (loader) {
                  loader.abort();
                }
                this.loaders[context.type] = undefined;
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                  details: errors["a" /* ErrorDetails */].FRAG_LOAD_TIMEOUT,
                  fatal: false,
                  frag: context.frag,
                  networkDetails: networkDetails
                });
              };

              // data will be used for progressive parsing


              FragmentLoader.prototype.loadprogress = function loadprogress(stats, context, data) {
                var networkDetails = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                // jshint ignore:line
                var frag = context.frag;
                frag.loaded = stats.loaded;
                this.hls.trigger(events["a" /* default */].FRAG_LOAD_PROGRESS, {
                  frag: frag,
                  stats: stats,
                  networkDetails: networkDetails
                });
              };

              return FragmentLoader;
            }(event_handler);

            /* harmony default export */
            var fragment_loader = (fragment_loader_FragmentLoader);

// CONCATENATED MODULE: ./src/loader/key-loader.js
            function key_loader__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function key_loader__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function key_loader__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Decrypt key Loader
*/


            var key_loader_KeyLoader = function (_EventHandler) {
              key_loader__inherits(KeyLoader, _EventHandler);

              function KeyLoader(hls) {
                key_loader__classCallCheck(this, KeyLoader);

                var _this = key_loader__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].KEY_LOADING));

                _this.loaders = {};
                _this.decryptkey = null;
                _this.decrypturl = null;
                return _this;
              }

              KeyLoader.prototype.destroy = function destroy() {
                for (var loaderName in this.loaders) {
                  var loader = this.loaders[loaderName];
                  if (loader) {
                    loader.destroy();
                  }
                }
                this.loaders = {};
                event_handler.prototype.destroy.call(this);
              };

              KeyLoader.prototype.onKeyLoading = function onKeyLoading(data) {
                var frag = data.frag,
                  type = frag.type,
                  loader = this.loaders[type],
                  decryptdata = frag.decryptdata,
                  uri = decryptdata.uri;
                // if uri is different from previous one or if decrypt key not retrieved yet
                if (uri !== this.decrypturl || this.decryptkey === null) {
                  var config = this.hls.config;

                  if (loader) {
                    logger["b" /* logger */].warn('abort previous key loader for type:' + type);
                    loader.abort();
                  }
                  frag.loader = this.loaders[type] = new config.loader(config);
                  this.decrypturl = uri;
                  this.decryptkey = null;

                  var loaderContext = void 0,
                    loaderConfig = void 0,
                    loaderCallbacks = void 0;
                  loaderContext = {url: uri, frag: frag, responseType: 'arraybuffer'};
                  loaderConfig = {
                    timeout: config.fragLoadingTimeOut,
                    maxRetry: config.fragLoadingMaxRetry,
                    retryDelay: config.fragLoadingRetryDelay,
                    maxRetryDelay: config.fragLoadingMaxRetryTimeout
                  };
                  loaderCallbacks = {
                    onSuccess: this.loadsuccess.bind(this),
                    onError: this.loaderror.bind(this),
                    onTimeout: this.loadtimeout.bind(this)
                  };
                  frag.loader.load(loaderContext, loaderConfig, loaderCallbacks);
                } else if (this.decryptkey) {
                  // we already loaded this key, return it
                  decryptdata.key = this.decryptkey;
                  this.hls.trigger(events["a" /* default */].KEY_LOADED, {frag: frag});
                }
              };

              KeyLoader.prototype.loadsuccess = function loadsuccess(response, stats, context) {
                var frag = context.frag;
                this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data);
                // detach fragment loader on load success
                frag.loader = undefined;
                this.loaders[frag.type] = undefined;
                this.hls.trigger(events["a" /* default */].KEY_LOADED, {frag: frag});
              };

              KeyLoader.prototype.loaderror = function loaderror(response, context) {
                var frag = context.frag,
                  loader = frag.loader;
                if (loader) {
                  loader.abort();
                }
                this.loaders[context.type] = undefined;
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                  details: errors["a" /* ErrorDetails */].KEY_LOAD_ERROR,
                  fatal: false,
                  frag: frag,
                  response: response
                });
              };

              KeyLoader.prototype.loadtimeout = function loadtimeout(stats, context) {
                var frag = context.frag,
                  loader = frag.loader;
                if (loader) {
                  loader.abort();
                }
                this.loaders[context.type] = undefined;
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].NETWORK_ERROR,
                  details: errors["a" /* ErrorDetails */].KEY_LOAD_TIMEOUT,
                  fatal: false,
                  frag: frag
                });
              };

              return KeyLoader;
            }(event_handler);

            /* harmony default export */
            var key_loader = (key_loader_KeyLoader);
// CONCATENATED MODULE: ./src/utils/binary-search.js
            var BinarySearch = {
              /**
               * Searches for an item in an array which matches a certain condition.
               * This requires the condition to only match one item in the array,
               * and for the array to be ordered.
               *
               * @param {Array} list The array to search.
               * @param {Function} comparisonFunction
               *      Called and provided a candidate item as the first argument.
               *      Should return:
               *          > -1 if the item should be located at a lower index than the provided item.
               *          > 1 if the item should be located at a higher index than the provided item.
               *          > 0 if the item is the item you're looking for.
               *
               * @return {*} The object if it is found or null otherwise.
               */
              search: function search(list, comparisonFunction) {
                var minIndex = 0;
                var maxIndex = list.length - 1;
                var currentIndex = null;
                var currentElement = null;

                while (minIndex <= maxIndex) {
                  currentIndex = (minIndex + maxIndex) / 2 | 0;
                  currentElement = list[currentIndex];

                  var comparisonResult = comparisonFunction(currentElement);
                  if (comparisonResult > 0) {
                    minIndex = currentIndex + 1;
                  } else if (comparisonResult < 0) {
                    maxIndex = currentIndex - 1;
                  } else {
                    return currentElement;
                  }
                }

                return null;
              }
            };

            /* harmony default export */
            var binary_search = (BinarySearch);
// CONCATENATED MODULE: ./src/helper/buffer-helper.js
            /**
             * Buffer Helper utils, providing methods dealing buffer length retrieval
             */

            var BufferHelper = {
              isBuffered: function isBuffered(media, position) {
                if (media) {
                  var buffered = media.buffered;
                  for (var i = 0; i < buffered.length; i++) {
                    if (position >= buffered.start(i) && position <= buffered.end(i)) {
                      return true;
                    }
                  }
                }
                return false;
              },

              bufferInfo: function bufferInfo(media, pos, maxHoleDuration) {
                if (media) {
                  var vbuffered = media.buffered,
                    buffered = [],
                    i;
                  for (i = 0; i < vbuffered.length; i++) {
                    buffered.push({start: vbuffered.start(i), end: vbuffered.end(i)});
                  }
                  return this.bufferedInfo(buffered, pos, maxHoleDuration);
                } else {
                  return {len: 0, start: pos, end: pos, nextStart: undefined};
                }
              },

              bufferedInfo: function bufferedInfo(buffered, pos, maxHoleDuration) {
                var buffered2 = [],

                  // bufferStart and bufferEnd are buffer boundaries around current video position
                  bufferLen,
                  bufferStart,
                  bufferEnd,
                  bufferStartNext,
                  i;
                // sort on buffer.start/smaller end (IE does not always return sorted buffered range)
                buffered.sort(function (a, b) {
                  var diff = a.start - b.start;
                  if (diff) {
                    return diff;
                  } else {
                    return b.end - a.end;
                  }
                });
                // there might be some small holes between buffer time range
                // consider that holes smaller than maxHoleDuration are irrelevant and build another
                // buffer time range representations that discards those holes
                for (i = 0; i < buffered.length; i++) {
                  var buf2len = buffered2.length;
                  if (buf2len) {
                    var buf2end = buffered2[buf2len - 1].end;
                    // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)
                    if (buffered[i].start - buf2end < maxHoleDuration) {
                      // merge overlapping time ranges
                      // update lastRange.end only if smaller than item.end
                      // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
                      // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
                      if (buffered[i].end > buf2end) {
                        buffered2[buf2len - 1].end = buffered[i].end;
                      }
                    } else {
                      // big hole
                      buffered2.push(buffered[i]);
                    }
                  } else {
                    // first value
                    buffered2.push(buffered[i]);
                  }
                }
                for (i = 0, bufferLen = 0, bufferStart = bufferEnd = pos; i < buffered2.length; i++) {
                  var start = buffered2[i].start,
                    end = buffered2[i].end;
                  //logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));
                  if (pos + maxHoleDuration >= start && pos < end) {
                    // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
                    bufferStart = start;
                    bufferEnd = end;
                    bufferLen = bufferEnd - pos;
                  } else if (pos + maxHoleDuration < start) {
                    bufferStartNext = start;
                    break;
                  }
                }
                return {len: bufferLen, start: bufferStart, end: bufferEnd, nextStart: bufferStartNext};
              }
            };

            /* harmony default export */
            var buffer_helper = (BufferHelper);
// EXTERNAL MODULE: ./src/demux/demuxer-inline.js + 12 modules
            var demuxer_inline = __webpack_require__(7);

// EXTERNAL MODULE: ./node_modules/events/events.js
            var events_events = __webpack_require__(5);
            var events_default = /*#__PURE__*/__webpack_require__.n(events_events);

// EXTERNAL MODULE: ./node_modules/webworkify-webpack/index.js
            var webworkify_webpack = __webpack_require__(9);
            var webworkify_webpack_default = /*#__PURE__*/__webpack_require__.n(webworkify_webpack);

// CONCATENATED MODULE: ./src/helper/mediasource-helper.js
            /**
             * MediaSource helper
             */

            function getMediaSource() {
              if (typeof window !== 'undefined') {
                return window.MediaSource || window.WebKitMediaSource;
              }
            }

// CONCATENATED MODULE: ./src/demux/demuxer.js
            function demuxer__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }


            var demuxer_MediaSource = getMediaSource();

            var demuxer_Demuxer = function () {
              function Demuxer(hls, id) {
                demuxer__classCallCheck(this, Demuxer);

                this.hls = hls;
                this.id = id;
                // observer setup
                var observer = this.observer = new events_default.a();
                var config = hls.config;
                observer.trigger = function trigger(event) {
                  for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    data[_key - 1] = arguments[_key];
                  }

                  observer.emit.apply(observer, [event, event].concat(data));
                };

                observer.off = function off(event) {
                  for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    data[_key2 - 1] = arguments[_key2];
                  }

                  observer.removeListener.apply(observer, [event].concat(data));
                };

                var forwardMessage = function (ev, data) {
                  data = data || {};
                  data.frag = this.frag;
                  data.id = this.id;
                  hls.trigger(ev, data);
                }.bind(this);

                // forward events to main thread
                observer.on(events["a" /* default */].FRAG_DECRYPTED, forwardMessage);
                observer.on(events["a" /* default */].FRAG_PARSING_INIT_SEGMENT, forwardMessage);
                observer.on(events["a" /* default */].FRAG_PARSING_DATA, forwardMessage);
                observer.on(events["a" /* default */].FRAG_PARSED, forwardMessage);
                observer.on(events["a" /* default */].ERROR, forwardMessage);
                observer.on(events["a" /* default */].FRAG_PARSING_METADATA, forwardMessage);
                observer.on(events["a" /* default */].FRAG_PARSING_USERDATA, forwardMessage);
                observer.on(events["a" /* default */].INIT_PTS_FOUND, forwardMessage);

                var typeSupported = {
                  mp4: demuxer_MediaSource.isTypeSupported('video/mp4'),
                  mpeg: demuxer_MediaSource.isTypeSupported('audio/mpeg'),
                  mp3: demuxer_MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')
                };
                // navigator.vendor is not always available in Web Worker
                // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator
                var vendor = navigator.vendor;
                if (config.enableWorker && typeof Worker !== 'undefined') {
                  logger["b" /* logger */].log('demuxing in webworker');
                  var w = void 0;
                  try {
                    w = this.w = webworkify_webpack_default()(/*require.resolve*/(10));
                    this.onwmsg = this.onWorkerMessage.bind(this);
                    w.addEventListener('message', this.onwmsg);
                    w.onerror = function (event) {
                      hls.trigger(events["a" /* default */].ERROR, {
                        type: errors["b" /* ErrorTypes */].OTHER_ERROR,
                        details: errors["a" /* ErrorDetails */].INTERNAL_EXCEPTION,
                        fatal: true,
                        event: 'demuxerWorker',
                        err: {message: event.message + ' (' + event.filename + ':' + event.lineno + ')'}
                      });
                    };
                    w.postMessage({
                      cmd: 'init',
                      typeSupported: typeSupported,
                      vendor: vendor,
                      id: id,
                      config: JSON.stringify(config)
                    });
                  } catch (err) {
                    logger["b" /* logger */].error('error while initializing DemuxerWorker, fallback on DemuxerInline');
                    if (w) {
                      // revoke the Object URL that was used to create demuxer worker, so as not to leak it
                      URL.revokeObjectURL(w.objectURL);
                    }
                    this.demuxer = new demuxer_inline["a" /* default */](observer, typeSupported, config, vendor);
                    this.w = undefined;
                  }
                } else {
                  this.demuxer = new demuxer_inline["a" /* default */](observer, typeSupported, config, vendor);
                }
              }

              Demuxer.prototype.destroy = function destroy() {
                var w = this.w;
                if (w) {
                  w.removeEventListener('message', this.onwmsg);
                  w.terminate();
                  this.w = null;
                } else {
                  var demuxer = this.demuxer;
                  if (demuxer) {
                    demuxer.destroy();
                    this.demuxer = null;
                  }
                }
                var observer = this.observer;
                if (observer) {
                  observer.removeAllListeners();
                  this.observer = null;
                }
              };

              Demuxer.prototype.push = function push(data, initSegment, audioCodec, videoCodec, frag, duration, accurateTimeOffset, defaultInitPTS) {
                var w = this.w;
                var timeOffset = !isNaN(frag.startDTS) ? frag.startDTS : frag.start;
                var decryptdata = frag.decryptdata;
                var lastFrag = this.frag;
                var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
                var trackSwitch = !(lastFrag && frag.level === lastFrag.level);
                var nextSN = lastFrag && frag.sn === lastFrag.sn + 1;
                var contiguous = !trackSwitch && nextSN;
                if (discontinuity) {
                  logger["b" /* logger */].log(this.id + ':discontinuity detected');
                }
                if (trackSwitch) {
                  logger["b" /* logger */].log(this.id + ':switch detected');
                }
                this.frag = frag;
                if (w) {
                  // post fragment payload as transferable objects for ArrayBuffer (no copy)
                  w.postMessage({
                    cmd: 'demux',
                    data: data,
                    decryptdata: decryptdata,
                    initSegment: initSegment,
                    audioCodec: audioCodec,
                    videoCodec: videoCodec,
                    timeOffset: timeOffset,
                    discontinuity: discontinuity,
                    trackSwitch: trackSwitch,
                    contiguous: contiguous,
                    duration: duration,
                    accurateTimeOffset: accurateTimeOffset,
                    defaultInitPTS: defaultInitPTS
                  }, data instanceof ArrayBuffer ? [data] : []);
                } else {
                  var demuxer = this.demuxer;
                  if (demuxer) {
                    demuxer.push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
                  }
                }
              };

              Demuxer.prototype.onWorkerMessage = function onWorkerMessage(ev) {
                var data = ev.data,
                  hls = this.hls;
                //console.log('onWorkerMessage:' + data.event);
                switch (data.event) {
                  case 'init':
                    // revoke the Object URL that was used to create demuxer worker, so as not to leak it
                    URL.revokeObjectURL(this.w.objectURL);
                    break;
                  // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects
                  case events["a" /* default */].FRAG_PARSING_DATA:
                    data.data.data1 = new Uint8Array(data.data1);
                    if (data.data2) {
                      data.data.data2 = new Uint8Array(data.data2);
                    }
                  /* falls through */
                  default:
                    data.data = data.data || {};
                    data.data.frag = this.frag;
                    data.data.id = this.id;
                    hls.trigger(data.event, data.data);
                    break;
                }
              };

              return Demuxer;
            }();

            /* harmony default export */
            var demux_demuxer = (demuxer_Demuxer);

// CONCATENATED MODULE: ./src/helper/level-helper.js
            /**
             * Level Helper class, providing methods dealing with playlist sliding and drift
             */



            function updatePTS(fragments, fromIdx, toIdx) {
              var fragFrom = fragments[fromIdx],
                fragTo = fragments[toIdx],
                fragToPTS = fragTo.startPTS;
              // if we know startPTS[toIdx]
              if (!isNaN(fragToPTS)) {
                // update fragment duration.
                // it helps to fix drifts between playlist reported duration and fragment real duration
                if (toIdx > fromIdx) {
                  fragFrom.duration = fragToPTS - fragFrom.start;
                  if (fragFrom.duration < 0) {
                    logger["b" /* logger */].warn('negative duration computed for frag ' + fragFrom.sn + ',level ' + fragFrom.level + ', there should be some duration drift between playlist and fragment!');
                  }
                } else {
                  fragTo.duration = fragFrom.start - fragToPTS;
                  if (fragTo.duration < 0) {
                    logger["b" /* logger */].warn('negative duration computed for frag ' + fragTo.sn + ',level ' + fragTo.level + ', there should be some duration drift between playlist and fragment!');
                  }
                }
              } else {
                // we dont know startPTS[toIdx]
                if (toIdx > fromIdx) {
                  fragTo.start = fragFrom.start + fragFrom.duration;
                } else {
                  fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
                }
              }
            }

            function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
              // update frag PTS/DTS
              var maxStartPTS = startPTS;
              if (!isNaN(frag.startPTS)) {
                // delta PTS between audio and video
                var deltaPTS = Math.abs(frag.startPTS - startPTS);
                if (isNaN(frag.deltaPTS)) {
                  frag.deltaPTS = deltaPTS;
                } else {
                  frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
                }
                maxStartPTS = Math.max(startPTS, frag.startPTS);
                startPTS = Math.min(startPTS, frag.startPTS);
                endPTS = Math.max(endPTS, frag.endPTS);
                startDTS = Math.min(startDTS, frag.startDTS);
                endDTS = Math.max(endDTS, frag.endDTS);
              }

              var drift = startPTS - frag.start;
              frag.start = frag.startPTS = startPTS;
              frag.maxStartPTS = maxStartPTS;
              frag.endPTS = endPTS;
              frag.startDTS = startDTS;
              frag.endDTS = endDTS;
              frag.duration = endPTS - startPTS;

              var sn = frag.sn;
              // exit if sn out of range
              if (!details || sn < details.startSN || sn > details.endSN) {
                return 0;
              }
              var fragIdx, fragments, i;
              fragIdx = sn - details.startSN;
              fragments = details.fragments;
              // update frag reference in fragments array
              // rationale is that fragments array might not contain this frag object.
              // this will happpen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()
              // if we don't update frag, we won't be able to propagate PTS info on the playlist
              // resulting in invalid sliding computation
              fragments[fragIdx] = frag;
              // adjust fragment PTS/duration from seqnum-1 to frag 0
              for (i = fragIdx; i > 0; i--) {
                updatePTS(fragments, i, i - 1);
              }

              // adjust fragment PTS/duration from seqnum to last frag
              for (i = fragIdx; i < fragments.length - 1; i++) {
                updatePTS(fragments, i, i + 1);
              }
              details.PTSKnown = true;
              //logger.log(`                                            frag start/end:${startPTS.toFixed(3)}/${endPTS.toFixed(3)}`);

              return drift;
            }

            function mergeDetails(oldDetails, newDetails) {
              var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN,
                end = Math.min(oldDetails.endSN, newDetails.endSN) - newDetails.startSN,
                delta = newDetails.startSN - oldDetails.startSN,
                oldfragments = oldDetails.fragments,
                newfragments = newDetails.fragments,
                ccOffset = 0,
                PTSFrag;

              // check if old/new playlists have fragments in common
              if (end < start) {
                newDetails.PTSKnown = false;
                return;
              }
              // loop through overlapping SN and update startPTS , cc, and duration if any found
              for (var i = start; i <= end; i++) {
                var oldFrag = oldfragments[delta + i],
                  newFrag = newfragments[i];
                if (newFrag && oldFrag) {
                  ccOffset = oldFrag.cc - newFrag.cc;
                  if (!isNaN(oldFrag.startPTS)) {
                    newFrag.start = newFrag.startPTS = oldFrag.startPTS;
                    newFrag.endPTS = oldFrag.endPTS;
                    newFrag.duration = oldFrag.duration;
                    newFrag.backtracked = oldFrag.backtracked;
                    newFrag.dropped = oldFrag.dropped;
                    PTSFrag = newFrag;
                  }
                }
              }

              if (ccOffset) {
                logger["b" /* logger */].log('discontinuity sliding from playlist, take drift into account');
                for (i = 0; i < newfragments.length; i++) {
                  newfragments[i].cc += ccOffset;
                }
              }

              // if at least one fragment contains PTS info, recompute PTS information for all fragments
              if (PTSFrag) {
                updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
              } else {
                // ensure that delta is within oldfragments range
                // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
                // in that case we also need to adjust start offset of all fragments
                if (delta >= 0 && delta < oldfragments.length) {
                  // adjust start by sliding offset
                  var sliding = oldfragments[delta].start;
                  for (i = 0; i < newfragments.length; i++) {
                    newfragments[i].start += sliding;
                  }
                }
              }
              // if we are here, it means we have fragments overlapping between
              // old and new level. reliable PTS info is thus relying on old level
              newDetails.PTSKnown = oldDetails.PTSKnown;
            }

// CONCATENATED MODULE: ./src/utils/timeRanges.js
            /**
             *  TimeRanges to string helper
             */

            var TimeRanges = {
              toString: function toString(r) {
                var log = '',
                  len = r.length;
                for (var i = 0; i < len; i++) {
                  log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';
                }
                return log;
              }
            };

            /* harmony default export */
            var timeRanges = (TimeRanges);

// CONCATENATED MODULE: ./src/utils/discontinuities.js


            function findFirstFragWithCC(fragments, cc) {
              var firstFrag = null;

              for (var i = 0; i < fragments.length; i += 1) {
                var currentFrag = fragments[i];
                if (currentFrag && currentFrag.cc === cc) {
                  firstFrag = currentFrag;
                  break;
                }
              }

              return firstFrag;
            }

            function findFragWithCC(fragments, CC) {
              return binary_search.search(fragments, function (candidate) {
                if (candidate.cc < CC) {
                  return 1;
                } else if (candidate.cc > CC) {
                  return -1;
                } else {
                  return 0;
                }
              });
            }

            function shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {
              var shouldAlign = false;
              if (lastLevel && lastLevel.details && details) {
                if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {
                  shouldAlign = true;
                }
              }
              return shouldAlign;
            }

// Find the first frag in the previous level which matches the CC of the first frag of the new level
            function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
              var prevFrags = prevDetails.fragments;
              var curFrags = curDetails.fragments;

              if (!curFrags.length || !prevFrags.length) {
                logger["b" /* logger */].log('No fragments to align');
                return;
              }

              var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);

              if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
                logger["b" /* logger */].log('No frag in previous level to align on');
                return;
              }

              return prevStartFrag;
            }

            function adjustPts(sliding, details) {
              details.fragments.forEach(function (frag) {
                if (frag) {
                  var start = frag.start + sliding;
                  frag.start = frag.startPTS = start;
                  frag.endPTS = start + frag.duration;
                }
              });
              details.PTSKnown = true;
            }

// If a change in CC is detected, the PTS can no longer be relied upon
// Attempt to align the level by using the last level - find the last frag matching the current CC and use it's PTS
// as a reference
            function alignDiscontinuities(lastFrag, lastLevel, details) {
              if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {
                var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);
                if (referenceFrag) {
                  logger["b" /* logger */].log('Adjusting PTS using last level due to CC increase within current level');
                  adjustPts(referenceFrag.start, details);
                }
              }
              // try to align using programDateTime attribute (if available)
              if (details.PTSKnown === false && lastLevel && lastLevel.details) {
                // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM
                // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM
                // then we can deduce that playlist B sliding is 1000+8 = 1008s
                var lastPDT = lastLevel.details.programDateTime;
                var newPDT = details.programDateTime;
                // date diff is in ms. frag.start is in seconds
                var sliding = (newPDT - lastPDT) / 1000 + lastLevel.details.fragments[0].start;
                if (!isNaN(sliding)) {
                  logger["b" /* logger */].log('adjusting PTS using programDateTime delta, sliding:' + sliding.toFixed(3));
                  adjustPts(sliding, details);
                }
              }
            }

// CONCATENATED MODULE: ./src/controller/stream-controller.js
            var stream_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function stream_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function stream_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function stream_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Stream Controller
*/


            var State = {
              STOPPED: 'STOPPED',
              IDLE: 'IDLE',
              KEY_LOADING: 'KEY_LOADING',
              FRAG_LOADING: 'FRAG_LOADING',
              FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
              WAITING_LEVEL: 'WAITING_LEVEL',
              PARSING: 'PARSING',
              PARSED: 'PARSED',
              BUFFER_FLUSHING: 'BUFFER_FLUSHING',
              ENDED: 'ENDED',
              ERROR: 'ERROR'
            };

            var stream_controller_StreamController = function (_EventHandler) {
              stream_controller__inherits(StreamController, _EventHandler);

              function StreamController(hls) {
                stream_controller__classCallCheck(this, StreamController);

                var _this = stream_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHED, events["a" /* default */].MEDIA_DETACHING, events["a" /* default */].MANIFEST_LOADING, events["a" /* default */].MANIFEST_PARSED, events["a" /* default */].LEVEL_LOADED, events["a" /* default */].KEY_LOADED, events["a" /* default */].FRAG_LOADED, events["a" /* default */].FRAG_LOAD_EMERGENCY_ABORTED, events["a" /* default */].FRAG_PARSING_INIT_SEGMENT, events["a" /* default */].FRAG_PARSING_DATA, events["a" /* default */].FRAG_PARSED, events["a" /* default */].ERROR, events["a" /* default */].AUDIO_TRACK_SWITCHING, events["a" /* default */].AUDIO_TRACK_SWITCHED, events["a" /* default */].BUFFER_CREATED, events["a" /* default */].BUFFER_APPENDED, events["a" /* default */].BUFFER_FLUSHED));

                _this.config = hls.config;
                _this.audioCodecSwap = false;
                _this.ticks = 0;
                _this._state = State.STOPPED;
                _this.ontick = _this.tick.bind(_this);
                return _this;
              }

              StreamController.prototype.destroy = function destroy() {
                this.stopLoad();
                if (this.timer) {
                  clearInterval(this.timer);
                  this.timer = null;
                }
                event_handler.prototype.destroy.call(this);
                this.state = State.STOPPED;
              };

              StreamController.prototype.startLoad = function startLoad(startPosition) {
                if (this.levels) {
                  var lastCurrentTime = this.lastCurrentTime,
                    hls = this.hls;
                  this.stopLoad();
                  if (!this.timer) {
                    this.timer = setInterval(this.ontick, 100);
                  }
                  this.level = -1;
                  this.fragLoadError = 0;
                  if (!this.startFragRequested) {
                    // determine load level
                    var startLevel = hls.startLevel;
                    if (startLevel === -1) {
                      // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
                      startLevel = 0;
                      this.bitrateTest = true;
                    }
                    // set new level to playlist loader : this will trigger start level load
                    // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded
                    this.level = hls.nextLoadLevel = startLevel;
                    this.loadedmetadata = false;
                  }
                  // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime
                  if (lastCurrentTime > 0 && startPosition === -1) {
                    logger["b" /* logger */].log('override startPosition with lastCurrentTime @' + lastCurrentTime.toFixed(3));
                    startPosition = lastCurrentTime;
                  }
                  this.state = State.IDLE;
                  this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
                  this.tick();
                } else {
                  this.forceStartLoad = true;
                  this.state = State.STOPPED;
                }
              };

              StreamController.prototype.stopLoad = function stopLoad() {
                var frag = this.fragCurrent;
                if (frag) {
                  if (frag.loader) {
                    frag.loader.abort();
                  }
                  this.fragCurrent = null;
                }
                this.fragPrevious = null;
                if (this.demuxer) {
                  this.demuxer.destroy();
                  this.demuxer = null;
                }
                this.state = State.STOPPED;
                this.forceStartLoad = false;
              };

              StreamController.prototype.tick = function tick() {
                this.ticks++;
                if (this.ticks === 1) {
                  this.doTick();
                  if (this.ticks > 1) {
                    setTimeout(this.tick, 1);
                  }
                  this.ticks = 0;
                }
              };

              StreamController.prototype.doTick = function doTick() {
                switch (this.state) {
                  case State.ERROR:
                    //don't do anything in error state to avoid breaking further ...
                    break;
                  case State.BUFFER_FLUSHING:
                    // in buffer flushing state, reset fragLoadError counter
                    this.fragLoadError = 0;
                    break;
                  case State.IDLE:
                    this._doTickIdle();
                    break;
                  case State.WAITING_LEVEL:
                    var level = this.levels[this.level];
                    // check if playlist is already loaded
                    if (level && level.details) {
                      this.state = State.IDLE;
                    }
                    break;
                  case State.FRAG_LOADING_WAITING_RETRY:
                    var now = performance.now();
                    var retryDate = this.retryDate;
                    // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
                    if (!retryDate || now >= retryDate || this.media && this.media.seeking) {
                      logger["b" /* logger */].log('mediaController: retryDate reached, switch back to IDLE state');
                      this.state = State.IDLE;
                    }
                    break;
                  case State.ERROR:
                  case State.STOPPED:
                  case State.FRAG_LOADING:
                  case State.PARSING:
                  case State.PARSED:
                  case State.ENDED:
                    break;
                  default:
                    break;
                }
                // check buffer
                this._checkBuffer();
                // check/update current fragment
                this._checkFragmentChanged();
              };

              // Ironically the "idle" state is the on we do the most logic in it seems ....
              // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently
              //       played segment, or on pause/play/seek instead of naively checking every 100ms?


              StreamController.prototype._doTickIdle = function _doTickIdle() {
                var hls = this.hls,
                  config = hls.config,
                  media = this.media;

                // if start level not parsed yet OR
                // if video not attached AND start fragment already requested OR start frag prefetch disable
                // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment
                if (this.levelLastLoaded === undefined || !media && (this.startFragRequested || !config.startFragPrefetch)) {
                  return;
                }

                // if we have not yet loaded any fragment, start loading from start position
                var pos = void 0;
                if (this.loadedmetadata) {
                  pos = media.currentTime;
                } else {
                  pos = this.nextLoadPosition;
                }
                // determine next load level
                var level = hls.nextLoadLevel,
                  levelInfo = this.levels[level];

                if (!levelInfo) {
                  return;
                }

                var levelBitrate = levelInfo.bitrate,
                  maxBufLen = void 0;

                // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s
                if (levelBitrate) {
                  maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
                } else {
                  maxBufLen = config.maxBufferLength;
                }
                maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength);

                // determine next candidate fragment to be loaded, based on current position and end of buffer position
                // ensure up to `config.maxMaxBufferLength` of buffer upfront

                var bufferInfo = buffer_helper.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, config.maxBufferHole),
                  bufferLen = bufferInfo.len;
                // Stay idle if we are still with buffer margins
                if (bufferLen >= maxBufLen) {
                  return;
                }

                // if buffer length is less than maxBufLen try to load a new fragment ...
                logger["b" /* logger */].trace('buffer length of ' + bufferLen.toFixed(3) + ' is below max of ' + maxBufLen.toFixed(3) + '. checking for more payload ...');

                // set next load level : this will trigger a playlist load if needed
                this.level = hls.nextLoadLevel = level;

                var levelDetails = levelInfo.details;
                // if level info not retrieved yet, switch state and wait for level retrieval
                // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
                // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)
                if (typeof levelDetails === 'undefined' || levelDetails.live && this.levelLastLoaded !== level) {
                  this.state = State.WAITING_LEVEL;
                  return;
                }

                // we just got done loading the final fragment and there is no other buffered range after ...
                // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between
                // so we should not switch to ENDED in that case, to be able to buffer them
                // dont switch to ENDED if we need to backtrack last fragment
                var fragPrevious = this.fragPrevious;
                if (!levelDetails.live && fragPrevious && !fragPrevious.backtracked && fragPrevious.sn === levelDetails.endSN && !bufferInfo.nextStart) {
                  // fragPrevious is last fragment. retrieve level duration using last frag start offset + duration
                  // real duration might be lower than initial duration if there are drifts between real frag duration and playlist signaling
                  var duration = Math.min(media.duration, fragPrevious.start + fragPrevious.duration);
                  // if everything (almost) til the end is buffered, let's signal eos
                  // we don't compare exactly media.duration === bufferInfo.end as there could be some subtle media duration difference (audio/video offsets...)
                  // tolerate up to one frag duration to cope with these cases.
                  // also cope with almost zero last frag duration (max last frag duration with 200ms) refer to https://github.com/video-dev/hls.js/pull/657
                  if (duration - Math.max(bufferInfo.end, fragPrevious.start) <= Math.max(0.2, fragPrevious.duration)) {
                    // Finalize the media stream
                    var data = {};
                    if (this.altAudio) {
                      data.type = 'video';
                    }
                    this.hls.trigger(events["a" /* default */].BUFFER_EOS, data);
                    this.state = State.ENDED;
                    return;
                  }
                }

                // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)
                this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);
              };

              StreamController.prototype._fetchPayloadOrEos = function _fetchPayloadOrEos(pos, bufferInfo, levelDetails) {
                var fragPrevious = this.fragPrevious,
                  level = this.level,
                  fragments = levelDetails.fragments,
                  fragLen = fragments.length;

                // empty playlist
                if (fragLen === 0) {
                  return;
                }

                // find fragment index, contiguous with end of buffer position
                var start = fragments[0].start,
                  end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,
                  bufferEnd = bufferInfo.end,
                  frag = void 0;

                if (levelDetails.initSegment && !levelDetails.initSegment.data) {
                  frag = levelDetails.initSegment;
                } else {
                  // in case of live playlist we need to ensure that requested position is not located before playlist start
                  if (levelDetails.live) {
                    var initialLiveManifestSize = this.config.initialLiveManifestSize;
                    if (fragLen < initialLiveManifestSize) {
                      logger["b" /* logger */].warn('Can not start playback of a level, reason: not enough fragments ' + fragLen + ' < ' + initialLiveManifestSize);
                      return;
                    }

                    frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen);
                    // if it explicitely returns null don't load any fragment and exit function now
                    if (frag === null) {
                      return;
                    }
                  } else {
                    // VoD playlist: if bufferEnd before start of playlist, load first fragment
                    if (bufferEnd < start) {
                      frag = fragments[0];
                    }
                  }
                }
                if (!frag) {
                  frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);
                }
                if (frag) {
                  this._loadFragmentOrKey(frag, level, levelDetails, pos, bufferEnd);
                }
                return;
              };

              StreamController.prototype._ensureFragmentAtLivePoint = function _ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen) {
                var config = this.hls.config,
                  media = this.media;

                var frag = void 0;

                // check if requested position is within seekable boundaries :
                //logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);
                var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;

                if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {
                  var liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);
                  logger["b" /* logger */].log('buffer end: ' + bufferEnd.toFixed(3) + ' is located too far from the end of live sliding playlist, reset currentTime to : ' + liveSyncPosition.toFixed(3));
                  bufferEnd = liveSyncPosition;
                  if (media && media.readyState && media.duration > liveSyncPosition) {
                    media.currentTime = liveSyncPosition;
                  }
                  this.nextLoadPosition = liveSyncPosition;
                }

                // if end of buffer greater than live edge, don't load any fragment
                // this could happen if live playlist intermittently slides in the past.
                // level 1 loaded [182580161,182580167]
                // level 1 loaded [182580162,182580169]
                // Loading 182580168 of [182580162 ,182580169],level 1 ..
                // Loading 182580169 of [182580162 ,182580169],level 1 ..
                // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168
                // level 1 loaded [182580164,182580171]
                //
                // don't return null in case media not loaded yet (readystate === 0)
                if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {
                  return null;
                }

                if (this.startFragRequested && !levelDetails.PTSKnown) {
                  /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...
         try to load frag matching with next SN.
         even if SN are not synchronized between playlists, loading this frag will help us
         compute playlist sliding and find the right one after in case it was not the right consecutive one */
                  if (fragPrevious) {
                    var targetSN = fragPrevious.sn + 1;
                    if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
                      var fragNext = fragments[targetSN - levelDetails.startSN];
                      if (fragPrevious.cc === fragNext.cc) {
                        frag = fragNext;
                        logger["b" /* logger */].log('live playlist, switching playlist, load frag with next SN: ' + frag.sn);
                      }
                    }
                    // next frag SN not available (or not with same continuity counter)
                    // look for a frag sharing the same CC
                    if (!frag) {
                      frag = binary_search.search(fragments, function (frag) {
                        return fragPrevious.cc - frag.cc;
                      });
                      if (frag) {
                        logger["b" /* logger */].log('live playlist, switching playlist, load frag with same CC: ' + frag.sn);
                      }
                    }
                  }
                  if (!frag) {
                    /* we have no idea about which fragment should be loaded.
           so let's load mid fragment. it will help computing playlist sliding and find the right one
        */
                    frag = fragments[Math.min(fragLen - 1, Math.round(fragLen / 2))];
                    logger["b" /* logger */].log('live playlist, switching playlist, unknown, load middle frag : ' + frag.sn);
                  }
                }
                return frag;
              };

              StreamController.prototype._findFragment = function _findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails) {
                var config = this.hls.config;
                var frag = void 0;
                var foundFrag = void 0;
                var maxFragLookUpTolerance = config.maxFragLookUpTolerance;
                var fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : undefined;
                var fragmentWithinToleranceTest = function fragmentWithinToleranceTest(candidate) {
                  // offset should be within fragment boundary - config.maxFragLookUpTolerance
                  // this is to cope with situations like
                  // bufferEnd = 9.991
                  // frag[Ø] : [0,10]
                  // frag[1] : [10,20]
                  // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
                  //              frag start               frag start+duration
                  //                  |-----------------------------|
                  //              <--->                         <--->
                  //  ...--------><-----------------------------><---------....
                  // previous frag         matching fragment         next frag
                  //  return -1             return 0                 return 1
                  //logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
                  // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
                  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));
                  if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
                    return 1;
                  } // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
                  else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
                    return -1;
                  }
                  return 0;
                };

                if (bufferEnd < end) {
                  if (bufferEnd > end - maxFragLookUpTolerance) {
                    maxFragLookUpTolerance = 0;
                  }
                  // Prefer the next fragment if it's within tolerance
                  if (fragNext && !fragmentWithinToleranceTest(fragNext)) {
                    foundFrag = fragNext;
                  } else {
                    foundFrag = binary_search.search(fragments, fragmentWithinToleranceTest);
                  }
                } else {
                  // reach end of playlist
                  foundFrag = fragments[fragLen - 1];
                }
                if (foundFrag) {
                  frag = foundFrag;
                  var curSNIdx = frag.sn - levelDetails.startSN;
                  var sameLevel = fragPrevious && frag.level === fragPrevious.level;
                  var prevFrag = fragments[curSNIdx - 1];
                  var nextFrag = fragments[curSNIdx + 1];
                  //logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
                  if (fragPrevious && frag.sn === fragPrevious.sn) {
                    if (sameLevel && !frag.backtracked) {
                      if (frag.sn < levelDetails.endSN) {
                        var deltaPTS = fragPrevious.deltaPTS;
                        // if there is a significant delta between audio and video, larger than max allowed hole,
                        // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)
                        // let's try to load previous fragment again to get last keyframe
                        // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)
                        if (deltaPTS && deltaPTS > config.maxBufferHole && fragPrevious.dropped && curSNIdx) {
                          frag = prevFrag;
                          logger["b" /* logger */].warn('SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this');
                          // decrement previous frag load counter to avoid frag loop loading error when next fragment will get reloaded
                          fragPrevious.loadCounter--;
                        } else {
                          frag = nextFrag;
                          logger["b" /* logger */].log('SN just loaded, load next one: ' + frag.sn);
                        }
                      } else {
                        frag = null;
                      }
                    } else if (frag.backtracked) {
                      // Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes
                      if (nextFrag && nextFrag.backtracked) {
                        logger["b" /* logger */].warn('Already backtracked from fragment ' + nextFrag.sn + ', will not backtrack to fragment ' + frag.sn + '. Loading fragment ' + nextFrag.sn);
                        frag = nextFrag;
                      } else {
                        // If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe
                        // Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment
                        logger["b" /* logger */].warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');
                        frag.dropped = 0;
                        if (prevFrag) {
                          if (prevFrag.loadCounter) {
                            prevFrag.loadCounter--;
                          }
                          frag = prevFrag;
                          frag.backtracked = true;
                        } else if (curSNIdx) {
                          // can't backtrack on very first fragment
                          frag = null;
                        }
                      }
                    }
                  }
                }
                return frag;
              };

              StreamController.prototype._loadFragmentOrKey = function _loadFragmentOrKey(frag, level, levelDetails, pos, bufferEnd) {
                var hls = this.hls,
                  config = hls.config;

                //logger.log('loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
                if (frag.decryptdata && frag.decryptdata.uri != null && frag.decryptdata.key == null) {
                  logger["b" /* logger */].log('Loading key for ' + frag.sn + ' of [' + levelDetails.startSN + ' ,' + levelDetails.endSN + '],level ' + level);
                  this.state = State.KEY_LOADING;
                  hls.trigger(events["a" /* default */].KEY_LOADING, {frag: frag});
                } else {
                  logger["b" /* logger */].log('Loading ' + frag.sn + ' of [' + levelDetails.startSN + ' ,' + levelDetails.endSN + '],level ' + level + ', currentTime:' + pos.toFixed(3) + ',bufferEnd:' + bufferEnd.toFixed(3));
                  // ensure that we are not reloading the same fragments in loop ...
                  if (this.fragLoadIdx !== undefined) {
                    this.fragLoadIdx++;
                  } else {
                    this.fragLoadIdx = 0;
                  }
                  if (frag.loadCounter) {
                    frag.loadCounter++;
                    var maxThreshold = config.fragLoadingLoopThreshold;
                    // if this frag has already been loaded 3 times, and if it has been reloaded recently
                    if (frag.loadCounter > maxThreshold && Math.abs(this.fragLoadIdx - frag.loadIdx) < maxThreshold) {
                      hls.trigger(events["a" /* default */].ERROR, {
                        type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                        details: errors["a" /* ErrorDetails */].FRAG_LOOP_LOADING_ERROR,
                        fatal: false,
                        frag: frag
                      });
                      return;
                    }
                  } else {
                    frag.loadCounter = 1;
                  }
                  frag.loadIdx = this.fragLoadIdx;
                  frag.autoLevel = hls.autoLevelEnabled;
                  frag.bitrateTest = this.bitrateTest;

                  this.fragCurrent = frag;
                  this.startFragRequested = true;
                  // Don't update nextLoadPosition for fragments which are not buffered
                  if (!isNaN(frag.sn) && !frag.bitrateTest) {
                    this.nextLoadPosition = frag.start + frag.duration;
                  }
                  hls.trigger(events["a" /* default */].FRAG_LOADING, {frag: frag});
                  // lazy demuxer init, as this could take some time ... do it during frag loading
                  if (!this.demuxer) {
                    this.demuxer = new demux_demuxer(hls, 'main');
                  }
                  this.state = State.FRAG_LOADING;
                  return;
                }
              };

              StreamController.prototype.getBufferedFrag = function getBufferedFrag(position) {
                return binary_search.search(this._bufferedFrags, function (frag) {
                  if (position < frag.startPTS) {
                    return -1;
                  } else if (position > frag.endPTS) {
                    return 1;
                  }
                  return 0;
                });
              };

              StreamController.prototype.followingBufferedFrag = function followingBufferedFrag(frag) {
                if (frag) {
                  // try to get range of next fragment (500ms after this range)
                  return this.getBufferedFrag(frag.endPTS + 0.5);
                }
                return null;
              };

              StreamController.prototype._checkFragmentChanged = function _checkFragmentChanged() {
                var fragPlayingCurrent,
                  currentTime,
                  video = this.media;
                if (video && video.readyState && video.seeking === false) {
                  currentTime = video.currentTime;
                  /* if video element is in seeked state, currentTime can only increase.
        (assuming that playback rate is positive ...)
        As sometimes currentTime jumps back to zero after a
        media decode error, check this, to avoid seeking back to
        wrong position after a media decode error
      */
                  if (currentTime > video.playbackRate * this.lastCurrentTime) {
                    this.lastCurrentTime = currentTime;
                  }
                  if (buffer_helper.isBuffered(video, currentTime)) {
                    fragPlayingCurrent = this.getBufferedFrag(currentTime);
                  } else if (buffer_helper.isBuffered(video, currentTime + 0.1)) {
                    /* ensure that FRAG_CHANGED event is triggered at startup,
          when first video frame is displayed and playback is paused.
          add a tolerance of 100ms, in case current position is not buffered,
          check if current pos+100ms is buffered and use that buffer range
          for FRAG_CHANGED event reporting */
                    fragPlayingCurrent = this.getBufferedFrag(currentTime + 0.1);
                  }
                  if (fragPlayingCurrent) {
                    var fragPlaying = fragPlayingCurrent;
                    if (fragPlaying !== this.fragPlaying) {
                      this.hls.trigger(events["a" /* default */].FRAG_CHANGED, {frag: fragPlaying});
                      var fragPlayingLevel = fragPlaying.level;
                      if (!this.fragPlaying || this.fragPlaying.level !== fragPlayingLevel) {
                        this.hls.trigger(events["a" /* default */].LEVEL_SWITCHED, {level: fragPlayingLevel});
                      }
                      this.fragPlaying = fragPlaying;
                    }
                  }
                }
              };

              /*
    on immediate level switch :
     - pause playback if playing
     - cancel any pending load request
     - and trigger a buffer flush
  */


              StreamController.prototype.immediateLevelSwitch = function immediateLevelSwitch() {
                logger["b" /* logger */].log('immediateLevelSwitch');
                if (!this.immediateSwitch) {
                  this.immediateSwitch = true;
                  var media = this.media,
                    previouslyPaused = void 0;
                  if (media) {
                    previouslyPaused = media.paused;
                    media.pause();
                  } else {
                    // don't restart playback after instant level switch in case media not attached
                    previouslyPaused = true;
                  }
                  this.previouslyPaused = previouslyPaused;
                }
                var fragCurrent = this.fragCurrent;
                if (fragCurrent && fragCurrent.loader) {
                  fragCurrent.loader.abort();
                }
                this.fragCurrent = null;
                // increase fragment load Index to avoid frag loop loading error after buffer flush
                if (this.fragLoadIdx !== undefined) {
                  this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
                }
                // flush everything
                this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
              };

              /*
     on immediate level switch end, after new fragment has been buffered :
      - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)
      - resume the playback if needed
  */


              StreamController.prototype.immediateLevelSwitchEnd = function immediateLevelSwitchEnd() {
                var media = this.media;
                if (media && media.buffered.length) {
                  this.immediateSwitch = false;
                  if (buffer_helper.isBuffered(media, media.currentTime)) {
                    // only nudge if currentTime is buffered
                    media.currentTime -= 0.0001;
                  }
                  if (!this.previouslyPaused) {
                    media.play();
                  }
                }
              };

              StreamController.prototype.nextLevelSwitch = function nextLevelSwitch() {
                /* try to switch ASAP without breaking video playback :
       in order to ensure smooth but quick level switching,
      we need to find the next flushable buffer range
      we should take into account new segment fetch time
    */
                var media = this.media;
                // ensure that media is defined and that metadata are available (to retrieve currentTime)
                if (media && media.readyState) {
                  var fetchdelay = void 0,
                    fragPlayingCurrent = void 0,
                    nextBufferedFrag = void 0;
                  if (this.fragLoadIdx !== undefined) {
                    // increase fragment load Index to avoid frag loop loading error after buffer flush
                    this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
                  }
                  fragPlayingCurrent = this.getBufferedFrag(media.currentTime);
                  if (fragPlayingCurrent && fragPlayingCurrent.startPTS > 1) {
                    // flush buffer preceding current fragment (flush until current fragment start offset)
                    // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
                    this.flushMainBuffer(0, fragPlayingCurrent.startPTS - 1);
                  }
                  if (!media.paused) {
                    // add a safety delay of 1s
                    var nextLevelId = this.hls.nextLoadLevel,
                      nextLevel = this.levels[nextLevelId],
                      fragLastKbps = this.fragLastKbps;
                    if (fragLastKbps && this.fragCurrent) {
                      fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;
                    } else {
                      fetchdelay = 0;
                    }
                  } else {
                    fetchdelay = 0;
                  }
                  //logger.log('fetchdelay:'+fetchdelay);
                  // find buffer range that will be reached once new fragment will be fetched
                  nextBufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);
                  if (nextBufferedFrag) {
                    // we can flush buffer range following this one without stalling playback
                    nextBufferedFrag = this.followingBufferedFrag(nextBufferedFrag);
                    if (nextBufferedFrag) {
                      // if we are here, we can also cancel any loading/demuxing in progress, as they are useless
                      var fragCurrent = this.fragCurrent;
                      if (fragCurrent && fragCurrent.loader) {
                        fragCurrent.loader.abort();
                      }
                      this.fragCurrent = null;
                      // start flush position is the start PTS of next buffered frag.
                      // we use frag.naxStartPTS which is max(audio startPTS, video startPTS).
                      // in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment
                      this.flushMainBuffer(nextBufferedFrag.maxStartPTS, Number.POSITIVE_INFINITY);
                    }
                  }
                }
              };

              StreamController.prototype.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {
                this.state = State.BUFFER_FLUSHING;
                var flushScope = {startOffset: startOffset, endOffset: endOffset};
                // if alternate audio tracks are used, only flush video, otherwise flush everything
                if (this.altAudio) {
                  flushScope.type = 'video';
                }
                this.hls.trigger(events["a" /* default */].BUFFER_FLUSHING, flushScope);
              };

              StreamController.prototype.onMediaAttached = function onMediaAttached(data) {
                var media = this.media = this.mediaBuffer = data.media;
                this.onvseeking = this.onMediaSeeking.bind(this);
                this.onvseeked = this.onMediaSeeked.bind(this);
                this.onvended = this.onMediaEnded.bind(this);
                media.addEventListener('seeking', this.onvseeking);
                media.addEventListener('seeked', this.onvseeked);
                media.addEventListener('ended', this.onvended);
                var config = this.config;
                if (this.levels && config.autoStartLoad) {
                  this.hls.startLoad(config.startPosition);
                }
              };

              StreamController.prototype.onMediaDetaching = function onMediaDetaching() {
                var media = this.media;
                if (media && media.ended) {
                  logger["b" /* logger */].log('MSE detaching and video ended, reset startPosition');
                  this.startPosition = this.lastCurrentTime = 0;
                }

                // reset fragment loading counter on MSE detaching to avoid reporting FRAG_LOOP_LOADING_ERROR after error recovery
                var levels = this.levels;
                if (levels) {
                  // reset fragment load counter
                  levels.forEach(function (level) {
                    if (level.details) {
                      level.details.fragments.forEach(function (fragment) {
                        fragment.loadCounter = undefined;
                        fragment.backtracked = undefined;
                      });
                    }
                  });
                }
                // remove video listeners
                if (media) {
                  media.removeEventListener('seeking', this.onvseeking);
                  media.removeEventListener('seeked', this.onvseeked);
                  media.removeEventListener('ended', this.onvended);
                  this.onvseeking = this.onvseeked = this.onvended = null;
                }
                this.media = this.mediaBuffer = null;
                this.loadedmetadata = false;
                this.stopLoad();
              };

              StreamController.prototype.onMediaSeeking = function onMediaSeeking() {
                var media = this.media,
                  currentTime = media ? media.currentTime : undefined,
                  config = this.config;
                if (!isNaN(currentTime)) {
                  logger["b" /* logger */].log('media seeking to ' + currentTime.toFixed(3));
                }
                var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;
                var bufferInfo = buffer_helper.bufferInfo(mediaBuffer, currentTime, this.config.maxBufferHole);
                if (this.state === State.FRAG_LOADING) {
                  var fragCurrent = this.fragCurrent;
                  // check if we are seeking to a unbuffered area AND if frag loading is in progress
                  if (bufferInfo.len === 0 && fragCurrent) {
                    var tolerance = config.maxFragLookUpTolerance,
                      fragStartOffset = fragCurrent.start - tolerance,
                      fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;
                    // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything
                    if (currentTime < fragStartOffset || currentTime > fragEndOffset) {
                      if (fragCurrent.loader) {
                        logger["b" /* logger */].log('seeking outside of buffer while fragment load in progress, cancel fragment load');
                        fragCurrent.loader.abort();
                      }
                      this.fragCurrent = null;
                      this.fragPrevious = null;
                      // switch to IDLE state to load new fragment
                      this.state = State.IDLE;
                    } else {
                      logger["b" /* logger */].log('seeking outside of buffer but within currently loaded fragment range');
                    }
                  }
                } else if (this.state === State.ENDED) {
                  // if seeking to unbuffered area, clean up fragPrevious
                  if (bufferInfo.len === 0) {
                    this.fragPrevious = 0;
                  }
                  // switch to IDLE state to check for potential new fragment
                  this.state = State.IDLE;
                }
                if (media) {
                  this.lastCurrentTime = currentTime;
                }
                // avoid reporting fragment loop loading error in case user is seeking several times on same position
                if (this.state !== State.FRAG_LOADING && this.fragLoadIdx !== undefined) {
                  this.fragLoadIdx += 2 * config.fragLoadingLoopThreshold;
                }
                // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target
                if (!this.loadedmetadata) {
                  this.nextLoadPosition = this.startPosition = currentTime;
                }
                // tick to speed up processing
                this.tick();
              };

              StreamController.prototype.onMediaSeeked = function onMediaSeeked() {
                var media = this.media,
                  currentTime = media ? media.currentTime : undefined;
                if (!isNaN(currentTime)) {
                  logger["b" /* logger */].log('media seeked to ' + currentTime.toFixed(3));
                }
                // tick to speed up FRAGMENT_PLAYING triggering
                this.tick();
              };

              StreamController.prototype.onMediaEnded = function onMediaEnded() {
                logger["b" /* logger */].log('media ended');
                // reset startPosition and lastCurrentTime to restart playback @ stream beginning
                this.startPosition = this.lastCurrentTime = 0;
              };

              StreamController.prototype.onManifestLoading = function onManifestLoading() {
                // reset buffer on manifest loading
                logger["b" /* logger */].log('trigger BUFFER_RESET');
                this.hls.trigger(events["a" /* default */].BUFFER_RESET);
                this._bufferedFrags = [];
                this.stalled = false;
                this.startPosition = this.lastCurrentTime = 0;
              };

              StreamController.prototype.onManifestParsed = function onManifestParsed(data) {
                var aac = false,
                  heaac = false,
                  codec;
                data.levels.forEach(function (level) {
                  // detect if we have different kind of audio codecs used amongst playlists
                  codec = level.audioCodec;
                  if (codec) {
                    if (codec.indexOf('mp4a.40.2') !== -1) {
                      aac = true;
                    }
                    if (codec.indexOf('mp4a.40.5') !== -1) {
                      heaac = true;
                    }
                  }
                });
                this.audioCodecSwitch = aac && heaac;
                if (this.audioCodecSwitch) {
                  logger["b" /* logger */].log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');
                }
                this.levels = data.levels;
                this.startFragRequested = false;
                var config = this.config;
                if (config.autoStartLoad || this.forceStartLoad) {
                  this.hls.startLoad(config.startPosition);
                }
              };

              StreamController.prototype.onLevelLoaded = function onLevelLoaded(data) {
                var newDetails = data.details;
                var newLevelId = data.level;
                var lastLevel = this.levels[this.levelLastLoaded];
                var curLevel = this.levels[newLevelId];
                var duration = newDetails.totalduration;
                var sliding = 0;

                logger["b" /* logger */].log('level ' + newLevelId + ' loaded [' + newDetails.startSN + ',' + newDetails.endSN + '],duration:' + duration);

                if (newDetails.live) {
                  var curDetails = curLevel.details;
                  if (curDetails && newDetails.fragments.length > 0) {
                    // we already have details for that level, merge them
                    mergeDetails(curDetails, newDetails);
                    sliding = newDetails.fragments[0].start;
                    this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
                    if (newDetails.PTSKnown && !isNaN(sliding)) {
                      logger["b" /* logger */].log('live playlist sliding:' + sliding.toFixed(3));
                    } else {
                      logger["b" /* logger */].log('live playlist - outdated PTS, unknown sliding');
                      alignDiscontinuities(this.fragPrevious, lastLevel, newDetails);
                    }
                  } else {
                    logger["b" /* logger */].log('live playlist - first load, unknown sliding');
                    newDetails.PTSKnown = false;
                    alignDiscontinuities(this.fragPrevious, lastLevel, newDetails);
                  }
                } else {
                  newDetails.PTSKnown = false;
                }
                // override level info
                curLevel.details = newDetails;
                this.levelLastLoaded = newLevelId;
                this.hls.trigger(events["a" /* default */].LEVEL_UPDATED, {details: newDetails, level: newLevelId});

                if (this.startFragRequested === false) {
                  // compute start position if set to -1. use it straight away if value is defined
                  if (this.startPosition === -1 || this.lastCurrentTime === -1) {
                    // first, check if start time offset has been set in playlist, if yes, use this value
                    var startTimeOffset = newDetails.startTimeOffset;
                    if (!isNaN(startTimeOffset)) {
                      if (startTimeOffset < 0) {
                        logger["b" /* logger */].log('negative start time offset ' + startTimeOffset + ', count from end of last fragment');
                        startTimeOffset = sliding + duration + startTimeOffset;
                      }
                      logger["b" /* logger */].log('start time offset found in playlist, adjust startPosition to ' + startTimeOffset);
                      this.startPosition = startTimeOffset;
                    } else {
                      // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)
                      if (newDetails.live) {
                        this.startPosition = this.computeLivePosition(sliding, newDetails);
                        logger["b" /* logger */].log('configure startPosition to ' + this.startPosition);
                      } else {
                        this.startPosition = 0;
                      }
                    }
                    this.lastCurrentTime = this.startPosition;
                  }
                  this.nextLoadPosition = this.startPosition;
                }
                // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment
                if (this.state === State.WAITING_LEVEL) {
                  this.state = State.IDLE;
                }
                //trigger handler right now
                this.tick();
              };

              StreamController.prototype.onKeyLoaded = function onKeyLoaded() {
                if (this.state === State.KEY_LOADING) {
                  this.state = State.IDLE;
                  this.tick();
                }
              };

              StreamController.prototype.onFragLoaded = function onFragLoaded(data) {
                var fragCurrent = this.fragCurrent,
                  fragLoaded = data.frag;
                if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'main' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
                  var stats = data.stats,
                    currentLevel = this.levels[fragCurrent.level],
                    details = currentLevel.details;
                  logger["b" /* logger */].log('Loaded  ' + fragCurrent.sn + ' of [' + details.startSN + ' ,' + details.endSN + '],level ' + fragCurrent.level);
                  // reset frag bitrate test in any case after frag loaded event
                  this.bitrateTest = false;
                  this.stats = stats;
                  // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0
                  // then this means that we should be able to load a fragment at a higher quality level
                  if (fragLoaded.bitrateTest === true && this.hls.nextLoadLevel) {
                    // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo
                    this.state = State.IDLE;
                    this.startFragRequested = false;
                    stats.tparsed = stats.tbuffered = performance.now();
                    this.hls.trigger(events["a" /* default */].FRAG_BUFFERED, {
                      stats: stats,
                      frag: fragCurrent,
                      id: 'main'
                    });
                    this.tick();
                  } else if (fragLoaded.sn === 'initSegment') {
                    this.state = State.IDLE;
                    stats.tparsed = stats.tbuffered = performance.now();
                    details.initSegment.data = data.payload;
                    this.hls.trigger(events["a" /* default */].FRAG_BUFFERED, {
                      stats: stats,
                      frag: fragCurrent,
                      id: 'main'
                    });
                    this.tick();
                  } else {
                    this.state = State.PARSING;
                    // transmux the MPEG-TS data to ISO-BMFF segments
                    var duration = details.totalduration,
                      level = fragCurrent.level,
                      sn = fragCurrent.sn,
                      audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;
                    if (this.audioCodecSwap) {
                      logger["b" /* logger */].log('swapping playlist audio codec');
                      if (audioCodec === undefined) {
                        audioCodec = this.lastAudioCodec;
                      }
                      if (audioCodec) {
                        if (audioCodec.indexOf('mp4a.40.5') !== -1) {
                          audioCodec = 'mp4a.40.2';
                        } else {
                          audioCodec = 'mp4a.40.5';
                        }
                      }
                    }
                    this.pendingBuffering = true;
                    this.appended = false;
                    logger["b" /* logger */].log('Parsing ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],level ' + level + ', cc ' + fragCurrent.cc);
                    var demuxer = this.demuxer;
                    if (!demuxer) {
                      demuxer = this.demuxer = new demux_demuxer(this.hls, 'main');
                    }
                    // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)
                    var media = this.media;
                    var mediaSeeking = media && media.seeking;
                    var accurateTimeOffset = !mediaSeeking && (details.PTSKnown || !details.live);
                    var initSegmentData = details.initSegment ? details.initSegment.data : [];
                    demuxer.push(data.payload, initSegmentData, audioCodec, currentLevel.videoCodec, fragCurrent, duration, accurateTimeOffset, undefined);
                  }
                }
                this.fragLoadError = 0;
              };

              StreamController.prototype.onFragParsingInitSegment = function onFragParsingInitSegment(data) {
                var fragCurrent = this.fragCurrent;
                var fragNew = data.frag;
                if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                  var tracks = data.tracks,
                    trackName,
                    track;

                  // if audio track is expected to come from audio stream controller, discard any coming from main
                  if (tracks.audio && this.altAudio) {
                    delete tracks.audio;
                  }
                  // include levelCodec in audio and video tracks
                  track = tracks.audio;
                  if (track) {
                    var audioCodec = this.levels[this.level].audioCodec,
                      ua = navigator.userAgent.toLowerCase();
                    if (audioCodec && this.audioCodecSwap) {
                      logger["b" /* logger */].log('swapping playlist audio codec');
                      if (audioCodec.indexOf('mp4a.40.5') !== -1) {
                        audioCodec = 'mp4a.40.2';
                      } else {
                        audioCodec = 'mp4a.40.5';
                      }
                    }
                    // in case AAC and HE-AAC audio codecs are signalled in manifest
                    // force HE-AAC , as it seems that most browsers prefers that way,
                    // except for mono streams OR on FF
                    // these conditions might need to be reviewed ...
                    if (this.audioCodecSwitch) {
                      // don't force HE-AAC if mono stream
                      if (track.metadata.channelCount !== 1 &&
                        // don't force HE-AAC if firefox
                        ua.indexOf('firefox') === -1) {
                        audioCodec = 'mp4a.40.5';
                      }
                    }
                    // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise
                    if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') {
                      // Exclude mpeg audio
                      audioCodec = 'mp4a.40.2';
                      logger["b" /* logger */].log('Android: force audio codec to ' + audioCodec);
                    }
                    track.levelCodec = audioCodec;
                    track.id = data.id;
                  }
                  track = tracks.video;
                  if (track) {
                    track.levelCodec = this.levels[this.level].videoCodec;
                    track.id = data.id;
                  }
                  this.hls.trigger(events["a" /* default */].BUFFER_CODECS, tracks);
                  // loop through tracks that are going to be provided to bufferController
                  for (trackName in tracks) {
                    track = tracks[trackName];
                    logger["b" /* logger */].log('main track:' + trackName + ',container:' + track.container + ',codecs[level/parsed]=[' + track.levelCodec + '/' + track.codec + ']');
                    var initSegment = track.initSegment;
                    if (initSegment) {
                      this.appended = true;
                      // arm pending Buffering flag before appending a segment
                      this.pendingBuffering = true;
                      this.hls.trigger(events["a" /* default */].BUFFER_APPENDING, {
                        type: trackName,
                        data: initSegment,
                        parent: 'main',
                        content: 'initSegment'
                      });
                    }
                  }
                  //trigger handler right now
                  this.tick();
                }
              };

              StreamController.prototype.onFragParsingData = function onFragParsingData(data) {
                var _this2 = this;

                var fragCurrent = this.fragCurrent;
                var fragNew = data.frag;
                if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && !(data.type === 'audio' && this.altAudio) && // filter out main audio if audio track is loaded through audio stream controller
                  this.state === State.PARSING) {
                  var level = this.levels[this.level],
                    frag = fragCurrent;
                  if (isNaN(data.endPTS)) {
                    data.endPTS = data.startPTS + fragCurrent.duration;
                    data.endDTS = data.startDTS + fragCurrent.duration;
                  }

                  logger["b" /* logger */].log('Parsed ' + data.type + ',PTS:[' + data.startPTS.toFixed(3) + ',' + data.endPTS.toFixed(3) + '],DTS:[' + data.startDTS.toFixed(3) + '/' + data.endDTS.toFixed(3) + '],nb:' + data.nb + ',dropped:' + (data.dropped || 0));

                  // Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)
                  if (data.type === 'video') {
                    frag.dropped = data.dropped;
                    if (frag.dropped) {
                      if (!frag.backtracked) {
                        var levelDetails = level.details;
                        if (levelDetails && frag.sn === levelDetails.startSN) {
                          logger["b" /* logger */].warn('missing video frame(s) on first frag, appending with gap');
                        } else {
                          logger["b" /* logger */].warn('missing video frame(s), backtracking fragment');
                          // Return back to the IDLE state without appending to buffer
                          // Causes findFragments to backtrack a segment and find the keyframe
                          // Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment
                          frag.backtracked = true;
                          this.nextLoadPosition = data.startPTS;
                          this.state = State.IDLE;
                          this.fragPrevious = frag;
                          this.tick();
                          return;
                        }
                      } else {
                        logger["b" /* logger */].warn('Already backtracked on this fragment, appending with the gap');
                      }
                    } else {
                      // Only reset the backtracked flag if we've loaded the frag without any dropped frames
                      frag.backtracked = false;
                    }
                  }

                  var drift = updateFragPTSDTS(level.details, frag, data.startPTS, data.endPTS, data.startDTS, data.endDTS),
                    hls = this.hls;
                  hls.trigger(events["a" /* default */].LEVEL_PTS_UPDATED, {
                    details: level.details,
                    level: this.level,
                    drift: drift,
                    type: data.type,
                    start: data.startPTS,
                    end: data.endPTS
                  });

                  // has remuxer dropped video frames located before first keyframe ?
                  [data.data1, data.data2].forEach(function (buffer) {
                    // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
                    // in that case it is useless to append following segments
                    if (buffer && buffer.length && _this2.state === State.PARSING) {
                      _this2.appended = true;
                      // arm pending Buffering flag before appending a segment
                      _this2.pendingBuffering = true;
                      hls.trigger(events["a" /* default */].BUFFER_APPENDING, {
                        type: data.type,
                        data: buffer,
                        parent: 'main',
                        content: 'data'
                      });
                    }
                  });
                  //trigger handler right now
                  this.tick();
                }
              };

              StreamController.prototype.onFragParsed = function onFragParsed(data) {
                var fragCurrent = this.fragCurrent;
                var fragNew = data.frag;
                if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                  this.stats.tparsed = performance.now();
                  this.state = State.PARSED;
                  this._checkAppendedParsed();
                }
              };

              StreamController.prototype.onAudioTrackSwitching = function onAudioTrackSwitching(data) {
                // if any URL found on new audio track, it is an alternate audio track
                var altAudio = !!data.url,
                  trackId = data.id;
                // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
                // don't do anything if we switch to alt audio: audio stream controller is handling it.
                // we will just have to change buffer scheduling on audioTrackSwitched
                if (!altAudio) {
                  if (this.mediaBuffer !== this.media) {
                    logger["b" /* logger */].log('switching on main audio, use media.buffered to schedule main fragment loading');
                    this.mediaBuffer = this.media;
                    var fragCurrent = this.fragCurrent;
                    // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch
                    if (fragCurrent.loader) {
                      logger["b" /* logger */].log('switching to main audio track, cancel main fragment load');
                      fragCurrent.loader.abort();
                    }
                    this.fragCurrent = null;
                    this.fragPrevious = null;
                    // destroy demuxer to force init segment generation (following audio switch)
                    if (this.demuxer) {
                      this.demuxer.destroy();
                      this.demuxer = null;
                    }
                    // switch to IDLE state to load new fragment
                    this.state = State.IDLE;
                  }
                  var hls = this.hls;
                  // switching to main audio, flush all audio and trigger track switched
                  hls.trigger(events["a" /* default */].BUFFER_FLUSHING, {
                    startOffset: 0,
                    endOffset: Number.POSITIVE_INFINITY,
                    type: 'audio'
                  });
                  hls.trigger(events["a" /* default */].AUDIO_TRACK_SWITCHED, {id: trackId});
                  this.altAudio = false;
                }
              };

              StreamController.prototype.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
                var trackId = data.id,
                  altAudio = !!this.hls.audioTracks[trackId].url;
                if (altAudio) {
                  var videoBuffer = this.videoBuffer;
                  // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered
                  if (videoBuffer && this.mediaBuffer !== videoBuffer) {
                    logger["b" /* logger */].log('switching on alternate audio, use video.buffered to schedule main fragment loading');
                    this.mediaBuffer = videoBuffer;
                  }
                }
                this.altAudio = altAudio;
                this.tick();
              };

              StreamController.prototype.onBufferCreated = function onBufferCreated(data) {
                var tracks = data.tracks,
                  mediaTrack = void 0,
                  name = void 0,
                  alternate = false;
                for (var type in tracks) {
                  var track = tracks[type];
                  if (track.id === 'main') {
                    name = type;
                    mediaTrack = track;
                    // keep video source buffer reference
                    if (type === 'video') {
                      this.videoBuffer = tracks[type].buffer;
                    }
                  } else {
                    alternate = true;
                  }
                }
                if (alternate && mediaTrack) {
                  logger["b" /* logger */].log('alternate track found, use ' + name + '.buffered to schedule main fragment loading');
                  this.mediaBuffer = mediaTrack.buffer;
                } else {
                  this.mediaBuffer = this.media;
                }
              };

              StreamController.prototype.onBufferAppended = function onBufferAppended(data) {
                if (data.parent === 'main') {
                  var state = this.state;
                  if (state === State.PARSING || state === State.PARSED) {
                    // check if all buffers have been appended
                    this.pendingBuffering = data.pending > 0;
                    this._checkAppendedParsed();
                  }
                }
              };

              StreamController.prototype._checkAppendedParsed = function _checkAppendedParsed() {
                //trigger handler right now
                if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
                  var frag = this.fragCurrent;
                  if (frag) {
                    var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                    logger["b" /* logger */].log('main buffered : ' + timeRanges.toString(media.buffered));
                    // filter fragments potentially evicted from buffer. this is to avoid memleak on live streams
                    var bufferedFrags = this._bufferedFrags.filter(function (frag) {
                      return buffer_helper.isBuffered(media, (frag.startPTS + frag.endPTS) / 2);
                    });
                    // push new range
                    bufferedFrags.push(frag);
                    // sort frags, as we use BinarySearch for lookup in getBufferedFrag ...
                    this._bufferedFrags = bufferedFrags.sort(function (a, b) {
                      return a.startPTS - b.startPTS;
                    });
                    this.fragPrevious = frag;
                    var stats = this.stats;
                    stats.tbuffered = performance.now();
                    // we should get rid of this.fragLastKbps
                    this.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));
                    this.hls.trigger(events["a" /* default */].FRAG_BUFFERED, {stats: stats, frag: frag, id: 'main'});
                    this.state = State.IDLE;
                  }
                  this.tick();
                }
              };

              StreamController.prototype.onError = function onError(data) {
                var frag = data.frag || this.fragCurrent;
                // don't handle frag error not related to main fragment
                if (frag && frag.type !== 'main') {
                  return;
                }
                // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
                var mediaBuffered = !!this.media && buffer_helper.isBuffered(this.media, this.media.currentTime) && buffer_helper.isBuffered(this.media, this.media.currentTime + 0.5);

                switch (data.details) {
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_TIMEOUT:
                  case errors["a" /* ErrorDetails */].KEY_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].KEY_LOAD_TIMEOUT:
                    if (!data.fatal) {
                      // keep retrying until the limit will be reached
                      if (this.fragLoadError + 1 <= this.config.fragLoadingMaxRetry) {
                        // exponential backoff capped to config.fragLoadingMaxRetryTimeout
                        var delay = Math.min(Math.pow(2, this.fragLoadError) * this.config.fragLoadingRetryDelay, this.config.fragLoadingMaxRetryTimeout);
                        // reset load counter to avoid frag loop loading error
                        frag.loadCounter = 0;
                        logger["b" /* logger */].warn('mediaController: frag loading failed, retry in ' + delay + ' ms');
                        this.retryDate = performance.now() + delay;
                        // retry loading state
                        // if loadedmetadata is not set, it means that we are emergency switch down on first frag
                        // in that case, reset startFragRequested flag
                        if (!this.loadedmetadata) {
                          this.startFragRequested = false;
                          this.nextLoadPosition = this.startPosition;
                        }
                        this.fragLoadError++;
                        this.state = State.FRAG_LOADING_WAITING_RETRY;
                      } else {
                        logger["b" /* logger */].error('mediaController: ' + data.details + ' reaches max retry, redispatch as fatal ...');
                        // switch error to fatal
                        data.fatal = true;
                        this.state = State.ERROR;
                      }
                    }
                    break;
                  case errors["a" /* ErrorDetails */].FRAG_LOOP_LOADING_ERROR:
                    if (!data.fatal) {
                      // if buffer is not empty
                      if (mediaBuffered) {
                        // try to reduce max buffer length : rationale is that we could get
                        // frag loop loading error because of buffer eviction
                        this._reduceMaxBufferLength(frag.duration);
                        this.state = State.IDLE;
                      } else {
                        // buffer empty. report as fatal if in manual mode or if lowest level.
                        // level controller takes care of emergency switch down logic
                        if (!frag.autoLevel || frag.level === 0) {
                          // switch error to fatal
                          data.fatal = true;
                          this.state = State.ERROR;
                        }
                      }
                    }
                    break;
                  case errors["a" /* ErrorDetails */].LEVEL_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].LEVEL_LOAD_TIMEOUT:
                    if (this.state !== State.ERROR) {
                      if (data.fatal) {
                        // if fatal error, stop processing
                        this.state = State.ERROR;
                        logger["b" /* logger */].warn('streamController: ' + data.details + ',switch to ' + this.state + ' state ...');
                      } else {
                        // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE
                        if (!data.levelRetry && this.state === State.WAITING_LEVEL) {
                          this.state = State.IDLE;
                        }
                      }
                    }
                    break;
                  case errors["a" /* ErrorDetails */].BUFFER_FULL_ERROR:
                    // if in appending state
                    if (data.parent === 'main' && (this.state === State.PARSING || this.state === State.PARSED)) {
                      // reduce max buf len if current position is buffered
                      if (mediaBuffered) {
                        this._reduceMaxBufferLength(this.config.maxBufferLength);
                        this.state = State.IDLE;
                      } else {
                        // current position is not buffered, but browser is still complaining about buffer full error
                        // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
                        // in that case flush the whole buffer to recover
                        logger["b" /* logger */].warn('buffer full error also media.currentTime is not buffered, flush everything');
                        this.fragCurrent = null;
                        // flush everything
                        this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                      }
                    }
                    break;
                  default:
                    break;
                }
              };

              StreamController.prototype._reduceMaxBufferLength = function _reduceMaxBufferLength(minLength) {
                var config = this.config;
                if (config.maxMaxBufferLength >= minLength) {
                  // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
                  config.maxMaxBufferLength /= 2;
                  logger["b" /* logger */].warn('main:reduce max buffer length to ' + config.maxMaxBufferLength + 's');
                  if (this.fragLoadIdx !== undefined) {
                    // increase fragment load Index to avoid frag loop loading error after buffer flush
                    this.fragLoadIdx += 2 * config.fragLoadingLoopThreshold;
                  }
                }
              };

              StreamController.prototype._checkBuffer = function _checkBuffer() {
                var media = this.media,
                  config = this.config;
                // if ready state different from HAVE_NOTHING (numeric value 0), we are allowed to seek
                if (media && media.readyState) {
                  var currentTime = media.currentTime,
                    mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media,
                    buffered = mediaBuffer.buffered;
                  // adjust currentTime to start position on loaded metadata
                  if (!this.loadedmetadata && buffered.length) {
                    this.loadedmetadata = true;
                    // only adjust currentTime if different from startPosition or if startPosition not buffered
                    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered
                    var startPosition = media.seeking ? currentTime : this.startPosition,
                      startPositionBuffered = buffer_helper.isBuffered(mediaBuffer, startPosition),
                      firstbufferedPosition = buffered.start(0),
                      startNotBufferedButClose = !startPositionBuffered && Math.abs(startPosition - firstbufferedPosition) < config.maxSeekHole;
                    // if currentTime not matching with expected startPosition or startPosition not buffered but close to first buffered
                    if (currentTime !== startPosition || startNotBufferedButClose) {
                      logger["b" /* logger */].log('target start position:' + startPosition);
                      // if startPosition not buffered, let's seek to buffered.start(0)
                      if (startNotBufferedButClose) {
                        startPosition = firstbufferedPosition;
                        logger["b" /* logger */].log('target start position not buffered, seek to buffered.start(0) ' + startPosition);
                      }
                      logger["b" /* logger */].log('adjust currentTime from ' + currentTime + ' to ' + startPosition);
                      media.currentTime = startPosition;
                    }
                  } else if (this.immediateSwitch) {
                    this.immediateLevelSwitchEnd();
                  } else {
                    var bufferInfo = buffer_helper.bufferInfo(media, currentTime, 0),
                      expectedPlaying = !(media.paused || // not playing when media is paused
                        media.ended || // not playing when media is ended
                        media.buffered.length === 0),
                      // not playing if nothing buffered
                      jumpThreshold = 0.5,
                      // tolerance needed as some browsers stalls playback before reaching buffered range end
                      playheadMoving = currentTime !== this.lastCurrentTime;

                    if (playheadMoving) {
                      // played moving, but was previously stalled => now not stuck anymore
                      if (this.stallReported) {
                        logger["b" /* logger */].warn('playback not stuck anymore @' + currentTime + ', after ' + Math.round(performance.now() - this.stalled) + 'ms');
                        this.stallReported = false;
                      }
                      this.stalled = undefined;
                      this.nudgeRetry = 0;
                    } else {
                      // playhead not moving
                      if (expectedPlaying) {
                        // playhead not moving BUT media expected to play
                        var tnow = performance.now();
                        var hls = this.hls;
                        if (!this.stalled) {
                          // stall just detected, store current time
                          this.stalled = tnow;
                          this.stallReported = false;
                        } else {
                          // playback already stalled, check stalling duration
                          // if stalling for more than a given threshold, let's try to recover
                          var stalledDuration = tnow - this.stalled;
                          var bufferLen = bufferInfo.len;
                          var nudgeRetry = this.nudgeRetry || 0;
                          // have we reached stall deadline ?
                          if (bufferLen <= jumpThreshold && stalledDuration > config.lowBufferWatchdogPeriod * 1000) {
                            // report stalled error once
                            if (!this.stallReported) {
                              this.stallReported = true;
                              logger["b" /* logger */].warn('playback stalling in low buffer @' + currentTime);
                              hls.trigger(events["a" /* default */].ERROR, {
                                type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                                details: errors["a" /* ErrorDetails */].BUFFER_STALLED_ERROR,
                                fatal: false,
                                buffer: bufferLen
                              });
                            }
                            // if buffer len is below threshold, try to jump to start of next buffer range if close
                            // no buffer available @ currentTime, check if next buffer is close (within a config.maxSeekHole second range)
                            var nextBufferStart = bufferInfo.nextStart,
                              delta = nextBufferStart - currentTime;
                            if (nextBufferStart && delta < config.maxSeekHole && delta > 0) {
                              this.nudgeRetry = ++nudgeRetry;
                              var nudgeOffset = nudgeRetry * config.nudgeOffset;
                              // next buffer is close ! adjust currentTime to nextBufferStart
                              // this will ensure effective video decoding
                              logger["b" /* logger */].log('adjust currentTime from ' + media.currentTime + ' to next buffered @ ' + nextBufferStart + ' + nudge ' + nudgeOffset);
                              media.currentTime = nextBufferStart + nudgeOffset;
                              // reset stalled so to rearm watchdog timer
                              this.stalled = undefined;
                              hls.trigger(events["a" /* default */].ERROR, {
                                type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                                details: errors["a" /* ErrorDetails */].BUFFER_SEEK_OVER_HOLE,
                                fatal: false,
                                hole: nextBufferStart + nudgeOffset - currentTime
                              });
                            }
                          } else if (bufferLen > jumpThreshold && stalledDuration > config.highBufferWatchdogPeriod * 1000) {
                            // report stalled error once
                            if (!this.stallReported) {
                              this.stallReported = true;
                              logger["b" /* logger */].warn('playback stalling in high buffer @' + currentTime);
                              hls.trigger(events["a" /* default */].ERROR, {
                                type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                                details: errors["a" /* ErrorDetails */].BUFFER_STALLED_ERROR,
                                fatal: false,
                                buffer: bufferLen
                              });
                            }
                            // reset stalled so to rearm watchdog timer
                            this.stalled = undefined;
                            this.nudgeRetry = ++nudgeRetry;
                            if (nudgeRetry < config.nudgeMaxRetry) {
                              var _currentTime = media.currentTime;
                              var targetTime = _currentTime + nudgeRetry * config.nudgeOffset;
                              logger["b" /* logger */].log('adjust currentTime from ' + _currentTime + ' to ' + targetTime);
                              // playback stalled in buffered area ... let's nudge currentTime to try to overcome this
                              media.currentTime = targetTime;
                              hls.trigger(events["a" /* default */].ERROR, {
                                type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                                details: errors["a" /* ErrorDetails */].BUFFER_NUDGE_ON_STALL,
                                fatal: false
                              });
                            } else {
                              logger["b" /* logger */].error('still stuck in high buffer @' + currentTime + ' after ' + config.nudgeMaxRetry + ', raise fatal error');
                              hls.trigger(events["a" /* default */].ERROR, {
                                type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                                details: errors["a" /* ErrorDetails */].BUFFER_STALLED_ERROR,
                                fatal: true
                              });
                            }
                          }
                        }
                      }
                    }
                  }
                }
              };

              StreamController.prototype.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {
                this.state = State.IDLE;
                // if loadedmetadata is not set, it means that we are emergency switch down on first frag
                // in that case, reset startFragRequested flag
                if (!this.loadedmetadata) {
                  this.startFragRequested = false;
                  this.nextLoadPosition = this.startPosition;
                }
                this.tick();
              };

              StreamController.prototype.onBufferFlushed = function onBufferFlushed() {
                /* after successful buffer flushing, filter flushed fragments from bufferedFrags
      use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)
    */
                var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                this._bufferedFrags = this._bufferedFrags.filter(function (frag) {
                  return buffer_helper.isBuffered(media, (frag.startPTS + frag.endPTS) / 2);
                });

                if (this.fragLoadIdx !== undefined) {
                  // increase fragment load Index to avoid frag loop loading error after buffer flush
                  this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
                }
                // move to IDLE once flush complete. this should trigger new fragment loading
                this.state = State.IDLE;
                // reset reference to frag
                this.fragPrevious = null;
              };

              StreamController.prototype.swapAudioCodec = function swapAudioCodec() {
                this.audioCodecSwap = !this.audioCodecSwap;
              };

              StreamController.prototype.computeLivePosition = function computeLivePosition(sliding, levelDetails) {
                var targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;
                return sliding + Math.max(0, levelDetails.totalduration - targetLatency);
              };

              stream_controller__createClass(StreamController, [{
                key: 'state',
                set: function set(nextState) {
                  if (this.state !== nextState) {
                    var previousState = this.state;
                    this._state = nextState;
                    logger["b" /* logger */].log('main stream:' + previousState + '->' + nextState);
                    this.hls.trigger(events["a" /* default */].STREAM_STATE_TRANSITION, {
                      previousState: previousState,
                      nextState: nextState
                    });
                  }
                },
                get: function get() {
                  return this._state;
                }
              }, {
                key: 'currentLevel',
                get: function get() {
                  var media = this.media;
                  if (media) {
                    var frag = this.getBufferedFrag(media.currentTime);
                    if (frag) {
                      return frag.level;
                    }
                  }
                  return -1;
                }
              }, {
                key: 'nextBufferedFrag',
                get: function get() {
                  var media = this.media;
                  if (media) {
                    // first get end range of current fragment
                    return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));
                  } else {
                    return null;
                  }
                }
              }, {
                key: 'nextLevel',
                get: function get() {
                  var frag = this.nextBufferedFrag;
                  if (frag) {
                    return frag.level;
                  } else {
                    return -1;
                  }
                }
              }, {
                key: 'liveSyncPosition',
                get: function get() {
                  return this._liveSyncPosition;
                },
                set: function set(value) {
                  this._liveSyncPosition = value;
                }
              }]);

              return StreamController;
            }(event_handler);

            /* harmony default export */
            var stream_controller = (stream_controller_StreamController);
// CONCATENATED MODULE: ./src/controller/level-controller.js
            var level_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function level_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function level_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function level_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Level Controller
*/


            var level_controller_LevelController = function (_EventHandler) {
              level_controller__inherits(LevelController, _EventHandler);

              function LevelController(hls) {
                level_controller__classCallCheck(this, LevelController);

                var _this = level_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MANIFEST_LOADED, events["a" /* default */].LEVEL_LOADED, events["a" /* default */].FRAG_LOADED, events["a" /* default */].ERROR));

                _this._manualLevel = -1;
                _this.timer = null;
                return _this;
              }

              LevelController.prototype.destroy = function destroy() {
                this.cleanTimer();
                this._manualLevel = -1;
              };

              LevelController.prototype.cleanTimer = function cleanTimer() {
                if (this.timer !== null) {
                  clearTimeout(this.timer);
                  this.timer = null;
                }
              };

              LevelController.prototype.startLoad = function startLoad() {
                var levels = this._levels;

                this.canload = true;
                this.levelRetryCount = 0;

                // clean up live level details to force reload them, and reset load errors
                if (levels) {
                  levels.forEach(function (level) {
                    level.loadError = 0;
                    var levelDetails = level.details;
                    if (levelDetails && levelDetails.live) {
                      level.details = undefined;
                    }
                  });
                }
                // speed up live playlist refresh if timer exists
                if (this.timer) {
                  this.tick();
                }
              };

              LevelController.prototype.stopLoad = function stopLoad() {
                this.canload = false;
              };

              LevelController.prototype.onManifestLoaded = function onManifestLoaded(data) {
                var levels = [],
                  bitrateStart = void 0,
                  levelSet = {},
                  levelFromSet = null,
                  videoCodecFound = false,
                  audioCodecFound = false,
                  chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());

                // regroup redundant levels together
                data.levels.forEach(function (level) {
                  level.loadError = 0;
                  level.fragmentError = false;

                  videoCodecFound = videoCodecFound || !!level.videoCodec;
                  audioCodecFound = audioCodecFound || !!level.audioCodec || !!(level.attrs && level.attrs.AUDIO);

                  // erase audio codec info if browser does not support mp4a.40.34.
                  // demuxer will autodetect codec and fallback to mpeg/audio
                  if (chromeOrFirefox === true && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {
                    level.audioCodec = undefined;
                  }

                  levelFromSet = levelSet[level.bitrate];

                  if (levelFromSet === undefined) {
                    level.url = [level.url];
                    level.urlId = 0;
                    levelSet[level.bitrate] = level;
                    levels.push(level);
                  } else {
                    levelFromSet.url.push(level.url);
                  }
                });

                // remove audio-only level if we also have levels with audio+video codecs signalled
                if (videoCodecFound === true && audioCodecFound === true) {
                  levels = levels.filter(function (_ref) {
                    var videoCodec = _ref.videoCodec;
                    return !!videoCodec;
                  });
                }

                // only keep levels with supported audio/video codecs
                levels = levels.filter(function (_ref2) {
                  var audioCodec = _ref2.audioCodec,
                    videoCodec = _ref2.videoCodec;

                  return (!audioCodec || isCodecSupportedInMp4(audioCodec)) && (!videoCodec || isCodecSupportedInMp4(videoCodec));
                });

                if (levels.length > 0) {
                  // start bitrate is the first bitrate of the manifest
                  bitrateStart = levels[0].bitrate;
                  // sort level on bitrate
                  levels.sort(function (a, b) {
                    return a.bitrate - b.bitrate;
                  });
                  this._levels = levels;
                  // find index of first level in sorted levels
                  for (var i = 0; i < levels.length; i++) {
                    if (levels[i].bitrate === bitrateStart) {
                      this._firstLevel = i;
                      logger["b" /* logger */].log('manifest loaded,' + levels.length + ' level(s) found, first bitrate:' + bitrateStart);
                      break;
                    }
                  }
                  this.hls.trigger(events["a" /* default */].MANIFEST_PARSED, {
                    levels: levels,
                    firstLevel: this._firstLevel,
                    stats: data.stats,
                    audio: audioCodecFound,
                    video: videoCodecFound,
                    altAudio: data.audioTracks.length > 0
                  });
                } else {
                  this.hls.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                    details: errors["a" /* ErrorDetails */].MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                    fatal: true,
                    url: this.hls.url,
                    reason: 'no level with compatible codecs found in manifest'
                  });
                }
              };

              LevelController.prototype.setLevelInternal = function setLevelInternal(newLevel) {
                var levels = this._levels;
                var hls = this.hls;
                // check if level idx is valid
                if (newLevel >= 0 && newLevel < levels.length) {
                  // stopping live reloading timer if any
                  this.cleanTimer();
                  if (this._level !== newLevel) {
                    logger["b" /* logger */].log('switching to level ' + newLevel);
                    this._level = newLevel;
                    var levelProperties = levels[newLevel];
                    levelProperties.level = newLevel;
                    // LEVEL_SWITCH to be deprecated in next major release
                    hls.trigger(events["a" /* default */].LEVEL_SWITCH, levelProperties);
                    hls.trigger(events["a" /* default */].LEVEL_SWITCHING, levelProperties);
                  }
                  var level = levels[newLevel],
                    levelDetails = level.details;
                  // check if we need to load playlist for this level
                  if (!levelDetails || levelDetails.live === true) {
                    // level not retrieved yet, or live playlist we need to (re)load it
                    var urlId = level.urlId;
                    hls.trigger(events["a" /* default */].LEVEL_LOADING, {
                      url: level.url[urlId],
                      level: newLevel,
                      id: urlId
                    });
                  }
                } else {
                  // invalid level id given, trigger error
                  hls.trigger(events["a" /* default */].ERROR, {
                    type: errors["b" /* ErrorTypes */].OTHER_ERROR,
                    details: errors["a" /* ErrorDetails */].LEVEL_SWITCH_ERROR,
                    level: newLevel,
                    fatal: false,
                    reason: 'invalid level idx'
                  });
                }
              };

              LevelController.prototype.onError = function onError(data) {
                var _this2 = this;

                if (data.fatal === true) {
                  if (data.type === errors["b" /* ErrorTypes */].NETWORK_ERROR) {
                    this.cleanTimer();
                  }
                  return;
                }

                var details = data.details,
                  levelError = false,
                  fragmentError = false;
                var levelIndex = void 0,
                  level = void 0;
                var config = this.hls.config;

                // try to recover not fatal errors

                switch (details) {
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_TIMEOUT:
                  case errors["a" /* ErrorDetails */].FRAG_LOOP_LOADING_ERROR:
                  case errors["a" /* ErrorDetails */].KEY_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].KEY_LOAD_TIMEOUT:
                    levelIndex = data.frag.level;
                    fragmentError = true;
                    break;
                  case errors["a" /* ErrorDetails */].LEVEL_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].LEVEL_LOAD_TIMEOUT:
                    levelIndex = data.context.level;
                    levelError = true;
                    break;
                  case errors["a" /* ErrorDetails */].REMUX_ALLOC_ERROR:
                    levelIndex = data.level;
                    break;
                }
                /* try to switch to a redundant stream if any available.
     * if no redundant stream available, emergency switch down (if in auto mode and current level not 0)
     * otherwise, we cannot recover this network error ...
     */
                if (levelIndex !== undefined) {
                  level = this._levels[levelIndex];
                  level.loadError++;
                  level.fragmentError = fragmentError;

                  // Allow fragment retry as long as configuration allows.
                  // Since fragment retry logic could depend on the levels, we should not enforce retry limits when there is an issue with fragments
                  // FIXME Find a better abstraction where fragment/level retry management is well decoupled
                  if (fragmentError === true) {
                    // if any redundant streams available and if we haven't try them all (level.loadError is reseted on successful frag/level load.
                    // if level.loadError reaches redundantLevels it means that we tried them all, no hope  => let's switch down
                    var redundantLevels = level.url.length;

                    if (redundantLevels > 1 && level.loadError < redundantLevels) {
                      level.urlId = (level.urlId + 1) % redundantLevels;
                      level.details = undefined;
                      logger["b" /* logger */].warn('level controller,' + details + ' for level ' + levelIndex + ': switching to redundant stream id ' + level.urlId);
                    } else {
                      // we could try to recover if in auto mode and current level not lowest level (0)
                      if (this._manualLevel === -1 && levelIndex !== 0) {
                        logger["b" /* logger */].warn('level controller,' + details + ': switch-down for next fragment');
                        this.hls.nextAutoLevel = levelIndex - 1;
                      } else {
                        logger["b" /* logger */].warn('level controller, ' + details + ': reload a fragment');
                        // reset this._level so that another call to set level() will trigger again a frag load
                        this._level = undefined;
                      }
                    }
                  } else if (levelError === true) {
                    if (this.levelRetryCount + 1 <= config.levelLoadingMaxRetry) {
                      // exponential backoff capped to max retry timeout
                      var delay = Math.min(Math.pow(2, this.levelRetryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout);
                      // reset load counter to avoid frag loop loading error
                      this.timer = setTimeout(function () {
                        return _this2.tick();
                      }, delay);
                      // boolean used to inform stream controller not to switch back to IDLE on non fatal error
                      data.levelRetry = true;
                      this.levelRetryCount++;
                      logger["b" /* logger */].warn('level controller,' + details + ', retry in ' + delay + ' ms, current retry count is ' + this.levelRetryCount);
                    } else {
                      logger["b" /* logger */].error('cannot recover ' + details + ' error');
                      this._level = undefined;
                      // stopping live reloading timer if any
                      this.cleanTimer();
                      // switch error to fatal
                      data.fatal = true;
                    }
                  }
                }
              };

              // reset errors on the successful load of a fragment


              LevelController.prototype.onFragLoaded = function onFragLoaded(_ref3) {
                var frag = _ref3.frag;

                if (frag !== undefined && frag.type === 'main') {
                  var level = this._levels[frag.level];
                  if (level !== undefined) {
                    level.fragmentError = false;
                    level.loadError = 0;
                    this.levelRetryCount = 0;
                  }
                }
              };

              LevelController.prototype.onLevelLoaded = function onLevelLoaded(data) {
                var _this3 = this;

                var levelId = data.level;
                // only process level loaded events matching with expected level
                if (levelId === this._level) {
                  var curLevel = this._levels[levelId];
                  // reset level load error counter on successful level loaded only if there is no issues with fragments
                  if (curLevel.fragmentError === false) {
                    curLevel.loadError = 0;
                    this.levelRetryCount = 0;
                  }
                  var newDetails = data.details;
                  // if current playlist is a live playlist, arm a timer to reload it
                  if (newDetails.live) {
                    var reloadInterval = 1000 * (newDetails.averagetargetduration ? newDetails.averagetargetduration : newDetails.targetduration),
                      curDetails = curLevel.details;
                    if (curDetails && newDetails.endSN === curDetails.endSN) {
                      // follow HLS Spec, If the client reloads a Playlist file and finds that it has not
                      // changed then it MUST wait for a period of one-half the target
                      // duration before retrying.
                      reloadInterval /= 2;
                      logger["b" /* logger */].log('same live playlist, reload twice faster');
                    }
                    // decrement reloadInterval with level loading delay
                    reloadInterval -= performance.now() - data.stats.trequest;
                    // in any case, don't reload more than every second
                    reloadInterval = Math.max(1000, Math.round(reloadInterval));
                    logger["b" /* logger */].log('live playlist, reload in ' + reloadInterval + ' ms');
                    this.timer = setTimeout(function () {
                      return _this3.tick();
                    }, reloadInterval);
                  } else {
                    this.cleanTimer();
                  }
                }
              };

              LevelController.prototype.tick = function tick() {
                var levelId = this._level;
                if (levelId !== undefined && this.canload) {
                  var level = this._levels[levelId];
                  if (level && level.url) {
                    var urlId = level.urlId;
                    this.hls.trigger(events["a" /* default */].LEVEL_LOADING, {
                      url: level.url[urlId],
                      level: levelId,
                      id: urlId
                    });
                  }
                }
              };

              level_controller__createClass(LevelController, [{
                key: 'levels',
                get: function get() {
                  return this._levels;
                }
              }, {
                key: 'level',
                get: function get() {
                  return this._level;
                },
                set: function set(newLevel) {
                  var levels = this._levels;
                  if (levels) {
                    newLevel = Math.min(newLevel, levels.length - 1);
                    if (this._level !== newLevel || levels[newLevel].details === undefined) {
                      this.setLevelInternal(newLevel);
                    }
                  }
                }
              }, {
                key: 'manualLevel',
                get: function get() {
                  return this._manualLevel;
                },
                set: function set(newLevel) {
                  this._manualLevel = newLevel;
                  if (this._startLevel === undefined) {
                    this._startLevel = newLevel;
                  }
                  if (newLevel !== -1) {
                    this.level = newLevel;
                  }
                }
              }, {
                key: 'firstLevel',
                get: function get() {
                  return this._firstLevel;
                },
                set: function set(newLevel) {
                  this._firstLevel = newLevel;
                }
              }, {
                key: 'startLevel',
                get: function get() {
                  // hls.startLevel takes precedence over config.startLevel
                  // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)
                  if (this._startLevel === undefined) {
                    var configStartLevel = this.hls.config.startLevel;
                    if (configStartLevel !== undefined) {
                      return configStartLevel;
                    } else {
                      return this._firstLevel;
                    }
                  } else {
                    return this._startLevel;
                  }
                },
                set: function set(newLevel) {
                  this._startLevel = newLevel;
                }
              }, {
                key: 'nextLoadLevel',
                get: function get() {
                  if (this._manualLevel !== -1) {
                    return this._manualLevel;
                  } else {
                    return this.hls.nextAutoLevel;
                  }
                },
                set: function set(nextLevel) {
                  this.level = nextLevel;
                  if (this._manualLevel === -1) {
                    this.hls.nextAutoLevel = nextLevel;
                  }
                }
              }]);

              return LevelController;
            }(event_handler);

            /* harmony default export */
            var level_controller = (level_controller_LevelController);
// EXTERNAL MODULE: ./src/demux/id3.js
            var id3 = __webpack_require__(4);

// CONCATENATED MODULE: ./src/controller/id3-track-controller.js
            function id3_track_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function id3_track_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function id3_track_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * id3 metadata track controller
*/


            var id3_track_controller_ID3TrackController = function (_EventHandler) {
              id3_track_controller__inherits(ID3TrackController, _EventHandler);

              function ID3TrackController(hls) {
                id3_track_controller__classCallCheck(this, ID3TrackController);

                var _this = id3_track_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHED, events["a" /* default */].MEDIA_DETACHING, events["a" /* default */].FRAG_PARSING_METADATA));

                _this.id3Track = undefined;
                _this.media = undefined;
                return _this;
              }

              ID3TrackController.prototype.destroy = function destroy() {
                event_handler.prototype.destroy.call(this);
              };

              // Add ID3 metatadata text track.


              ID3TrackController.prototype.onMediaAttached = function onMediaAttached(data) {
                this.media = data.media;
                if (!this.media) {
                  return;
                }
              };

              ID3TrackController.prototype.onMediaDetaching = function onMediaDetaching() {
                this.media = undefined;
              };

              ID3TrackController.prototype.onFragParsingMetadata = function onFragParsingMetadata(data) {
                var fragment = data.frag;
                var samples = data.samples;

                // create track dynamically
                if (!this.id3Track) {
                  this.id3Track = this.media.addTextTrack('metadata', 'id3');
                  this.id3Track.mode = 'hidden';
                }

                // Attempt to recreate Safari functionality by creating
                // WebKitDataCue objects when available and store the decoded
                // ID3 data in the value property of the cue
                var Cue = window.WebKitDataCue || window.VTTCue || window.TextTrackCue;

                for (var i = 0; i < samples.length; i++) {
                  var frames = id3["a" /* default */].getID3Frames(samples[i].data);
                  if (frames) {
                    var startTime = samples[i].pts;
                    var endTime = i < samples.length - 1 ? samples[i + 1].pts : fragment.endPTS;

                    // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE
                    if (startTime === endTime) {
                      endTime += 0.0001;
                    }

                    for (var j = 0; j < frames.length; j++) {
                      var frame = frames[j];
                      // Safari doesn't put the timestamp frame in the TextTrack
                      if (!id3["a" /* default */].isTimeStampFrame(frame)) {
                        var cue = new Cue(startTime, endTime, '');
                        cue.value = frame;
                        this.id3Track.addCue(cue);
                      }
                    }
                  }
                }
              };

              return ID3TrackController;
            }(event_handler);

            /* harmony default export */
            var id3_track_controller = (id3_track_controller_ID3TrackController);

// CONCATENATED MODULE: ./src/utils/ewma.js
            function ewma__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /*
 * compute an Exponential Weighted moving average
 * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 *  - heavily inspired from shaka-player
 */

            var EWMA = function () {

              //  About half of the estimated value will be from the last |halfLife| samples by weight.
              function EWMA(halfLife) {
                ewma__classCallCheck(this, EWMA);

                // Larger values of alpha expire historical data more slowly.
                this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
                this.estimate_ = 0;
                this.totalWeight_ = 0;
              }

              EWMA.prototype.sample = function sample(weight, value) {
                var adjAlpha = Math.pow(this.alpha_, weight);
                this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
                this.totalWeight_ += weight;
              };

              EWMA.prototype.getTotalWeight = function getTotalWeight() {
                return this.totalWeight_;
              };

              EWMA.prototype.getEstimate = function getEstimate() {
                if (this.alpha_) {
                  var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
                  return this.estimate_ / zeroFactor;
                } else {
                  return this.estimate_;
                }
              };

              return EWMA;
            }();

            /* harmony default export */
            var ewma = (EWMA);

// CONCATENATED MODULE: ./src/utils/ewma-bandwidth-estimator.js
            function ewma_bandwidth_estimator__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /*
 * EWMA Bandwidth Estimator
 *  - heavily inspired from shaka-player
 * Tracks bandwidth samples and estimates available bandwidth.
 * Based on the minimum of two exponentially-weighted moving averages with
 * different half-lives.
 */


            var ewma_bandwidth_estimator_EwmaBandWidthEstimator = function () {
              function EwmaBandWidthEstimator(hls, slow, fast, defaultEstimate) {
                ewma_bandwidth_estimator__classCallCheck(this, EwmaBandWidthEstimator);

                this.hls = hls;
                this.defaultEstimate_ = defaultEstimate;
                this.minWeight_ = 0.001;
                this.minDelayMs_ = 50;
                this.slow_ = new ewma(slow);
                this.fast_ = new ewma(fast);
              }

              EwmaBandWidthEstimator.prototype.sample = function sample(durationMs, numBytes) {
                durationMs = Math.max(durationMs, this.minDelayMs_);
                var bandwidth = 8000 * numBytes / durationMs,

                  //console.log('instant bw:'+ Math.round(bandwidth));
                  // we weight sample using loading duration....
                  weight = durationMs / 1000;
                this.fast_.sample(weight, bandwidth);
                this.slow_.sample(weight, bandwidth);
              };

              EwmaBandWidthEstimator.prototype.canEstimate = function canEstimate() {
                var fast = this.fast_;
                return fast && fast.getTotalWeight() >= this.minWeight_;
              };

              EwmaBandWidthEstimator.prototype.getEstimate = function getEstimate() {
                if (this.canEstimate()) {
                  //console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
                  //console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
                  // Take the minimum of these two estimates.  This should have the effect of
                  // adapting down quickly, but up more slowly.
                  return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
                } else {
                  return this.defaultEstimate_;
                }
              };

              EwmaBandWidthEstimator.prototype.destroy = function destroy() {
              };

              return EwmaBandWidthEstimator;
            }();

            /* harmony default export */
            var ewma_bandwidth_estimator = (ewma_bandwidth_estimator_EwmaBandWidthEstimator);
// CONCATENATED MODULE: ./src/controller/abr-controller.js
            var abr_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function abr_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function abr_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function abr_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * simple ABR Controller
 *  - compute next level based on last fragment bw heuristics
 *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling
 */


            var abr_controller_AbrController = function (_EventHandler) {
              abr_controller__inherits(AbrController, _EventHandler);

              function AbrController(hls) {
                abr_controller__classCallCheck(this, AbrController);

                var _this = abr_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].FRAG_LOADING, events["a" /* default */].FRAG_LOADED, events["a" /* default */].FRAG_BUFFERED, events["a" /* default */].ERROR));

                _this.lastLoadedFragLevel = 0;
                _this._nextAutoLevel = -1;
                _this.hls = hls;
                _this.timer = null;
                _this._bwEstimator = null;
                _this.onCheck = _this._abandonRulesCheck.bind(_this);
                return _this;
              }

              AbrController.prototype.destroy = function destroy() {
                this.clearTimer();
                event_handler.prototype.destroy.call(this);
              };

              AbrController.prototype.onFragLoading = function onFragLoading(data) {
                var frag = data.frag;
                if (frag.type === 'main') {
                  if (!this.timer) {
                    this.timer = setInterval(this.onCheck, 100);
                  }
                  // lazy init of bw Estimator, rationale is that we use different params for Live/VoD
                  // so we need to wait for stream manifest / playlist type to instantiate it.
                  if (!this._bwEstimator) {
                    var hls = this.hls,
                      level = data.frag.level,
                      isLive = hls.levels[level].details.live,
                      config = hls.config,
                      ewmaFast = void 0,
                      ewmaSlow = void 0;

                    if (isLive) {
                      ewmaFast = config.abrEwmaFastLive;
                      ewmaSlow = config.abrEwmaSlowLive;
                    } else {
                      ewmaFast = config.abrEwmaFastVoD;
                      ewmaSlow = config.abrEwmaSlowVoD;
                    }
                    this._bwEstimator = new ewma_bandwidth_estimator(hls, ewmaSlow, ewmaFast, config.abrEwmaDefaultEstimate);
                  }
                  this.fragCurrent = frag;
                }
              };

              AbrController.prototype._abandonRulesCheck = function _abandonRulesCheck() {
                /*
      monitor fragment retrieval time...
      we compute expected time of arrival of the complete fragment.
      we compare it to expected time of buffer starvation
    */
                var hls = this.hls,
                  v = hls.media,
                  frag = this.fragCurrent,
                  loader = frag.loader,
                  minAutoLevel = hls.minAutoLevel;

                // if loader has been destroyed or loading has been aborted, stop timer and return
                if (!loader || loader.stats && loader.stats.aborted) {
                  logger["b" /* logger */].warn('frag loader destroy or aborted, disarm abandonRules');
                  this.clearTimer();
                  return;
                }
                var stats = loader.stats;
                /* only monitor frag retrieval time if
    (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */
                if (v && stats && (!v.paused && v.playbackRate !== 0 || !v.readyState) && frag.autoLevel && frag.level) {
                  var requestDelay = performance.now() - stats.trequest,
                    playbackRate = Math.abs(v.playbackRate);
                  // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate
                  if (requestDelay > 500 * frag.duration / playbackRate) {
                    var levels = hls.levels,
                      loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay),
                      // byte/s; at least 1 byte/s to avoid division by zero
                      // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size
                      level = levels[frag.level],
                      levelBitrate = level.realBitrate ? Math.max(level.realBitrate, level.bitrate) : level.bitrate,
                      expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8)),
                      pos = v.currentTime,
                      fragLoadedDelay = (expectedLen - stats.loaded) / loadRate,
                      bufferStarvationDelay = (buffer_helper.bufferInfo(v, pos, hls.config.maxBufferHole).end - pos) / playbackRate;
                    // consider emergency switch down only if we have less than 2 frag buffered AND
                    // time to finish loading current fragment is bigger than buffer starvation delay
                    // ie if we risk buffer starvation if bw does not increase quickly
                    if (bufferStarvationDelay < 2 * frag.duration / playbackRate && fragLoadedDelay > bufferStarvationDelay) {
                      var fragLevelNextLoadedDelay = void 0,
                        nextLoadLevel = void 0;
                      // lets iterate through lower level and try to find the biggest one that could avoid rebuffering
                      // we start from current level - 1 and we step down , until we find a matching level
                      for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
                        // compute time to load next fragment at lower level
                        // 0.8 : consider only 80% of current bw to be conservative
                        // 8 = bits per byte (bps/Bps)
                        var levelNextBitrate = levels[nextLoadLevel].realBitrate ? Math.max(levels[nextLoadLevel].realBitrate, levels[nextLoadLevel].bitrate) : levels[nextLoadLevel].bitrate;
                        fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (8 * 0.8 * loadRate);
                        if (fragLevelNextLoadedDelay < bufferStarvationDelay) {
                          // we found a lower level that be rebuffering free with current estimated bw !
                          break;
                        }
                      }
                      // only emergency switch down if it takes less time to load new fragment at lowest level instead
                      // of finishing loading current one ...
                      if (fragLevelNextLoadedDelay < fragLoadedDelay) {
                        logger["b" /* logger */].warn('loading too slow, abort fragment loading and switch to level ' + nextLoadLevel + ':fragLoadedDelay[' + nextLoadLevel + ']<fragLoadedDelay[' + (frag.level - 1) + '];bufferStarvationDelay:' + fragLevelNextLoadedDelay.toFixed(1) + '<' + fragLoadedDelay.toFixed(1) + ':' + bufferStarvationDelay.toFixed(1));
                        // force next load level in auto mode
                        hls.nextLoadLevel = nextLoadLevel;
                        // update bw estimate for this fragment before cancelling load (this will help reducing the bw)
                        this._bwEstimator.sample(requestDelay, stats.loaded);
                        //abort fragment loading
                        loader.abort();
                        // stop abandon rules timer
                        this.clearTimer();
                        hls.trigger(events["a" /* default */].FRAG_LOAD_EMERGENCY_ABORTED, {frag: frag, stats: stats});
                      }
                    }
                  }
                }
              };

              AbrController.prototype.onFragLoaded = function onFragLoaded(data) {
                var frag = data.frag;
                if (frag.type === 'main' && !isNaN(frag.sn)) {
                  // stop monitoring bw once frag loaded
                  this.clearTimer();
                  // store level id after successful fragment load
                  this.lastLoadedFragLevel = frag.level;
                  // reset forced auto level value so that next level will be selected
                  this._nextAutoLevel = -1;

                  // compute level average bitrate
                  if (this.hls.config.abrMaxWithRealBitrate) {
                    var level = this.hls.levels[frag.level];
                    var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;
                    var loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;
                    level.loaded = {bytes: loadedBytes, duration: loadedDuration};
                    level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
                  }
                  // if fragment has been loaded to perform a bitrate test,
                  if (data.frag.bitrateTest) {
                    var stats = data.stats;
                    stats.tparsed = stats.tbuffered = stats.tload;
                    this.onFragBuffered(data);
                  }
                }
              };

              AbrController.prototype.onFragBuffered = function onFragBuffered(data) {
                var stats = data.stats,
                  frag = data.frag;
                // only update stats on first frag buffering
                // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly
                // and leading to wrong bw estimation
                // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)
                if (stats.aborted !== true && frag.loadCounter === 1 && frag.type === 'main' && !isNaN(frag.sn) && (!frag.bitrateTest || stats.tload === stats.tbuffered)) {
                  // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached
                  // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached
                  // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation
                  var fragLoadingProcessingMs = stats.tparsed - stats.trequest;
                  logger["b" /* logger */].log('latency/loading/parsing/append/kbps:' + Math.round(stats.tfirst - stats.trequest) + '/' + Math.round(stats.tload - stats.tfirst) + '/' + Math.round(stats.tparsed - stats.tload) + '/' + Math.round(stats.tbuffered - stats.tparsed) + '/' + Math.round(8 * stats.loaded / (stats.tbuffered - stats.trequest)));
                  this._bwEstimator.sample(fragLoadingProcessingMs, stats.loaded);
                  stats.bwEstimate = this._bwEstimator.getEstimate();
                  // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration
                  if (frag.bitrateTest) {
                    this.bitrateTestDelay = fragLoadingProcessingMs / 1000;
                  } else {
                    this.bitrateTestDelay = 0;
                  }
                }
              };

              AbrController.prototype.onError = function onError(data) {
                // stop timer in case of frag loading error
                switch (data.details) {
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_TIMEOUT:
                    this.clearTimer();
                    break;
                  default:
                    break;
                }
              };

              AbrController.prototype.clearTimer = function clearTimer() {
                clearInterval(this.timer);
                this.timer = null;
              };

              // return next auto level


              AbrController.prototype._findBestLevel = function _findBestLevel(currentLevel, currentFragDuration, currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor, levels) {
                for (var i = maxAutoLevel; i >= minAutoLevel; i--) {
                  var levelInfo = levels[i],
                    levelDetails = levelInfo.details,
                    avgDuration = levelDetails ? levelDetails.totalduration / levelDetails.fragments.length : currentFragDuration,
                    live = levelDetails ? levelDetails.live : false,
                    adjustedbw = void 0;
                  // follow algorithm captured from stagefright :
                  // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
                  // Pick the highest bandwidth stream below or equal to estimated bandwidth.
                  // consider only 80% of the available bandwidth, but if we are switching up,
                  // be even more conservative (70%) to avoid overestimating and immediately
                  // switching back.
                  if (i <= currentLevel) {
                    adjustedbw = bwFactor * currentBw;
                  } else {
                    adjustedbw = bwUpFactor * currentBw;
                  }
                  var bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate,
                    fetchDuration = bitrate * avgDuration / adjustedbw;

                  logger["b" /* logger */].trace('level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: ' + i + '/' + Math.round(adjustedbw) + '/' + bitrate + '/' + avgDuration + '/' + maxFetchDuration + '/' + fetchDuration);
                  // if adjusted bw is greater than level bitrate AND
                  if (adjustedbw > bitrate && (
                      // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
                      // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
                      // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1
                      !fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) {
                    // as we are looping from highest to lowest, this will return the best achievable quality level
                    return i;
                  }
                }
                // not enough time budget even with quality level 0 ... rebuffering might happen
                return -1;
              };

              abr_controller__createClass(AbrController, [{
                key: 'nextAutoLevel',
                get: function get() {
                  var forcedAutoLevel = this._nextAutoLevel;
                  var bwEstimator = this._bwEstimator;
                  // in case next auto level has been forced, and bw not available or not reliable, return forced value
                  if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {
                    return forcedAutoLevel;
                  }
                  // compute next level using ABR logic
                  var nextABRAutoLevel = this._nextABRAutoLevel;
                  // if forced auto level has been defined, use it to cap ABR computed quality level
                  if (forcedAutoLevel !== -1) {
                    nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);
                  }
                  return nextABRAutoLevel;
                },
                set: function set(nextLevel) {
                  this._nextAutoLevel = nextLevel;
                }
              }, {
                key: '_nextABRAutoLevel',
                get: function get() {
                  var hls = this.hls,
                    maxAutoLevel = hls.maxAutoLevel,
                    levels = hls.levels,
                    config = hls.config,
                    minAutoLevel = hls.minAutoLevel;
                  var v = hls.media,
                    currentLevel = this.lastLoadedFragLevel,
                    currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0,
                    pos = v ? v.currentTime : 0,

                    // playbackRate is the absolute value of the playback rate; if v.playbackRate is 0, we use 1 to load as
                    // if we're playing back at the normal rate.
                    playbackRate = v && v.playbackRate !== 0 ? Math.abs(v.playbackRate) : 1.0,
                    avgbw = this._bwEstimator ? this._bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate,

                    // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.
                    bufferStarvationDelay = (buffer_helper.bufferInfo(v, pos, config.maxBufferHole).end - pos) / playbackRate;

                  // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all
                  var bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor, levels);
                  if (bestLevel >= 0) {
                    return bestLevel;
                  } else {
                    logger["b" /* logger */].trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering');
                    // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering
                    // if no matching level found, logic will return 0
                    var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay,
                      bwFactor = config.abrBandWidthFactor,
                      bwUpFactor = config.abrBandWidthUpFactor;
                    if (bufferStarvationDelay === 0) {
                      // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
                      var bitrateTestDelay = this.bitrateTestDelay;
                      if (bitrateTestDelay) {
                        // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
                        // max video loading delay used in  automatic start level selection :
                        // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
                        // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
                        // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
                        var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
                        maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
                        logger["b" /* logger */].trace('bitrate test took ' + Math.round(1000 * bitrateTestDelay) + 'ms, set first fragment max fetchDuration to ' + Math.round(1000 * maxStarvationDelay) + ' ms');
                        // don't use conservative factor on bitrate test
                        bwFactor = bwUpFactor = 1;
                      }
                    }
                    bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor, levels);
                    return Math.max(bestLevel, 0);
                  }
                }
              }]);

              return AbrController;
            }(event_handler);

            /* harmony default export */
            var abr_controller = (abr_controller_AbrController);

// CONCATENATED MODULE: ./src/controller/buffer-controller.js
            function buffer_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function buffer_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function buffer_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Buffer Controller
*/


            var buffer_controller_MediaSource = getMediaSource();

            var buffer_controller_BufferController = function (_EventHandler) {
              buffer_controller__inherits(BufferController, _EventHandler);

              function BufferController(hls) {
                buffer_controller__classCallCheck(this, BufferController);

                // the value that we have set mediasource.duration to
                // (the actual duration may be tweaked slighly by the browser)
                var _this = buffer_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHING, events["a" /* default */].MEDIA_DETACHING, events["a" /* default */].MANIFEST_PARSED, events["a" /* default */].BUFFER_RESET, events["a" /* default */].BUFFER_APPENDING, events["a" /* default */].BUFFER_CODECS, events["a" /* default */].BUFFER_EOS, events["a" /* default */].BUFFER_FLUSHING, events["a" /* default */].LEVEL_PTS_UPDATED, events["a" /* default */].LEVEL_UPDATED));

                _this._msDuration = null;
                // the value that we want to set mediaSource.duration to
                _this._levelDuration = null;

                // Source Buffer listeners
                _this.onsbue = _this.onSBUpdateEnd.bind(_this);
                _this.onsbe = _this.onSBUpdateError.bind(_this);
                _this.pendingTracks = {};
                _this.tracks = {};
                return _this;
              }

              BufferController.prototype.destroy = function destroy() {
                event_handler.prototype.destroy.call(this);
              };

              BufferController.prototype.onLevelPtsUpdated = function onLevelPtsUpdated(data) {
                var type = data.type;
                var audioTrack = this.tracks.audio;

                // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
                // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
                // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue
                // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`
                // event if SB is in updating state.
                // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486

                if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') {
                  // Chrome audio mp3 track
                  var audioBuffer = this.sourceBuffer.audio;
                  var delta = Math.abs(audioBuffer.timestampOffset - data.start);

                  // adjust timestamp offset if time delta is greater than 100ms
                  if (delta > 0.1) {
                    var updating = audioBuffer.updating;

                    try {
                      audioBuffer.abort();
                    } catch (err) {
                      updating = true;
                      logger["b" /* logger */].warn('can not abort audio buffer: ' + err);
                    }

                    if (!updating) {
                      logger["b" /* logger */].warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);
                      audioBuffer.timestampOffset = data.start;
                    } else {
                      this.audioTimestampOffset = data.start;
                    }
                  }
                }
              };

              BufferController.prototype.onManifestParsed = function onManifestParsed(data) {
                var audioExpected = data.audio,
                  videoExpected = data.video || data.levels.length && data.audio,
                  sourceBufferNb = 0;
                // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller
                // sourcebuffers will be created all at once when the expected nb of tracks will be reached
                // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
                // it will contain the expected nb of source buffers, no need to compute it
                if (data.altAudio && (audioExpected || videoExpected)) {
                  sourceBufferNb = (audioExpected ? 1 : 0) + (videoExpected ? 1 : 0);
                  logger["b" /* logger */].log(sourceBufferNb + ' sourceBuffer(s) expected');
                }
                this.sourceBufferNb = sourceBufferNb;
              };

              BufferController.prototype.onMediaAttaching = function onMediaAttaching(data) {
                var media = this.media = data.media;
                if (media) {
                  // setup the media source
                  var ms = this.mediaSource = new buffer_controller_MediaSource();
                  //Media Source listeners
                  this.onmso = this.onMediaSourceOpen.bind(this);
                  this.onmse = this.onMediaSourceEnded.bind(this);
                  this.onmsc = this.onMediaSourceClose.bind(this);
                  ms.addEventListener('sourceopen', this.onmso);
                  ms.addEventListener('sourceended', this.onmse);
                  ms.addEventListener('sourceclose', this.onmsc);
                  // link video and media Source
                  media.src = URL.createObjectURL(ms);
                }
              };

              BufferController.prototype.onMediaDetaching = function onMediaDetaching() {
                logger["b" /* logger */].log('media source detaching');
                var ms = this.mediaSource;
                if (ms) {
                  if (ms.readyState === 'open') {
                    try {
                      // endOfStream could trigger exception if any sourcebuffer is in updating state
                      // we don't really care about checking sourcebuffer state here,
                      // as we are anyway detaching the MediaSource
                      // let's just avoid this exception to propagate
                      ms.endOfStream();
                    } catch (err) {
                      logger["b" /* logger */].warn('onMediaDetaching:' + err.message + ' while calling endOfStream');
                    }
                  }
                  ms.removeEventListener('sourceopen', this.onmso);
                  ms.removeEventListener('sourceended', this.onmse);
                  ms.removeEventListener('sourceclose', this.onmsc);

                  // Detach properly the MediaSource from the HTMLMediaElement as
                  // suggested in https://github.com/w3c/media-source/issues/53.
                  if (this.media) {
                    URL.revokeObjectURL(this.media.src);
                    this.media.removeAttribute('src');
                    this.media.load();
                  }

                  this.mediaSource = null;
                  this.media = null;
                  this.pendingTracks = {};
                  this.tracks = {};
                  this.sourceBuffer = {};
                  this.flushRange = [];
                  this.segments = [];
                  this.appended = 0;
                }
                this.onmso = this.onmse = this.onmsc = null;
                this.hls.trigger(events["a" /* default */].MEDIA_DETACHED);
              };

              BufferController.prototype.onMediaSourceOpen = function onMediaSourceOpen() {
                logger["b" /* logger */].log('media source opened');
                this.hls.trigger(events["a" /* default */].MEDIA_ATTACHED, {media: this.media});
                var mediaSource = this.mediaSource;
                if (mediaSource) {
                  // once received, don't listen anymore to sourceopen event
                  mediaSource.removeEventListener('sourceopen', this.onmso);
                }
                this.checkPendingTracks();
              };

              BufferController.prototype.checkPendingTracks = function checkPendingTracks() {
                // if any buffer codecs pending, check if we have enough to create sourceBuffers
                var pendingTracks = this.pendingTracks,
                  pendingTracksNb = Object.keys(pendingTracks).length;
                // if any pending tracks and (if nb of pending tracks gt or equal than expected nb or if unknown expected nb)
                if (pendingTracksNb && (this.sourceBufferNb <= pendingTracksNb || this.sourceBufferNb === 0)) {
                  // ok, let's create them now !
                  this.createSourceBuffers(pendingTracks);
                  this.pendingTracks = {};
                  // append any pending segments now !
                  this.doAppending();
                }
              };

              BufferController.prototype.onMediaSourceClose = function onMediaSourceClose() {
                logger["b" /* logger */].log('media source closed');
              };

              BufferController.prototype.onMediaSourceEnded = function onMediaSourceEnded() {
                logger["b" /* logger */].log('media source ended');
              };

              BufferController.prototype.onSBUpdateEnd = function onSBUpdateEnd() {
                // update timestampOffset
                if (this.audioTimestampOffset) {
                  var audioBuffer = this.sourceBuffer.audio;
                  logger["b" /* logger */].warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + this.audioTimestampOffset);
                  audioBuffer.timestampOffset = this.audioTimestampOffset;
                  delete this.audioTimestampOffset;
                }

                if (this._needsFlush) {
                  this.doFlush();
                }

                if (this._needsEos) {
                  this.checkEos();
                }
                this.appending = false;
                var parent = this.parent;
                // count nb of pending segments waiting for appending on this sourcebuffer
                var pending = this.segments.reduce(function (counter, segment) {
                  return segment.parent === parent ? counter + 1 : counter;
                }, 0);
                this.hls.trigger(events["a" /* default */].BUFFER_APPENDED, {parent: parent, pending: pending});

                // don't append in flushing mode
                if (!this._needsFlush) {
                  this.doAppending();
                }

                this.updateMediaElementDuration();
              };

              BufferController.prototype.onSBUpdateError = function onSBUpdateError(event) {
                logger["b" /* logger */].error('sourceBuffer error:', event);
                // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
                // this error might not always be fatal (it is fatal if decode error is set, in that case
                // it will be followed by a mediaElement error ...)
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                  details: errors["a" /* ErrorDetails */].BUFFER_APPENDING_ERROR,
                  fatal: false
                });
                // we don't need to do more than that, as accordin to the spec, updateend will be fired just after
              };

              BufferController.prototype.onBufferReset = function onBufferReset() {
                var sourceBuffer = this.sourceBuffer;
                for (var type in sourceBuffer) {
                  var sb = sourceBuffer[type];
                  try {
                    this.mediaSource.removeSourceBuffer(sb);
                    sb.removeEventListener('updateend', this.onsbue);
                    sb.removeEventListener('error', this.onsbe);
                  } catch (err) {
                  }
                }
                this.sourceBuffer = {};
                this.flushRange = [];
                this.segments = [];
                this.appended = 0;
              };

              BufferController.prototype.onBufferCodecs = function onBufferCodecs(tracks) {
                // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
                // if sourcebuffers already created, do nothing ...
                if (Object.keys(this.sourceBuffer).length === 0) {
                  for (var trackName in tracks) {
                    this.pendingTracks[trackName] = tracks[trackName];
                  }
                  var mediaSource = this.mediaSource;
                  if (mediaSource && mediaSource.readyState === 'open') {
                    // try to create sourcebuffers if mediasource opened
                    this.checkPendingTracks();
                  }
                }
              };

              BufferController.prototype.createSourceBuffers = function createSourceBuffers(tracks) {
                var sourceBuffer = this.sourceBuffer,
                  mediaSource = this.mediaSource;

                for (var trackName in tracks) {
                  if (!sourceBuffer[trackName]) {
                    var track = tracks[trackName];
                    // use levelCodec as first priority
                    var codec = track.levelCodec || track.codec;
                    var mimeType = track.container + ';codecs=' + codec;
                    logger["b" /* logger */].log('creating sourceBuffer(' + mimeType + ')');
                    try {
                      var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
                      sb.addEventListener('updateend', this.onsbue);
                      sb.addEventListener('error', this.onsbe);
                      this.tracks[trackName] = {codec: codec, container: track.container};
                      track.buffer = sb;
                    } catch (err) {
                      logger["b" /* logger */].error('error while trying to add sourceBuffer:' + err.message);
                      this.hls.trigger(events["a" /* default */].ERROR, {
                        type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                        details: errors["a" /* ErrorDetails */].BUFFER_ADD_CODEC_ERROR,
                        fatal: false,
                        err: err,
                        mimeType: mimeType
                      });
                    }
                  }
                }
                this.hls.trigger(events["a" /* default */].BUFFER_CREATED, {tracks: tracks});
              };

              BufferController.prototype.onBufferAppending = function onBufferAppending(data) {
                if (!this._needsFlush) {
                  if (!this.segments) {
                    this.segments = [data];
                  } else {
                    this.segments.push(data);
                  }
                  this.doAppending();
                }
              };

              BufferController.prototype.onBufferAppendFail = function onBufferAppendFail(data) {
                logger["b" /* logger */].error('sourceBuffer error:', data.event);
                // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
                // this error might not always be fatal (it is fatal if decode error is set, in that case
                // it will be followed by a mediaElement error ...)
                this.hls.trigger(events["a" /* default */].ERROR, {
                  type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                  details: errors["a" /* ErrorDetails */].BUFFER_APPENDING_ERROR,
                  fatal: false
                });
              };

              // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()


              BufferController.prototype.onBufferEos = function onBufferEos(data) {
                var sb = this.sourceBuffer;
                var dataType = data.type;
                for (var type in sb) {
                  if (!dataType || type === dataType) {
                    if (!sb[type].ended) {
                      sb[type].ended = true;
                      logger["b" /* logger */].log(type + ' sourceBuffer now EOS');
                    }
                  }
                }
                this.checkEos();
              };

              // if all source buffers are marked as ended, signal endOfStream() to MediaSource.


              BufferController.prototype.checkEos = function checkEos() {
                var sb = this.sourceBuffer,
                  mediaSource = this.mediaSource;
                if (!mediaSource || mediaSource.readyState !== 'open') {
                  this._needsEos = false;
                  return;
                }
                for (var type in sb) {
                  var sbobj = sb[type];
                  if (!sbobj.ended) {
                    return;
                  }
                  if (sbobj.updating) {
                    this._needsEos = true;
                    return;
                  }
                }
                logger["b" /* logger */].log('all media data available, signal endOfStream() to MediaSource and stop loading fragment');
                //Notify the media element that it now has all of the media data
                try {
                  mediaSource.endOfStream();
                } catch (e) {
                  logger["b" /* logger */].warn('exception while calling mediaSource.endOfStream()');
                }
                this._needsEos = false;
              };

              BufferController.prototype.onBufferFlushing = function onBufferFlushing(data) {
                this.flushRange.push({start: data.startOffset, end: data.endOffset, type: data.type});
                // attempt flush immediatly
                this.flushBufferCounter = 0;
                this.doFlush();
              };

              BufferController.prototype.onLevelUpdated = function onLevelUpdated(event) {
                var details = event.details;
                if (details.fragments.length === 0) {
                  return;
                }
                this._levelDuration = details.totalduration + details.fragments[0].start;
                this.updateMediaElementDuration();
              };

              // https://github.com/video-dev/hls.js/issues/355


              BufferController.prototype.updateMediaElementDuration = function updateMediaElementDuration() {
                var media = this.media,
                  mediaSource = this.mediaSource,
                  sourceBuffer = this.sourceBuffer,
                  levelDuration = this._levelDuration;
                if (levelDuration === null || !media || !mediaSource || !sourceBuffer || media.readyState === 0 || mediaSource.readyState !== 'open') {
                  return;
                }
                for (var type in sourceBuffer) {
                  if (sourceBuffer[type].updating) {
                    // can't set duration whilst a buffer is updating
                    return;
                  }
                }
                if (this._msDuration === null) {
                  // initialise to the value that the media source is reporting
                  this._msDuration = mediaSource.duration;
                }
                var duration = media.duration;
                // levelDuration was the last value we set.
                // not using mediaSource.duration as the browser may tweak this value
                // only update mediasource duration if its value increase, this is to avoid
                // flushing already buffered portion when switching between quality level
                if (levelDuration > this._msDuration && levelDuration > duration || duration === Infinity || isNaN(duration)) {
                  logger["b" /* logger */].log('Updating mediasource duration to ' + levelDuration.toFixed(3));
                  this._msDuration = mediaSource.duration = levelDuration;
                }
              };

              BufferController.prototype.doFlush = function doFlush() {
                // loop through all buffer ranges to flush
                while (this.flushRange.length) {
                  var range = this.flushRange[0];
                  // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer
                  if (this.flushBuffer(range.start, range.end, range.type)) {
                    // range flushed, remove from flush array
                    this.flushRange.shift();
                    this.flushBufferCounter = 0;
                  } else {
                    this._needsFlush = true;
                    // avoid looping, wait for SB update end to retrigger a flush
                    return;
                  }
                }
                if (this.flushRange.length === 0) {
                  // everything flushed
                  this._needsFlush = false;

                  // let's recompute this.appended, which is used to avoid flush looping
                  var appended = 0;
                  var sourceBuffer = this.sourceBuffer;
                  try {
                    for (var type in sourceBuffer) {
                      appended += sourceBuffer[type].buffered.length;
                    }
                  } catch (error) {
                    // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource
                    // this is harmess at this stage, catch this to avoid reporting an internal exception
                    logger["b" /* logger */].error('error while accessing sourceBuffer.buffered');
                  }
                  this.appended = appended;
                  this.hls.trigger(events["a" /* default */].BUFFER_FLUSHED);
                }
              };

              BufferController.prototype.doAppending = function doAppending() {
                var hls = this.hls,
                  sourceBuffer = this.sourceBuffer,
                  segments = this.segments;
                if (Object.keys(sourceBuffer).length) {
                  if (this.media.error) {
                    this.segments = [];
                    logger["b" /* logger */].error('trying to append although a media error occured, flush segment and abort');
                    return;
                  }
                  if (this.appending) {
                    //logger.log(`sb appending in progress`);
                    return;
                  }
                  if (segments && segments.length) {
                    var segment = segments.shift();
                    try {
                      var type = segment.type,
                        sb = sourceBuffer[type];
                      if (sb) {
                        if (!sb.updating) {
                          // reset sourceBuffer ended flag before appending segment
                          sb.ended = false;
                          //logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);
                          this.parent = segment.parent;
                          sb.appendBuffer(segment.data);
                          this.appendError = 0;
                          this.appended++;
                          this.appending = true;
                        } else {
                          segments.unshift(segment);
                        }
                      } else {
                        // in case we don't have any source buffer matching with this segment type,
                        // it means that Mediasource fails to create sourcebuffer
                        // discard this segment, and trigger update end
                        this.onSBUpdateEnd();
                      }
                    } catch (err) {
                      // in case any error occured while appending, put back segment in segments table
                      logger["b" /* logger */].error('error while trying to append buffer:' + err.message);
                      segments.unshift(segment);
                      var event = {type: errors["b" /* ErrorTypes */].MEDIA_ERROR, parent: segment.parent};
                      if (err.code !== 22) {
                        if (this.appendError) {
                          this.appendError++;
                        } else {
                          this.appendError = 1;
                        }
                        event.details = errors["a" /* ErrorDetails */].BUFFER_APPEND_ERROR;
                        /* with UHD content, we could get loop of quota exceeded error until
              browser is able to evict some data from sourcebuffer. retrying help recovering this
            */
                        if (this.appendError > hls.config.appendErrorMaxRetry) {
                          logger["b" /* logger */].log('fail ' + hls.config.appendErrorMaxRetry + ' times to append segment in sourceBuffer');
                          segments = [];
                          event.fatal = true;
                          hls.trigger(events["a" /* default */].ERROR, event);
                          return;
                        } else {
                          event.fatal = false;
                          hls.trigger(events["a" /* default */].ERROR, event);
                        }
                      } else {
                        // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
                        // let's stop appending any segments, and report BUFFER_FULL_ERROR error
                        this.segments = [];
                        event.details = errors["a" /* ErrorDetails */].BUFFER_FULL_ERROR;
                        event.fatal = false;
                        hls.trigger(events["a" /* default */].ERROR, event);
                        return;
                      }
                    }
                  }
                }
              };

              /*
    flush specified buffered range,
    return true once range has been flushed.
    as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end
  */


              BufferController.prototype.flushBuffer = function flushBuffer(startOffset, endOffset, typeIn) {
                var sb,
                  i,
                  bufStart,
                  bufEnd,
                  flushStart,
                  flushEnd,
                  sourceBuffer = this.sourceBuffer;
                if (Object.keys(sourceBuffer).length) {
                  logger["b" /* logger */].log('flushBuffer,pos/start/end: ' + this.media.currentTime.toFixed(3) + '/' + startOffset + '/' + endOffset);
                  // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments
                  if (this.flushBufferCounter < this.appended) {
                    for (var type in sourceBuffer) {
                      // check if sourcebuffer type is defined (typeIn): if yes, let's only flush this one
                      // if no, let's flush all sourcebuffers
                      if (typeIn && type !== typeIn) {
                        continue;
                      }
                      sb = sourceBuffer[type];
                      // we are going to flush buffer, mark source buffer as 'not ended'
                      sb.ended = false;
                      if (!sb.updating) {
                        try {
                          for (i = 0; i < sb.buffered.length; i++) {
                            bufStart = sb.buffered.start(i);
                            bufEnd = sb.buffered.end(i);
                            // workaround firefox not able to properly flush multiple buffered range.
                            if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1 && endOffset === Number.POSITIVE_INFINITY) {
                              flushStart = startOffset;
                              flushEnd = endOffset;
                            } else {
                              flushStart = Math.max(bufStart, startOffset);
                              flushEnd = Math.min(bufEnd, endOffset);
                            }
                            /* sometimes sourcebuffer.remove() does not flush
                   the exact expected time range.
                   to avoid rounding issues/infinite loop,
                   only flush buffer range of length greater than 500ms.
                */
                            if (Math.min(flushEnd, bufEnd) - flushStart > 0.5) {
                              this.flushBufferCounter++;
                              logger["b" /* logger */].log('flush ' + type + ' [' + flushStart + ',' + flushEnd + '], of [' + bufStart + ',' + bufEnd + '], pos:' + this.media.currentTime);
                              sb.remove(flushStart, flushEnd);
                              return false;
                            }
                          }
                        } catch (e) {
                          logger["b" /* logger */].warn('exception while accessing sourcebuffer, it might have been removed from MediaSource');
                        }
                      } else {
                        //logger.log('abort ' + type + ' append in progress');
                        // this will abort any appending in progress
                        //sb.abort();
                        logger["b" /* logger */].warn('cannot flush, sb updating in progress');
                        return false;
                      }
                    }
                  } else {
                    logger["b" /* logger */].warn('abort flushing too many retries');
                  }
                  logger["b" /* logger */].log('buffer flushed');
                }
                // everything flushed !
                return true;
              };

              return BufferController;
            }(event_handler);

            /* harmony default export */
            var buffer_controller = (buffer_controller_BufferController);
// CONCATENATED MODULE: ./src/controller/cap-level-controller.js
            var cap_level_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function cap_level_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function cap_level_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function cap_level_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * cap stream level to media size dimension controller
*/


            var cap_level_controller_CapLevelController = function (_EventHandler) {
              cap_level_controller__inherits(CapLevelController, _EventHandler);

              function CapLevelController(hls) {
                cap_level_controller__classCallCheck(this, CapLevelController);

                return cap_level_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].FPS_DROP_LEVEL_CAPPING, events["a" /* default */].MEDIA_ATTACHING, events["a" /* default */].MANIFEST_PARSED));
              }

              CapLevelController.prototype.destroy = function destroy() {
                if (this.hls.config.capLevelToPlayerSize) {
                  this.media = this.restrictedLevels = null;
                  this.autoLevelCapping = Number.POSITIVE_INFINITY;
                  if (this.timer) {
                    this.timer = clearInterval(this.timer);
                  }
                }
              };

              CapLevelController.prototype.onFpsDropLevelCapping = function onFpsDropLevelCapping(data) {
                // Don't add a restricted level more than once
                if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {
                  this.restrictedLevels.push(data.droppedLevel);
                }
              };

              CapLevelController.prototype.onMediaAttaching = function onMediaAttaching(data) {
                this.media = data.media instanceof HTMLVideoElement ? data.media : null;
              };

              CapLevelController.prototype.onManifestParsed = function onManifestParsed(data) {
                var hls = this.hls;
                this.restrictedLevels = [];
                if (hls.config.capLevelToPlayerSize) {
                  this.autoLevelCapping = Number.POSITIVE_INFINITY;
                  this.levels = data.levels;
                  hls.firstLevel = this.getMaxLevel(data.firstLevel);
                  clearInterval(this.timer);
                  this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);
                  this.detectPlayerSize();
                }
              };

              CapLevelController.prototype.detectPlayerSize = function detectPlayerSize() {
                if (this.media) {
                  var levelsLength = this.levels ? this.levels.length : 0;
                  if (levelsLength) {
                    var hls = this.hls;
                    hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);
                    if (hls.autoLevelCapping > this.autoLevelCapping) {
                      // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
                      // usually happen when the user go to the fullscreen mode.
                      hls.streamController.nextLevelSwitch();
                    }
                    this.autoLevelCapping = hls.autoLevelCapping;
                  }
                }
              };

              /*
  * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
  */


              CapLevelController.prototype.getMaxLevel = function getMaxLevel(capLevelIndex) {
                var _this2 = this;

                if (!this.levels) {
                  return -1;
                }

                var validLevels = this.levels.filter(function (level, index) {
                  return CapLevelController.isLevelAllowed(index, _this2.restrictedLevels) && index <= capLevelIndex;
                });

                return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
              };

              CapLevelController.isLevelAllowed = function isLevelAllowed(level) {
                var restrictedLevels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                return restrictedLevels.indexOf(level) === -1;
              };

              CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {
                if (!levels || levels && !levels.length) {
                  return -1;
                }

                // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next
                // to determine whether we've chosen the greatest bandwidth for the media's dimensions
                var atGreatestBandiwdth = function atGreatestBandiwdth(curLevel, nextLevel) {
                  if (!nextLevel) {
                    return true;
                  }
                  return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
                };

                // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to
                // the max level
                var maxLevelIndex = levels.length - 1;

                for (var i = 0; i < levels.length; i += 1) {
                  var level = levels[i];
                  if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {
                    maxLevelIndex = i;
                    break;
                  }
                }

                return maxLevelIndex;
              };

              cap_level_controller__createClass(CapLevelController, [{
                key: 'mediaWidth',
                get: function get() {
                  var width = void 0;
                  var media = this.media;
                  if (media) {
                    width = media.width || media.clientWidth || media.offsetWidth;
                    width *= CapLevelController.contentScaleFactor;
                  }
                  return width;
                }
              }, {
                key: 'mediaHeight',
                get: function get() {
                  var height = void 0;
                  var media = this.media;
                  if (media) {
                    height = media.height || media.clientHeight || media.offsetHeight;
                    height *= CapLevelController.contentScaleFactor;
                  }
                  return height;
                }
              }], [{
                key: 'contentScaleFactor',
                get: function get() {
                  var pixelRatio = 1;
                  try {
                    pixelRatio = window.devicePixelRatio;
                  } catch (e) {
                  }
                  return pixelRatio;
                }
              }]);

              return CapLevelController;
            }(event_handler);

            /* harmony default export */
            var cap_level_controller = (cap_level_controller_CapLevelController);

// CONCATENATED MODULE: ./src/controller/fps-controller.js
            function fps_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function fps_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function fps_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * FPS Controller
*/


            var fps_controller_FPSController = function (_EventHandler) {
              fps_controller__inherits(FPSController, _EventHandler);

              function FPSController(hls) {
                fps_controller__classCallCheck(this, FPSController);

                return fps_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHING));
              }

              FPSController.prototype.destroy = function destroy() {
                if (this.timer) {
                  clearInterval(this.timer);
                }
                this.isVideoPlaybackQualityAvailable = false;
              };

              FPSController.prototype.onMediaAttaching = function onMediaAttaching(data) {
                var config = this.hls.config;
                if (config.capLevelOnFPSDrop) {
                  var video = this.video = data.media instanceof HTMLVideoElement ? data.media : null;
                  if (typeof video.getVideoPlaybackQuality === 'function') {
                    this.isVideoPlaybackQualityAvailable = true;
                  }
                  clearInterval(this.timer);
                  this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
                }
              };

              FPSController.prototype.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {
                var currentTime = performance.now();
                if (decodedFrames) {
                  if (this.lastTime) {
                    var currentPeriod = currentTime - this.lastTime,
                      currentDropped = droppedFrames - this.lastDroppedFrames,
                      currentDecoded = decodedFrames - this.lastDecodedFrames,
                      droppedFPS = 1000 * currentDropped / currentPeriod,
                      hls = this.hls;
                    hls.trigger(events["a" /* default */].FPS_DROP, {
                      currentDropped: currentDropped,
                      currentDecoded: currentDecoded,
                      totalDroppedFrames: droppedFrames
                    });
                    if (droppedFPS > 0) {
                      //logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
                      if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
                        var currentLevel = hls.currentLevel;
                        logger["b" /* logger */].warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);
                        if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
                          currentLevel = currentLevel - 1;
                          hls.trigger(events["a" /* default */].FPS_DROP_LEVEL_CAPPING, {
                            level: currentLevel,
                            droppedLevel: hls.currentLevel
                          });
                          hls.autoLevelCapping = currentLevel;
                          hls.streamController.nextLevelSwitch();
                        }
                      }
                    }
                  }
                  this.lastTime = currentTime;
                  this.lastDroppedFrames = droppedFrames;
                  this.lastDecodedFrames = decodedFrames;
                }
              };

              FPSController.prototype.checkFPSInterval = function checkFPSInterval() {
                var video = this.video;
                if (video) {
                  if (this.isVideoPlaybackQualityAvailable) {
                    var videoPlaybackQuality = video.getVideoPlaybackQuality();
                    this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
                  } else {
                    this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
                  }
                }
              };

              return FPSController;
            }(event_handler);

            /* harmony default export */
            var fps_controller = (fps_controller_FPSController);

// CONCATENATED MODULE: ./src/utils/xhr-loader.js
            function xhr_loader__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * XHR based logger
             */



            var xhr_loader_XhrLoader = function () {
              function XhrLoader(config) {
                xhr_loader__classCallCheck(this, XhrLoader);

                if (config && config.xhrSetup) {
                  this.xhrSetup = config.xhrSetup;
                }
              }

              XhrLoader.prototype.destroy = function destroy() {
                this.abort();
                this.loader = null;
              };

              XhrLoader.prototype.abort = function abort() {
                var loader = this.loader;
                if (loader && loader.readyState !== 4) {
                  this.stats.aborted = true;
                  loader.abort();
                }

                window.clearTimeout(this.requestTimeout);
                this.requestTimeout = null;
                window.clearTimeout(this.retryTimeout);
                this.retryTimeout = null;
              };

              XhrLoader.prototype.load = function load(context, config, callbacks) {
                this.context = context;
                this.config = config;
                this.callbacks = callbacks;
                this.stats = {trequest: performance.now(), retry: 0};
                this.retryDelay = config.retryDelay;
                this.loadInternal();
              };

              XhrLoader.prototype.loadInternal = function loadInternal() {
                var xhr,
                  context = this.context;
                xhr = this.loader = new XMLHttpRequest();

                var stats = this.stats;
                stats.tfirst = 0;
                stats.loaded = 0;
                var xhrSetup = this.xhrSetup;

                try {
                  if (xhrSetup) {
                    try {
                      xhrSetup(xhr, context.url);
                    } catch (e) {
                      // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader("Content-Language", "test");}
                      // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN
                      xhr.open('GET', context.url, true);
                      xhrSetup(xhr, context.url);
                    }
                  }
                  if (!xhr.readyState) {
                    xhr.open('GET', context.url, true);
                  }
                } catch (e) {
                  // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
                  this.callbacks.onError({code: xhr.status, text: e.message}, context, xhr);
                  return;
                }

                if (context.rangeEnd) {
                  xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));
                }
                xhr.onreadystatechange = this.readystatechange.bind(this);
                xhr.onprogress = this.loadprogress.bind(this);
                xhr.responseType = context.responseType;

                // setup timeout before we perform request
                this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);
                xhr.send();
              };

              XhrLoader.prototype.readystatechange = function readystatechange(event) {
                var xhr = event.currentTarget,
                  readyState = xhr.readyState,
                  stats = this.stats,
                  context = this.context,
                  config = this.config;

                // don't proceed if xhr has been aborted
                if (stats.aborted) {
                  return;
                }

                // >= HEADERS_RECEIVED
                if (readyState >= 2) {
                  // clear xhr timeout and rearm it if readyState less than 4
                  window.clearTimeout(this.requestTimeout);
                  if (stats.tfirst === 0) {
                    stats.tfirst = Math.max(performance.now(), stats.trequest);
                  }
                  if (readyState === 4) {
                    var status = xhr.status;
                    // http status between 200 to 299 are all successful
                    if (status >= 200 && status < 300) {
                      stats.tload = Math.max(stats.tfirst, performance.now());
                      var data = void 0,
                        len = void 0;
                      if (context.responseType === 'arraybuffer') {
                        data = xhr.response;
                        len = data.byteLength;
                      } else {
                        data = xhr.responseText;
                        len = data.length;
                      }
                      stats.loaded = stats.total = len;
                      var response = {url: xhr.responseURL, data: data};
                      this.callbacks.onSuccess(response, stats, context, xhr);
                    } else {
                      // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
                      if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {
                        logger["b" /* logger */].error(status + ' while loading ' + context.url);
                        this.callbacks.onError({code: status, text: xhr.statusText}, context, xhr);
                      } else {
                        // retry
                        logger["b" /* logger */].warn(status + ' while loading ' + context.url + ', retrying in ' + this.retryDelay + '...');
                        // aborts and resets internal state
                        this.destroy();
                        // schedule retry
                        this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay);
                        // set exponential backoff
                        this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);
                        stats.retry++;
                      }
                    }
                  } else {
                    // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
                    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);
                  }
                }
              };

              XhrLoader.prototype.loadtimeout = function loadtimeout() {
                logger["b" /* logger */].warn('timeout while loading ' + this.context.url);
                this.callbacks.onTimeout(this.stats, this.context, null);
              };

              XhrLoader.prototype.loadprogress = function loadprogress(event) {
                var xhr = event.currentTarget,
                  stats = this.stats;

                stats.loaded = event.loaded;
                if (event.lengthComputable) {
                  stats.total = event.total;
                }
                var onProgress = this.callbacks.onProgress;
                if (onProgress) {
                  // third arg is to provide on progress data
                  onProgress(stats, this.context, null, xhr);
                }
              };

              return XhrLoader;
            }();

            /* harmony default export */
            var xhr_loader = (xhr_loader_XhrLoader);
// CONCATENATED MODULE: ./src/controller/audio-track-controller.js
            var audio_track_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function audio_track_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function audio_track_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function audio_track_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * audio track controller
*/


            var audio_track_controller_AudioTrackController = function (_EventHandler) {
              audio_track_controller__inherits(AudioTrackController, _EventHandler);

              function AudioTrackController(hls) {
                audio_track_controller__classCallCheck(this, AudioTrackController);

                var _this = audio_track_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MANIFEST_LOADING, events["a" /* default */].MANIFEST_LOADED, events["a" /* default */].AUDIO_TRACK_LOADED, events["a" /* default */].ERROR));

                _this.ticks = 0;
                _this.ontick = _this.tick.bind(_this);
                return _this;
              }

              AudioTrackController.prototype.destroy = function destroy() {
                this.cleanTimer();
                event_handler.prototype.destroy.call(this);
              };

              AudioTrackController.prototype.cleanTimer = function cleanTimer() {
                if (this.timer) {
                  clearTimeout(this.timer);
                  this.timer = null;
                }
              };

              AudioTrackController.prototype.tick = function tick() {
                this.ticks++;
                if (this.ticks === 1) {
                  this.doTick();
                  if (this.ticks > 1) {
                    setTimeout(this.tick, 1);
                  }
                  this.ticks = 0;
                }
              };

              AudioTrackController.prototype.doTick = function doTick() {
                this.updateTrack(this.trackId);
              };

              AudioTrackController.prototype.onError = function onError(data) {
                if (data.fatal && data.type === errors["b" /* ErrorTypes */].NETWORK_ERROR) {
                  this.cleanTimer();
                }
              };

              AudioTrackController.prototype.onManifestLoading = function onManifestLoading() {
                // reset audio tracks on manifest loading
                this.tracks = [];
                this.trackId = -1;
              };

              AudioTrackController.prototype.onManifestLoaded = function onManifestLoaded(data) {
                var _this2 = this;

                var tracks = data.audioTracks || [];
                var defaultFound = false;
                this.tracks = tracks;
                this.hls.trigger(events["a" /* default */].AUDIO_TRACKS_UPDATED, {audioTracks: tracks});
                // loop through available audio tracks and autoselect default if needed
                var id = 0;
                tracks.forEach(function (track) {
                  if (track.default && !defaultFound) {
                    _this2.audioTrack = id;
                    defaultFound = true;
                    return;
                  }
                  id++;
                });
                if (defaultFound === false && tracks.length) {
                  logger["b" /* logger */].log('no default audio track defined, use first audio track as default');
                  this.audioTrack = 0;
                }
              };

              AudioTrackController.prototype.onAudioTrackLoaded = function onAudioTrackLoaded(data) {
                if (data.id < this.tracks.length) {
                  logger["b" /* logger */].log('audioTrack ' + data.id + ' loaded');
                  this.tracks[data.id].details = data.details;
                  // check if current playlist is a live playlist
                  if (data.details.live && !this.timer) {
                    // if live playlist we will have to reload it periodically
                    // set reload period to playlist target duration
                    this.timer = setInterval(this.ontick, 1000 * data.details.targetduration);
                  }
                  if (!data.details.live && this.timer) {
                    // playlist is not live and timer is armed : stopping it
                    this.cleanTimer();
                  }
                }
              };

              /** get alternate audio tracks list from playlist **/


              AudioTrackController.prototype.setAudioTrackInternal = function setAudioTrackInternal(newId) {
                // check if level idx is valid
                if (newId >= 0 && newId < this.tracks.length) {
                  // stopping live reloading timer if any
                  this.cleanTimer();
                  this.trackId = newId;
                  logger["b" /* logger */].log('switching to audioTrack ' + newId);
                  var audioTrack = this.tracks[newId],
                    hls = this.hls,
                    type = audioTrack.type,
                    url = audioTrack.url,
                    eventObj = {id: newId, type: type, url: url};
                  // keep AUDIO_TRACK_SWITCH for legacy reason
                  hls.trigger(events["a" /* default */].AUDIO_TRACK_SWITCH, eventObj);
                  hls.trigger(events["a" /* default */].AUDIO_TRACK_SWITCHING, eventObj);
                  // check if we need to load playlist for this audio Track
                  var details = audioTrack.details;
                  if (url && (details === undefined || details.live === true)) {
                    // track not retrieved yet, or live playlist we need to (re)load it
                    logger["b" /* logger */].log('(re)loading playlist for audioTrack ' + newId);
                    hls.trigger(events["a" /* default */].AUDIO_TRACK_LOADING, {url: url, id: newId});
                  }
                }
              };

              AudioTrackController.prototype.updateTrack = function updateTrack(newId) {
                // check if level idx is valid
                if (newId >= 0 && newId < this.tracks.length) {
                  // stopping live reloading timer if any
                  this.cleanTimer();
                  this.trackId = newId;
                  logger["b" /* logger */].log('updating audioTrack ' + newId);
                  var audioTrack = this.tracks[newId],
                    url = audioTrack.url;
                  // check if we need to load playlist for this audio Track
                  var details = audioTrack.details;
                  if (url && (details === undefined || details.live === true)) {
                    // track not retrieved yet, or live playlist we need to (re)load it
                    logger["b" /* logger */].log('(re)loading playlist for audioTrack ' + newId);
                    this.hls.trigger(events["a" /* default */].AUDIO_TRACK_LOADING, {url: url, id: newId});
                  }
                }
              };

              audio_track_controller__createClass(AudioTrackController, [{
                key: 'audioTracks',
                get: function get() {
                  return this.tracks;
                }

                /** get index of the selected audio track (index in audio track lists) **/

              }, {
                key: 'audioTrack',
                get: function get() {
                  return this.trackId;
                }

                /** select an audio track, based on its index in audio track lists**/
                ,
                set: function set(audioTrackId) {
                  if (this.trackId !== audioTrackId || this.tracks[audioTrackId].details === undefined) {
                    this.setAudioTrackInternal(audioTrackId);
                  }
                }
              }]);

              return AudioTrackController;
            }(event_handler);

            /* harmony default export */
            var audio_track_controller = (audio_track_controller_AudioTrackController);
// CONCATENATED MODULE: ./src/controller/audio-stream-controller.js
            var audio_stream_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function audio_stream_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function audio_stream_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function audio_stream_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Audio Stream Controller
*/


            var audio_stream_controller_State = {
              STOPPED: 'STOPPED',
              STARTING: 'STARTING',
              IDLE: 'IDLE',
              PAUSED: 'PAUSED',
              KEY_LOADING: 'KEY_LOADING',
              FRAG_LOADING: 'FRAG_LOADING',
              FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
              WAITING_TRACK: 'WAITING_TRACK',
              PARSING: 'PARSING',
              PARSED: 'PARSED',
              BUFFER_FLUSHING: 'BUFFER_FLUSHING',
              ENDED: 'ENDED',
              ERROR: 'ERROR',
              WAITING_INIT_PTS: 'WAITING_INIT_PTS'
            };

            var audio_stream_controller_AudioStreamController = function (_EventHandler) {
              audio_stream_controller__inherits(AudioStreamController, _EventHandler);

              function AudioStreamController(hls) {
                audio_stream_controller__classCallCheck(this, AudioStreamController);

                var _this = audio_stream_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHED, events["a" /* default */].MEDIA_DETACHING, events["a" /* default */].AUDIO_TRACKS_UPDATED, events["a" /* default */].AUDIO_TRACK_SWITCHING, events["a" /* default */].AUDIO_TRACK_LOADED, events["a" /* default */].KEY_LOADED, events["a" /* default */].FRAG_LOADED, events["a" /* default */].FRAG_PARSING_INIT_SEGMENT, events["a" /* default */].FRAG_PARSING_DATA, events["a" /* default */].FRAG_PARSED, events["a" /* default */].ERROR, events["a" /* default */].BUFFER_CREATED, events["a" /* default */].BUFFER_APPENDED, events["a" /* default */].BUFFER_FLUSHED, events["a" /* default */].INIT_PTS_FOUND));

                _this.config = hls.config;
                _this.audioCodecSwap = false;
                _this.ticks = 0;
                _this._state = audio_stream_controller_State.STOPPED;
                _this.ontick = _this.tick.bind(_this);
                _this.initPTS = [];
                _this.waitingFragment = null;
                _this.videoTrackCC = null;
                return _this;
              }

              AudioStreamController.prototype.destroy = function destroy() {
                this.stopLoad();
                if (this.timer) {
                  clearInterval(this.timer);
                  this.timer = null;
                }
                event_handler.prototype.destroy.call(this);
                this.state = audio_stream_controller_State.STOPPED;
              };

              //Signal that video PTS was found


              AudioStreamController.prototype.onInitPtsFound = function onInitPtsFound(data) {
                var demuxerId = data.id,
                  cc = data.frag.cc,
                  initPTS = data.initPTS;
                if (demuxerId === 'main') {
                  //Always update the new INIT PTS
                  //Can change due level switch
                  this.initPTS[cc] = initPTS;
                  this.videoTrackCC = cc;
                  logger["b" /* logger */].log('InitPTS for cc:' + cc + ' found from video track:' + initPTS);

                  //If we are waiting we need to demux/remux the waiting frag
                  //With the new initPTS
                  if (this.state === audio_stream_controller_State.WAITING_INIT_PTS) {
                    this.tick();
                  }
                }
              };

              AudioStreamController.prototype.startLoad = function startLoad(startPosition) {
                if (this.tracks) {
                  var lastCurrentTime = this.lastCurrentTime;
                  this.stopLoad();
                  if (!this.timer) {
                    this.timer = setInterval(this.ontick, 100);
                  }
                  this.fragLoadError = 0;
                  if (lastCurrentTime > 0 && startPosition === -1) {
                    logger["b" /* logger */].log('audio:override startPosition with lastCurrentTime @' + lastCurrentTime.toFixed(3));
                    this.state = audio_stream_controller_State.IDLE;
                  } else {
                    this.lastCurrentTime = this.startPosition ? this.startPosition : startPosition;
                    this.state = audio_stream_controller_State.STARTING;
                  }
                  this.nextLoadPosition = this.startPosition = this.lastCurrentTime;
                  this.tick();
                } else {
                  this.startPosition = startPosition;
                  this.state = audio_stream_controller_State.STOPPED;
                }
              };

              AudioStreamController.prototype.stopLoad = function stopLoad() {
                var frag = this.fragCurrent;
                if (frag) {
                  if (frag.loader) {
                    frag.loader.abort();
                  }
                  this.fragCurrent = null;
                }
                this.fragPrevious = null;
                if (this.demuxer) {
                  this.demuxer.destroy();
                  this.demuxer = null;
                }
                this.state = audio_stream_controller_State.STOPPED;
              };

              AudioStreamController.prototype.tick = function tick() {
                this.ticks++;
                if (this.ticks === 1) {
                  this.doTick();
                  if (this.ticks > 1) {
                    setTimeout(this.tick, 1);
                  }
                  this.ticks = 0;
                }
              };

              AudioStreamController.prototype.doTick = function doTick() {
                var pos,
                  track,
                  trackDetails,
                  hls = this.hls,
                  config = hls.config;
                //logger.log('audioStream:' + this.state);
                switch (this.state) {
                  case audio_stream_controller_State.ERROR:
                  //don't do anything in error state to avoid breaking further ...
                  case audio_stream_controller_State.PAUSED:
                  //don't do anything in paused state either ...
                  case audio_stream_controller_State.BUFFER_FLUSHING:
                    break;
                  case audio_stream_controller_State.STARTING:
                    this.state = audio_stream_controller_State.WAITING_TRACK;
                    this.loadedmetadata = false;
                    break;
                  case audio_stream_controller_State.IDLE:
                    var tracks = this.tracks;
                    // audio tracks not received => exit loop
                    if (!tracks) {
                      break;
                    }
                    // if video not attached AND
                    // start fragment already requested OR start frag prefetch disable
                    // exit loop
                    // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop
                    if (!this.media && (this.startFragRequested || !config.startFragPrefetch)) {
                      break;
                    }
                    // determine next candidate fragment to be loaded, based on current position and
                    //  end of buffer position
                    // if we have not yet loaded any fragment, start loading from start position
                    if (this.loadedmetadata) {
                      pos = this.media.currentTime;
                    } else {
                      pos = this.nextLoadPosition;
                      if (pos === undefined) {
                        break;
                      }
                    }
                    var media = this.mediaBuffer ? this.mediaBuffer : this.media,
                      videoBuffer = this.videoBuffer ? this.videoBuffer : this.media,
                      bufferInfo = buffer_helper.bufferInfo(media, pos, config.maxBufferHole),
                      mainBufferInfo = buffer_helper.bufferInfo(videoBuffer, pos, config.maxBufferHole),
                      bufferLen = bufferInfo.len,
                      bufferEnd = bufferInfo.end,
                      fragPrevious = this.fragPrevious,

                      // ensure we buffer at least config.maxBufferLength (default 30s)
                      // once we reach that threshold, don't buffer more than video (mainBufferInfo.len)
                      maxBufLen = Math.max(config.maxBufferLength, mainBufferInfo.len),
                      audioSwitch = this.audioSwitch,
                      trackId = this.trackId;

                    // if buffer length is less than maxBufLen try to load a new fragment
                    if ((bufferLen < maxBufLen || audioSwitch) && trackId < tracks.length) {
                      trackDetails = tracks[trackId].details;
                      // if track info not retrieved yet, switch state and wait for track retrieval
                      if (typeof trackDetails === 'undefined') {
                        this.state = audio_stream_controller_State.WAITING_TRACK;
                        break;
                      }

                      // we just got done loading the final fragment, check if we need to finalize media stream
                      if (!audioSwitch && !trackDetails.live && fragPrevious && fragPrevious.sn === trackDetails.endSN) {
                        // if we are not seeking or if we are seeking but everything (almost) til the end is buffered, let's signal eos
                        // we don't compare exactly media.duration === bufferInfo.end as there could be some subtle media duration difference when switching
                        // between different renditions. using half frag duration should help cope with these cases.
                        if (!this.media.seeking || this.media.duration - bufferEnd < fragPrevious.duration / 2) {
                          // Finalize the media stream
                          this.hls.trigger(events["a" /* default */].BUFFER_EOS, {type: 'audio'});
                          this.state = audio_stream_controller_State.ENDED;
                          break;
                        }
                      }

                      // find fragment index, contiguous with end of buffer position
                      var fragments = trackDetails.fragments,
                        fragLen = fragments.length,
                        start = fragments[0].start,
                        end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,
                        frag = void 0;

                      // When switching audio track, reload audio as close as possible to currentTime
                      if (audioSwitch) {
                        if (trackDetails.live && !trackDetails.PTSKnown) {
                          logger["b" /* logger */].log('switching audiotrack, live stream, unknown PTS,load first fragment');
                          bufferEnd = 0;
                        } else {
                          bufferEnd = pos;
                          // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime
                          if (trackDetails.PTSKnown && pos < start) {
                            // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
                            if (bufferInfo.end > start || bufferInfo.nextStart) {
                              logger["b" /* logger */].log('alt audio track ahead of main track, seek to start of alt audio track');
                              this.media.currentTime = start + 0.05;
                            } else {
                              return;
                            }
                          }
                        }
                      }
                      if (trackDetails.initSegment && !trackDetails.initSegment.data) {
                        frag = trackDetails.initSegment;
                      }
                      // if bufferEnd before start of playlist, load first fragment
                      else if (bufferEnd <= start) {
                        frag = fragments[0];
                        if (this.videoTrackCC !== null && frag.cc !== this.videoTrackCC) {
                          // Ensure we find a fragment which matches the continuity of the video track
                          frag = findFragWithCC(fragments, this.videoTrackCC);
                        }
                        if (trackDetails.live && frag.loadIdx && frag.loadIdx === this.fragLoadIdx) {
                          // we just loaded this first fragment, and we are still lagging behind the start of the live playlist
                          // let's force seek to start
                          var nextBuffered = bufferInfo.nextStart ? bufferInfo.nextStart : start;
                          logger["b" /* logger */].log('no alt audio available @currentTime:' + this.media.currentTime + ', seeking @' + (nextBuffered + 0.05));
                          this.media.currentTime = nextBuffered + 0.05;
                          return;
                        }
                      } else {
                        var foundFrag = void 0;
                        var maxFragLookUpTolerance = config.maxFragLookUpTolerance;
                        var fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : undefined;
                        var fragmentWithinToleranceTest = function fragmentWithinToleranceTest(candidate) {
                          // offset should be within fragment boundary - config.maxFragLookUpTolerance
                          // this is to cope with situations like
                          // bufferEnd = 9.991
                          // frag[Ø] : [0,10]
                          // frag[1] : [10,20]
                          // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
                          //              frag start               frag start+duration
                          //                  |-----------------------------|
                          //              <--->                         <--->
                          //  ...--------><-----------------------------><---------....
                          // previous frag         matching fragment         next frag
                          //  return -1             return 0                 return 1
                          //logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
                          // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
                          var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration);
                          if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
                            return 1;
                          } // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
                          else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
                            return -1;
                          }
                          return 0;
                        };

                        if (bufferEnd < end) {
                          if (bufferEnd > end - maxFragLookUpTolerance) {
                            maxFragLookUpTolerance = 0;
                          }
                          // Prefer the next fragment if it's within tolerance
                          if (fragNext && !fragmentWithinToleranceTest(fragNext)) {
                            foundFrag = fragNext;
                          } else {
                            foundFrag = binary_search.search(fragments, fragmentWithinToleranceTest);
                          }
                        } else {
                          // reach end of playlist
                          foundFrag = fragments[fragLen - 1];
                        }
                        if (foundFrag) {
                          frag = foundFrag;
                          start = foundFrag.start;
                          //logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
                          if (fragPrevious && frag.level === fragPrevious.level && frag.sn === fragPrevious.sn) {
                            if (frag.sn < trackDetails.endSN) {
                              frag = fragments[frag.sn + 1 - trackDetails.startSN];
                              logger["b" /* logger */].log('SN just loaded, load next one: ' + frag.sn);
                            } else {
                              frag = null;
                            }
                          }
                        }
                      }
                      if (frag) {
                        //logger.log('      loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
                        if (frag.decryptdata && frag.decryptdata.uri != null && frag.decryptdata.key == null) {
                          logger["b" /* logger */].log('Loading key for ' + frag.sn + ' of [' + trackDetails.startSN + ' ,' + trackDetails.endSN + '],track ' + trackId);
                          this.state = audio_stream_controller_State.KEY_LOADING;
                          hls.trigger(events["a" /* default */].KEY_LOADING, {frag: frag});
                        } else {
                          logger["b" /* logger */].log('Loading ' + frag.sn + ', cc: ' + frag.cc + ' of [' + trackDetails.startSN + ' ,' + trackDetails.endSN + '],track ' + trackId + ', currentTime:' + pos + ',bufferEnd:' + bufferEnd.toFixed(3));
                          // ensure that we are not reloading the same fragments in loop ...
                          if (this.fragLoadIdx !== undefined) {
                            this.fragLoadIdx++;
                          } else {
                            this.fragLoadIdx = 0;
                          }
                          if (frag.loadCounter) {
                            frag.loadCounter++;
                            var maxThreshold = config.fragLoadingLoopThreshold;
                            // if this frag has already been loaded 3 times, and if it has been reloaded recently
                            if (frag.loadCounter > maxThreshold && Math.abs(this.fragLoadIdx - frag.loadIdx) < maxThreshold) {
                              hls.trigger(events["a" /* default */].ERROR, {
                                type: errors["b" /* ErrorTypes */].MEDIA_ERROR,
                                details: errors["a" /* ErrorDetails */].FRAG_LOOP_LOADING_ERROR,
                                fatal: false,
                                frag: frag
                              });
                              return;
                            }
                          } else {
                            frag.loadCounter = 1;
                          }
                          frag.loadIdx = this.fragLoadIdx;
                          this.fragCurrent = frag;
                          this.startFragRequested = true;
                          if (!isNaN(frag.sn)) {
                            this.nextLoadPosition = frag.start + frag.duration;
                          }
                          hls.trigger(events["a" /* default */].FRAG_LOADING, {frag: frag});
                          this.state = audio_stream_controller_State.FRAG_LOADING;
                        }
                      }
                    }
                    break;
                  case audio_stream_controller_State.WAITING_TRACK:
                    track = this.tracks[this.trackId];
                    // check if playlist is already loaded
                    if (track && track.details) {
                      this.state = audio_stream_controller_State.IDLE;
                    }
                    break;
                  case audio_stream_controller_State.FRAG_LOADING_WAITING_RETRY:
                    var now = performance.now();
                    var retryDate = this.retryDate;
                    media = this.media;
                    var isSeeking = media && media.seeking;
                    // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
                    if (!retryDate || now >= retryDate || isSeeking) {
                      logger["b" /* logger */].log('audioStreamController: retryDate reached, switch back to IDLE state');
                      this.state = audio_stream_controller_State.IDLE;
                    }
                    break;
                  case audio_stream_controller_State.WAITING_INIT_PTS:
                    var videoTrackCC = this.videoTrackCC;
                    if (this.initPTS[videoTrackCC] === undefined) {
                      break;
                    }

                    // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS
                    var waitingFrag = this.waitingFragment;
                    if (waitingFrag) {
                      var waitingFragCC = waitingFrag.frag.cc;
                      if (videoTrackCC !== waitingFragCC) {
                        track = this.tracks[this.trackId];
                        if (track.details && track.details.live) {
                          logger["b" /* logger */].warn('Waiting fragment CC (' + waitingFragCC + ') does not match video track CC (' + videoTrackCC + ')');
                          this.waitingFragment = null;
                          this.state = audio_stream_controller_State.IDLE;
                        }
                      } else {
                        this.state = audio_stream_controller_State.FRAG_LOADING;
                        this.onFragLoaded(this.waitingFragment);
                        this.waitingFragment = null;
                      }
                    } else {
                      this.state = audio_stream_controller_State.IDLE;
                    }

                    break;
                  case audio_stream_controller_State.STOPPED:
                  case audio_stream_controller_State.FRAG_LOADING:
                  case audio_stream_controller_State.PARSING:
                  case audio_stream_controller_State.PARSED:
                  case audio_stream_controller_State.ENDED:
                    break;
                  default:
                    break;
                }
              };

              AudioStreamController.prototype.onMediaAttached = function onMediaAttached(data) {
                var media = this.media = this.mediaBuffer = data.media;
                this.onvseeking = this.onMediaSeeking.bind(this);
                this.onvended = this.onMediaEnded.bind(this);
                media.addEventListener('seeking', this.onvseeking);
                media.addEventListener('ended', this.onvended);
                var config = this.config;
                if (this.tracks && config.autoStartLoad) {
                  this.startLoad(config.startPosition);
                }
              };

              AudioStreamController.prototype.onMediaDetaching = function onMediaDetaching() {
                var media = this.media;
                if (media && media.ended) {
                  logger["b" /* logger */].log('MSE detaching and video ended, reset startPosition');
                  this.startPosition = this.lastCurrentTime = 0;
                }

                // reset fragment loading counter on MSE detaching to avoid reporting FRAG_LOOP_LOADING_ERROR after error recovery
                var tracks = this.tracks;
                if (tracks) {
                  // reset fragment load counter
                  tracks.forEach(function (track) {
                    if (track.details) {
                      track.details.fragments.forEach(function (fragment) {
                        fragment.loadCounter = undefined;
                      });
                    }
                  });
                }
                // remove video listeners
                if (media) {
                  media.removeEventListener('seeking', this.onvseeking);
                  media.removeEventListener('ended', this.onvended);
                  this.onvseeking = this.onvseeked = this.onvended = null;
                }
                this.media = this.mediaBuffer = this.videoBuffer = null;
                this.loadedmetadata = false;
                this.stopLoad();
              };

              AudioStreamController.prototype.onMediaSeeking = function onMediaSeeking() {
                if (this.state === audio_stream_controller_State.ENDED) {
                  // switch to IDLE state to check for potential new fragment
                  this.state = audio_stream_controller_State.IDLE;
                }
                if (this.media) {
                  this.lastCurrentTime = this.media.currentTime;
                }
                // avoid reporting fragment loop loading error in case user is seeking several times on same position
                if (this.fragLoadIdx !== undefined) {
                  this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
                }
                // tick to speed up processing
                this.tick();
              };

              AudioStreamController.prototype.onMediaEnded = function onMediaEnded() {
                // reset startPosition and lastCurrentTime to restart playback @ stream beginning
                this.startPosition = this.lastCurrentTime = 0;
              };

              AudioStreamController.prototype.onAudioTracksUpdated = function onAudioTracksUpdated(data) {
                logger["b" /* logger */].log('audio tracks updated');
                this.tracks = data.audioTracks;
              };

              AudioStreamController.prototype.onAudioTrackSwitching = function onAudioTrackSwitching(data) {
                // if any URL found on new audio track, it is an alternate audio track
                var altAudio = !!data.url;
                this.trackId = data.id;

                this.fragCurrent = null;
                this.state = audio_stream_controller_State.PAUSED;
                this.waitingFragment = null;
                // destroy useless demuxer when switching audio to main
                if (!altAudio) {
                  if (this.demuxer) {
                    this.demuxer.destroy();
                    this.demuxer = null;
                  }
                } else {
                  // switching to audio track, start timer if not already started
                  if (!this.timer) {
                    this.timer = setInterval(this.ontick, 100);
                  }
                }

                //should we switch tracks ?
                if (altAudio) {
                  this.audioSwitch = true;
                  //main audio track are handled by stream-controller, just do something if switching to alt audio track
                  this.state = audio_stream_controller_State.IDLE;
                  // increase fragment load Index to avoid frag loop loading error after buffer flush
                  if (this.fragLoadIdx !== undefined) {
                    this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
                  }
                }
                this.tick();
              };

              AudioStreamController.prototype.onAudioTrackLoaded = function onAudioTrackLoaded(data) {
                var newDetails = data.details,
                  trackId = data.id,
                  track = this.tracks[trackId],
                  duration = newDetails.totalduration,
                  sliding = 0;

                logger["b" /* logger */].log('track ' + trackId + ' loaded [' + newDetails.startSN + ',' + newDetails.endSN + '],duration:' + duration);

                if (newDetails.live) {
                  var curDetails = track.details;
                  if (curDetails && newDetails.fragments.length > 0) {
                    // we already have details for that level, merge them
                    mergeDetails(curDetails, newDetails);
                    sliding = newDetails.fragments[0].start;
                    // TODO
                    //this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
                    if (newDetails.PTSKnown) {
                      logger["b" /* logger */].log('live audio playlist sliding:' + sliding.toFixed(3));
                    } else {
                      logger["b" /* logger */].log('live audio playlist - outdated PTS, unknown sliding');
                    }
                  } else {
                    newDetails.PTSKnown = false;
                    logger["b" /* logger */].log('live audio playlist - first load, unknown sliding');
                  }
                } else {
                  newDetails.PTSKnown = false;
                }
                track.details = newDetails;

                // compute start position
                if (!this.startFragRequested) {
                  // compute start position if set to -1. use it straight away if value is defined
                  if (this.startPosition === -1) {
                    // first, check if start time offset has been set in playlist, if yes, use this value
                    var startTimeOffset = newDetails.startTimeOffset;
                    if (!isNaN(startTimeOffset)) {
                      logger["b" /* logger */].log('start time offset found in playlist, adjust startPosition to ' + startTimeOffset);
                      this.startPosition = startTimeOffset;
                    } else {
                      this.startPosition = 0;
                    }
                  }
                  this.nextLoadPosition = this.startPosition;
                }
                // only switch batck to IDLE state if we were waiting for track to start downloading a new fragment
                if (this.state === audio_stream_controller_State.WAITING_TRACK) {
                  this.state = audio_stream_controller_State.IDLE;
                }
                //trigger handler right now
                this.tick();
              };

              AudioStreamController.prototype.onKeyLoaded = function onKeyLoaded() {
                if (this.state === audio_stream_controller_State.KEY_LOADING) {
                  this.state = audio_stream_controller_State.IDLE;
                  this.tick();
                }
              };

              AudioStreamController.prototype.onFragLoaded = function onFragLoaded(data) {
                var fragCurrent = this.fragCurrent,
                  fragLoaded = data.frag;
                if (this.state === audio_stream_controller_State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'audio' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
                  var track = this.tracks[this.trackId],
                    details = track.details,
                    duration = details.totalduration,
                    trackId = fragCurrent.level,
                    sn = fragCurrent.sn,
                    cc = fragCurrent.cc,
                    audioCodec = this.config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2',
                    stats = this.stats = data.stats;
                  if (sn === 'initSegment') {
                    this.state = audio_stream_controller_State.IDLE;

                    stats.tparsed = stats.tbuffered = performance.now();
                    details.initSegment.data = data.payload;
                    this.hls.trigger(events["a" /* default */].FRAG_BUFFERED, {
                      stats: stats,
                      frag: fragCurrent,
                      id: 'audio'
                    });
                    this.tick();
                  } else {
                    this.state = audio_stream_controller_State.PARSING;
                    // transmux the MPEG-TS data to ISO-BMFF segments
                    this.appended = false;
                    if (!this.demuxer) {
                      this.demuxer = new demux_demuxer(this.hls, 'audio');
                    }
                    //Check if we have video initPTS
                    // If not we need to wait for it
                    var initPTS = this.initPTS[cc];
                    var initSegmentData = details.initSegment ? details.initSegment.data : [];
                    if (details.initSegment || initPTS !== undefined) {
                      this.pendingBuffering = true;
                      logger["b" /* logger */].log('Demuxing ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],track ' + trackId);
                      // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
                      var accurateTimeOffset = false; //details.PTSKnown || !details.live;
                      this.demuxer.push(data.payload, initSegmentData, audioCodec, null, fragCurrent, duration, accurateTimeOffset, initPTS);
                    } else {
                      logger["b" /* logger */].log('unknown video PTS for continuity counter ' + cc + ', waiting for video PTS before demuxing audio frag ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],track ' + trackId);
                      this.waitingFragment = data;
                      this.state = audio_stream_controller_State.WAITING_INIT_PTS;
                    }
                  }
                }
                this.fragLoadError = 0;
              };

              AudioStreamController.prototype.onFragParsingInitSegment = function onFragParsingInitSegment(data) {
                var fragCurrent = this.fragCurrent;
                var fragNew = data.frag;
                if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === audio_stream_controller_State.PARSING) {
                  var tracks = data.tracks,
                    track = void 0;

                  // delete any video track found on audio demuxer
                  if (tracks.video) {
                    delete tracks.video;
                  }

                  // include levelCodec in audio and video tracks
                  track = tracks.audio;
                  if (track) {
                    track.levelCodec = track.codec;
                    track.id = data.id;
                    this.hls.trigger(events["a" /* default */].BUFFER_CODECS, tracks);
                    logger["b" /* logger */].log('audio track:audio,container:' + track.container + ',codecs[level/parsed]=[' + track.levelCodec + '/' + track.codec + ']');
                    var initSegment = track.initSegment;
                    if (initSegment) {
                      var appendObj = {type: 'audio', data: initSegment, parent: 'audio', content: 'initSegment'};
                      if (this.audioSwitch) {
                        this.pendingData = [appendObj];
                      } else {
                        this.appended = true;
                        // arm pending Buffering flag before appending a segment
                        this.pendingBuffering = true;
                        this.hls.trigger(events["a" /* default */].BUFFER_APPENDING, appendObj);
                      }
                    }
                    //trigger handler right now
                    this.tick();
                  }
                }
              };

              AudioStreamController.prototype.onFragParsingData = function onFragParsingData(data) {
                var _this2 = this;

                var fragCurrent = this.fragCurrent;
                var fragNew = data.frag;
                if (fragCurrent && data.id === 'audio' && data.type === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === audio_stream_controller_State.PARSING) {
                  var trackId = this.trackId,
                    track = this.tracks[trackId],
                    hls = this.hls;

                  if (isNaN(data.endPTS)) {
                    data.endPTS = data.startPTS + fragCurrent.duration;
                    data.endDTS = data.startDTS + fragCurrent.duration;
                  }

                  logger["b" /* logger */].log('parsed ' + data.type + ',PTS:[' + data.startPTS.toFixed(3) + ',' + data.endPTS.toFixed(3) + '],DTS:[' + data.startDTS.toFixed(3) + '/' + data.endDTS.toFixed(3) + '],nb:' + data.nb);
                  updateFragPTSDTS(track.details, fragCurrent, data.startPTS, data.endPTS);

                  var audioSwitch = this.audioSwitch,
                    media = this.media,
                    appendOnBufferFlush = false;
                  //Only flush audio from old audio tracks when PTS is known on new audio track
                  if (audioSwitch && media) {
                    if (media.readyState) {
                      var currentTime = media.currentTime;
                      logger["b" /* logger */].log('switching audio track : currentTime:' + currentTime);
                      if (currentTime >= data.startPTS) {
                        logger["b" /* logger */].log('switching audio track : flushing all audio');
                        this.state = audio_stream_controller_State.BUFFER_FLUSHING;
                        hls.trigger(events["a" /* default */].BUFFER_FLUSHING, {
                          startOffset: 0,
                          endOffset: Number.POSITIVE_INFINITY,
                          type: 'audio'
                        });
                        appendOnBufferFlush = true;
                        //Lets announce that the initial audio track switch flush occur
                        this.audioSwitch = false;
                        hls.trigger(events["a" /* default */].AUDIO_TRACK_SWITCHED, {id: trackId});
                      }
                    } else {
                      //Lets announce that the initial audio track switch flush occur
                      this.audioSwitch = false;
                      hls.trigger(events["a" /* default */].AUDIO_TRACK_SWITCHED, {id: trackId});
                    }
                  }

                  var pendingData = this.pendingData;
                  if (!this.audioSwitch) {
                    [data.data1, data.data2].forEach(function (buffer) {
                      if (buffer && buffer.length) {
                        pendingData.push({type: data.type, data: buffer, parent: 'audio', content: 'data'});
                      }
                    });
                    if (!appendOnBufferFlush && pendingData.length) {
                      pendingData.forEach(function (appendObj) {
                        // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
                        // in that case it is useless to append following segments
                        if (_this2.state === audio_stream_controller_State.PARSING) {
                          // arm pending Buffering flag before appending a segment
                          _this2.pendingBuffering = true;
                          _this2.hls.trigger(events["a" /* default */].BUFFER_APPENDING, appendObj);
                        }
                      });
                      this.pendingData = [];
                      this.appended = true;
                    }
                  }
                  //trigger handler right now
                  this.tick();
                }
              };

              AudioStreamController.prototype.onFragParsed = function onFragParsed(data) {
                var fragCurrent = this.fragCurrent;
                var fragNew = data.frag;
                if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === audio_stream_controller_State.PARSING) {
                  this.stats.tparsed = performance.now();
                  this.state = audio_stream_controller_State.PARSED;
                  this._checkAppendedParsed();
                }
              };

              AudioStreamController.prototype.onBufferCreated = function onBufferCreated(data) {
                var audioTrack = data.tracks.audio;
                if (audioTrack) {
                  this.mediaBuffer = audioTrack.buffer;
                  this.loadedmetadata = true;
                }
                if (data.tracks.video) {
                  this.videoBuffer = data.tracks.video.buffer;
                }
              };

              AudioStreamController.prototype.onBufferAppended = function onBufferAppended(data) {
                if (data.parent === 'audio') {
                  var state = this.state;
                  if (state === audio_stream_controller_State.PARSING || state === audio_stream_controller_State.PARSED) {
                    // check if all buffers have been appended
                    this.pendingBuffering = data.pending > 0;
                    this._checkAppendedParsed();
                  }
                }
              };

              AudioStreamController.prototype._checkAppendedParsed = function _checkAppendedParsed() {
                //trigger handler right now
                if (this.state === audio_stream_controller_State.PARSED && (!this.appended || !this.pendingBuffering)) {
                  var frag = this.fragCurrent,
                    stats = this.stats,
                    hls = this.hls;
                  if (frag) {
                    this.fragPrevious = frag;
                    stats.tbuffered = performance.now();
                    hls.trigger(events["a" /* default */].FRAG_BUFFERED, {stats: stats, frag: frag, id: 'audio'});
                    var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                    logger["b" /* logger */].log('audio buffered : ' + timeRanges.toString(media.buffered));
                    if (this.audioSwitch && this.appended) {
                      this.audioSwitch = false;
                      hls.trigger(events["a" /* default */].AUDIO_TRACK_SWITCHED, {id: this.trackId});
                    }
                    this.state = audio_stream_controller_State.IDLE;
                  }
                  this.tick();
                }
              };

              AudioStreamController.prototype.onError = function onError(data) {
                var frag = data.frag;
                // don't handle frag error not related to audio fragment
                if (frag && frag.type !== 'audio') {
                  return;
                }
                switch (data.details) {
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].FRAG_LOAD_TIMEOUT:
                    if (!data.fatal) {
                      var loadError = this.fragLoadError;
                      if (loadError) {
                        loadError++;
                      } else {
                        loadError = 1;
                      }
                      var config = this.config;
                      if (loadError <= config.fragLoadingMaxRetry) {
                        this.fragLoadError = loadError;
                        // reset load counter to avoid frag loop loading error
                        frag.loadCounter = 0;
                        // exponential backoff capped to config.fragLoadingMaxRetryTimeout
                        var delay = Math.min(Math.pow(2, loadError - 1) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);
                        logger["b" /* logger */].warn('audioStreamController: frag loading failed, retry in ' + delay + ' ms');
                        this.retryDate = performance.now() + delay;
                        // retry loading state
                        this.state = audio_stream_controller_State.FRAG_LOADING_WAITING_RETRY;
                      } else {
                        logger["b" /* logger */].error('audioStreamController: ' + data.details + ' reaches max retry, redispatch as fatal ...');
                        // switch error to fatal
                        data.fatal = true;
                        this.state = audio_stream_controller_State.ERROR;
                      }
                    }
                    break;
                  case errors["a" /* ErrorDetails */].FRAG_LOOP_LOADING_ERROR:
                  case errors["a" /* ErrorDetails */].AUDIO_TRACK_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].AUDIO_TRACK_LOAD_TIMEOUT:
                  case errors["a" /* ErrorDetails */].KEY_LOAD_ERROR:
                  case errors["a" /* ErrorDetails */].KEY_LOAD_TIMEOUT:
                    //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received
                    if (this.state !== audio_stream_controller_State.ERROR) {
                      // if fatal error, stop processing, otherwise move to IDLE to retry loading
                      this.state = data.fatal ? audio_stream_controller_State.ERROR : audio_stream_controller_State.IDLE;
                      logger["b" /* logger */].warn('audioStreamController: ' + data.details + ' while loading frag,switch to ' + this.state + ' state ...');
                    }
                    break;
                  case errors["a" /* ErrorDetails */].BUFFER_FULL_ERROR:
                    // if in appending state
                    if (data.parent === 'audio' && (this.state === audio_stream_controller_State.PARSING || this.state === audio_stream_controller_State.PARSED)) {
                      var media = this.mediaBuffer,
                        currentTime = this.media.currentTime,
                        mediaBuffered = media && buffer_helper.isBuffered(media, currentTime) && buffer_helper.isBuffered(media, currentTime + 0.5);
                      // reduce max buf len if current position is buffered
                      if (mediaBuffered) {
                        var _config = this.config;
                        if (_config.maxMaxBufferLength >= _config.maxBufferLength) {
                          // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
                          _config.maxMaxBufferLength /= 2;
                          logger["b" /* logger */].warn('audio:reduce max buffer length to ' + _config.maxMaxBufferLength + 's');
                          // increase fragment load Index to avoid frag loop loading error after buffer flush
                          this.fragLoadIdx += 2 * _config.fragLoadingLoopThreshold;
                        }
                        this.state = audio_stream_controller_State.IDLE;
                      } else {
                        // current position is not buffered, but browser is still complaining about buffer full error
                        // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
                        // in that case flush the whole audio buffer to recover
                        logger["b" /* logger */].warn('buffer full error also media.currentTime is not buffered, flush audio buffer');
                        this.fragCurrent = null;
                        // flush everything
                        this.state = audio_stream_controller_State.BUFFER_FLUSHING;
                        this.hls.trigger(events["a" /* default */].BUFFER_FLUSHING, {
                          startOffset: 0,
                          endOffset: Number.POSITIVE_INFINITY,
                          type: 'audio'
                        });
                      }
                    }
                    break;
                  default:
                    break;
                }
              };

              AudioStreamController.prototype.onBufferFlushed = function onBufferFlushed() {
                var _this3 = this;

                var pendingData = this.pendingData;
                if (pendingData && pendingData.length) {
                  logger["b" /* logger */].log('appending pending audio data on Buffer Flushed');
                  pendingData.forEach(function (appendObj) {
                    _this3.hls.trigger(events["a" /* default */].BUFFER_APPENDING, appendObj);
                  });
                  this.appended = true;
                  this.pendingData = [];
                  this.state = audio_stream_controller_State.PARSED;
                } else {
                  // move to IDLE once flush complete. this should trigger new fragment loading
                  this.state = audio_stream_controller_State.IDLE;
                  // reset reference to frag
                  this.fragPrevious = null;
                  this.tick();
                }
              };

              audio_stream_controller__createClass(AudioStreamController, [{
                key: 'state',
                set: function set(nextState) {
                  if (this.state !== nextState) {
                    var previousState = this.state;
                    this._state = nextState;
                    logger["b" /* logger */].log('audio stream:' + previousState + '->' + nextState);
                  }
                },
                get: function get() {
                  return this._state;
                }
              }]);

              return AudioStreamController;
            }(event_handler);

            /* harmony default export */
            var audio_stream_controller = (audio_stream_controller_AudioStreamController);
// CONCATENATED MODULE: ./src/utils/vttcue.js
            /**
             * Copyright 2013 vtt.js Contributors
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */

            /* harmony default export */
            var vttcue = ((function () {
              if (typeof window !== 'undefined' && window.VTTCue) {
                return window.VTTCue;
              }

              var autoKeyword = 'auto';
              var directionSetting = {
                '': true,
                lr: true,
                rl: true
              };
              var alignSetting = {
                start: true,
                middle: true,
                end: true,
                left: true,
                right: true
              };

              function findDirectionSetting(value) {
                if (typeof value !== 'string') {
                  return false;
                }
                var dir = directionSetting[value.toLowerCase()];
                return dir ? value.toLowerCase() : false;
              }

              function findAlignSetting(value) {
                if (typeof value !== 'string') {
                  return false;
                }
                var align = alignSetting[value.toLowerCase()];
                return align ? value.toLowerCase() : false;
              }

              function extend(obj) {
                var i = 1;
                for (; i < arguments.length; i++) {
                  var cobj = arguments[i];
                  for (var p in cobj) {
                    obj[p] = cobj[p];
                  }
                }

                return obj;
              }

              function VTTCue(startTime, endTime, text) {
                var cue = this;
                var isIE8 = function () {
                  if (typeof navigator === 'undefined') {
                    return;
                  }
                  return (/MSIE\s8\.0/.test(navigator.userAgent)
                  );
                }();
                var baseObj = {};

                if (isIE8) {
                  cue = document.createElement('custom');
                } else {
                  baseObj.enumerable = true;
                }

                /**
                 * Shim implementation specific properties. These properties are not in
                 * the spec.
                 */

                // Lets us know when the VTTCue's data has changed in such a way that we need
                // to recompute its display state. This lets us compute its display state
                // lazily.
                cue.hasBeenReset = false;

                /**
                 * VTTCue and TextTrackCue properties
                 * http://dev.w3.org/html5/webvtt/#vttcue-interface
                 */

                var _id = '';
                var _pauseOnExit = false;
                var _startTime = startTime;
                var _endTime = endTime;
                var _text = text;
                var _region = null;
                var _vertical = '';
                var _snapToLines = true;
                var _line = 'auto';
                var _lineAlign = 'start';
                var _position = 50;
                var _positionAlign = 'middle';
                var _size = 50;
                var _align = 'middle';

                Object.defineProperty(cue, 'id', extend({}, baseObj, {
                  get: function get() {
                    return _id;
                  },
                  set: function set(value) {
                    _id = '' + value;
                  }
                }));

                Object.defineProperty(cue, 'pauseOnExit', extend({}, baseObj, {
                  get: function get() {
                    return _pauseOnExit;
                  },
                  set: function set(value) {
                    _pauseOnExit = !!value;
                  }
                }));

                Object.defineProperty(cue, 'startTime', extend({}, baseObj, {
                  get: function get() {
                    return _startTime;
                  },
                  set: function set(value) {
                    if (typeof value !== 'number') {
                      throw new TypeError('Start time must be set to a number.');
                    }
                    _startTime = value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'endTime', extend({}, baseObj, {
                  get: function get() {
                    return _endTime;
                  },
                  set: function set(value) {
                    if (typeof value !== 'number') {
                      throw new TypeError('End time must be set to a number.');
                    }
                    _endTime = value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'text', extend({}, baseObj, {
                  get: function get() {
                    return _text;
                  },
                  set: function set(value) {
                    _text = '' + value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'region', extend({}, baseObj, {
                  get: function get() {
                    return _region;
                  },
                  set: function set(value) {
                    _region = value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'vertical', extend({}, baseObj, {
                  get: function get() {
                    return _vertical;
                  },
                  set: function set(value) {
                    var setting = findDirectionSetting(value);
                    // Have to check for false because the setting an be an empty string.
                    if (setting === false) {
                      throw new SyntaxError('An invalid or illegal string was specified.');
                    }
                    _vertical = setting;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'snapToLines', extend({}, baseObj, {
                  get: function get() {
                    return _snapToLines;
                  },
                  set: function set(value) {
                    _snapToLines = !!value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'line', extend({}, baseObj, {
                  get: function get() {
                    return _line;
                  },
                  set: function set(value) {
                    if (typeof value !== 'number' && value !== autoKeyword) {
                      throw new SyntaxError('An invalid number or illegal string was specified.');
                    }
                    _line = value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'lineAlign', extend({}, baseObj, {
                  get: function get() {
                    return _lineAlign;
                  },
                  set: function set(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                      throw new SyntaxError('An invalid or illegal string was specified.');
                    }
                    _lineAlign = setting;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'position', extend({}, baseObj, {
                  get: function get() {
                    return _position;
                  },
                  set: function set(value) {
                    if (value < 0 || value > 100) {
                      throw new Error('Position must be between 0 and 100.');
                    }
                    _position = value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'positionAlign', extend({}, baseObj, {
                  get: function get() {
                    return _positionAlign;
                  },
                  set: function set(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                      throw new SyntaxError('An invalid or illegal string was specified.');
                    }
                    _positionAlign = setting;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'size', extend({}, baseObj, {
                  get: function get() {
                    return _size;
                  },
                  set: function set(value) {
                    if (value < 0 || value > 100) {
                      throw new Error('Size must be between 0 and 100.');
                    }
                    _size = value;
                    this.hasBeenReset = true;
                  }
                }));

                Object.defineProperty(cue, 'align', extend({}, baseObj, {
                  get: function get() {
                    return _align;
                  },
                  set: function set(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                      throw new SyntaxError('An invalid or illegal string was specified.');
                    }
                    _align = setting;
                    this.hasBeenReset = true;
                  }
                }));

                /**
                 * Other <track> spec defined properties
                 */

                // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
                cue.displayState = undefined;

                if (isIE8) {
                  return cue;
                }
              }

              /**
               * VTTCue methods
               */

              VTTCue.prototype.getCueAsHTML = function () {
                // Assume WebVTT.convertCueToDOMTree is on the global.
                var WebVTT = window.WebVTT;
                return WebVTT.convertCueToDOMTree(window, this.text);
              };

              return VTTCue;
            })());
// CONCATENATED MODULE: ./src/utils/vttparser.js
            /*
 * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js#L1716
 */


            var StringDecoder = function StringDecoder() {
              return {
                decode: function decode(data) {
                  if (!data) {
                    return '';
                  }
                  if (typeof data !== 'string') {
                    throw new Error('Error - expected string data.');
                  }
                  return decodeURIComponent(encodeURIComponent(data));
                }
              };
            };

            function VTTParser() {
              this.window = window;
              this.state = 'INITIAL';
              this.buffer = '';
              this.decoder = new StringDecoder();
              this.regionList = [];
            }

// Try to parse input as a time stamp.
            function parseTimeStamp(input) {

              function computeSeconds(h, m, s, f) {
                return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
              }

              var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
              if (!m) {
                return null;
              }

              if (m[3]) {
                // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
                return computeSeconds(m[1], m[2], m[3].replace(':', ''), m[4]);
              } else if (m[1] > 59) {
                // Timestamp takes the form of [hours]:[minutes].[milliseconds]
                // First position is hours as it's over 59.
                return computeSeconds(m[1], m[2], 0, m[4]);
              } else {
                // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
                return computeSeconds(0, m[1], m[2], m[4]);
              }
            }

// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
            function Settings() {
              this.values = Object.create(null);
            }

            Settings.prototype = {
              // Only accept the first assignment to any key.
              set: function set(k, v) {
                if (!this.get(k) && v !== '') {
                  this.values[k] = v;
                }
              },
              // Return the value for a key, or a default value.
              // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
              // a number of possible default values as properties where 'defaultKey' is
              // the key of the property that will be chosen; otherwise it's assumed to be
              // a single value.
              get: function get(k, dflt, defaultKey) {
                if (defaultKey) {
                  return this.has(k) ? this.values[k] : dflt[defaultKey];
                }
                return this.has(k) ? this.values[k] : dflt;
              },
              // Check whether we have a value for a key.
              has: function has(k) {
                return k in this.values;
              },
              // Accept a setting if its one of the given alternatives.
              alt: function alt(k, v, a) {
                for (var n = 0; n < a.length; ++n) {
                  if (v === a[n]) {
                    this.set(k, v);
                    break;
                  }
                }
              },
              // Accept a setting if its a valid (signed) integer.
              integer: function integer(k, v) {
                if (/^-?\d+$/.test(v)) {
                  // integer
                  this.set(k, parseInt(v, 10));
                }
              },
              // Accept a setting if its a valid percentage.
              percent: function percent(k, v) {
                var m;
                if (m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
                  v = parseFloat(v);
                  if (v >= 0 && v <= 100) {
                    this.set(k, v);
                    return true;
                  }
                }
                return false;
              }
            };

// Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.
            function parseOptions(input, callback, keyValueDelim, groupDelim) {
              var groups = groupDelim ? input.split(groupDelim) : [input];
              for (var i in groups) {
                if (typeof groups[i] !== 'string') {
                  continue;
                }
                var kv = groups[i].split(keyValueDelim);
                if (kv.length !== 2) {
                  continue;
                }
                var k = kv[0];
                var v = kv[1];
                callback(k, v);
              }
            }

            var defaults = new vttcue(0, 0, 0);
// 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244
//  Safari doesn't yet support this change, but FF and Chrome do.
            var center = defaults.align === 'middle' ? 'middle' : 'center';

            function parseCue(input, cue, regionList) {
              // Remember the original input if we need to throw an error.
              var oInput = input;

              // 4.1 WebVTT timestamp
              function consumeTimeStamp() {
                var ts = parseTimeStamp(input);
                if (ts === null) {
                  throw new Error('Malformed timestamp: ' + oInput);
                }
                // Remove time stamp from input.
                input = input.replace(/^[^\sa-zA-Z-]+/, '');
                return ts;
              }

              // 4.4.2 WebVTT cue settings
              function consumeCueSettings(input, cue) {
                var settings = new Settings();

                parseOptions(input, function (k, v) {
                  switch (k) {
                    case 'region':
                      // Find the last region we parsed with the same region id.
                      for (var i = regionList.length - 1; i >= 0; i--) {
                        if (regionList[i].id === v) {
                          settings.set(k, regionList[i].region);
                          break;
                        }
                      }
                      break;
                    case 'vertical':
                      settings.alt(k, v, ['rl', 'lr']);
                      break;
                    case 'line':
                      var vals = v.split(','),
                        vals0 = vals[0];
                      settings.integer(k, vals0);
                      if (settings.percent(k, vals0)) {
                        settings.set('snapToLines', false);
                      }
                      settings.alt(k, vals0, ['auto']);
                      if (vals.length === 2) {
                        settings.alt('lineAlign', vals[1], ['start', center, 'end']);
                      }
                      break;
                    case 'position':
                      vals = v.split(',');
                      settings.percent(k, vals[0]);
                      if (vals.length === 2) {
                        settings.alt('positionAlign', vals[1], ['start', center, 'end', 'line-left', 'line-right', 'auto']);
                      }
                      break;
                    case 'size':
                      settings.percent(k, v);
                      break;
                    case 'align':
                      settings.alt(k, v, ['start', center, 'end', 'left', 'right']);
                      break;
                  }
                }, /:/, /\s/);

                // Apply default values for any missing fields.
                cue.region = settings.get('region', null);
                cue.vertical = settings.get('vertical', '');
                var line = settings.get('line', 'auto');
                if (line === 'auto' && defaults.line === -1) {
                  // set numeric line number for Safari
                  line = -1;
                }
                cue.line = line;
                cue.lineAlign = settings.get('lineAlign', 'start');
                cue.snapToLines = settings.get('snapToLines', true);
                cue.size = settings.get('size', 100);
                cue.align = settings.get('align', center);
                var position = settings.get('position', 'auto');
                if (position === 'auto' && defaults.position === 50) {
                  // set numeric position for Safari
                  position = cue.align === 'start' || cue.align === 'left' ? 0 : cue.align === 'end' || cue.align === 'right' ? 100 : 50;
                }
                cue.position = position;
              }

              function skipWhitespace() {
                input = input.replace(/^\s+/, '');
              }

              // 4.1 WebVTT cue timings.
              skipWhitespace();
              cue.startTime = consumeTimeStamp(); // (1) collect cue start time
              skipWhitespace();
              if (input.substr(0, 3) !== '-->') {
                // (3) next characters must match '-->'
                throw new Error('Malformed time stamp (time stamps must be separated by \'-->\'): ' + oInput);
              }
              input = input.substr(3);
              skipWhitespace();
              cue.endTime = consumeTimeStamp(); // (5) collect cue end time

              // 4.1 WebVTT cue settings list.
              skipWhitespace();
              consumeCueSettings(input, cue);
            }

            function fixLineBreaks(input) {
              return input.replace(/<br(?: \/)?>/gi, '\n');
            }

            VTTParser.prototype = {
              parse: function parse(data) {
                var self = this;

                // If there is no data then we won't decode it, but will just try to parse
                // whatever is in buffer already. This may occur in circumstances, for
                // example when flush() is called.
                if (data) {
                  // Try to decode the data that we received.
                  self.buffer += self.decoder.decode(data, {stream: true});
                }

                function collectNextLine() {
                  var buffer = self.buffer;
                  var pos = 0;

                  buffer = fixLineBreaks(buffer);

                  while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
                    ++pos;
                  }
                  var line = buffer.substr(0, pos);
                  // Advance the buffer early in case we fail below.
                  if (buffer[pos] === '\r') {
                    ++pos;
                  }
                  if (buffer[pos] === '\n') {
                    ++pos;
                  }
                  self.buffer = buffer.substr(pos);
                  return line;
                }

                // 3.2 WebVTT metadata header syntax
                function parseHeader(input) {
                  parseOptions(input, function (k, v) {
                    switch (k) {
                      case 'Region':
                        // 3.3 WebVTT region metadata header syntax
                        console.log('parse region', v);
                        //parseRegion(v);
                        break;
                    }
                  }, /:/);
                }

                // 5.1 WebVTT file parsing.
                try {
                  var line;
                  if (self.state === 'INITIAL') {
                    // We can't start parsing until we have the first line.
                    if (!/\r\n|\n/.test(self.buffer)) {
                      return this;
                    }

                    line = collectNextLine();
                    // strip of UTF-8 BOM if any
                    // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8
                    var m = line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                    if (!m || !m[0]) {
                      throw new Error('Malformed WebVTT signature.');
                    }

                    self.state = 'HEADER';
                  }

                  var alreadyCollectedLine = false;
                  while (self.buffer) {
                    // We can't parse a line until we have the full line.
                    if (!/\r\n|\n/.test(self.buffer)) {
                      return this;
                    }

                    if (!alreadyCollectedLine) {
                      line = collectNextLine();
                    } else {
                      alreadyCollectedLine = false;
                    }

                    switch (self.state) {
                      case 'HEADER':
                        // 13-18 - Allow a header (metadata) under the WEBVTT line.
                        if (/:/.test(line)) {
                          parseHeader(line);
                        } else if (!line) {
                          // An empty line terminates the header and starts the body (cues).
                          self.state = 'ID';
                        }
                        continue;
                      case 'NOTE':
                        // Ignore NOTE blocks.
                        if (!line) {
                          self.state = 'ID';
                        }
                        continue;
                      case 'ID':
                        // Check for the start of NOTE blocks.
                        if (/^NOTE($|[ \t])/.test(line)) {
                          self.state = 'NOTE';
                          break;
                        }
                        // 19-29 - Allow any number of line terminators, then initialize new cue values.
                        if (!line) {
                          continue;
                        }
                        self.cue = new vttcue(0, 0, '');
                        self.state = 'CUE';
                        // 30-39 - Check if self line contains an optional identifier or timing data.
                        if (line.indexOf('-->') === -1) {
                          self.cue.id = line;
                          continue;
                        }
                      // Process line as start of a cue.
                      /*falls through*/
                      case 'CUE':
                        // 40 - Collect cue timings and settings.
                        try {
                          parseCue(line, self.cue, self.regionList);
                        } catch (e) {
                          // In case of an error ignore rest of the cue.
                          self.cue = null;
                          self.state = 'BADCUE';
                          continue;
                        }
                        self.state = 'CUETEXT';
                        continue;
                      case 'CUETEXT':
                        var hasSubstring = line.indexOf('-->') !== -1;
                        // 34 - If we have an empty line then report the cue.
                        // 35 - If we have the special substring '-->' then report the cue,
                        // but do not collect the line as we need to process the current
                        // one as a new cue.
                        if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                          // We are done parsing self cue.
                          if (self.oncue) {
                            self.oncue(self.cue);
                          }
                          self.cue = null;
                          self.state = 'ID';
                          continue;
                        }
                        if (self.cue.text) {
                          self.cue.text += '\n';
                        }
                        self.cue.text += line;
                        continue;
                      case 'BADCUE':
                        // BADCUE
                        // 54-62 - Collect and discard the remaining cue.
                        if (!line) {
                          self.state = 'ID';
                        }
                        continue;
                    }
                  }
                } catch (e) {

                  // If we are currently parsing a cue, report what we have.
                  if (self.state === 'CUETEXT' && self.cue && self.oncue) {
                    self.oncue(self.cue);
                  }
                  self.cue = null;
                  // Enter BADWEBVTT state if header was not parsed correctly otherwise
                  // another exception occurred so enter BADCUE state.
                  self.state = self.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';
                }
                return this;
              },
              flush: function flush() {
                var self = this;
                try {
                  // Finish decoding the stream.
                  self.buffer += self.decoder.decode();
                  // Synthesize the end of the current cue or region.
                  if (self.cue || self.state === 'HEADER') {
                    self.buffer += '\n\n';
                    self.parse();
                  }
                  // If we've flushed, parsed, and we're still on the INITIAL state then
                  // that means we don't have enough of the stream to parse the first
                  // line.
                  if (self.state === 'INITIAL') {
                    throw new Error('Malformed WebVTT signature.');
                  }
                } catch (e) {
                  throw e;
                }
                if (self.onflush) {
                  self.onflush();
                }
                return this;
              }
            };


            /* harmony default export */
            var vttparser = (VTTParser);

// CONCATENATED MODULE: ./src/utils/cues.js


            function newCue(track, startTime, endTime, captionScreen) {
              var row;
              var cue;
              var indenting;
              var indent;
              var text;
              var VTTCue = window.VTTCue || window.TextTrackCue;

              for (var r = 0; r < captionScreen.rows.length; r++) {
                row = captionScreen.rows[r];
                indenting = true;
                indent = 0;
                text = '';

                if (!row.isEmpty()) {
                  for (var c = 0; c < row.chars.length; c++) {
                    if (row.chars[c].uchar.match(/\s/) && indenting) {
                      indent++;
                    } else {
                      text += row.chars[c].uchar;
                      indenting = false;
                    }
                  }
                  //To be used for cleaning-up orphaned roll-up captions
                  row.cueStartTime = startTime;

                  // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE
                  if (startTime === endTime) {
                    endTime += 0.0001;
                  }

                  cue = new VTTCue(startTime, endTime, fixLineBreaks(text.trim()));

                  if (indent >= 16) {
                    indent--;
                  } else {
                    indent++;
                  }

                  // VTTCue.line get's flakey when using controls, so let's now include line 13&14
                  // also, drop line 1 since it's to close to the top
                  if (navigator.userAgent.match(/Firefox\//)) {
                    cue.line = r + 1;
                  } else {
                    cue.line = r > 7 ? r - 2 : r + 1;
                  }
                  cue.align = 'left';
                  // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break
                  cue.position = Math.max(0, Math.min(100, 100 * (indent / 32) + (navigator.userAgent.match(/Firefox\//) ? 50 : 0)));
                  track.addCue(cue);
                }
              }
            }

// CONCATENATED MODULE: ./src/utils/cea-608-parser.js
            function cea_608_parser__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             *
             * This code was ported from the dash.js project at:
             *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
             *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
             *
             * The original copyright appears below:
             *
             * The copyright in this software is being made available under the BSD License,
             * included below. This software may be subject to other third party and contributor
             * rights, including patent rights, and no such rights are granted under this license.
             *
             * Copyright (c) 2015-2016, DASH Industry Forum.
             * All rights reserved.
             *
             * Redistribution and use in source and binary forms, with or without modification,
             * are permitted provided that the following conditions are met:
             *  1. Redistributions of source code must retain the above copyright notice, this
             *  list of conditions and the following disclaimer.
             *  * Redistributions in binary form must reproduce the above copyright notice,
             *  this list of conditions and the following disclaimer in the documentation and/or
             *  other materials provided with the distribution.
             *  2. Neither the name of Dash Industry Forum nor the names of its
             *  contributors may be used to endorse or promote products derived from this software
             *  without specific prior written permission.
             *
             *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
             *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
             *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
             *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
             *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
             *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
             *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
             *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
             *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
             *  POSSIBILITY OF SUCH DAMAGE.
             */
            /**
             *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
             */

            var specialCea608CharsCodes = {
              0x2a: 0xe1, // lowercase a, acute accent
              0x5c: 0xe9, // lowercase e, acute accent
              0x5e: 0xed, // lowercase i, acute accent
              0x5f: 0xf3, // lowercase o, acute accent
              0x60: 0xfa, // lowercase u, acute accent
              0x7b: 0xe7, // lowercase c with cedilla
              0x7c: 0xf7, // division symbol
              0x7d: 0xd1, // uppercase N tilde
              0x7e: 0xf1, // lowercase n tilde
              0x7f: 0x2588, // Full block
              // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
              // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
              // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
              0x80: 0xae, // Registered symbol (R)
              0x81: 0xb0, // degree sign
              0x82: 0xbd, // 1/2 symbol
              0x83: 0xbf, // Inverted (open) question mark
              0x84: 0x2122, // Trademark symbol (TM)
              0x85: 0xa2, // Cents symbol
              0x86: 0xa3, // Pounds sterling
              0x87: 0x266a, // Music 8'th note
              0x88: 0xe0, // lowercase a, grave accent
              0x89: 0x20, // transparent space (regular)
              0x8a: 0xe8, // lowercase e, grave accent
              0x8b: 0xe2, // lowercase a, circumflex accent
              0x8c: 0xea, // lowercase e, circumflex accent
              0x8d: 0xee, // lowercase i, circumflex accent
              0x8e: 0xf4, // lowercase o, circumflex accent
              0x8f: 0xfb, // lowercase u, circumflex accent
              // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
              // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
              0x90: 0xc1, // capital letter A with acute
              0x91: 0xc9, // capital letter E with acute
              0x92: 0xd3, // capital letter O with acute
              0x93: 0xda, // capital letter U with acute
              0x94: 0xdc, // capital letter U with diaresis
              0x95: 0xfc, // lowercase letter U with diaeresis
              0x96: 0x2018, // opening single quote
              0x97: 0xa1, // inverted exclamation mark
              0x98: 0x2a, // asterisk
              0x99: 0x2019, // closing single quote
              0x9a: 0x2501, // box drawings heavy horizontal
              0x9b: 0xa9, // copyright sign
              0x9c: 0x2120, // Service mark
              0x9d: 0x2022, // (round) bullet
              0x9e: 0x201c, // Left double quotation mark
              0x9f: 0x201d, // Right double quotation mark
              0xa0: 0xc0, // uppercase A, grave accent
              0xa1: 0xc2, // uppercase A, circumflex
              0xa2: 0xc7, // uppercase C with cedilla
              0xa3: 0xc8, // uppercase E, grave accent
              0xa4: 0xca, // uppercase E, circumflex
              0xa5: 0xcb, // capital letter E with diaresis
              0xa6: 0xeb, // lowercase letter e with diaresis
              0xa7: 0xce, // uppercase I, circumflex
              0xa8: 0xcf, // uppercase I, with diaresis
              0xa9: 0xef, // lowercase i, with diaresis
              0xaa: 0xd4, // uppercase O, circumflex
              0xab: 0xd9, // uppercase U, grave accent
              0xac: 0xf9, // lowercase u, grave accent
              0xad: 0xdb, // uppercase U, circumflex
              0xae: 0xab, // left-pointing double angle quotation mark
              0xaf: 0xbb, // right-pointing double angle quotation mark
              // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
              // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
              0xb0: 0xc3, // Uppercase A, tilde
              0xb1: 0xe3, // Lowercase a, tilde
              0xb2: 0xcd, // Uppercase I, acute accent
              0xb3: 0xcc, // Uppercase I, grave accent
              0xb4: 0xec, // Lowercase i, grave accent
              0xb5: 0xd2, // Uppercase O, grave accent
              0xb6: 0xf2, // Lowercase o, grave accent
              0xb7: 0xd5, // Uppercase O, tilde
              0xb8: 0xf5, // Lowercase o, tilde
              0xb9: 0x7b, // Open curly brace
              0xba: 0x7d, // Closing curly brace
              0xbb: 0x5c, // Backslash
              0xbc: 0x5e, // Caret
              0xbd: 0x5f, // Underscore
              0xbe: 0x7c, // Pipe (vertical line)
              0xbf: 0x223c, // Tilde operator
              0xc0: 0xc4, // Uppercase A, umlaut
              0xc1: 0xe4, // Lowercase A, umlaut
              0xc2: 0xd6, // Uppercase O, umlaut
              0xc3: 0xf6, // Lowercase o, umlaut
              0xc4: 0xdf, // Esszett (sharp S)
              0xc5: 0xa5, // Yen symbol
              0xc6: 0xa4, // Generic currency sign
              0xc7: 0x2503, // Box drawings heavy vertical
              0xc8: 0xc5, // Uppercase A, ring
              0xc9: 0xe5, // Lowercase A, ring
              0xca: 0xd8, // Uppercase O, stroke
              0xcb: 0xf8, // Lowercase o, strok
              0xcc: 0x250f, // Box drawings heavy down and right
              0xcd: 0x2513, // Box drawings heavy down and left
              0xce: 0x2517, // Box drawings heavy up and right
              0xcf: 0x251b // Box drawings heavy up and left
            };

            /**
             * Utils
             */
            var getCharForByte = function getCharForByte(byte) {
              var charCode = byte;
              if (specialCea608CharsCodes.hasOwnProperty(byte)) {
                charCode = specialCea608CharsCodes[byte];
              }
              return String.fromCharCode(charCode);
            };

            var NR_ROWS = 15,
              NR_COLS = 100;
// Tables to look up row from PAC data
            var rowsLowCh1 = {0x11: 1, 0x12: 3, 0x15: 5, 0x16: 7, 0x17: 9, 0x10: 11, 0x13: 12, 0x14: 14};
            var rowsHighCh1 = {0x11: 2, 0x12: 4, 0x15: 6, 0x16: 8, 0x17: 10, 0x13: 13, 0x14: 15};
            var rowsLowCh2 = {0x19: 1, 0x1A: 3, 0x1D: 5, 0x1E: 7, 0x1F: 9, 0x18: 11, 0x1B: 12, 0x1C: 14};
            var rowsHighCh2 = {0x19: 2, 0x1A: 4, 0x1D: 6, 0x1E: 8, 0x1F: 10, 0x1B: 13, 0x1C: 15};

            var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];

            /**
             * Simple logger class to be able to write with time-stamps and filter on level.
             */
            var cea_608_parser_logger = {
              verboseFilter: {'DATA': 3, 'DEBUG': 3, 'INFO': 2, 'WARNING': 2, 'TEXT': 1, 'ERROR': 0},
              time: null,
              verboseLevel: 0, // Only write errors
              setTime: function setTime(newTime) {
                this.time = newTime;
              },
              log: function log(severity, msg) {
                var minLevel = this.verboseFilter[severity];
                if (this.verboseLevel >= minLevel) {
                  console.log(this.time + ' [' + severity + '] ' + msg);
                }
              }
            };

            var numArrayToHexArray = function numArrayToHexArray(numArray) {
              var hexArray = [];
              for (var j = 0; j < numArray.length; j++) {
                hexArray.push(numArray[j].toString(16));
              }
              return hexArray;
            };

            var PenState = function () {
              function PenState(foreground, underline, italics, background, flash) {
                cea_608_parser__classCallCheck(this, PenState);

                this.foreground = foreground || 'white';
                this.underline = underline || false;
                this.italics = italics || false;
                this.background = background || 'black';
                this.flash = flash || false;
              }

              PenState.prototype.reset = function reset() {
                this.foreground = 'white';
                this.underline = false;
                this.italics = false;
                this.background = 'black';
                this.flash = false;
              };

              PenState.prototype.setStyles = function setStyles(styles) {
                var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];
                for (var i = 0; i < attribs.length; i++) {
                  var style = attribs[i];
                  if (styles.hasOwnProperty(style)) {
                    this[style] = styles[style];
                  }
                }
              };

              PenState.prototype.isDefault = function isDefault() {
                return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;
              };

              PenState.prototype.equals = function equals(other) {
                return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
              };

              PenState.prototype.copy = function copy(newPenState) {
                this.foreground = newPenState.foreground;
                this.underline = newPenState.underline;
                this.italics = newPenState.italics;
                this.background = newPenState.background;
                this.flash = newPenState.flash;
              };

              PenState.prototype.toString = function toString() {
                return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;
              };

              return PenState;
            }();

            /**
             * Unicode character with styling and background.
             * @constructor
             */


            var StyledUnicodeChar = function () {
              function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {
                cea_608_parser__classCallCheck(this, StyledUnicodeChar);

                this.uchar = uchar || ' '; // unicode character
                this.penState = new PenState(foreground, underline, italics, background, flash);
              }

              StyledUnicodeChar.prototype.reset = function reset() {
                this.uchar = ' ';
                this.penState.reset();
              };

              StyledUnicodeChar.prototype.setChar = function setChar(uchar, newPenState) {
                this.uchar = uchar;
                this.penState.copy(newPenState);
              };

              StyledUnicodeChar.prototype.setPenState = function setPenState(newPenState) {
                this.penState.copy(newPenState);
              };

              StyledUnicodeChar.prototype.equals = function equals(other) {
                return this.uchar === other.uchar && this.penState.equals(other.penState);
              };

              StyledUnicodeChar.prototype.copy = function copy(newChar) {
                this.uchar = newChar.uchar;
                this.penState.copy(newChar.penState);
              };

              StyledUnicodeChar.prototype.isEmpty = function isEmpty() {
                return this.uchar === ' ' && this.penState.isDefault();
              };

              return StyledUnicodeChar;
            }();

            /**
             * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
             * @constructor
             */


            var Row = function () {
              function Row() {
                cea_608_parser__classCallCheck(this, Row);

                this.chars = [];
                for (var i = 0; i < NR_COLS; i++) {
                  this.chars.push(new StyledUnicodeChar());
                }
                this.pos = 0;
                this.currPenState = new PenState();
              }

              Row.prototype.equals = function equals(other) {
                var equal = true;
                for (var i = 0; i < NR_COLS; i++) {
                  if (!this.chars[i].equals(other.chars[i])) {
                    equal = false;
                    break;
                  }
                }
                return equal;
              };

              Row.prototype.copy = function copy(other) {
                for (var i = 0; i < NR_COLS; i++) {
                  this.chars[i].copy(other.chars[i]);
                }
              };

              Row.prototype.isEmpty = function isEmpty() {
                var empty = true;
                for (var i = 0; i < NR_COLS; i++) {
                  if (!this.chars[i].isEmpty()) {
                    empty = false;
                    break;
                  }
                }
                return empty;
              };

              /**
               *  Set the cursor to a valid column.
               */


              Row.prototype.setCursor = function setCursor(absPos) {
                if (this.pos !== absPos) {
                  this.pos = absPos;
                }
                if (this.pos < 0) {
                  cea_608_parser_logger.log('ERROR', 'Negative cursor position ' + this.pos);
                  this.pos = 0;
                } else if (this.pos > NR_COLS) {
                  cea_608_parser_logger.log('ERROR', 'Too large cursor position ' + this.pos);
                  this.pos = NR_COLS;
                }
              };

              /**
               * Move the cursor relative to current position.
               */


              Row.prototype.moveCursor = function moveCursor(relPos) {
                var newPos = this.pos + relPos;
                if (relPos > 1) {
                  for (var i = this.pos + 1; i < newPos + 1; i++) {
                    this.chars[i].setPenState(this.currPenState);
                  }
                }
                this.setCursor(newPos);
              };

              /**
               * Backspace, move one step back and clear character.
               */


              Row.prototype.backSpace = function backSpace() {
                this.moveCursor(-1);
                this.chars[this.pos].setChar(' ', this.currPenState);
              };

              Row.prototype.insertChar = function insertChar(byte) {
                if (byte >= 0x90) {
                  //Extended char
                  this.backSpace();
                }
                var char = getCharForByte(byte);
                if (this.pos >= NR_COLS) {
                  cea_608_parser_logger.log('ERROR', 'Cannot insert ' + byte.toString(16) + ' (' + char + ') at position ' + this.pos + '. Skipping it!');
                  return;
                }
                this.chars[this.pos].setChar(char, this.currPenState);
                this.moveCursor(1);
              };

              Row.prototype.clearFromPos = function clearFromPos(startPos) {
                var i;
                for (i = startPos; i < NR_COLS; i++) {
                  this.chars[i].reset();
                }
              };

              Row.prototype.clear = function clear() {
                this.clearFromPos(0);
                this.pos = 0;
                this.currPenState.reset();
              };

              Row.prototype.clearToEndOfRow = function clearToEndOfRow() {
                this.clearFromPos(this.pos);
              };

              Row.prototype.getTextString = function getTextString() {
                var chars = [];
                var empty = true;
                for (var i = 0; i < NR_COLS; i++) {
                  var char = this.chars[i].uchar;
                  if (char !== ' ') {
                    empty = false;
                  }
                  chars.push(char);
                }
                if (empty) {
                  return '';
                } else {
                  return chars.join('');
                }
              };

              Row.prototype.setPenStyles = function setPenStyles(styles) {
                this.currPenState.setStyles(styles);
                var currChar = this.chars[this.pos];
                currChar.setPenState(this.currPenState);
              };

              return Row;
            }();

            /**
             * Keep a CEA-608 screen of 32x15 styled characters
             * @constructor
             */


            var CaptionScreen = function () {
              function CaptionScreen() {
                cea_608_parser__classCallCheck(this, CaptionScreen);

                this.rows = [];
                for (var i = 0; i < NR_ROWS; i++) {
                  this.rows.push(new Row()); // Note that we use zero-based numbering (0-14)
                }
                this.currRow = NR_ROWS - 1;
                this.nrRollUpRows = null;
                this.reset();
              }

              CaptionScreen.prototype.reset = function reset() {
                for (var i = 0; i < NR_ROWS; i++) {
                  this.rows[i].clear();
                }
                this.currRow = NR_ROWS - 1;
              };

              CaptionScreen.prototype.equals = function equals(other) {
                var equal = true;
                for (var i = 0; i < NR_ROWS; i++) {
                  if (!this.rows[i].equals(other.rows[i])) {
                    equal = false;
                    break;
                  }
                }
                return equal;
              };

              CaptionScreen.prototype.copy = function copy(other) {
                for (var i = 0; i < NR_ROWS; i++) {
                  this.rows[i].copy(other.rows[i]);
                }
              };

              CaptionScreen.prototype.isEmpty = function isEmpty() {
                var empty = true;
                for (var i = 0; i < NR_ROWS; i++) {
                  if (!this.rows[i].isEmpty()) {
                    empty = false;
                    break;
                  }
                }
                return empty;
              };

              CaptionScreen.prototype.backSpace = function backSpace() {
                var row = this.rows[this.currRow];
                row.backSpace();
              };

              CaptionScreen.prototype.clearToEndOfRow = function clearToEndOfRow() {
                var row = this.rows[this.currRow];
                row.clearToEndOfRow();
              };

              /**
               * Insert a character (without styling) in the current row.
               */


              CaptionScreen.prototype.insertChar = function insertChar(char) {
                var row = this.rows[this.currRow];
                row.insertChar(char);
              };

              CaptionScreen.prototype.setPen = function setPen(styles) {
                var row = this.rows[this.currRow];
                row.setPenStyles(styles);
              };

              CaptionScreen.prototype.moveCursor = function moveCursor(relPos) {
                var row = this.rows[this.currRow];
                row.moveCursor(relPos);
              };

              CaptionScreen.prototype.setCursor = function setCursor(absPos) {
                cea_608_parser_logger.log('INFO', 'setCursor: ' + absPos);
                var row = this.rows[this.currRow];
                row.setCursor(absPos);
              };

              CaptionScreen.prototype.setPAC = function setPAC(pacData) {
                cea_608_parser_logger.log('INFO', 'pacData = ' + JSON.stringify(pacData));
                var newRow = pacData.row - 1;
                if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
                  newRow = this.nrRollUpRows - 1;
                }

                //Make sure this only affects Roll-up Captions by checking this.nrRollUpRows
                if (this.nrRollUpRows && this.currRow !== newRow) {
                  //clear all rows first
                  for (var i = 0; i < NR_ROWS; i++) {
                    this.rows[i].clear();
                  }

                  //Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
                  //topRowIndex - the start of rows to copy (inclusive index)
                  var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
                  //We only copy if the last position was already shown.
                  //We use the cueStartTime value to check this.
                  var lastOutputScreen = this.lastOutputScreen;
                  if (lastOutputScreen) {
                    var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;
                    if (prevLineTime && prevLineTime < cea_608_parser_logger.time) {
                      for (var _i = 0; _i < this.nrRollUpRows; _i++) {
                        this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);
                      }
                    }
                  }
                }

                this.currRow = newRow;
                var row = this.rows[this.currRow];
                if (pacData.indent !== null) {
                  var indent = pacData.indent;
                  var prevPos = Math.max(indent - 1, 0);
                  row.setCursor(pacData.indent);
                  pacData.color = row.chars[prevPos].penState.foreground;
                }
                var styles = {
                  foreground: pacData.color,
                  underline: pacData.underline,
                  italics: pacData.italics,
                  background: 'black',
                  flash: false
                };
                this.setPen(styles);
              };

              /**
               * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
               */


              CaptionScreen.prototype.setBkgData = function setBkgData(bkgData) {

                cea_608_parser_logger.log('INFO', 'bkgData = ' + JSON.stringify(bkgData));
                this.backSpace();
                this.setPen(bkgData);
                this.insertChar(0x20); //Space
              };

              CaptionScreen.prototype.setRollUpRows = function setRollUpRows(nrRows) {
                this.nrRollUpRows = nrRows;
              };

              CaptionScreen.prototype.rollUp = function rollUp() {
                if (this.nrRollUpRows === null) {
                  cea_608_parser_logger.log('DEBUG', 'roll_up but nrRollUpRows not set yet');
                  return; //Not properly setup
                }
                cea_608_parser_logger.log('TEXT', this.getDisplayText());
                var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
                var topRow = this.rows.splice(topRowIndex, 1)[0];
                topRow.clear();
                this.rows.splice(this.currRow, 0, topRow);
                cea_608_parser_logger.log('INFO', 'Rolling up');
                //logger.log('TEXT', this.get_display_text())
              };

              /**
               * Get all non-empty rows with as unicode text.
               */


              CaptionScreen.prototype.getDisplayText = function getDisplayText(asOneRow) {
                asOneRow = asOneRow || false;
                var displayText = [];
                var text = '';
                var rowNr = -1;
                for (var i = 0; i < NR_ROWS; i++) {
                  var rowText = this.rows[i].getTextString();
                  if (rowText) {
                    rowNr = i + 1;
                    if (asOneRow) {
                      displayText.push('Row ' + rowNr + ': \'' + rowText + '\'');
                    } else {
                      displayText.push(rowText.trim());
                    }
                  }
                }
                if (displayText.length > 0) {
                  if (asOneRow) {
                    text = '[' + displayText.join(' | ') + ']';
                  } else {
                    text = displayText.join('\n');
                  }
                }
                return text;
              };

              CaptionScreen.prototype.getTextAndFormat = function getTextAndFormat() {
                return this.rows;
              };

              return CaptionScreen;
            }();

//var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];

            var Cea608Channel = function () {
              function Cea608Channel(channelNumber, outputFilter) {
                cea_608_parser__classCallCheck(this, Cea608Channel);

                this.chNr = channelNumber;
                this.outputFilter = outputFilter;
                this.mode = null;
                this.verbose = 0;
                this.displayedMemory = new CaptionScreen();
                this.nonDisplayedMemory = new CaptionScreen();
                this.lastOutputScreen = new CaptionScreen();
                this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                this.writeScreen = this.displayedMemory;
                this.mode = null;
                this.cueStartTime = null; // Keeps track of where a cue started.
              }

              Cea608Channel.prototype.reset = function reset() {
                this.mode = null;
                this.displayedMemory.reset();
                this.nonDisplayedMemory.reset();
                this.lastOutputScreen.reset();
                this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                this.writeScreen = this.displayedMemory;
                this.mode = null;
                this.cueStartTime = null;
                this.lastCueEndTime = null;
              };

              Cea608Channel.prototype.getHandler = function getHandler() {
                return this.outputFilter;
              };

              Cea608Channel.prototype.setHandler = function setHandler(newHandler) {
                this.outputFilter = newHandler;
              };

              Cea608Channel.prototype.setPAC = function setPAC(pacData) {
                this.writeScreen.setPAC(pacData);
              };

              Cea608Channel.prototype.setBkgData = function setBkgData(bkgData) {
                this.writeScreen.setBkgData(bkgData);
              };

              Cea608Channel.prototype.setMode = function setMode(newMode) {
                if (newMode === this.mode) {
                  return;
                }
                this.mode = newMode;
                cea_608_parser_logger.log('INFO', 'MODE=' + newMode);
                if (this.mode === 'MODE_POP-ON') {
                  this.writeScreen = this.nonDisplayedMemory;
                } else {
                  this.writeScreen = this.displayedMemory;
                  this.writeScreen.reset();
                }
                if (this.mode !== 'MODE_ROLL-UP') {
                  this.displayedMemory.nrRollUpRows = null;
                  this.nonDisplayedMemory.nrRollUpRows = null;
                }
                this.mode = newMode;
              };

              Cea608Channel.prototype.insertChars = function insertChars(chars) {
                for (var i = 0; i < chars.length; i++) {
                  this.writeScreen.insertChar(chars[i]);
                }
                var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';
                cea_608_parser_logger.log('INFO', screen + ': ' + this.writeScreen.getDisplayText(true));
                if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {
                  cea_608_parser_logger.log('TEXT', 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));
                  this.outputDataUpdate();
                }
              };

              Cea608Channel.prototype.ccRCL = function ccRCL() {
                // Resume Caption Loading (switch mode to Pop On)
                cea_608_parser_logger.log('INFO', 'RCL - Resume Caption Loading');
                this.setMode('MODE_POP-ON');
              };

              Cea608Channel.prototype.ccBS = function ccBS() {
                // BackSpace
                cea_608_parser_logger.log('INFO', 'BS - BackSpace');
                if (this.mode === 'MODE_TEXT') {
                  return;
                }
                this.writeScreen.backSpace();
                if (this.writeScreen === this.displayedMemory) {
                  this.outputDataUpdate();
                }
              };

              Cea608Channel.prototype.ccAOF = function ccAOF() {
                // Reserved (formerly Alarm Off)
                return;
              };

              Cea608Channel.prototype.ccAON = function ccAON() {
                // Reserved (formerly Alarm On)
                return;
              };

              Cea608Channel.prototype.ccDER = function ccDER() {
                // Delete to End of Row
                cea_608_parser_logger.log('INFO', 'DER- Delete to End of Row');
                this.writeScreen.clearToEndOfRow();
                this.outputDataUpdate();
              };

              Cea608Channel.prototype.ccRU = function ccRU(nrRows) {
                //Roll-Up Captions-2,3,or 4 Rows
                cea_608_parser_logger.log('INFO', 'RU(' + nrRows + ') - Roll Up');
                this.writeScreen = this.displayedMemory;
                this.setMode('MODE_ROLL-UP');
                this.writeScreen.setRollUpRows(nrRows);
              };

              Cea608Channel.prototype.ccFON = function ccFON() {
                //Flash On
                cea_608_parser_logger.log('INFO', 'FON - Flash On');
                this.writeScreen.setPen({flash: true});
              };

              Cea608Channel.prototype.ccRDC = function ccRDC() {
                // Resume Direct Captioning (switch mode to PaintOn)
                cea_608_parser_logger.log('INFO', 'RDC - Resume Direct Captioning');
                this.setMode('MODE_PAINT-ON');
              };

              Cea608Channel.prototype.ccTR = function ccTR() {
                // Text Restart in text mode (not supported, however)
                cea_608_parser_logger.log('INFO', 'TR');
                this.setMode('MODE_TEXT');
              };

              Cea608Channel.prototype.ccRTD = function ccRTD() {
                // Resume Text Display in Text mode (not supported, however)
                cea_608_parser_logger.log('INFO', 'RTD');
                this.setMode('MODE_TEXT');
              };

              Cea608Channel.prototype.ccEDM = function ccEDM() {
                // Erase Displayed Memory
                cea_608_parser_logger.log('INFO', 'EDM - Erase Displayed Memory');
                this.displayedMemory.reset();
                this.outputDataUpdate();
              };

              Cea608Channel.prototype.ccCR = function ccCR() {
                // Carriage Return
                cea_608_parser_logger.log('CR - Carriage Return');
                this.writeScreen.rollUp();
                this.outputDataUpdate();
              };

              Cea608Channel.prototype.ccENM = function ccENM() {
                //Erase Non-Displayed Memory
                cea_608_parser_logger.log('INFO', 'ENM - Erase Non-displayed Memory');
                this.nonDisplayedMemory.reset();
              };

              Cea608Channel.prototype.ccEOC = function ccEOC() {
                //End of Caption (Flip Memories)
                cea_608_parser_logger.log('INFO', 'EOC - End Of Caption');
                if (this.mode === 'MODE_POP-ON') {
                  var tmp = this.displayedMemory;
                  this.displayedMemory = this.nonDisplayedMemory;
                  this.nonDisplayedMemory = tmp;
                  this.writeScreen = this.nonDisplayedMemory;
                  cea_608_parser_logger.log('TEXT', 'DISP: ' + this.displayedMemory.getDisplayText());
                }
                this.outputDataUpdate();
              };

              Cea608Channel.prototype.ccTO = function ccTO(nrCols) {
                // Tab Offset 1,2, or 3 columns
                cea_608_parser_logger.log('INFO', 'TO(' + nrCols + ') - Tab Offset');
                this.writeScreen.moveCursor(nrCols);
              };

              Cea608Channel.prototype.ccMIDROW = function ccMIDROW(secondByte) {
                // Parse MIDROW command
                var styles = {flash: false};
                styles.underline = secondByte % 2 === 1;
                styles.italics = secondByte >= 0x2e;
                if (!styles.italics) {
                  var colorIndex = Math.floor(secondByte / 2) - 0x10;
                  var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];
                  styles.foreground = colors[colorIndex];
                } else {
                  styles.foreground = 'white';
                }
                cea_608_parser_logger.log('INFO', 'MIDROW: ' + JSON.stringify(styles));
                this.writeScreen.setPen(styles);
              };

              Cea608Channel.prototype.outputDataUpdate = function outputDataUpdate() {
                var t = cea_608_parser_logger.time;
                if (t === null) {
                  return;
                }
                if (this.outputFilter) {
                  if (this.outputFilter.updateData) {
                    this.outputFilter.updateData(t, this.displayedMemory);
                  }
                  if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
                    // Start of a new cue
                    this.cueStartTime = t;
                  } else {
                    if (!this.displayedMemory.equals(this.lastOutputScreen)) {
                      if (this.outputFilter.newCue) {
                        this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);
                      }
                      this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;
                    }
                  }
                  this.lastOutputScreen.copy(this.displayedMemory);
                }
              };

              Cea608Channel.prototype.cueSplitAtTime = function cueSplitAtTime(t) {
                if (this.outputFilter) {
                  if (!this.displayedMemory.isEmpty()) {
                    if (this.outputFilter.newCue) {
                      this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
                    }
                    this.cueStartTime = t;
                  }
                }
              };

              return Cea608Channel;
            }();

            var Cea608Parser = function () {
              function Cea608Parser(field, out1, out2) {
                cea_608_parser__classCallCheck(this, Cea608Parser);

                this.field = field || 1;
                this.outputs = [out1, out2];
                this.channels = [new Cea608Channel(1, out1), new Cea608Channel(2, out2)];
                this.currChNr = -1; // Will be 1 or 2
                this.lastCmdA = null; // First byte of last command
                this.lastCmdB = null; // Second byte of last command
                this.bufferedData = [];
                this.startTime = null;
                this.lastTime = null;
                this.dataCounters = {'padding': 0, 'char': 0, 'cmd': 0, 'other': 0};
              }

              Cea608Parser.prototype.getHandler = function getHandler(index) {
                return this.channels[index].getHandler();
              };

              Cea608Parser.prototype.setHandler = function setHandler(index, newHandler) {
                this.channels[index].setHandler(newHandler);
              };

              /**
               * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
               */


              Cea608Parser.prototype.addData = function addData(t, byteList) {
                var cmdFound,
                  a,
                  b,
                  charsFound = false;

                this.lastTime = t;
                cea_608_parser_logger.setTime(t);

                for (var i = 0; i < byteList.length; i += 2) {
                  a = byteList[i] & 0x7f;
                  b = byteList[i + 1] & 0x7f;
                  if (a === 0 && b === 0) {
                    this.dataCounters.padding += 2;
                    continue;
                  } else {
                    cea_608_parser_logger.log('DATA', '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');
                  }
                  cmdFound = this.parseCmd(a, b);
                  if (!cmdFound) {
                    cmdFound = this.parseMidrow(a, b);
                  }
                  if (!cmdFound) {
                    cmdFound = this.parsePAC(a, b);
                  }
                  if (!cmdFound) {
                    cmdFound = this.parseBackgroundAttributes(a, b);
                  }
                  if (!cmdFound) {
                    charsFound = this.parseChars(a, b);
                    if (charsFound) {
                      if (this.currChNr && this.currChNr >= 0) {
                        var channel = this.channels[this.currChNr - 1];
                        channel.insertChars(charsFound);
                      } else {
                        cea_608_parser_logger.log('WARNING', 'No channel found yet. TEXT-MODE?');
                      }
                    }
                  }
                  if (cmdFound) {
                    this.dataCounters.cmd += 2;
                  } else if (charsFound) {
                    this.dataCounters.char += 2;
                  } else {
                    this.dataCounters.other += 2;
                    cea_608_parser_logger.log('WARNING', 'Couldn\'t parse cleaned data ' + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));
                  }
                }
              };

              /**
               * Parse Command.
               * @returns {Boolean} Tells if a command was found
               */


              Cea608Parser.prototype.parseCmd = function parseCmd(a, b) {
                var chNr = null;

                var cond1 = (a === 0x14 || a === 0x1C) && 0x20 <= b && b <= 0x2F;
                var cond2 = (a === 0x17 || a === 0x1F) && 0x21 <= b && b <= 0x23;
                if (!(cond1 || cond2)) {
                  return false;
                }

                if (a === this.lastCmdA && b === this.lastCmdB) {
                  this.lastCmdA = null;
                  this.lastCmdB = null; // Repeated commands are dropped (once)
                  cea_608_parser_logger.log('DEBUG', 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');
                  return true;
                }

                if (a === 0x14 || a === 0x17) {
                  chNr = 1;
                } else {
                  chNr = 2; // (a === 0x1C || a=== 0x1f)
                }

                var channel = this.channels[chNr - 1];

                if (a === 0x14 || a === 0x1C) {
                  if (b === 0x20) {
                    channel.ccRCL();
                  } else if (b === 0x21) {
                    channel.ccBS();
                  } else if (b === 0x22) {
                    channel.ccAOF();
                  } else if (b === 0x23) {
                    channel.ccAON();
                  } else if (b === 0x24) {
                    channel.ccDER();
                  } else if (b === 0x25) {
                    channel.ccRU(2);
                  } else if (b === 0x26) {
                    channel.ccRU(3);
                  } else if (b === 0x27) {
                    channel.ccRU(4);
                  } else if (b === 0x28) {
                    channel.ccFON();
                  } else if (b === 0x29) {
                    channel.ccRDC();
                  } else if (b === 0x2A) {
                    channel.ccTR();
                  } else if (b === 0x2B) {
                    channel.ccRTD();
                  } else if (b === 0x2C) {
                    channel.ccEDM();
                  } else if (b === 0x2D) {
                    channel.ccCR();
                  } else if (b === 0x2E) {
                    channel.ccENM();
                  } else if (b === 0x2F) {
                    channel.ccEOC();
                  }
                } else {
                  //a == 0x17 || a == 0x1F
                  channel.ccTO(b - 0x20);
                }
                this.lastCmdA = a;
                this.lastCmdB = b;
                this.currChNr = chNr;
                return true;
              };

              /**
               * Parse midrow styling command
               * @returns {Boolean}
               */


              Cea608Parser.prototype.parseMidrow = function parseMidrow(a, b) {
                var chNr = null;

                if ((a === 0x11 || a === 0x19) && 0x20 <= b && b <= 0x2f) {
                  if (a === 0x11) {
                    chNr = 1;
                  } else {
                    chNr = 2;
                  }
                  if (chNr !== this.currChNr) {
                    cea_608_parser_logger.log('ERROR', 'Mismatch channel in midrow parsing');
                    return false;
                  }
                  var channel = this.channels[chNr - 1];
                  channel.ccMIDROW(b);
                  cea_608_parser_logger.log('DEBUG', 'MIDROW (' + numArrayToHexArray([a, b]) + ')');
                  return true;
                }
                return false;
              };
              /**
               * Parse Preable Access Codes (Table 53).
               * @returns {Boolean} Tells if PAC found
               */


              Cea608Parser.prototype.parsePAC = function parsePAC(a, b) {

                var chNr = null;
                var row = null;

                var case1 = (0x11 <= a && a <= 0x17 || 0x19 <= a && a <= 0x1F) && 0x40 <= b && b <= 0x7F;
                var case2 = (a === 0x10 || a === 0x18) && 0x40 <= b && b <= 0x5F;
                if (!(case1 || case2)) {
                  return false;
                }

                if (a === this.lastCmdA && b === this.lastCmdB) {
                  this.lastCmdA = null;
                  this.lastCmdB = null;
                  return true; // Repeated commands are dropped (once)
                }

                chNr = a <= 0x17 ? 1 : 2;

                if (0x40 <= b && b <= 0x5F) {
                  row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
                } else {
                  // 0x60 <= b <= 0x7F
                  row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
                }
                var pacData = this.interpretPAC(row, b);
                var channel = this.channels[chNr - 1];
                channel.setPAC(pacData);
                this.lastCmdA = a;
                this.lastCmdB = b;
                this.currChNr = chNr;
                return true;
              };

              /**
               * Interpret the second byte of the pac, and return the information.
               * @returns {Object} pacData with style parameters.
               */


              Cea608Parser.prototype.interpretPAC = function interpretPAC(row, byte) {
                var pacIndex = byte;
                var pacData = {color: null, italics: false, indent: null, underline: false, row: row};

                if (byte > 0x5F) {
                  pacIndex = byte - 0x60;
                } else {
                  pacIndex = byte - 0x40;
                }
                pacData.underline = (pacIndex & 1) === 1;
                if (pacIndex <= 0xd) {
                  pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];
                } else if (pacIndex <= 0xf) {
                  pacData.italics = true;
                  pacData.color = 'white';
                } else {
                  pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;
                }
                return pacData; // Note that row has zero offset. The spec uses 1.
              };

              /**
               * Parse characters.
               * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
               */


              Cea608Parser.prototype.parseChars = function parseChars(a, b) {

                var channelNr = null,
                  charCodes = null,
                  charCode1 = null;

                if (a >= 0x19) {
                  channelNr = 2;
                  charCode1 = a - 8;
                } else {
                  channelNr = 1;
                  charCode1 = a;
                }
                if (0x11 <= charCode1 && charCode1 <= 0x13) {
                  // Special character
                  var oneCode = b;
                  if (charCode1 === 0x11) {
                    oneCode = b + 0x50;
                  } else if (charCode1 === 0x12) {
                    oneCode = b + 0x70;
                  } else {
                    oneCode = b + 0x90;
                  }
                  cea_608_parser_logger.log('INFO', 'Special char \'' + getCharForByte(oneCode) + '\' in channel ' + channelNr);
                  charCodes = [oneCode];
                } else if (0x20 <= a && a <= 0x7f) {
                  charCodes = b === 0 ? [a] : [a, b];
                }
                if (charCodes) {
                  var hexCodes = numArrayToHexArray(charCodes);
                  cea_608_parser_logger.log('DEBUG', 'Char codes =  ' + hexCodes.join(','));
                  this.lastCmdA = null;
                  this.lastCmdB = null;
                }
                return charCodes;
              };

              /**
               * Parse extended background attributes as well as new foreground color black.
               * @returns{Boolean} Tells if background attributes are found
               */


              Cea608Parser.prototype.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {
                var bkgData, index, chNr, channel;

                var case1 = (a === 0x10 || a === 0x18) && 0x20 <= b && b <= 0x2f;
                var case2 = (a === 0x17 || a === 0x1f) && 0x2d <= b && b <= 0x2f;
                if (!(case1 || case2)) {
                  return false;
                }
                bkgData = {};
                if (a === 0x10 || a === 0x18) {
                  index = Math.floor((b - 0x20) / 2);
                  bkgData.background = backgroundColors[index];
                  if (b % 2 === 1) {
                    bkgData.background = bkgData.background + '_semi';
                  }
                } else if (b === 0x2d) {
                  bkgData.background = 'transparent';
                } else {
                  bkgData.foreground = 'black';
                  if (b === 0x2f) {
                    bkgData.underline = true;
                  }
                }
                chNr = a < 0x18 ? 1 : 2;
                channel = this.channels[chNr - 1];
                channel.setBkgData(bkgData);
                this.lastCmdA = null;
                this.lastCmdB = null;
                return true;
              };

              /**
               * Reset state of parser and its channels.
               */


              Cea608Parser.prototype.reset = function reset() {
                for (var i = 0; i < this.channels.length; i++) {
                  if (this.channels[i]) {
                    this.channels[i].reset();
                  }
                }
                this.lastCmdA = null;
                this.lastCmdB = null;
              };

              /**
               * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
               */


              Cea608Parser.prototype.cueSplitAtTime = function cueSplitAtTime(t) {
                for (var i = 0; i < this.channels.length; i++) {
                  if (this.channels[i]) {
                    this.channels[i].cueSplitAtTime(t);
                  }
                }
              };

              return Cea608Parser;
            }();

            /* harmony default export */
            var cea_608_parser = (Cea608Parser);
// CONCATENATED MODULE: ./src/utils/webvtt-parser.js


// String.prototype.startsWith is not supported in IE11
            var startsWith = function startsWith(inputString, searchString, position) {
              return inputString.substr(position || 0, searchString.length) === searchString;
            };

            var cueString2millis = function cueString2millis(timeString) {
              var ts = parseInt(timeString.substr(-3));
              var secs = parseInt(timeString.substr(-6, 2));
              var mins = parseInt(timeString.substr(-9, 2));
              var hours = timeString.length > 9 ? parseInt(timeString.substr(0, timeString.indexOf(':'))) : 0;

              if (isNaN(ts) || isNaN(secs) || isNaN(mins) || isNaN(hours)) {
                return -1;
              }

              ts += 1000 * secs;
              ts += 60 * 1000 * mins;
              ts += 60 * 60 * 1000 * hours;

              return ts;
            };

// From https://github.com/darkskyapp/string-hash
            var hash = function hash(text) {
              var hash = 5381;
              var i = text.length;
              while (i) {
                hash = hash * 33 ^ text.charCodeAt(--i);
              }
              return (hash >>> 0).toString();
            };

            var calculateOffset = function calculateOffset(vttCCs, cc, presentationTime) {
              var currCC = vttCCs[cc];
              var prevCC = vttCCs[currCC.prevCC];

              // This is the first discontinuity or cues have been processed since the last discontinuity
              // Offset = current discontinuity time
              if (!prevCC || !prevCC.new && currCC.new) {
                vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;
                currCC.new = false;
                return;
              }

              // There have been discontinuities since cues were last parsed.
              // Offset = time elapsed
              while (prevCC && prevCC.new) {
                vttCCs.ccOffset += currCC.start - prevCC.start;
                currCC.new = false;
                currCC = prevCC;
                prevCC = vttCCs[currCC.prevCC];
              }

              vttCCs.presentationOffset = presentationTime;
            };

            var WebVTTParser = {
              parse: function parse(vttByteArray, syncPTS, vttCCs, cc, callBack, errorCallBack) {
                // Convert byteArray into string, replacing any somewhat exotic linefeeds with "\n", then split on that character.
                var re = /\r\n|\n\r|\n|\r/g;
                var vttLines = new Uint8Array(vttByteArray).reduce(function (raw, vttByte) {
                  return raw + String.fromCharCode(vttByte);
                }, '').trim().replace(re, '\n').split('\n');

                var cueTime = '00:00.000';
                var mpegTs = 0;
                var localTime = 0;
                var presentationTime = 0;
                var cues = [];
                var parsingError = void 0;
                var inHeader = true;
                // let VTTCue = VTTCue || window.TextTrackCue;

                // Create parser object using VTTCue with TextTrackCue fallback on certain browsers.
                var parser = new vttparser();

                parser.oncue = function (cue) {
                  // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.
                  var currCC = vttCCs[cc];
                  var cueOffset = vttCCs.ccOffset;

                  // Update offsets for new discontinuities
                  if (currCC && currCC.new) {
                    if (localTime !== undefined) {
                      // When local time is provided, offset = discontinuity start time - local time
                      cueOffset = vttCCs.ccOffset = currCC.start;
                    } else {
                      calculateOffset(vttCCs, cc, presentationTime);
                    }
                  }

                  if (presentationTime) {
                    // If we have MPEGTS, offset = presentation time + discontinuity offset
                    cueOffset = presentationTime + vttCCs.ccOffset - vttCCs.presentationOffset;
                  }

                  cue.startTime += cueOffset - localTime;
                  cue.endTime += cueOffset - localTime;

                  // Create a unique hash id for a cue based on start/end times and text.
                  // This helps timeline-controller to avoid showing repeated captions.
                  cue.id = hash(cue.startTime) + hash(cue.endTime) + hash(cue.text);

                  // Fix encoding of special characters. TODO: Test with all sorts of weird characters.
                  cue.text = decodeURIComponent(escape(cue.text));
                  if (cue.endTime > 0) {
                    cues.push(cue);
                  }
                };

                parser.onparsingerror = function (e) {
                  parsingError = e;
                };

                parser.onflush = function () {
                  if (parsingError && errorCallBack) {
                    errorCallBack(parsingError);
                    return;
                  }
                  callBack(cues);
                };

                // Go through contents line by line.
                vttLines.forEach(function (line) {
                  if (inHeader) {
                    // Look for X-TIMESTAMP-MAP in header.
                    if (startsWith(line, 'X-TIMESTAMP-MAP=')) {
                      // Once found, no more are allowed anyway, so stop searching.
                      inHeader = false;
                      // Extract LOCAL and MPEGTS.
                      line.substr(16).split(',').forEach(function (timestamp) {
                        if (startsWith(timestamp, 'LOCAL:')) {
                          cueTime = timestamp.substr(6);
                        } else if (startsWith(timestamp, 'MPEGTS:')) {
                          mpegTs = parseInt(timestamp.substr(7));
                        }
                      });
                      try {
                        // Calculate subtitle offset in milliseconds.
                        // If sync PTS is less than zero, we have a 33-bit wraparound, which is fixed by adding 2^33 = 8589934592.
                        syncPTS = syncPTS < 0 ? syncPTS + 8589934592 : syncPTS;
                        // Adjust MPEGTS by sync PTS.
                        mpegTs -= syncPTS;
                        // Convert cue time to seconds
                        localTime = cueString2millis(cueTime) / 1000;
                        // Convert MPEGTS to seconds from 90kHz.
                        presentationTime = mpegTs / 90000;

                        if (localTime === -1) {
                          parsingError = new Error('Malformed X-TIMESTAMP-MAP: ' + line);
                        }
                      } catch (e) {
                        parsingError = new Error('Malformed X-TIMESTAMP-MAP: ' + line);
                      }
                      // Return without parsing X-TIMESTAMP-MAP line.
                      return;
                    } else if (line === '') {
                      inHeader = false;
                    }
                  }
                  // Parse line by default.
                  parser.parse(line + '\n');
                });

                parser.flush();
              }
            };

            /* harmony default export */
            var webvtt_parser = (WebVTTParser);

// CONCATENATED MODULE: ./src/controller/timeline-controller.js
            function timeline_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function timeline_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function timeline_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Timeline Controller
*/


            function clearCurrentCues(track) {
              if (track && track.cues) {
                while (track.cues.length > 0) {
                  track.removeCue(track.cues[0]);
                }
              }
            }

            function reuseVttTextTrack(inUseTrack, manifestTrack) {
              return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);
            }

            function intersection(x1, x2, y1, y2) {
              return Math.min(x2, y2) - Math.max(x1, y1);
            }

            var timeline_controller_TimelineController = function (_EventHandler) {
              timeline_controller__inherits(TimelineController, _EventHandler);

              function TimelineController(hls) {
                timeline_controller__classCallCheck(this, TimelineController);

                var _this = timeline_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHING, events["a" /* default */].MEDIA_DETACHING, events["a" /* default */].FRAG_PARSING_USERDATA, events["a" /* default */].FRAG_DECRYPTED, events["a" /* default */].MANIFEST_LOADING, events["a" /* default */].MANIFEST_LOADED, events["a" /* default */].FRAG_LOADED, events["a" /* default */].LEVEL_SWITCHING, events["a" /* default */].INIT_PTS_FOUND));

                _this.hls = hls;
                _this.config = hls.config;
                _this.enabled = true;
                _this.Cues = hls.config.cueHandler;
                _this.textTracks = [];
                _this.tracks = [];
                _this.unparsedVttFrags = [];
                _this.initPTS = undefined;
                _this.cueRanges = [];

                if (_this.config.enableCEA708Captions) {
                  var self = _this;
                  var sendAddTrackEvent = function sendAddTrackEvent(track, media) {
                    var e = null;
                    try {
                      e = new window.Event('addtrack');
                    } catch (err) {
                      //for IE11
                      e = document.createEvent('Event');
                      e.initEvent('addtrack', false, false);
                    }
                    e.track = track;
                    media.dispatchEvent(e);
                  };

                  var channel1 = {
                    'newCue': function newCue(startTime, endTime, screen) {
                      if (!self.textTrack1) {
                        //Enable reuse of existing text track.
                        var existingTrack1 = self.getExistingTrack('1');
                        if (!existingTrack1) {
                          var textTrack1 = self.createTextTrack('captions', self.config.captionsTextTrack1Label, self.config.captionsTextTrack1LanguageCode);
                          if (textTrack1) {
                            textTrack1.textTrack1 = true;
                            self.textTrack1 = textTrack1;
                          }
                        } else {
                          self.textTrack1 = existingTrack1;
                          clearCurrentCues(self.textTrack1);

                          sendAddTrackEvent(self.textTrack1, self.media);
                        }
                      }
                      self.addCues('textTrack1', startTime, endTime, screen);
                    }
                  };

                  var channel2 = {
                    'newCue': function newCue(startTime, endTime, screen) {
                      if (!self.textTrack2) {
                        //Enable reuse of existing text track.
                        var existingTrack2 = self.getExistingTrack('2');
                        if (!existingTrack2) {
                          var textTrack2 = self.createTextTrack('captions', self.config.captionsTextTrack2Label, self.config.captionsTextTrack1LanguageCode);
                          if (textTrack2) {
                            textTrack2.textTrack2 = true;
                            self.textTrack2 = textTrack2;
                          }
                        } else {
                          self.textTrack2 = existingTrack2;
                          clearCurrentCues(self.textTrack2);

                          sendAddTrackEvent(self.textTrack2, self.media);
                        }
                      }
                      self.addCues('textTrack2', startTime, endTime, screen);
                    }
                  };

                  _this.cea608Parser = new cea_608_parser(0, channel1, channel2);
                }
                return _this;
              }

              TimelineController.prototype.addCues = function addCues(channel, startTime, endTime, screen) {
                // skip cues which overlap more than 50% with previously parsed time ranges
                var ranges = this.cueRanges;
                var merged = false;
                for (var i = ranges.length; i--;) {
                  var cueRange = ranges[i];
                  var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);
                  if (overlap >= 0) {
                    cueRange[0] = Math.min(cueRange[0], startTime);
                    cueRange[1] = Math.max(cueRange[1], endTime);
                    merged = true;
                    if (overlap / (endTime - startTime) > 0.5) {
                      return;
                    }
                  }
                }
                if (!merged) {
                  ranges.push([startTime, endTime]);
                }
                this.Cues.newCue(this[channel], startTime, endTime, screen);
              };

              // Triggered when an initial PTS is found; used for synchronisation of WebVTT.


              TimelineController.prototype.onInitPtsFound = function onInitPtsFound(data) {
                var _this2 = this;

                if (typeof this.initPTS === 'undefined') {
                  this.initPTS = data.initPTS;
                }

                // Due to asynchrony, initial PTS may arrive later than the first VTT fragments are loaded.
                // Parse any unparsed fragments upon receiving the initial PTS.
                if (this.unparsedVttFrags.length) {
                  this.unparsedVttFrags.forEach(function (frag) {
                    _this2.onFragLoaded(frag);
                  });
                  this.unparsedVttFrags = [];
                }
              };

              TimelineController.prototype.getExistingTrack = function getExistingTrack(channelNumber) {
                var media = this.media;
                if (media) {
                  for (var i = 0; i < media.textTracks.length; i++) {
                    var textTrack = media.textTracks[i];
                    var propName = 'textTrack' + channelNumber;
                    if (textTrack[propName] === true) {
                      return textTrack;
                    }
                  }
                }
                return null;
              };

              TimelineController.prototype.createTextTrack = function createTextTrack(kind, label, lang) {
                var media = this.media;
                if (media) {
                  return media.addTextTrack(kind, label, lang);
                }
              };

              TimelineController.prototype.destroy = function destroy() {
                event_handler.prototype.destroy.call(this);
              };

              TimelineController.prototype.onMediaAttaching = function onMediaAttaching(data) {
                this.media = data.media;
              };

              TimelineController.prototype.onMediaDetaching = function onMediaDetaching() {
                clearCurrentCues(this.textTrack1);
                clearCurrentCues(this.textTrack2);
              };

              TimelineController.prototype.onManifestLoading = function onManifestLoading() {
                this.lastSn = -1; // Detect discontiguity in fragment parsing
                this.prevCC = -1;
                this.vttCCs = {ccOffset: 0, presentationOffset: 0}; // Detect discontinuity in subtitle manifests

                // clear outdated subtitles
                var media = this.media;
                if (media) {
                  var textTracks = media.textTracks;
                  if (textTracks) {
                    for (var i = 0; i < textTracks.length; i++) {
                      clearCurrentCues(textTracks[i]);
                    }
                  }
                }
              };

              TimelineController.prototype.onManifestLoaded = function onManifestLoaded(data) {
                var _this3 = this;

                this.textTracks = [];
                this.unparsedVttFrags = this.unparsedVttFrags || [];
                this.initPTS = undefined;
                this.cueRanges = [];

                if (this.config.enableWebVTT) {
                  this.tracks = data.subtitles || [];
                  var inUseTracks = this.media ? this.media.textTracks : [];

                  this.tracks.forEach(function (track, index) {
                    var textTrack = void 0;
                    if (index < inUseTracks.length) {
                      var inUseTrack = inUseTracks[index];
                      // Reuse tracks with the same label, but do not reuse 608/708 tracks
                      if (reuseVttTextTrack(inUseTrack, track)) {
                        textTrack = inUseTrack;
                      }
                    }
                    if (!textTrack) {
                      textTrack = _this3.createTextTrack('subtitles', track.name, track.lang);
                    }
                    textTrack.mode = track.default ? 'showing' : 'hidden';
                    _this3.textTracks.push(textTrack);
                  });
                }
              };

              TimelineController.prototype.onLevelSwitching = function onLevelSwitching() {
                this.enabled = this.hls.currentLevel.closedCaptions !== 'NONE';
              };

              TimelineController.prototype.onFragLoaded = function onFragLoaded(data) {
                var frag = data.frag,
                  payload = data.payload;
                if (frag.type === 'main') {
                  var sn = frag.sn;
                  // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack
                  if (sn !== this.lastSn + 1) {
                    var cea608Parser = this.cea608Parser;
                    if (cea608Parser) {
                      cea608Parser.reset();
                    }
                  }
                  this.lastSn = sn;
                }
                // If fragment is subtitle type, parse as WebVTT.
                else if (frag.type === 'subtitle') {
                  if (payload.byteLength) {
                    // We need an initial synchronisation PTS. Store fragments as long as none has arrived.
                    if (typeof this.initPTS === 'undefined') {
                      this.unparsedVttFrags.push(data);
                      return;
                    }

                    var decryptData = frag.decryptdata;
                    // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.
                    if (decryptData == null || decryptData.key == null || decryptData.method !== 'AES-128') {
                      this._parseVTTs(frag, payload);
                    }
                  } else {
                    // In case there is no payload, finish unsuccessfully.
                    this.hls.trigger(events["a" /* default */].SUBTITLE_FRAG_PROCESSED, {success: false, frag: frag});
                  }
                }
              };

              TimelineController.prototype._parseVTTs = function _parseVTTs(frag, payload) {
                var vttCCs = this.vttCCs;
                if (!vttCCs[frag.cc]) {
                  vttCCs[frag.cc] = {start: frag.start, prevCC: this.prevCC, new: true};
                  this.prevCC = frag.cc;
                }
                var textTracks = this.textTracks,
                  hls = this.hls;

                // Parse the WebVTT file contents.
                webvtt_parser.parse(payload, this.initPTS, vttCCs, frag.cc, function (cues) {
                  var currentTrack = textTracks[frag.trackId];
                  // Add cues and trigger event with success true.
                  cues.forEach(function (cue) {
                    // Sometimes there are cue overlaps on segmented vtts so the same
                    // cue can appear more than once in different vtt files.
                    // This avoid showing duplicated cues with same timecode and text.
                    if (!currentTrack.cues.getCueById(cue.id)) {
                      try {
                        currentTrack.addCue(cue);
                      } catch (err) {
                        var textTrackCue = new window.TextTrackCue(cue.startTime, cue.endTime, cue.text);
                        textTrackCue.id = cue.id;
                        currentTrack.addCue(textTrackCue);
                      }
                    }
                  });
                  hls.trigger(events["a" /* default */].SUBTITLE_FRAG_PROCESSED, {success: true, frag: frag});
                }, function (e) {
                  // Something went wrong while parsing. Trigger event with success false.
                  logger["b" /* logger */].log('Failed to parse VTT cue: ' + e);
                  hls.trigger(events["a" /* default */].SUBTITLE_FRAG_PROCESSED, {success: false, frag: frag});
                });
              };

              TimelineController.prototype.onFragDecrypted = function onFragDecrypted(data) {
                var decryptedData = data.payload,
                  frag = data.frag;

                if (frag.type === 'subtitle') {
                  if (typeof this.initPTS === 'undefined') {
                    this.unparsedVttFrags.push(data);
                    return;
                  }

                  this._parseVTTs(frag, decryptedData);
                }
              };

              TimelineController.prototype.onFragParsingUserdata = function onFragParsingUserdata(data) {
                // push all of the CEA-708 messages into the interpreter
                // immediately. It will create the proper timestamps based on our PTS value
                if (this.enabled && this.config.enableCEA708Captions) {
                  for (var i = 0; i < data.samples.length; i++) {
                    var ccdatas = this.extractCea608Data(data.samples[i].bytes);
                    this.cea608Parser.addData(data.samples[i].pts, ccdatas);
                  }
                }
              };

              TimelineController.prototype.extractCea608Data = function extractCea608Data(byteArray) {
                var count = byteArray[0] & 31;
                var position = 2;
                var tmpByte, ccbyte1, ccbyte2, ccValid, ccType;
                var actualCCBytes = [];

                for (var j = 0; j < count; j++) {
                  tmpByte = byteArray[position++];
                  ccbyte1 = 0x7F & byteArray[position++];
                  ccbyte2 = 0x7F & byteArray[position++];
                  ccValid = (4 & tmpByte) !== 0;
                  ccType = 3 & tmpByte;

                  if (ccbyte1 === 0 && ccbyte2 === 0) {
                    continue;
                  }

                  if (ccValid) {
                    if (ccType === 0) // || ccType === 1
                    {
                      actualCCBytes.push(ccbyte1);
                      actualCCBytes.push(ccbyte2);
                    }
                  }
                }
                return actualCCBytes;
              };

              return TimelineController;
            }(event_handler);

            /* harmony default export */
            var timeline_controller = (timeline_controller_TimelineController);
// CONCATENATED MODULE: ./src/controller/subtitle-track-controller.js
            var subtitle_track_controller__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function subtitle_track_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function subtitle_track_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function subtitle_track_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * subtitle track controller
*/


            function filterSubtitleTracks(textTrackList) {
              var tracks = [];
              for (var i = 0; i < textTrackList.length; i++) {
                if (textTrackList[i].kind === 'subtitles') {
                  tracks.push(textTrackList[i]);
                }
              }
              return tracks;
            }

            var subtitle_track_controller_SubtitleTrackController = function (_EventHandler) {
              subtitle_track_controller__inherits(SubtitleTrackController, _EventHandler);

              function SubtitleTrackController(hls) {
                subtitle_track_controller__classCallCheck(this, SubtitleTrackController);

                var _this = subtitle_track_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHED, events["a" /* default */].MEDIA_DETACHING, events["a" /* default */].MANIFEST_LOADING, events["a" /* default */].MANIFEST_LOADED, events["a" /* default */].SUBTITLE_TRACK_LOADED));

                _this.tracks = [];
                _this.trackId = -1;
                _this.media = undefined;
                _this.subtitleDisplay = false;
                return _this;
              }

              SubtitleTrackController.prototype._onTextTracksChanged = function _onTextTracksChanged() {
                // Media is undefined when switching streams via loadSource()
                if (!this.media) {
                  return;
                }

                var trackId = -1;
                var tracks = filterSubtitleTracks(this.media.textTracks);
                for (var id = 0; id < tracks.length; id++) {
                  if (tracks[id].mode === 'showing') {
                    trackId = id;
                  }
                }

                // Setting current subtitleTrack will invoke code.
                this.subtitleTrack = trackId;
              };

              SubtitleTrackController.prototype.destroy = function destroy() {
                event_handler.prototype.destroy.call(this);
              };

              // Listen for subtitle track change, then extract the current track ID.


              SubtitleTrackController.prototype.onMediaAttached = function onMediaAttached(data) {
                var _this2 = this;

                this.media = data.media;
                if (!this.media) {
                  return;
                }

                this.trackChangeListener = this._onTextTracksChanged.bind(this);

                this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);
                if (this.useTextTrackPolling) {
                  this.subtitlePollingInterval = setInterval(function () {
                    _this2.trackChangeListener();
                  }, 500);
                } else {
                  this.media.textTracks.addEventListener('change', this.trackChangeListener);
                }
              };

              SubtitleTrackController.prototype.onMediaDetaching = function onMediaDetaching() {
                if (!this.media) {
                  return;
                }
                if (this.useTextTrackPolling) {
                  clearInterval(this.subtitlePollingInterval);
                } else {
                  this.media.textTracks.removeEventListener('change', this.trackChangeListener);
                }

                this.media = undefined;
              };

              // Reset subtitle tracks on manifest loading


              SubtitleTrackController.prototype.onManifestLoading = function onManifestLoading() {
                this.tracks = [];
                this.trackId = -1;
              };

              // Fired whenever a new manifest is loaded.


              SubtitleTrackController.prototype.onManifestLoaded = function onManifestLoaded(data) {
                var _this3 = this;

                var tracks = data.subtitles || [];
                var defaultFound = false;
                this.tracks = tracks;
                this.trackId = -1;
                this.hls.trigger(events["a" /* default */].SUBTITLE_TRACKS_UPDATED, {subtitleTracks: tracks});

                // loop through available subtitle tracks and autoselect default if needed
                // TODO: improve selection logic to handle forced, etc
                tracks.forEach(function (track) {
                  if (track.default) {
                    _this3.subtitleTrack = track.id;
                    defaultFound = true;
                  }
                });
              };

              // Trigger subtitle track playlist reload.


              SubtitleTrackController.prototype.onTick = function onTick() {
                var trackId = this.trackId;
                var subtitleTrack = this.tracks[trackId];
                if (!subtitleTrack) {
                  return;
                }

                var details = subtitleTrack.details;
                // check if we need to load playlist for this subtitle Track
                if (details === undefined || details.live === true) {
                  // track not retrieved yet, or live playlist we need to (re)load it
                  logger["b" /* logger */].log('(re)loading playlist for subtitle track ' + trackId);
                  this.hls.trigger(events["a" /* default */].SUBTITLE_TRACK_LOADING, {
                    url: subtitleTrack.url,
                    id: trackId
                  });
                }
              };

              SubtitleTrackController.prototype.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {
                var _this4 = this;

                if (data.id < this.tracks.length) {
                  logger["b" /* logger */].log('subtitle track ' + data.id + ' loaded');
                  this.tracks[data.id].details = data.details;
                  // check if current playlist is a live playlist
                  if (data.details.live && !this.timer) {
                    // if live playlist we will have to reload it periodically
                    // set reload period to playlist target duration
                    this.timer = setInterval(function () {
                      _this4.onTick();
                    }, 1000 * data.details.targetduration, this);
                  }
                  if (!data.details.live && this.timer) {
                    // playlist is not live and timer is armed : stopping it
                    clearInterval(this.timer);
                    this.timer = null;
                  }
                }
              };

              /** get alternate subtitle tracks list from playlist **/


              SubtitleTrackController.prototype.setSubtitleTrackInternal = function setSubtitleTrackInternal(newId) {
                // check if level idx is valid
                if (newId < -1 || newId >= this.tracks.length) {
                  return;
                }

                // stopping live reloading timer if any
                if (this.timer) {
                  clearInterval(this.timer);
                  this.timer = null;
                }

                var textTracks = filterSubtitleTracks(this.media.textTracks);

                // hide currently enabled subtitle track
                if (this.trackId !== -1 && this.subtitleDisplay) {
                  textTracks[this.trackId].mode = 'hidden';
                }

                this.trackId = newId;
                logger["b" /* logger */].log('switching to subtitle track ' + newId);
                this.hls.trigger(events["a" /* default */].SUBTITLE_TRACK_SWITCH, {id: newId});

                if (newId === -1) {
                  return;
                }

                var subtitleTrack = this.tracks[newId];
                if (this.subtitleDisplay) {
                  textTracks[newId].mode = 'showing';
                }

                // check if we need to load playlist for this subtitle Track
                var details = subtitleTrack.details;
                if (details === undefined || details.live === true) {
                  // track not retrieved yet, or live playlist we need to (re)load it
                  logger["b" /* logger */].log('(re)loading playlist for subtitle track ' + newId);
                  this.hls.trigger(events["a" /* default */].SUBTITLE_TRACK_LOADING, {
                    url: subtitleTrack.url,
                    id: newId
                  });
                }
              };

              subtitle_track_controller__createClass(SubtitleTrackController, [{
                key: 'subtitleTracks',
                get: function get() {
                  return this.tracks;
                }

                /** get index of the selected subtitle track (index in subtitle track lists) **/

              }, {
                key: 'subtitleTrack',
                get: function get() {
                  return this.trackId;
                }

                /** select a subtitle track, based on its index in subtitle track lists**/
                ,
                set: function set(subtitleTrackId) {
                  if (this.trackId !== subtitleTrackId) {
                    // || this.tracks[subtitleTrackId].details === undefined) {
                    this.setSubtitleTrackInternal(subtitleTrackId);
                  }
                }
              }]);

              return SubtitleTrackController;
            }(event_handler);

            /* harmony default export */
            var subtitle_track_controller = (subtitle_track_controller_SubtitleTrackController);
// EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules
            var decrypter = __webpack_require__(3);

// CONCATENATED MODULE: ./src/controller/subtitle-stream-controller.js
            function subtitle_stream_controller__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function subtitle_stream_controller__possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function subtitle_stream_controller__inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            /*
 * Subtitle Stream Controller
*/


            var subtitle_stream_controller_State = {
              STOPPED: 'STOPPED',
              IDLE: 'IDLE',
              KEY_LOADING: 'KEY_LOADING',
              FRAG_LOADING: 'FRAG_LOADING'
            };

            var subtitle_stream_controller_SubtitleStreamController = function (_EventHandler) {
              subtitle_stream_controller__inherits(SubtitleStreamController, _EventHandler);

              function SubtitleStreamController(hls) {
                subtitle_stream_controller__classCallCheck(this, SubtitleStreamController);

                var _this = subtitle_stream_controller__possibleConstructorReturn(this, _EventHandler.call(this, hls, events["a" /* default */].MEDIA_ATTACHED, events["a" /* default */].ERROR, events["a" /* default */].KEY_LOADED, events["a" /* default */].FRAG_LOADED, events["a" /* default */].SUBTITLE_TRACKS_UPDATED, events["a" /* default */].SUBTITLE_TRACK_SWITCH, events["a" /* default */].SUBTITLE_TRACK_LOADED, events["a" /* default */].SUBTITLE_FRAG_PROCESSED));

                _this.config = hls.config;
                _this.vttFragSNsProcessed = {};
                _this.vttFragQueues = undefined;
                _this.currentlyProcessing = null;
                _this.state = subtitle_stream_controller_State.STOPPED;
                _this.currentTrackId = -1;
                _this.ticks = 0;
                _this.decrypter = new decrypter["a" /* default */](hls.observer, hls.config);
                return _this;
              }

              SubtitleStreamController.prototype.destroy = function destroy() {
                event_handler.prototype.destroy.call(this);
                this.state = subtitle_stream_controller_State.STOPPED;
              };

              // Remove all queued items and create a new, empty queue for each track.


              SubtitleStreamController.prototype.clearVttFragQueues = function clearVttFragQueues() {
                var _this2 = this;

                this.vttFragQueues = {};
                this.tracks.forEach(function (track) {
                  _this2.vttFragQueues[track.id] = [];
                });
              };

              // If no frag is being processed and queue isn't empty, initiate processing of next frag in line.


              SubtitleStreamController.prototype.nextFrag = function nextFrag() {
                if (this.currentlyProcessing === null && this.currentTrackId > -1 && this.vttFragQueues[this.currentTrackId].length) {
                  var frag = this.currentlyProcessing = this.vttFragQueues[this.currentTrackId].shift();
                  this.fragCurrent = frag;
                  this.hls.trigger(events["a" /* default */].FRAG_LOADING, {frag: frag});
                  this.state = subtitle_stream_controller_State.FRAG_LOADING;
                }
              };

              // When fragment has finished processing, add sn to list of completed if successful.


              SubtitleStreamController.prototype.onSubtitleFragProcessed = function onSubtitleFragProcessed(data) {
                if (data.success) {
                  this.vttFragSNsProcessed[data.frag.trackId].push(data.frag.sn);
                }
                this.currentlyProcessing = null;
                this.state = subtitle_stream_controller_State.IDLE;
                this.nextFrag();
              };

              SubtitleStreamController.prototype.onMediaAttached = function onMediaAttached() {
                this.state = subtitle_stream_controller_State.IDLE;
              };

              // If something goes wrong, procede to next frag, if we were processing one.


              SubtitleStreamController.prototype.onError = function onError(data) {
                var frag = data.frag;
                // don't handle frag error not related to subtitle fragment
                if (frag && frag.type !== 'subtitle') {
                  return;
                }
                if (this.currentlyProcessing) {
                  this.currentlyProcessing = null;
                  this.nextFrag();
                }
              };

              SubtitleStreamController.prototype.tick = function tick() {
                var _this3 = this;

                this.ticks++;
                if (this.ticks === 1) {
                  this.doTick();
                  if (this.ticks > 1) {
                    setTimeout(function () {
                      _this3.tick();
                    }, 1);
                  }
                  this.ticks = 0;
                }
              };

              SubtitleStreamController.prototype.doTick = function doTick() {
                var _this4 = this;

                switch (this.state) {
                  case subtitle_stream_controller_State.IDLE:
                    var tracks = this.tracks;
                    var trackId = this.currentTrackId;

                    var processedFragSNs = this.vttFragSNsProcessed[trackId],
                      fragQueue = this.vttFragQueues[trackId],
                      currentFragSN = !!this.currentlyProcessing ? this.currentlyProcessing.sn : -1;

                    var alreadyProcessed = function alreadyProcessed(frag) {
                      return processedFragSNs.indexOf(frag.sn) > -1;
                    };

                    var alreadyInQueue = function alreadyInQueue(frag) {
                      return fragQueue.some(function (fragInQueue) {
                        return fragInQueue.sn === frag.sn;
                      });
                    };

                    // exit if tracks don't exist
                    if (!tracks) {
                      break;
                    }
                    var trackDetails;

                    if (trackId < tracks.length) {
                      trackDetails = tracks[trackId].details;
                    }

                    if (typeof trackDetails === 'undefined') {
                      break;
                    }

                    // Add all fragments that haven't been, aren't currently being and aren't waiting to be processed, to queue.
                    trackDetails.fragments.forEach(function (frag) {
                      if (!(alreadyProcessed(frag) || frag.sn === currentFragSN || alreadyInQueue(frag))) {
                        // Load key if subtitles are encrypted
                        if (frag.decryptdata && frag.decryptdata.uri != null && frag.decryptdata.key == null) {
                          logger["b" /* logger */].log('Loading key for ' + frag.sn);
                          _this4.state = subtitle_stream_controller_State.KEY_LOADING;
                          _this4.hls.trigger(events["a" /* default */].KEY_LOADING, {frag: frag});
                        } else {
                          // Frags don't know their subtitle track ID, so let's just add that...
                          frag.trackId = trackId;
                          fragQueue.push(frag);
                          _this4.nextFrag();
                        }
                      }
                    });
                }
              };

              // Got all new subtitle tracks.


              SubtitleStreamController.prototype.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(data) {
                var _this5 = this;

                logger["b" /* logger */].log('subtitle tracks updated');
                this.tracks = data.subtitleTracks;
                this.clearVttFragQueues();
                this.vttFragSNsProcessed = {};
                this.tracks.forEach(function (track) {
                  _this5.vttFragSNsProcessed[track.id] = [];
                });
              };

              SubtitleStreamController.prototype.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(data) {
                this.currentTrackId = data.id;
                this.clearVttFragQueues();
              };

              // Got a new set of subtitle fragments.


              SubtitleStreamController.prototype.onSubtitleTrackLoaded = function onSubtitleTrackLoaded() {
                this.tick();
              };

              SubtitleStreamController.prototype.onKeyLoaded = function onKeyLoaded() {
                if (this.state === subtitle_stream_controller_State.KEY_LOADING) {
                  this.state = subtitle_stream_controller_State.IDLE;
                  this.tick();
                }
              };

              SubtitleStreamController.prototype.onFragLoaded = function onFragLoaded(data) {
                var fragCurrent = this.fragCurrent,
                  decryptData = data.frag.decryptdata;
                var fragLoaded = data.frag,
                  hls = this.hls;
                if (this.state === subtitle_stream_controller_State.FRAG_LOADING && fragCurrent && data.frag.type === 'subtitle' && fragCurrent.sn === data.frag.sn) {
                  // check to see if the payload needs to be decrypted
                  if (data.payload.byteLength > 0 && decryptData != null && decryptData.key != null && decryptData.method === 'AES-128') {
                    var startTime;
                    try {
                      startTime = performance.now();
                    } catch (error) {
                      startTime = Date.now();
                    }
                    // decrypt the subtitles
                    this.decrypter.decrypt(data.payload, decryptData.key.buffer, decryptData.iv.buffer, function (decryptedData) {
                      var endTime;
                      try {
                        endTime = performance.now();
                      } catch (error) {
                        endTime = Date.now();
                      }
                      hls.trigger(events["a" /* default */].FRAG_DECRYPTED, {
                        frag: fragLoaded,
                        payload: decryptedData,
                        stats: {tstart: startTime, tdecrypt: endTime}
                      });
                    });
                  }
                }
              };

              return SubtitleStreamController;
            }(event_handler);

            /* harmony default export */
            var subtitle_stream_controller = (subtitle_stream_controller_SubtitleStreamController);
// CONCATENATED MODULE: ./src/config.js
            /**
             * HLS config
             */






//import FetchLoader from './utils/fetch-loader';


            var hlsDefaultConfig = {
              autoStartLoad: true, // used by stream-controller
              startPosition: -1, // used by stream-controller
              defaultAudioCodec: undefined, // used by stream-controller
              debug: false, // used by logger
              capLevelOnFPSDrop: false, // used by fps-controller
              capLevelToPlayerSize: false, // used by cap-level-controller
              initialLiveManifestSize: 1, // used by stream-controller
              maxBufferLength: 30, // used by stream-controller
              maxBufferSize: 60 * 1000 * 1000, // used by stream-controller
              maxBufferHole: 0.5, // used by stream-controller
              maxSeekHole: 2, // used by stream-controller
              lowBufferWatchdogPeriod: 0.5, // used by stream-controller
              highBufferWatchdogPeriod: 3, // used by stream-controller
              nudgeOffset: 0.1, // used by stream-controller
              nudgeMaxRetry: 3, // used by stream-controller
              maxFragLookUpTolerance: 0.25, // used by stream-controller
              liveSyncDurationCount: 3, // used by stream-controller
              liveMaxLatencyDurationCount: Infinity, // used by stream-controller
              liveSyncDuration: undefined, // used by stream-controller
              liveMaxLatencyDuration: undefined, // used by stream-controller
              maxMaxBufferLength: 600, // used by stream-controller
              enableWorker: true, // used by demuxer
              enableSoftwareAES: true, // used by decrypter
              manifestLoadingTimeOut: 10000, // used by playlist-loader
              manifestLoadingMaxRetry: 1, // used by playlist-loader
              manifestLoadingRetryDelay: 1000, // used by playlist-loader
              manifestLoadingMaxRetryTimeout: 64000, // used by playlist-loader
              startLevel: undefined, // used by level-controller
              levelLoadingTimeOut: 10000, // used by playlist-loader
              levelLoadingMaxRetry: 4, // used by playlist-loader
              levelLoadingRetryDelay: 1000, // used by playlist-loader
              levelLoadingMaxRetryTimeout: 64000, // used by playlist-loader
              fragLoadingTimeOut: 20000, // used by fragment-loader
              fragLoadingMaxRetry: 6, // used by fragment-loader
              fragLoadingRetryDelay: 1000, // used by fragment-loader
              fragLoadingMaxRetryTimeout: 64000, // used by fragment-loader
              fragLoadingLoopThreshold: 3, // used by stream-controller
              startFragPrefetch: false, // used by stream-controller
              fpsDroppedMonitoringPeriod: 5000, // used by fps-controller
              fpsDroppedMonitoringThreshold: 0.2, // used by fps-controller
              appendErrorMaxRetry: 3, // used by buffer-controller
              loader: xhr_loader,
              //loader: FetchLoader,
              fLoader: undefined,
              pLoader: undefined,
              xhrSetup: undefined,
              fetchSetup: undefined,
              abrController: abr_controller,
              bufferController: buffer_controller,
              capLevelController: cap_level_controller,
              fpsController: fps_controller,
              stretchShortVideoTrack: false, // used by mp4-remuxer
              maxAudioFramesDrift: 1, // used by mp4-remuxer
              forceKeyFrameOnDiscontinuity: true, // used by ts-demuxer
              abrEwmaFastLive: 3, // used by abr-controller
              abrEwmaSlowLive: 9, // used by abr-controller
              abrEwmaFastVoD: 3, // used by abr-controller
              abrEwmaSlowVoD: 9, // used by abr-controller
              abrEwmaDefaultEstimate: 5e5, // 500 kbps  // used by abr-controller
              abrBandWidthFactor: 0.95, // used by abr-controller
              abrBandWidthUpFactor: 0.7, // used by abr-controller
              abrMaxWithRealBitrate: false, // used by abr-controller
              maxStarvationDelay: 4, // used by abr-controller
              maxLoadingDelay: 4, // used by abr-controller
              minAutoBitrate: 0 // used by hls
            };

            if (true) {
              hlsDefaultConfig.subtitleStreamController = subtitle_stream_controller;
              hlsDefaultConfig.subtitleTrackController = subtitle_track_controller;
              hlsDefaultConfig.timelineController = timeline_controller;
              hlsDefaultConfig.cueHandler = cues_namespaceObject;
              hlsDefaultConfig.enableCEA708Captions = true; // used by timeline-controller
              hlsDefaultConfig.enableWebVTT = true; // used by timeline-controller
              hlsDefaultConfig.captionsTextTrack1Label = 'English'; // used by timeline-controller
              hlsDefaultConfig.captionsTextTrack1LanguageCode = 'en'; // used by timeline-controller
              hlsDefaultConfig.captionsTextTrack2Label = 'Spanish'; // used by timeline-controller
              hlsDefaultConfig.captionsTextTrack2LanguageCode = 'es'; // used by timeline-controller
            }

            if (true) {
              hlsDefaultConfig.audioStreamController = audio_stream_controller;
              hlsDefaultConfig.audioTrackController = audio_track_controller;
            }
// CONCATENATED MODULE: ./src/hls.js
            var hls__createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function hls__classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            /**
             * HLS interface
             */
















            var hls_Hls = function () {
              Hls.isSupported = function isSupported() {
                var mediaSource = getMediaSource();
                var sourceBuffer = window.SourceBuffer || window.WebKitSourceBuffer;
                var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === 'function' && mediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');

                // if SourceBuffer is exposed ensure its API is valid
                // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible
                var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';
                return isTypeSupported && sourceBufferValidAPI;
              };

              hls__createClass(Hls, null, [{
                key: 'version',
                get: function get() {
                  return "0.8.5";
                }
              }, {
                key: 'Events',
                get: function get() {
                  return events["a" /* default */];
                }
              }, {
                key: 'ErrorTypes',
                get: function get() {
                  return errors["b" /* ErrorTypes */];
                }
              }, {
                key: 'ErrorDetails',
                get: function get() {
                  return errors["a" /* ErrorDetails */];
                }
              }, {
                key: 'DefaultConfig',
                get: function get() {
                  if (!Hls.defaultConfig) {
                    return hlsDefaultConfig;
                  }
                  return Hls.defaultConfig;
                },
                set: function set(defaultConfig) {
                  Hls.defaultConfig = defaultConfig;
                }
              }]);

              function Hls() {
                var _this = this;

                var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                hls__classCallCheck(this, Hls);

                var defaultConfig = Hls.DefaultConfig;

                if ((config.liveSyncDurationCount || config.liveMaxLatencyDurationCount) && (config.liveSyncDuration || config.liveMaxLatencyDuration)) {
                  throw new Error('Illegal hls.js config: don\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');
                }

                for (var prop in defaultConfig) {
                  if (prop in config) {
                    continue;
                  }
                  config[prop] = defaultConfig[prop];
                }

                if (config.liveMaxLatencyDurationCount !== undefined && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {
                  throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');
                }

                if (config.liveMaxLatencyDuration !== undefined && (config.liveMaxLatencyDuration <= config.liveSyncDuration || config.liveSyncDuration === undefined)) {
                  throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');
                }

                Object(logger["a" /* enableLogs */])(config.debug);
                this.config = config;
                this._autoLevelCapping = -1;
                // observer setup
                var observer = this.observer = new events_default.a();
                observer.trigger = function trigger(event) {
                  for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    data[_key - 1] = arguments[_key];
                  }

                  observer.emit.apply(observer, [event, event].concat(data));
                };

                observer.off = function off(event) {
                  for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    data[_key2 - 1] = arguments[_key2];
                  }

                  observer.removeListener.apply(observer, [event].concat(data));
                };
                this.on = observer.on.bind(observer);
                this.off = observer.off.bind(observer);
                this.trigger = observer.trigger.bind(observer);

                // core controllers and network loaders
                var abrController = this.abrController = new config.abrController(this);
                var bufferController = new config.bufferController(this);
                var capLevelController = new config.capLevelController(this);
                var fpsController = new config.fpsController(this);
                var playListLoader = new playlist_loader(this);
                var fragmentLoader = new fragment_loader(this);
                var keyLoader = new key_loader(this);
                var id3TrackController = new id3_track_controller(this);

                // network controllers
                var levelController = this.levelController = new level_controller(this);
                var streamController = this.streamController = new stream_controller(this);
                var networkControllers = [levelController, streamController];

                // optional audio stream controller
                var Controller = config.audioStreamController;
                if (Controller) {
                  networkControllers.push(new Controller(this));
                }
                this.networkControllers = networkControllers;

                var coreComponents = [playListLoader, fragmentLoader, keyLoader, abrController, bufferController, capLevelController, fpsController, id3TrackController];

                // optional audio track and subtitle controller
                Controller = config.audioTrackController;
                if (Controller) {
                  var audioTrackController = new Controller(this);
                  this.audioTrackController = audioTrackController;
                  coreComponents.push(audioTrackController);
                }

                Controller = config.subtitleTrackController;
                if (Controller) {
                  var subtitleTrackController = new Controller(this);
                  this.subtitleTrackController = subtitleTrackController;
                  coreComponents.push(subtitleTrackController);
                }

                // optional subtitle controller
                [config.subtitleStreamController, config.timelineController].forEach(function (Controller) {
                  if (Controller) {
                    coreComponents.push(new Controller(_this));
                  }
                });
                this.coreComponents = coreComponents;
              }

              Hls.prototype.destroy = function destroy() {
                logger["b" /* logger */].log('destroy');
                this.trigger(events["a" /* default */].DESTROYING);
                this.detachMedia();
                this.coreComponents.concat(this.networkControllers).forEach(function (component) {
                  component.destroy();
                });
                this.url = null;
                this.observer.removeAllListeners();
                this._autoLevelCapping = -1;
              };

              Hls.prototype.attachMedia = function attachMedia(media) {
                logger["b" /* logger */].log('attachMedia');
                this.media = media;
                this.trigger(events["a" /* default */].MEDIA_ATTACHING, {media: media});
              };

              Hls.prototype.detachMedia = function detachMedia() {
                logger["b" /* logger */].log('detachMedia');
                this.trigger(events["a" /* default */].MEDIA_DETACHING);
                this.media = null;
              };

              Hls.prototype.loadSource = function loadSource(url) {
                url = url_toolkit_default.a.buildAbsoluteURL(window.location.href, url, {alwaysNormalize: true});
                logger["b" /* logger */].log('loadSource:' + url);
                this.url = url;
                // when attaching to a source URL, trigger a playlist load
                this.trigger(events["a" /* default */].MANIFEST_LOADING, {url: url});
              };

              Hls.prototype.startLoad = function startLoad() {
                var startPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

                logger["b" /* logger */].log('startLoad(' + startPosition + ')');
                this.networkControllers.forEach(function (controller) {
                  controller.startLoad(startPosition);
                });
              };

              Hls.prototype.stopLoad = function stopLoad() {
                logger["b" /* logger */].log('stopLoad');
                this.networkControllers.forEach(function (controller) {
                  controller.stopLoad();
                });
              };

              Hls.prototype.swapAudioCodec = function swapAudioCodec() {
                logger["b" /* logger */].log('swapAudioCodec');
                this.streamController.swapAudioCodec();
              };

              Hls.prototype.recoverMediaError = function recoverMediaError() {
                logger["b" /* logger */].log('recoverMediaError');
                var media = this.media;
                this.detachMedia();
                this.attachMedia(media);
              };

              /** Return all quality levels **/


              hls__createClass(Hls, [{
                key: 'levels',
                get: function get() {
                  return this.levelController.levels;
                }

                /** Return current playback quality level **/

              }, {
                key: 'currentLevel',
                get: function get() {
                  return this.streamController.currentLevel;
                }

                /* set quality level immediately (-1 for automatic level selection) */
                ,
                set: function set(newLevel) {
                  logger["b" /* logger */].log('set currentLevel:' + newLevel);
                  this.loadLevel = newLevel;
                  this.streamController.immediateLevelSwitch();
                }

                /** Return next playback quality level (quality level of next fragment) **/

              }, {
                key: 'nextLevel',
                get: function get() {
                  return this.streamController.nextLevel;
                }

                /* set quality level for next fragment (-1 for automatic level selection) */
                ,
                set: function set(newLevel) {
                  logger["b" /* logger */].log('set nextLevel:' + newLevel);
                  this.levelController.manualLevel = newLevel;
                  this.streamController.nextLevelSwitch();
                }

                /** Return the quality level of current/last loaded fragment **/

              }, {
                key: 'loadLevel',
                get: function get() {
                  return this.levelController.level;
                }

                /* set quality level for current/next loaded fragment (-1 for automatic level selection) */
                ,
                set: function set(newLevel) {
                  logger["b" /* logger */].log('set loadLevel:' + newLevel);
                  this.levelController.manualLevel = newLevel;
                }

                /** Return the quality level of next loaded fragment **/

              }, {
                key: 'nextLoadLevel',
                get: function get() {
                  return this.levelController.nextLoadLevel;
                }

                /** set quality level of next loaded fragment **/
                ,
                set: function set(level) {
                  this.levelController.nextLoadLevel = level;
                }

                /** Return first level (index of first level referenced in manifest)
                 **/

              }, {
                key: 'firstLevel',
                get: function get() {
                  return Math.max(this.levelController.firstLevel, this.minAutoLevel);
                }

                /** set first level (index of first level referenced in manifest)
                 **/
                ,
                set: function set(newLevel) {
                  logger["b" /* logger */].log('set firstLevel:' + newLevel);
                  this.levelController.firstLevel = newLevel;
                }

                /** Return start level (level of first fragment that will be played back)
                 if not overrided by user, first level appearing in manifest will be used as start level
                 if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)
                 **/

              }, {
                key: 'startLevel',
                get: function get() {
                  return this.levelController.startLevel;
                }

                /** set  start level (level of first fragment that will be played back)
                 if not overrided by user, first level appearing in manifest will be used as start level
                 if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)
                 **/
                ,
                set: function set(newLevel) {
                  logger["b" /* logger */].log('set startLevel:' + newLevel);
                  var hls = this;
                  // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel
                  if (newLevel !== -1) {
                    newLevel = Math.max(newLevel, hls.minAutoLevel);
                  }
                  hls.levelController.startLevel = newLevel;
                }

                /** Return the capping/max level value that could be used by automatic level selection algorithm **/

              }, {
                key: 'autoLevelCapping',
                get: function get() {
                  return this._autoLevelCapping;
                }

                /** set the capping/max level value that could be used by automatic level selection algorithm **/
                ,
                set: function set(newLevel) {
                  logger["b" /* logger */].log('set autoLevelCapping:' + newLevel);
                  this._autoLevelCapping = newLevel;
                }

                /* check if we are in automatic level selection mode */

              }, {
                key: 'autoLevelEnabled',
                get: function get() {
                  return this.levelController.manualLevel === -1;
                }

                /* return manual level */

              }, {
                key: 'manualLevel',
                get: function get() {
                  return this.levelController.manualLevel;
                }

                /* return min level selectable in auto mode according to config.minAutoBitrate */

              }, {
                key: 'minAutoLevel',
                get: function get() {
                  var hls = this,
                    levels = hls.levels,
                    minAutoBitrate = hls.config.minAutoBitrate,
                    len = levels ? levels.length : 0;
                  for (var i = 0; i < len; i++) {
                    var levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;
                    if (levelNextBitrate > minAutoBitrate) {
                      return i;
                    }
                  }
                  return 0;
                }

                /* return max level selectable in auto mode according to autoLevelCapping */

              }, {
                key: 'maxAutoLevel',
                get: function get() {
                  var hls = this;
                  var levels = hls.levels;
                  var autoLevelCapping = hls.autoLevelCapping;
                  var maxAutoLevel = void 0;
                  if (autoLevelCapping === -1 && levels && levels.length) {
                    maxAutoLevel = levels.length - 1;
                  } else {
                    maxAutoLevel = autoLevelCapping;
                  }
                  return maxAutoLevel;
                }

                // return next auto level

              }, {
                key: 'nextAutoLevel',
                get: function get() {
                  var hls = this;
                  // ensure next auto level is between  min and max auto level
                  return Math.min(Math.max(hls.abrController.nextAutoLevel, hls.minAutoLevel), hls.maxAutoLevel);
                }

                // this setter is used to force next auto level
                // this is useful to force a switch down in auto mode : in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)
                // forced value is valid for one fragment. upon succesful frag loading at forced level, this value will be resetted to -1 by ABR controller
                ,
                set: function set(nextLevel) {
                  var hls = this;
                  hls.abrController.nextAutoLevel = Math.max(hls.minAutoLevel, nextLevel);
                }

                /** get alternate audio tracks list from playlist **/

              }, {
                key: 'audioTracks',
                get: function get() {
                  var audioTrackController = this.audioTrackController;
                  return audioTrackController ? audioTrackController.audioTracks : [];
                }

                /** get index of the selected audio track (index in audio track lists) **/

              }, {
                key: 'audioTrack',
                get: function get() {
                  var audioTrackController = this.audioTrackController;
                  return audioTrackController ? audioTrackController.audioTrack : -1;
                }

                /** select an audio track, based on its index in audio track lists**/
                ,
                set: function set(audioTrackId) {
                  var audioTrackController = this.audioTrackController;
                  if (audioTrackController) {
                    audioTrackController.audioTrack = audioTrackId;
                  }
                }
              }, {
                key: 'liveSyncPosition',
                get: function get() {
                  return this.streamController.liveSyncPosition;
                }

                /** get alternate subtitle tracks list from playlist **/

              }, {
                key: 'subtitleTracks',
                get: function get() {
                  var subtitleTrackController = this.subtitleTrackController;
                  return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
                }

                /** get index of the selected subtitle track (index in subtitle track lists) **/

              }, {
                key: 'subtitleTrack',
                get: function get() {
                  var subtitleTrackController = this.subtitleTrackController;
                  return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
                }

                /** select an subtitle track, based on its index in subtitle track lists**/
                ,
                set: function set(subtitleTrackId) {
                  var subtitleTrackController = this.subtitleTrackController;
                  if (subtitleTrackController) {
                    subtitleTrackController.subtitleTrack = subtitleTrackId;
                  }
                }
              }, {
                key: 'subtitleDisplay',
                get: function get() {
                  var subtitleTrackController = this.subtitleTrackController;
                  return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
                },
                set: function set(value) {
                  var subtitleTrackController = this.subtitleTrackController;
                  if (subtitleTrackController) {
                    subtitleTrackController.subtitleDisplay = value;
                  }
                }
              }]);

              return Hls;
            }();

            /* harmony default export */
            var src_hls = __webpack_exports__["default"] = (hls_Hls);

            /***/
          }),
          /* 9 */
          /***/ (function (module, exports, __webpack_require__) {

            function webpackBootstrapFunc(modules) {
              /******/  // The module cache
              /******/
              var installedModules = {};

              /******/  // The require function
              /******/
              function __webpack_require__(moduleId) {

                /******/    // Check if module is in cache
                /******/
                if (installedModules[moduleId])
                /******/      return installedModules[moduleId].exports;

                /******/    // Create a new module (and put it into the cache)
                /******/
                var module = installedModules[moduleId] = {
                  /******/      i: moduleId,
                  /******/      l: false,
                  /******/      exports: {}
                  /******/
                };

                /******/    // Execute the module function
                /******/
                modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

                /******/    // Flag the module as loaded
                /******/
                module.l = true;

                /******/    // Return the exports of the module
                /******/
                return module.exports;
                /******/
              }

              /******/  // expose the modules object (__webpack_modules__)
              /******/
              __webpack_require__.m = modules;

              /******/  // expose the module cache
              /******/
              __webpack_require__.c = installedModules;

              /******/  // identity function for calling harmony imports with the correct context
              /******/
              __webpack_require__.i = function (value) {
                return value;
              };

              /******/  // define getter function for harmony exports
              /******/
              __webpack_require__.d = function (exports, name, getter) {
                /******/
                if (!__webpack_require__.o(exports, name)) {
                  /******/
                  Object.defineProperty(exports, name, {
                    /******/        configurable: false,
                    /******/        enumerable: true,
                    /******/        get: getter
                    /******/
                  });
                  /******/
                }
                /******/
              };

              /******/  // getDefaultExport function for compatibility with non-harmony modules
              /******/
              __webpack_require__.n = function (module) {
                /******/
                var getter = module && module.__esModule ?
                  /******/      function getDefault() {
                    return module['default'];
                  } :
                  /******/      function getModuleExports() {
                    return module;
                  };
                /******/
                __webpack_require__.d(getter, 'a', getter);
                /******/
                return getter;
                /******/
              };

              /******/  // Object.prototype.hasOwnProperty.call
              /******/
              __webpack_require__.o = function (object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
              };

              /******/  // __webpack_public_path__
              /******/
              __webpack_require__.p = "/";

              /******/  // on error function for async loading
              /******/
              __webpack_require__.oe = function (err) {
                console.error(err);
                throw err;
              };

              var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)
              return f.default || f // try to call default if defined to also support babel esmodule exports
            }

// http://stackoverflow.com/a/2593661/130442
            function quoteRegExp(str) {
              return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
            }

            function getModuleDependencies(module) {
              var retval = []
              var fnString = module.toString()
              var wrapperSignature = fnString.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/)
              if (!wrapperSignature) return retval

              var webpackRequireName = wrapperSignature[1]
              var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + '\\((\/\\*.*?\\*\/)?\s?.*?([\\.|\\-|\\w|\/|@]+).*?\\)', 'g') // additional chars when output.pathinfo is true
              var match
              while ((match = re.exec(fnString))) {
                retval.push(match[3])
              }
              return retval
            }

            function getRequiredModules(sources, moduleId) {
              var modulesQueue = [moduleId]
              var requiredModules = []
              var seenModules = {}

              while (modulesQueue.length) {
                var moduleToCheck = modulesQueue.pop()
                if (seenModules[moduleToCheck] || !sources[moduleToCheck]) continue
                seenModules[moduleToCheck] = true
                requiredModules.push(moduleToCheck)
                var newModules = getModuleDependencies(sources[moduleToCheck])
                modulesQueue = modulesQueue.concat(newModules)
              }

              return requiredModules
            }

            module.exports = function (moduleId, options) {
              options = options || {}
              var sources = __webpack_require__.m

              var requiredModules = options.all ? Object.keys(sources) : getRequiredModules(sources, moduleId)
              var src = '(' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.map(function (id) {
                return '' + JSON.stringify(id) + ': ' + sources[id].toString()
              }).join(',') + '})(self);'

              var blob = new window.Blob([src], {type: 'text/javascript'})
              if (options.bare) {
                return blob
              }

              var URL = window.URL || window.webkitURL || window.mozURL || window.msURL

              var workerUrl = URL.createObjectURL(blob)
              var worker = new window.Worker(workerUrl)
              worker.objectURL = workerUrl

              return worker
            }


            /***/
          }),
          /* 10 */
          /***/ (function (module, __webpack_exports__, __webpack_require__) {

            "use strict";
            Object.defineProperty(__webpack_exports__, "__esModule", {value: true});
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_0__demux_demuxer_inline__ = __webpack_require__(7);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_1__events__ = __webpack_require__(1);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_2__utils_logger__ = __webpack_require__(0);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_3_events__ = __webpack_require__(5);
            /* harmony import */
            var __WEBPACK_IMPORTED_MODULE_3_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_events__);
            /* demuxer web worker.
 *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.
 *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.
 */


            var DemuxerWorker = function DemuxerWorker(self) {
              // observer setup
              var observer = new __WEBPACK_IMPORTED_MODULE_3_events___default.a();
              observer.trigger = function trigger(event) {
                for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  data[_key - 1] = arguments[_key];
                }

                observer.emit.apply(observer, [event, event].concat(data));
              };

              observer.off = function off(event) {
                for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  data[_key2 - 1] = arguments[_key2];
                }

                observer.removeListener.apply(observer, [event].concat(data));
              };

              var forwardMessage = function forwardMessage(ev, data) {
                self.postMessage({event: ev, data: data});
              };

              self.addEventListener('message', function (ev) {
                var data = ev.data;
                //console.log('demuxer cmd:' + data.cmd);
                switch (data.cmd) {
                  case 'init':
                    var config = JSON.parse(data.config);
                    self.demuxer = new __WEBPACK_IMPORTED_MODULE_0__demux_demuxer_inline__["a" /* default */](observer, data.typeSupported, config, data.vendor);
                    try {
                      Object(__WEBPACK_IMPORTED_MODULE_2__utils_logger__["a" /* enableLogs */])(config.debug === true);
                    } catch (err) {
                      console.warn('demuxerWorker: unable to enable logs');
                    }
                    // signal end of worker init
                    forwardMessage('init', null);
                    break;
                  case 'demux':
                    self.demuxer.push(data.data, data.decryptdata, data.initSegment, data.audioCodec, data.videoCodec, data.timeOffset, data.discontinuity, data.trackSwitch, data.contiguous, data.duration, data.accurateTimeOffset, data.defaultInitPTS);
                    break;
                  default:
                    break;
                }
              });

              // forward events to main thread
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].FRAG_DECRYPTED, forwardMessage);
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].FRAG_PARSING_INIT_SEGMENT, forwardMessage);
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].FRAG_PARSED, forwardMessage);
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].ERROR, forwardMessage);
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].FRAG_PARSING_METADATA, forwardMessage);
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].FRAG_PARSING_USERDATA, forwardMessage);
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].INIT_PTS_FOUND, forwardMessage);

              // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)
              observer.on(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* default */].FRAG_PARSING_DATA, function (ev, data) {
                var transferable = [];
                var message = {event: ev, data: data};
                if (data.data1) {
                  message.data1 = data.data1.buffer;
                  transferable.push(data.data1.buffer);
                  delete data.data1;
                }
                if (data.data2) {
                  message.data2 = data.data2.buffer;
                  transferable.push(data.data2.buffer);
                  delete data.data2;
                }
                self.postMessage(message, transferable);
              });
            };

            /* harmony default export */
            __webpack_exports__["default"] = (DemuxerWorker);

            /***/
          })
          /******/])["default"];
      });


      /***/
    }),
    /* 340 */
    /***/ (function (module, exports, __webpack_require__) {

      !function (e, t) {
        true ? module.exports = t(__webpack_require__(11), __webpack_require__(341)) : "function" == typeof define && define.amd ? define(["playkit-js", "shaka-player"], t) : "object" == typeof exports ? exports.PlaykitJsDash = t(require("playkit-js"), require("shaka-player")) : e.PlaykitJsDash = t(e.Playkit, e.shaka)
      }(this, function (e, t) {
        return function (e) {
          function t(n) {
            if (r[n]) return r[n].exports;
            var i = r[n] = {i: n, l: !1, exports: {}};
            return e[n].call(i.exports, i, i.exports, t), i.l = !0, i.exports
          }

          var r = {};
          return t.m = e, t.c = r, t.d = function (e, r, n) {
            t.o(e, r) || Object.defineProperty(e, r, {configurable: !1, enumerable: !0, get: n})
          }, t.n = function (e) {
            var r = e && e.__esModule ? function () {
              return e.default
            } : function () {
              return e
            };
            return t.d(r, "a", r), r
          }, t.o = function (e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
          }, t.p = "", t(t.s = 1)
        }([function (t, r) {
          t.exports = e
        }, function (e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", {value: !0}), t.NAME = t.VERSION = void 0;
          var n = r(0), i = r(2), a = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(i);
          t.default = a.default, t.VERSION = "1.5.0", t.NAME = "playkit-js-dash", a.default.isSupported() && (0, n.registerMediaSourceAdapter)(a.default)
        }, function (e, t, r) {
          "use strict";

          function n(e) {
            return e && e.__esModule ? e : {default: e}
          }

          function i(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e
          }

          function a(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function o(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
          }

          function s(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var u = function e(t, r, n, i) {
              var a = Object.getOwnPropertyDescriptor(t, r);
              if (void 0 === a) {
                var o = Object.getPrototypeOf(t);
                null !== o && e(o, r, n, i)
              } else if ("value" in a && a.writable) a.value = n; else {
                var s = a.set;
                void 0 !== s && s.call(i, n)
              }
              return n
            }, l = function e(t, r, n) {
              null === t && (t = Function.prototype);
              var i = Object.getOwnPropertyDescriptor(t, r);
              if (void 0 === i) {
                var a = Object.getPrototypeOf(t);
                return null === a ? void 0 : e(a, r, n)
              }
              if ("value" in i) return i.value;
              var o = i.get;
              if (void 0 !== o) return o.call(n)
            }, c = function () {
              function e(e, t) {
                for (var r = 0; r < t.length; r++) {
                  var n = t[r];
                  n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n)
                }
              }

              return function (t, r, n) {
                return r && e(t.prototype, r), n && e(t, n), t
              }
            }(), d = r(3), f = n(d), h = r(0), _ = r(4), p = n(_), g = r(5), v = n(g), y = r(6),
            b = {ERROR: "error", ADAPTION: "adaption", BUFFERING: "buffering"}, k = function (e) {
              function t(e, r) {
                var n, s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                a(this, t), t._logger.debug("Creating adapter. Shaka version: " + f.default.Player.version);
                var u = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, r, s));
                return u._adapterEventsBindings = (n = {}, i(n, b.ERROR, function (e) {
                  return u._onError(e)
                }), i(n, b.ADAPTION, function () {
                  return u._onAdaptation()
                }), i(n, b.BUFFERING, function (e) {
                  return u._onBuffering(e)
                }), i(n, h.BaseMediaSourceAdapter.Html5Events.WAITING, function () {
                  return u._onWaiting()
                }), i(n, h.BaseMediaSourceAdapter.Html5Events.PLAYING, function () {
                  return u._onPlaying()
                }), n), u._buffering = !1, u._waitingSent = !1, u._playingSent = !1, u.VIDEO_ERROR_CODE = 3016, u._config = h.Utils.Object.mergeDeep({}, u._config, y.DefaultConfig), u
              }

              return s(t, e), c(t, null, [{
                key: "createAdapter", value: function (e, t, r) {
                  var n = {};
                  return h.Utils.Object.hasPropertyPath(r, "playback.options.html5.dash") && (n = r.playback.options.html5.dash), new this(e, t, n)
                }
              }, {
                key: "canPlayType", value: function (e) {
                  var r = "string" == typeof e && e.toLowerCase() === t._dashMimeType;
                  return t._logger.debug("canPlayType result for mimeType: " + e + " is " + r.toString()), r
                }
              }, {
                key: "canPlayDrm", value: function (e) {
                  var r = !1, n = !0, i = !1, a = void 0;
                  try {
                    for (var o, s = t._drmProtocols[Symbol.iterator](); !(n = (o = s.next()).done); n = !0) {
                      var u = o.value;
                      if (u.canPlayDrm(e)) {
                        t._drmProtocol = u, r = !0;
                        break
                      }
                    }
                  } catch (e) {
                    i = !0, a = e
                  } finally {
                    try {
                      !n && s.return && s.return()
                    } finally {
                      if (i) throw a
                    }
                  }
                  return t._logger.debug("canPlayDrm result is " + r.toString(), e), r
                }
              }, {
                key: "isSupported", value: function () {
                  var e = !1;
                  window.VTTCue || (e = !0), f.default.polyfill.installAll();
                  var r = f.default.Player.isBrowserSupported();
                  return e && (window.VTTCue = void 0), t._logger.debug("isSupported:" + r), r
                }
              }]), c(t, [{
                key: "_init", value: function () {
                  f.default.polyfill.installAll(), this._shaka = new f.default.Player(this._videoElement), this._maybeSetDrmConfig(), this._shaka.configure(this._config), this._shaka.setTextTrackVisibility(!1), this._addBindings()
                }
              }, {
                key: "_maybeSetDrmConfig", value: function () {
                  t._drmProtocol && this._sourceObj && this._sourceObj.drmData && t._drmProtocol.setDrmPlayback(this._config, this._sourceObj.drmData)
                }
              }, {
                key: "_addBindings", value: function () {
                  this._shaka.addEventListener(b.ADAPTION, this._adapterEventsBindings.adaption), this._shaka.addEventListener(b.ERROR, this._adapterEventsBindings.error), this._shaka.addEventListener(b.BUFFERING, this._adapterEventsBindings.buffering), this._videoElement.addEventListener(h.BaseMediaSourceAdapter.Html5Events.WAITING, this._adapterEventsBindings.waiting), this._videoElement.addEventListener(h.BaseMediaSourceAdapter.Html5Events.PLAYING, this._adapterEventsBindings.playing)
                }
              }, {
                key: "_removeBindings", value: function () {
                  this._shaka.removeEventListener(b.ADAPTION, this._adapterEventsBindings.adaption), this._shaka.removeEventListener(b.ERROR, this._adapterEventsBindings.error), this._shaka.removeEventListener(b.BUFFERING, this._adapterEventsBindings.buffering), this._videoElement.removeEventListener(h.BaseMediaSourceAdapter.Html5Events.WAITING, this._adapterEventsBindings.waiting), this._videoElement.removeEventListener(h.BaseMediaSourceAdapter.Html5Events.PLAYING, this._adapterEventsBindings.playing)
                }
              }, {
                key: "load", value: function (e) {
                  var r = this;
                  return this._loadPromise || (this._init(), this._loadPromise = new Promise(function (n, i) {
                    r._sourceObj && r._sourceObj.url && (r._trigger(h.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: r.isAdaptiveBitrateEnabled() ? "auto" : "manual"}), r._shaka.load(r._sourceObj.url, e).then(function () {
                      var e = {tracks: r._getParsedTracks()};
                      t._logger.debug("The source has been loaded successfully"), n(e)
                    }).catch(function (e) {
                      i(new h.Error(e.severity, e.category, e.code, e.data))
                    }))
                  })), this._loadPromise
                }
              }, {
                key: "destroy", value: function () {
                  var e = this;
                  return l(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "destroy", this).call(this).then(function () {
                    if (t._logger.debug("destroy"), e._loadPromise = null, e._buffering = !1, e._waitingSent = !1, e._playingSent = !1, t._drmProtocol && (t._drmProtocol.destroy(), t._drmProtocol = null), e._shaka) return e._removeBindings(), e._shaka.destroy();
                    e._adapterEventsBindings = {}
                  })
                }
              }, {
                key: "_getVideoTracks", value: function () {
                  var e = this._shaka.getVariantTracks(), t = e.filter(function (e) {
                    return e.active
                  })[0];
                  return e.filter(function (e) {
                    return e.audioId === t.audioId
                  })
                }
              }, {
                key: "_getAudioTracks", value: function () {
                  var e = this._shaka.getVariantTracks(), t = e.filter(function (e) {
                    return e.active
                  })[0];
                  return e.filter(function (e) {
                    return e.videoId === t.videoId
                  })
                }
              }, {
                key: "_getParsedTracks", value: function () {
                  if (this._shaka) {
                    var e = this._getParsedVideoTracks(), t = this._getParsedAudioTracks(),
                      r = this._getParsedTextTracks();
                    return e.concat(t).concat(r)
                  }
                  return []
                }
              }, {
                key: "_getParsedVideoTracks", value: function () {
                  var e = this._getVideoTracks(), t = [];
                  if (e) for (var r = 0; r < e.length; r++) {
                    var n = {
                      id: e[r].id,
                      bandwidth: e[r].bandwidth,
                      width: e[r].width,
                      height: e[r].height,
                      active: e[r].active,
                      label: e[r].label,
                      index: r
                    };
                    t.push(new h.VideoTrack(n))
                  }
                  return t
                }
              }, {
                key: "_getParsedAudioTracks", value: function () {
                  var e = this._getAudioTracks(), t = [];
                  if (e) for (var r = 0; r < e.length; r++) {
                    var n = {id: e[r].id, active: e[r].active, label: e[r].label, language: e[r].language, index: r};
                    t.push(new h.AudioTrack(n))
                  }
                  return t
                }
              }, {
                key: "_getParsedTextTracks", value: function () {
                  var e = this._shaka.getTextTracks(), t = [];
                  if (e) for (var r = 0; r < e.length; r++) {
                    var n = {
                      kind: e[r].kind ? e[r].kind + "s" : "",
                      active: !1,
                      label: e[r].label,
                      language: e[r].language,
                      index: r
                    };
                    t.push(new h.TextTrack(n))
                  }
                  return t
                }
              }, {
                key: "selectVideoTrack", value: function (e) {
                  if (this._shaka) {
                    var t = this._getVideoTracks();
                    if (e instanceof h.VideoTrack && t) {
                      var r = t[e.index];
                      r && (this.isAdaptiveBitrateEnabled() && (this._shaka.configure({abr: {enabled: !1}}), this._trigger(h.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: "manual"})), r.active || (this._shaka.selectVariantTrack(t[e.index], !0), this._onTrackChanged(e)))
                    }
                  }
                }
              }, {
                key: "selectAudioTrack", value: function (e) {
                  this._shaka && e instanceof h.AudioTrack && !e.active && (this._shaka.selectAudioLanguage(e.language), this._onTrackChanged(e))
                }
              }, {
                key: "selectTextTrack", value: function (e) {
                  this._shaka && e instanceof h.TextTrack && !e.active && ("subtitles" === e.kind || "captions" === e.kind) && (this._shaka.selectTextLanguage(e.language), this._shaka.setTextTrackVisibility(!1), this._onTrackChanged(e))
                }
              }, {
                key: "hideTextTrack", value: function () {
                  this._shaka && this._shaka.setTextTrackVisibility(!1)
                }
              }, {
                key: "enableAdaptiveBitrate", value: function () {
                  this._shaka && !this.isAdaptiveBitrateEnabled() && (this._trigger(h.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: "auto"}), this._shaka.configure({abr: {enabled: !0}}))
                }
              }, {
                key: "isAdaptiveBitrateEnabled", value: function () {
                  if (this._shaka) {
                    return this._shaka.getConfiguration().abr.enabled
                  }
                  return !1
                }
              }, {
                key: "seekToLiveEdge", value: function () {
                  this._shaka && (this._videoElement.currentTime = this._shaka.seekRange().end)
                }
              }, {
                key: "isLive", value: function () {
                  return !!this._shaka && this._shaka.isLive()
                }
              }, {
                key: "_onAdaptation", value: function () {
                  var e = this._getParsedVideoTracks().filter(function (e) {
                    return e.active
                  })[0];
                  this._onTrackChanged(e)
                }
              }, {
                key: "_onError", value: function (e) {
                  if (e && e.detail) {
                    var r = e.detail;
                    if (r.code === this.VIDEO_ERROR_CODE) return;
                    this._trigger(h.BaseMediaSourceAdapter.Html5Events.ERROR, new h.Error(r.severity, r.category, r.code, r.data)), t._logger.error(r)
                  }
                }
              }, {
                key: "_onBuffering", value: function (e) {
                  e.buffering ? this._waitingSent || (this._videoElement.dispatchEvent(new window.Event("waiting")), this._buffering = !0) : (this._buffering = !1, this._videoElement.paused || this._playingSent || this._videoElement.dispatchEvent(new window.Event("playing")))
                }
              }, {
                key: "_onWaiting", value: function () {
                  this._waitingSent = !0, this._playingSent = !1
                }
              }, {
                key: "_onPlaying", value: function () {
                  this._playingSent = !0, this._waitingSent = !1, this._buffering && this._videoElement.dispatchEvent(new window.Event("waiting"))
                }
              }, {
                key: "src", get: function () {
                  return this._loadPromise && this._sourceObj ? this._sourceObj.url : ""
                }
              }, {
                key: "currentTime", get: function () {
                  return this._shaka && this.isLive() ? this._videoElement.currentTime - this._shaka.seekRange().start : l(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "currentTime", this)
                }, set: function (e) {
                  this._shaka && this.isLive() ? this._videoElement.currentTime = this._shaka.seekRange().start + e : u(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "currentTime", e, this)
                }
              }, {
                key: "duration", get: function () {
                  if (this._shaka && this.isLive()) {
                    var e = this._shaka.seekRange();
                    return e.end - e.start
                  }
                  return l(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "duration", this)
                }
              }]), t
            }(h.BaseMediaSourceAdapter);
          k.id = "DashAdapter", k._logger = h.BaseMediaSourceAdapter.getLogger(k.id), k._dashMimeType = "application/dash+xml", k._drmProtocols = [p.default, v.default], k._drmProtocol = null, t.default = k
        }, function (e, r) {
          e.exports = t
        }, function (e, t, r) {
          "use strict";

          function n(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e
          }

          function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function a(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
          }

          function o(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var s = function () {
            function e(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n)
              }
            }

            return function (t, r, n) {
              return r && e(t.prototype, r), n && e(t, n), t
            }
          }(), u = r(0), l = u.BaseDrmProtocol.DrmSupport, c = u.BaseDrmProtocol.DrmScheme, d = function (e) {
            function t() {
              return i(this, t), a(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments))
            }

            return o(t, e), s(t, null, [{
              key: "canPlayDrm", value: function (e) {
                return t._logger.debug("Can play DRM scheme of: " + c.WIDEVINE), l.isProtocolSupported(c.WIDEVINE, e)
              }
            }, {
              key: "setDrmPlayback", value: function (e, r) {
                t._logger.debug("Sets drm playback");
                var i = u.Env.browser.name, a = r.find(function (e) {
                  return e.scheme === c.WIDEVINE
                });
                a && (e.drm = {
                  servers: n({}, c.WIDEVINE, a.licenseUrl),
                  advanced: {}
                }, "Chrome" === i && (e.drm.advanced = n({}, c.WIDEVINE, {
                  videoRobustness: "SW_SECURE_CRYPTO",
                  audioRobustness: "SW_SECURE_CRYPTO"
                })))
              }
            }]), t
          }(u.BaseDrmProtocol);
          d._logger = u.BaseDrmProtocol.getLogger("Widevine"), t.default = d
        }, function (e, t, r) {
          "use strict";

          function n(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e
          }

          function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function a(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
          }

          function o(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var s = function () {
            function e(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n)
              }
            }

            return function (t, r, n) {
              return r && e(t.prototype, r), n && e(t, n), t
            }
          }(), u = r(0), l = u.BaseDrmProtocol.DrmSupport, c = u.BaseDrmProtocol.DrmScheme, d = function (e) {
            function t() {
              return i(this, t), a(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments))
            }

            return o(t, e), s(t, null, [{
              key: "canPlayDrm", value: function (e) {
                return t._logger.debug("Can play DRM scheme of: " + c.PLAYREADY), l.isProtocolSupported(c.PLAYREADY, e)
              }
            }, {
              key: "setDrmPlayback", value: function (e, r) {
                t._logger.debug("Sets drm playback");
                var i = r.find(function (e) {
                  return e.scheme === c.PLAYREADY
                });
                i && (e.drm = {servers: n({}, c.PLAYREADY, i.licenseUrl)})
              }
            }]), t
          }(u.BaseDrmProtocol);
          d._logger = u.BaseDrmProtocol.getLogger("PlayReady"), t.default = d
        }, function (e, t) {
          e.exports = {streaming: {ignoreTextStreamFailures: !0}}
        }])
      });


      /***/
    }),
    /* 341 */
    /***/ (function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_RESULT__;
      (function () {
        var g = {};
        (function (window) {
          var k, aa = this;
          aa.Ke = !0;

          function n(a, b) {
            var c = a.split("."), d = aa;
            c[0] in d || !d.execScript || d.execScript("var " + c[0]);
            for (var e; c.length && (e = c.shift());) c.length || void 0 === b ? d[e] ? d = d[e] : d = d[e] = {} : d[e] = b
          }

          function ba(a) {
            var b = p;

            function c() {
            }

            c.prototype = b.prototype;
            a.Oe = b.prototype;
            a.prototype = new c;
            a.prototype.constructor = a;
            a.Me = function (a, c, f) {
              return b.prototype[c].apply(a, Array.prototype.slice.call(arguments, 2))
            }
          };

          /*

 Copyright 2016 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
          function ca(a) {
            this.c = Math.exp(Math.log(.5) / a);
            this.b = this.a = 0
          }

          function da(a, b, c) {
            var d = Math.pow(a.c, b);
            c = c * (1 - d) + d * a.a;
            isNaN(c) || (a.a = c, a.b += b)
          }

          function ea(a) {
            return a.a / (1 - Math.pow(a.c, a.b))
          };

          function fa() {
            this.b = new ca(2);
            this.c = new ca(5);
            this.a = 0
          }

          fa.prototype.getBandwidthEstimate = function (a) {
            return 128E3 > this.a ? a : Math.min(ea(this.b), ea(this.c))
          };

          function ga() {
          };

          function v(a, b, c, d) {
            this.severity = a;
            this.category = b;
            this.code = c;
            this.data = Array.prototype.slice.call(arguments, 3);
            this.handled = !1
          }

          n("shaka.util.Error", v);
          v.prototype.toString = function () {
            return "shaka.util.Error " + JSON.stringify(this, null, "  ")
          };
          v.Severity = {RECOVERABLE: 1, CRITICAL: 2};
          v.Category = {
            NETWORK: 1,
            TEXT: 2,
            MEDIA: 3,
            MANIFEST: 4,
            STREAMING: 5,
            DRM: 6,
            PLAYER: 7,
            CAST: 8,
            STORAGE: 9
          };
          v.Code = {
            UNSUPPORTED_SCHEME: 1E3,
            BAD_HTTP_STATUS: 1001,
            HTTP_ERROR: 1002,
            TIMEOUT: 1003,
            MALFORMED_DATA_URI: 1004,
            UNKNOWN_DATA_URI_ENCODING: 1005,
            REQUEST_FILTER_ERROR: 1006,
            RESPONSE_FILTER_ERROR: 1007,
            INVALID_TEXT_HEADER: 2E3,
            INVALID_TEXT_CUE: 2001,
            UNABLE_TO_DETECT_ENCODING: 2003,
            BAD_ENCODING: 2004,
            INVALID_XML: 2005,
            INVALID_MP4_TTML: 2007,
            INVALID_MP4_VTT: 2008,
            BUFFER_READ_OUT_OF_BOUNDS: 3E3,
            JS_INTEGER_OVERFLOW: 3001,
            EBML_OVERFLOW: 3002,
            EBML_BAD_FLOATING_POINT_SIZE: 3003,
            MP4_SIDX_WRONG_BOX_TYPE: 3004,
            MP4_SIDX_INVALID_TIMESCALE: 3005,
            MP4_SIDX_TYPE_NOT_SUPPORTED: 3006,
            WEBM_CUES_ELEMENT_MISSING: 3007,
            WEBM_EBML_HEADER_ELEMENT_MISSING: 3008,
            WEBM_SEGMENT_ELEMENT_MISSING: 3009,
            WEBM_INFO_ELEMENT_MISSING: 3010,
            WEBM_DURATION_ELEMENT_MISSING: 3011,
            WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING: 3012,
            WEBM_CUE_TIME_ELEMENT_MISSING: 3013,
            MEDIA_SOURCE_OPERATION_FAILED: 3014,
            MEDIA_SOURCE_OPERATION_THREW: 3015,
            VIDEO_ERROR: 3016,
            QUOTA_EXCEEDED_ERROR: 3017,
            UNABLE_TO_GUESS_MANIFEST_TYPE: 4E3,
            DASH_INVALID_XML: 4001,
            DASH_NO_SEGMENT_INFO: 4002,
            DASH_EMPTY_ADAPTATION_SET: 4003,
            DASH_EMPTY_PERIOD: 4004,
            DASH_WEBM_MISSING_INIT: 4005,
            DASH_UNSUPPORTED_CONTAINER: 4006,
            DASH_PSSH_BAD_ENCODING: 4007,
            DASH_NO_COMMON_KEY_SYSTEM: 4008,
            DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED: 4009,
            DASH_CONFLICTING_KEY_IDS: 4010,
            UNPLAYABLE_PERIOD: 4011,
            RESTRICTIONS_CANNOT_BE_MET: 4012,
            NO_PERIODS: 4014,
            HLS_PLAYLIST_HEADER_MISSING: 4015,
            INVALID_HLS_TAG: 4016,
            HLS_INVALID_PLAYLIST_HIERARCHY: 4017,
            DASH_DUPLICATE_REPRESENTATION_ID: 4018,
            HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND: 4020,
            HLS_COULD_NOT_GUESS_MIME_TYPE: 4021,
            HLS_MASTER_PLAYLIST_NOT_PROVIDED: 4022,
            HLS_REQUIRED_ATTRIBUTE_MISSING: 4023,
            HLS_REQUIRED_TAG_MISSING: 4024,
            HLS_COULD_NOT_GUESS_CODECS: 4025,
            HLS_KEYFORMATS_NOT_SUPPORTED: 4026,
            DASH_UNSUPPORTED_XLINK_ACTUATE: 4027,
            DASH_XLINK_DEPTH_LIMIT: 4028,
            HLS_LIVE_CONTENT_NOT_SUPPORTED: 4029,
            INVALID_STREAMS_CHOSEN: 5005,
            NO_RECOGNIZED_KEY_SYSTEMS: 6E3,
            REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE: 6001,
            FAILED_TO_CREATE_CDM: 6002,
            FAILED_TO_ATTACH_TO_VIDEO: 6003,
            INVALID_SERVER_CERTIFICATE: 6004,
            FAILED_TO_CREATE_SESSION: 6005,
            FAILED_TO_GENERATE_LICENSE_REQUEST: 6006,
            LICENSE_REQUEST_FAILED: 6007,
            LICENSE_RESPONSE_REJECTED: 6008,
            ENCRYPTED_CONTENT_WITHOUT_DRM_INFO: 6010,
            NO_LICENSE_SERVER_GIVEN: 6012,
            OFFLINE_SESSION_REMOVED: 6013,
            EXPIRED: 6014,
            LOAD_INTERRUPTED: 7E3,
            CAST_API_UNAVAILABLE: 8E3,
            NO_CAST_RECEIVERS: 8001,
            ALREADY_CASTING: 8002,
            UNEXPECTED_CAST_ERROR: 8003,
            CAST_CANCELED_BY_USER: 8004,
            CAST_CONNECTION_TIMED_OUT: 8005,
            CAST_RECEIVER_APP_UNAVAILABLE: 8006,
            STORAGE_NOT_SUPPORTED: 9E3,
            INDEXED_DB_ERROR: 9001,
            OPERATION_ABORTED: 9002,
            REQUESTED_ITEM_NOT_FOUND: 9003,
            MALFORMED_OFFLINE_URI: 9004,
            CANNOT_STORE_LIVE_OFFLINE: 9005,
            STORE_ALREADY_IN_PROGRESS: 9006,
            NO_INIT_DATA_FOR_OFFLINE: 9007,
            LOCAL_PLAYER_INSTANCE_REQUIRED: 9008,
            CONTENT_UNSUPPORTED_BY_BROWSER: 9009
          };
          var ha = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#(.*))?$/;

          function ia(a) {
            var b;
            a instanceof ia ? (ja(this, a.ca), this.Ba = a.Ba, this.ha = a.ha, ka(this, a.Ia), this.$ = a.$, la(this, ma(a.a)), this.ua = a.ua) : a && (b = String(a).match(ha)) ? (ja(this, b[1] || "", !0), this.Ba = na(b[2] || ""), this.ha = na(b[3] || "", !0), ka(this, b[4]), this.$ = na(b[5] || "", !0), la(this, b[6] || "", !0), this.ua = na(b[7] || "")) : this.a = new oa(null)
          }

          k = ia.prototype;
          k.ca = "";
          k.Ba = "";
          k.ha = "";
          k.Ia = null;
          k.$ = "";
          k.ua = "";
          k.toString = function () {
            var a = [], b = this.ca;
            b && a.push(pa(b, qa, !0), ":");
            if (b = this.ha) {
              a.push("//");
              var c = this.Ba;
              c && a.push(pa(c, qa, !0), "@");
              a.push(encodeURIComponent(b).replace(/%25([0-9a-fA-F]{2})/g, "%$1"));
              b = this.Ia;
              null != b && a.push(":", String(b))
            }
            if (b = this.$) this.ha && "/" != b.charAt(0) && a.push("/"), a.push(pa(b, "/" == b.charAt(0) ? ra : sa, !0));
            (b = this.a.toString()) && a.push("?", b);
            (b = this.ua) && a.push("#", pa(b, ta));
            return a.join("")
          };
          k.resolve = function (a) {
            var b = new ia(this);
            "data" === b.ca && (b = new ia);
            var c = !!a.ca;
            c ? ja(b, a.ca) : c = !!a.Ba;
            c ? b.Ba = a.Ba : c = !!a.ha;
            c ? b.ha = a.ha : c = null != a.Ia;
            var d = a.$;
            if (c) ka(b, a.Ia); else if (c = !!a.$) {
              if ("/" != d.charAt(0)) if (this.ha && !this.$) d = "/" + d; else {
                var e = b.$.lastIndexOf("/");
                -1 != e && (d = b.$.substr(0, e + 1) + d)
              }
              if (".." == d || "." == d) d = ""; else if (-1 != d.indexOf("./") || -1 != d.indexOf("/.")) {
                for (var e = !d.lastIndexOf("/", 0), d = d.split("/"), f = [], g = 0; g < d.length;) {
                  var h = d[g++];
                  "." == h ? e && g == d.length && f.push("") : ".." == h ? ((1 <
                    f.length || 1 == f.length && "" != f[0]) && f.pop(), e && g == d.length && f.push("")) : (f.push(h), e = !0)
                }
                d = f.join("/")
              }
            }
            c ? b.$ = d : c = "" !== a.a.toString();
            c ? la(b, ma(a.a)) : c = !!a.ua;
            c && (b.ua = a.ua);
            return b
          };

          function ja(a, b, c) {
            a.ca = c ? na(b, !0) : b;
            a.ca && (a.ca = a.ca.replace(/:$/, ""))
          }

          function ka(a, b) {
            if (b) {
              b = Number(b);
              if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
              a.Ia = b
            } else a.Ia = null
          }

          function la(a, b, c) {
            b instanceof oa ? a.a = b : (c || (b = pa(b, ua)), a.a = new oa(b))
          }

          function na(a, b) {
            return a ? b ? decodeURI(a) : decodeURIComponent(a) : ""
          }

          function pa(a, b, c) {
            return "string" == typeof a ? (a = encodeURI(a).replace(b, va), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null
          }

          function va(a) {
            a = a.charCodeAt(0);
            return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16)
          }

          var qa = /[#\/\?@]/g, sa = /[\#\?:]/g, ra = /[\#\?]/g, ua = /[\#\?@]/g, ta = /#/g;

          function oa(a) {
            this.b = a || null
          }

          oa.prototype.a = null;
          oa.prototype.c = null;
          oa.prototype.toString = function () {
            if (this.b) return this.b;
            if (!this.a) return "";
            var a = [], b;
            for (b in this.a) for (var c = encodeURIComponent(b), d = this.a[b], e = 0; e < d.length; e++) {
              var f = c;
              "" !== d[e] && (f += "=" + encodeURIComponent(d[e]));
              a.push(f)
            }
            return this.b = a.join("&")
          };

          function ma(a) {
            var b = new oa;
            b.b = a.b;
            if (a.a) {
              var c = {}, d;
              for (d in a.a) c[d] = a.a[d].concat();
              b.a = c;
              b.c = a.c
            }
            return b
          };

          function y() {
            var a, b, c = new Promise(function (c, e) {
              a = c;
              b = e
            });
            c.resolve = a;
            c.reject = b;
            return c
          };

          function wa(a, b) {
            var c = xa();
            this.i = null == a.maxAttempts ? c.maxAttempts : a.maxAttempts;
            this.f = null == a.baseDelay ? c.baseDelay : a.baseDelay;
            this.h = null == a.fuzzFactor ? c.fuzzFactor : a.fuzzFactor;
            this.g = null == a.backoffFactor ? c.backoffFactor : a.backoffFactor;
            this.a = 0;
            this.b = this.f;
            if (this.c = b || !1) this.a = 1
          }

          function ya(a) {
            if (a.a >= a.i) if (a.c) a.a = 1, a.b = a.f; else return Promise.reject();
            var b = new y;
            a.a ? (window.setTimeout(b.resolve, a.b * (1 + (2 * Math.random() - 1) * a.h)), a.b *= a.g) : b.resolve();
            a.a++;
            return b
          }

          function xa() {
            return {maxAttempts: 2, baseDelay: 1E3, backoffFactor: 2, fuzzFactor: .5, timeout: 0}
          };

          function za(a, b, c, d, e) {
            var f = e in d, g;
            for (g in b) {
              var h = e + "." + g, l = f ? d[e] : c[g];
              if (f || g in a) void 0 === b[g] ? void 0 === l || f ? delete a[g] : a[g] = l : l.constructor == Object && b[g] && b[g].constructor == Object ? (a[g] || (a[g] = l), za(a[g], b[g], l, d, h)) : typeof b[g] == typeof l && null != b[g] && b[g].constructor == l.constructor && (a[g] = b[g])
            }
          }

          function Aa(a) {
            function b(a) {
              switch (typeof a) {
                case "undefined":
                case "boolean":
                case "number":
                case "string":
                case "symbol":
                case "function":
                  return a;
                default:
                  if (!a) return a;
                  if (0 <= c.indexOf(a)) return null;
                  var d = a.constructor == Array;
                  if (a.constructor != Object && !d) return null;
                  c.push(a);
                  var f = d ? [] : {}, g;
                  for (g in a) f[g] = b(a[g]);
                  d && (f.length = a.length);
                  return f
              }
            }

            var c = [];
            return b(a)
          };

          function Ba(a, b) {
            return a.reduce(function (a, b, e) {
              return b["catch"](a.bind(null, e))
            }.bind(null, b), Promise.reject())
          }

          function z(a, b) {
            return a.concat(b)
          }

          function Ca() {
          }

          function Da(a) {
            return null != a
          }

          function Ea(a, b, c) {
            return c.indexOf(a) == b
          };

          function A(a) {
            this.f = !1;
            this.a = [];
            this.b = [];
            this.c = [];
            this.g = a || null
          }

          n("shaka.net.NetworkingEngine", A);
          A.RequestType = {MANIFEST: 0, SEGMENT: 1, LICENSE: 2, APP: 3};
          var Ga = {};
          A.registerScheme = function (a, b) {
            Ga[a] = b
          };
          A.unregisterScheme = function (a) {
            delete Ga[a]
          };
          A.prototype.Ud = function (a) {
            this.b.push(a)
          };
          A.prototype.registerRequestFilter = A.prototype.Ud;
          A.prototype.Ce = function (a) {
            var b = this.b;
            a = b.indexOf(a);
            0 <= a && b.splice(a, 1)
          };
          A.prototype.unregisterRequestFilter = A.prototype.Ce;
          A.prototype.Oc = function () {
            this.b = []
          };
          A.prototype.clearAllRequestFilters = A.prototype.Oc;
          A.prototype.Vd = function (a) {
            this.c.push(a)
          };
          A.prototype.registerResponseFilter = A.prototype.Vd;
          A.prototype.De = function (a) {
            var b = this.c;
            a = b.indexOf(a);
            0 <= a && b.splice(a, 1)
          };
          A.prototype.unregisterResponseFilter = A.prototype.De;
          A.prototype.Pc = function () {
            this.c = []
          };
          A.prototype.clearAllResponseFilters = A.prototype.Pc;

          function Ha(a, b) {
            return {uris: a, method: "GET", body: null, headers: {}, allowCrossSiteCredentials: !1, retryParameters: b}
          }

          A.prototype.o = function () {
            this.f = !0;
            this.b = [];
            this.c = [];
            for (var a = [], b = 0; b < this.a.length; ++b) a.push(this.a[b]["catch"](Ca));
            return Promise.all(a)
          };
          A.prototype.destroy = A.prototype.o;
          A.prototype.request = function (a, b) {
            if (this.f) return Promise.reject();
            b.method = b.method || "GET";
            b.headers = b.headers || {};
            b.retryParameters = b.retryParameters ? Aa(b.retryParameters) : xa();
            b.uris = Aa(b.uris);
            var c = Date.now(), d = Promise.resolve();
            this.b.forEach(function (c) {
              d = d.then(c.bind(null, a, b))
            });
            d = d["catch"](function (a) {
              throw new v(2, 1, 1006, a);
            });
            d = d.then(function () {
              var d = Date.now() - c, f = new wa(b.retryParameters);
              return ya(f).then(function () {
                return Ia(this, a, b, f, 0, d)
              }.bind(this))
            }.bind(this));
            this.a.push(d);
            return d.then(function (b) {
              0 <= this.a.indexOf(d) && this.a.splice(this.a.indexOf(d), 1);
              this.g && !b.fromCache && 1 == a && this.g(b.timeMs, b.data.byteLength);
              return b
            }.bind(this))["catch"](function (a) {
              a && (a.severity = 2);
              0 <= this.a.indexOf(d) && this.a.splice(this.a.indexOf(d), 1);
              return Promise.reject(a)
            }.bind(this))
          };
          A.prototype.request = A.prototype.request;

          function Ia(a, b, c, d, e, f) {
            if (a.f) return Promise.reject();
            var g = new ia(c.uris[e]), h = g.ca;
            h || (h = location.protocol, h = h.slice(0, -1), ja(g, h), c.uris[e] = g.toString());
            h = Ga[h];
            if (!h) return Promise.reject(new v(2, 1, 1E3, g));
            var l = Date.now();
            return h(c.uris[e], c, b).then(function (a) {
              void 0 == a.timeMs && (a.timeMs = Date.now() - l);
              var c = Date.now(), d = Promise.resolve();
              this.c.forEach(function (c) {
                d = d.then(function () {
                  return Promise.resolve(c(b, a))
                }.bind(this))
              });
              d = d["catch"](function (a) {
                var b = 2;
                a instanceof v && (b = a.severity);
                throw new v(b, 1, 1007, a);
              });
              return d.then(function () {
                a.timeMs += Date.now() - c;
                a.timeMs += f;
                return a
              })
            }.bind(a))["catch"](function (a) {
              if (a && 1 == a.severity) return e = (e + 1) % c.uris.length, ya(d).then(function () {
                return Ia(this, b, c, d, e, f)
              }.bind(this), function () {
                throw a;
              });
              throw a;
            }.bind(a))
          };

          function Ja(a, b) {
            for (var c = [], d = 0; d < a.length; ++d) {
              for (var e = !1, f = 0; f < c.length && !(e = b ? b(a[d], c[f]) : a[d] === c[f]); ++f) ;
              e || c.push(a[d])
            }
            return c
          }

          function Ka(a, b, c) {
            for (var d = 0; d < a.length; ++d) if (c(a[d], b)) return d;
            return -1
          }

          function La(a, b) {
            var c = a.indexOf(b);
            -1 < c && a.splice(c, 1)
          };

          function Ma() {
            this.a = {}
          }

          Ma.prototype.push = function (a, b) {
            this.a.hasOwnProperty(a) ? this.a[a].push(b) : this.a[a] = [b]
          };
          Ma.prototype.get = function (a) {
            return (a = this.a[a]) ? a.slice() : null
          };
          Ma.prototype.remove = function (a, b) {
            var c = this.a[a];
            if (c) for (var d = 0; d < c.length; ++d) c[d] == b && (c.splice(d, 1), --d)
          };

          function B() {
            this.a = new Ma
          }

          B.prototype.o = function () {
            Na(this);
            this.a = null;
            return Promise.resolve()
          };

          function C(a, b, c, d) {
            a.a && (b = new Oa(b, c, d), a.a.push(c, b))
          }

          function Pa(a, b, c, d) {
            C(a, b, c, function (a) {
              this.la(b, c);
              d(a)
            }.bind(a))
          }

          B.prototype.la = function (a, b) {
            if (this.a) for (var c = this.a.get(b) || [], d = 0; d < c.length; ++d) {
              var e = c[d];
              e.target == a && (e.la(), this.a.remove(b, e))
            }
          };

          function Na(a) {
            if (a.a) {
              var b = a.a, c = [], d;
              for (d in b.a) c.push.apply(c, b.a[d]);
              for (b = 0; b < c.length; ++b) c[b].la();
              a.a.a = {}
            }
          }

          function Oa(a, b, c) {
            this.target = a;
            this.type = b;
            this.a = c;
            this.target.addEventListener(b, c, !1)
          }

          Oa.prototype.la = function () {
            this.target.removeEventListener(this.type, this.a, !1);
            this.a = this.target = null
          };

          function D(a, b) {
            if (!b.length) return a;
            var c = b.map(function (a) {
              return new ia(a)
            });
            return a.map(function (a) {
              return new ia(a)
            }).map(function (a) {
              return c.map(a.resolve.bind(a))
            }).reduce(z, []).map(function (a) {
              return a.toString()
            })
          }

          function Qa(a, b) {
            return {
              keySystem: a,
              licenseServerUri: "",
              distinctiveIdentifierRequired: !1,
              persistentStateRequired: !1,
              audioRobustness: "",
              videoRobustness: "",
              serverCertificate: null,
              initData: b || [],
              keyIds: []
            }
          }

          var Ra = 1 / 15;

          function Sa(a) {
            return !a || !Object.keys(a).length
          }

          function Ta(a) {
            return Object.keys(a).map(function (b) {
              return a[b]
            })
          }

          function Ua(a, b) {
            return Object.keys(a).reduce(function (c, d) {
              c[d] = b(a[d], d);
              return c
            }, {})
          }

          function Va(a, b) {
            return Object.keys(a).every(function (c) {
              return b(c, a[c])
            })
          }

          function Wa(a, b) {
            Object.keys(a).forEach(function (c) {
              b(c, a[c])
            })
          };

          function Xa(a, b) {
            var c = a;
            b && (c += '; codecs="' + b + '"');
            return c
          }

          var Ya = {
            codecs: "codecs",
            frameRate: "framerate",
            bandwidth: "bitrate",
            width: "width",
            height: "height",
            channelsCount: "channels"
          };

          function E(a) {
            if (!a) return "";
            a = new Uint8Array(a);
            239 == a[0] && 187 == a[1] && 191 == a[2] && (a = a.subarray(3));
            a = escape(Za(a));
            try {
              return decodeURIComponent(a)
            } catch (b) {
              throw new v(2, 2, 2004);
            }
          }

          n("shaka.util.StringUtils.fromUTF8", E);

          function $a(a, b, c) {
            if (!a) return "";
            if (!c && a.byteLength % 2) throw new v(2, 2, 2004);
            if (a instanceof ArrayBuffer) var d = a; else c = new Uint8Array(a.byteLength), c.set(new Uint8Array(a)), d = c.buffer;
            a = Math.floor(a.byteLength / 2);
            c = new Uint16Array(a);
            d = new DataView(d);
            for (var e = 0; e < a; e++) c[e] = d.getUint16(2 * e, b);
            return Za(c)
          }

          n("shaka.util.StringUtils.fromUTF16", $a);

          function ab(a) {
            var b = new Uint8Array(a);
            if (239 == b[0] && 187 == b[1] && 191 == b[2]) return E(b);
            if (254 == b[0] && 255 == b[1]) return $a(b.subarray(2), !1);
            if (255 == b[0] && 254 == b[1]) return $a(b.subarray(2), !0);
            var c = function (a, b) {
              return a.byteLength <= b || 32 <= a[b] && 126 >= a[b]
            }.bind(null, b);
            if (b[0] || b[2]) {
              if (!b[1] && !b[3]) return $a(a, !0);
              if (c(0) && c(1) && c(2) && c(3)) return E(a)
            } else return $a(a, !1);
            throw new v(2, 2, 2003);
          }

          n("shaka.util.StringUtils.fromBytesAutoDetect", ab);

          function bb(a) {
            a = unescape(encodeURIComponent(a));
            for (var b = new Uint8Array(a.length), c = 0; c < a.length; ++c) b[c] = a.charCodeAt(c);
            return b.buffer
          }

          n("shaka.util.StringUtils.toUTF8", bb);

          function Za(a) {
            for (var b = "", c = 0; c < a.length; c += 16E3) b += String.fromCharCode.apply(null, a.subarray(c, c + 16E3));
            return b
          };

          function cb(a) {
            this.a = null;
            this.b = function () {
              this.a = null;
              a()
            }.bind(this)
          }

          cb.prototype.cancel = function () {
            null != this.a && (clearTimeout(this.a), this.a = null)
          };

          function db(a) {
            a.cancel();
            a.a = setTimeout(a.b, 500)
          };

          function eb(a, b) {
            var c = void 0 == b ? !0 : b,
              d = window.btoa(String.fromCharCode.apply(null, a)).replace(/\+/g, "-").replace(/\//g, "_");
            return c ? d : d.replace(/=*$/, "")
          }

          n("shaka.util.Uint8ArrayUtils.toBase64", eb);

          function fb(a) {
            a = window.atob(a.replace(/-/g, "+").replace(/_/g, "/"));
            for (var b = new Uint8Array(a.length), c = 0; c < a.length; ++c) b[c] = a.charCodeAt(c);
            return b
          }

          n("shaka.util.Uint8ArrayUtils.fromBase64", fb);

          function gb(a) {
            for (var b = new Uint8Array(a.length / 2), c = 0; c < a.length; c += 2) b[c / 2] = window.parseInt(a.substr(c, 2), 16);
            return b
          }

          n("shaka.util.Uint8ArrayUtils.fromHex", gb);

          function hb(a) {
            for (var b = "", c = 0; c < a.length; ++c) {
              var d = a[c].toString(16);
              1 == d.length && (d = "0" + d);
              b += d
            }
            return b
          }

          n("shaka.util.Uint8ArrayUtils.toHex", hb);

          function ib(a, b) {
            if (!a && !b) return !0;
            if (!a || !b || a.length != b.length) return !1;
            for (var c = 0; c < a.length; ++c) if (a[c] != b[c]) return !1;
            return !0
          }

          n("shaka.util.Uint8ArrayUtils.equal", ib);
          n("shaka.util.Uint8ArrayUtils.concat", function (a) {
            for (var b = 0, c = 0; c < arguments.length; ++c) b += arguments[c].length;
            for (var b = new Uint8Array(b), d = 0, c = 0; c < arguments.length; ++c) b.set(arguments[c], d), d += arguments[c].length;
            return b
          });

          function jb(a, b, c, d) {
            this.l = this.j = this.s = null;
            this.F = !1;
            this.b = null;
            this.f = new B;
            this.a = [];
            this.m = [];
            this.i = new y;
            this.ga = a;
            this.h = null;
            this.g = function (a) {
              this.i.reject(a);
              b(a)
            }.bind(this);
            this.w = {};
            this.sa = c;
            this.na = d;
            this.B = new cb(this.Td.bind(this));
            this.fa = this.c = !1;
            this.C = [];
            this.T = !1;
            this.J = setInterval(this.Sd.bind(this), 1E3);
            this.i["catch"](function () {
            })
          }

          k = jb.prototype;
          k.o = function () {
            this.c = !0;
            var a = this.a.map(function (a) {
              return (a.da.close() || Promise.resolve())["catch"](Ca)
            });
            this.i.reject();
            this.f && a.push(this.f.o());
            this.l && a.push(this.l.setMediaKeys(null)["catch"](Ca));
            this.J && (clearInterval(this.J), this.J = null);
            this.B && this.B.cancel();
            this.f = this.l = this.j = this.s = this.b = this.B = null;
            this.a = [];
            this.m = [];
            this.na = this.g = this.h = this.ga = null;
            return Promise.all(a)
          };
          k.configure = function (a) {
            this.h = a
          };
          k.init = function (a, b) {
            var c = {}, d = [];
            this.fa = b;
            this.m = a.offlineSessionIds;
            kb(this, a, b || 0 < a.offlineSessionIds.length, c, d);
            return d.length ? lb(this, c, d) : (this.F = !0, Promise.resolve())
          };

          function mb(a, b) {
            if (!a.j) return Pa(a.f, b, "encrypted", function () {
              this.g(new v(2, 6, 6010))
            }.bind(a)), Promise.resolve();
            a.l = b;
            Pa(a.f, a.l, "play", a.zd.bind(a));
            var c = a.l.setMediaKeys(a.j), c = c["catch"](function (a) {
              return Promise.reject(new v(2, 6, 6003, a.message))
            }), d = null;
            a.b.serverCertificate && a.b.serverCertificate.length && (d = a.j.setServerCertificate(a.b.serverCertificate).then(function () {
            })["catch"](function (a) {
              return Promise.reject(new v(2, 6, 6004, a.message))
            }));
            return Promise.all([c, d]).then(function () {
              if (this.c) return Promise.reject();
              nb(this);
              this.b.initData.length || this.m.length || C(this.f, this.l, "encrypted", this.pd.bind(this))
            }.bind(a))["catch"](function (a) {
              return this.c ? Promise.resolve() : Promise.reject(a)
            }.bind(a))
          }

          function ob(a, b) {
            return Promise.all(b.map(function (a) {
              return pb(this, a).then(function (a) {
                if (a) {
                  for (var b = new y, c = 0; c < this.a.length; c++) if (this.a[c].da == a) {
                    this.a[c].ma = b;
                    break
                  }
                  return Promise.all([a.remove(), b])
                }
              }.bind(this))
            }.bind(a)))
          }

          function nb(a) {
            var b = a.b ? a.b.initData : [];
            b.forEach(function (a) {
              qb(this, a.initDataType, a.initData)
            }.bind(a));
            a.m.forEach(function (a) {
              pb(this, a)
            }.bind(a));
            b.length || a.m.length || a.i.resolve();
            return a.i
          }

          k.keySystem = function () {
            return this.b ? this.b.keySystem : ""
          };

          function rb(a) {
            return a.a.map(function (a) {
              return a.da.sessionId
            })
          }

          k.jb = function () {
            var a = this.a.map(function (a) {
              a = a.da.expiration;
              return isNaN(a) ? Infinity : a
            });
            return Math.min.apply(Math, a)
          };

          function kb(a, b, c, d, e) {
            var f = sb(a);
            b.periods.forEach(function (a) {
              a.variants.forEach(function (a) {
                f && (a.drmInfos = [f]);
                a.drmInfos.forEach(function (b) {
                  tb(this, b);
                  window.cast && window.cast.__platform__ && "com.microsoft.playready" == b.keySystem && (b.keySystem = "com.chromecast.playready");
                  var f = d[b.keySystem];
                  f || (f = {
                    audioCapabilities: [],
                    videoCapabilities: [],
                    distinctiveIdentifier: "optional",
                    persistentState: c ? "required" : "optional",
                    sessionTypes: [c ? "persistent-license" : "temporary"],
                    label: b.keySystem,
                    drmInfos: []
                  },
                    d[b.keySystem] = f, e.push(b.keySystem));
                  f.drmInfos.push(b);
                  b.distinctiveIdentifierRequired && (f.distinctiveIdentifier = "required");
                  b.persistentStateRequired && (f.persistentState = "required");
                  var g = [];
                  a.video && g.push(a.video);
                  a.audio && g.push(a.audio);
                  g.forEach(function (a) {
                    ("video" == a.type ? f.videoCapabilities : f.audioCapabilities).push({
                      robustness: ("video" == a.type ? b.videoRobustness : b.audioRobustness) || "",
                      contentType: Xa(a.mimeType, a.codecs)
                    })
                  }.bind(this))
                }.bind(this))
              }.bind(this))
            }.bind(a))
          }

          function lb(a, b, c) {
            if (1 == c.length && "" == c[0]) return Promise.reject(new v(2, 6, 6E3));
            var d = new y, e = d;
            [!0, !1].forEach(function (a) {
              c.forEach(function (c) {
                var d = b[c];
                d.drmInfos.some(function (a) {
                  return !!a.licenseServerUri
                }) == a && (d.audioCapabilities.length || delete d.audioCapabilities, d.videoCapabilities.length || delete d.videoCapabilities, e = e["catch"](function () {
                  return this.c ? Promise.reject() : navigator.requestMediaKeySystemAccess(c, [d])
                }.bind(this)))
              }.bind(this))
            }.bind(a));
            e = e["catch"](function () {
              return Promise.reject(new v(2,
                6, 6001))
            });
            e = e.then(function (a) {
              if (this.c) return Promise.reject();
              var c = 0 <= navigator.userAgent.indexOf("Edge/"), d = a.getConfiguration();
              this.s = (d.audioCapabilities || []).concat(d.videoCapabilities || []).map(function (a) {
                return a.contentType
              });
              c && (this.s = null);
              c = b[a.keySystem];
              ub(this, a.keySystem, c, c.drmInfos);
              return this.b.licenseServerUri ? a.createMediaKeys() : Promise.reject(new v(2, 6, 6012))
            }.bind(a)).then(function (a) {
              if (this.c) return Promise.reject();
              this.j = a;
              this.F = !0
            }.bind(a))["catch"](function (a) {
              if (this.c) return Promise.resolve();
              this.s = this.b = null;
              return a instanceof v ? Promise.reject(a) : Promise.reject(new v(2, 6, 6002, a.message))
            }.bind(a));
            d.reject();
            return e
          }

          function tb(a, b) {
            var c = b.keySystem;
            if (c) {
              if (!b.licenseServerUri) {
                var d = a.h.servers[c];
                d && (b.licenseServerUri = d)
              }
              b.keyIds || (b.keyIds = []);
              if (c = a.h.advanced[c]) b.distinctiveIdentifierRequired || (b.distinctiveIdentifierRequired = c.distinctiveIdentifierRequired), b.persistentStateRequired || (b.persistentStateRequired = c.persistentStateRequired), b.videoRobustness || (b.videoRobustness = c.videoRobustness), b.audioRobustness || (b.audioRobustness = c.audioRobustness), b.serverCertificate || (b.serverCertificate = c.serverCertificate)
            }
          }

          function sb(a) {
            if (Sa(a.h.clearKeys)) return null;
            var b = [], c = [], d;
            for (d in a.h.clearKeys) {
              var e = a.h.clearKeys[d], f = gb(d), e = gb(e), f = {kty: "oct", kid: eb(f, !1), k: eb(e, !1)};
              b.push(f);
              c.push(f.kid)
            }
            a = JSON.stringify({keys: b});
            c = JSON.stringify({kids: c});
            c = [{initData: new Uint8Array(bb(c)), initDataType: "keyids"}];
            return {
              keySystem: "org.w3.clearkey",
              licenseServerUri: "data:application/json;base64," + window.btoa(a),
              distinctiveIdentifierRequired: !1,
              persistentStateRequired: !1,
              audioRobustness: "",
              videoRobustness: "",
              serverCertificate: null,
              initData: c,
              keyIds: []
            }
          }

          function ub(a, b, c, d) {
            var e = [], f = [], g = [], h = [];
            vb(d, e, f, g, h);
            a.b = {
              keySystem: b,
              licenseServerUri: e[0],
              distinctiveIdentifierRequired: "required" == c.distinctiveIdentifier,
              persistentStateRequired: "required" == c.persistentState,
              audioRobustness: c.audioCapabilities ? c.audioCapabilities[0].robustness : "",
              videoRobustness: c.videoCapabilities ? c.videoCapabilities[0].robustness : "",
              serverCertificate: f[0],
              initData: g,
              keyIds: h
            }
          }

          function vb(a, b, c, d, e) {
            function f(a, b) {
              return a.keyId && a.keyId == b.keyId ? !0 : a.initDataType == b.initDataType && ib(a.initData, b.initData)
            }

            a.forEach(function (a) {
              -1 == b.indexOf(a.licenseServerUri) && b.push(a.licenseServerUri);
              a.serverCertificate && -1 == Ka(c, a.serverCertificate, ib) && c.push(a.serverCertificate);
              a.initData && a.initData.forEach(function (a) {
                -1 == Ka(d, a, f) && d.push(a)
              });
              if (a.keyIds) for (var g = 0; g < a.keyIds.length; ++g) -1 == e.indexOf(a.keyIds[g]) && e.push(a.keyIds[g])
            })
          }

          k.pd = function (a) {
            for (var b = new Uint8Array(a.initData), c = 0; c < this.a.length; ++c) if (ib(b, this.a[c].initData)) return;
            qb(this, a.initDataType, b)
          };

          function pb(a, b) {
            try {
              var c = a.j.createSession("persistent-license")
            } catch (f) {
              var d = new v(2, 6, 6005, f.message);
              a.g(d);
              return Promise.reject(d)
            }
            C(a.f, c, "message", a.pc.bind(a));
            C(a.f, c, "keystatuseschange", a.jc.bind(a));
            var e = {initData: null, da: c, loaded: !1, Eb: Infinity, ma: null};
            a.a.push(e);
            return c.load(b).then(function (a) {
              if (!this.c) {
                if (a) return e.loaded = !0, this.a.every(function (a) {
                  return a.loaded
                }) && this.i.resolve(), c;
                this.a.splice(this.a.indexOf(e), 1);
                this.g(new v(2, 6, 6013))
              }
            }.bind(a), function (a) {
              this.c ||
              (this.a.splice(this.a.indexOf(e), 1), this.g(new v(2, 6, 6005, a.message)))
            }.bind(a))
          }

          function qb(a, b, c) {
            try {
              var d = a.fa ? a.j.createSession("persistent-license") : a.j.createSession()
            } catch (e) {
              a.g(new v(2, 6, 6005, e.message));
              return
            }
            C(a.f, d, "message", a.pc.bind(a));
            C(a.f, d, "keystatuseschange", a.jc.bind(a));
            a.a.push({initData: c, da: d, loaded: !1, Eb: Infinity, ma: null});
            d.generateRequest(b, c.buffer)["catch"](function (a) {
              if (!this.c) {
                for (var b = 0; b < this.a.length; ++b) if (this.a[b].da == d) {
                  this.a.splice(b, 1);
                  break
                }
                this.g(new v(2, 6, 6006, a.message))
              }
            }.bind(a))
          }

          k.pc = function (a) {
            this.h.delayLicenseRequestUntilPlayed && this.l.paused && !this.T ? this.C.push(a) : wb(this, a)
          };

          function wb(a, b) {
            for (var c = b.target, d, e = 0; e < a.a.length; e++) if (a.a[e].da == c) {
              d = a.a[e];
              break
            }
            e = Ha([a.b.licenseServerUri], a.h.retryParameters);
            e.body = b.message;
            e.method = "POST";
            "com.microsoft.playready" != a.b.keySystem && "com.chromecast.playready" != a.b.keySystem || xb(e);
            a.ga.request(2, e).then(function (a) {
                return this.c ? Promise.reject() : c.update(a.data).then(function () {
                  d && (d.ma && d.ma.resolve(), setTimeout(function () {
                    d.loaded = !0;
                    this.a.every(function (a) {
                      return a.loaded
                    }) && this.i.resolve()
                  }.bind(this), 5E3))
                }.bind(this))
              }.bind(a),
              function (a) {
                if (this.c) return Promise.resolve();
                a = new v(2, 6, 6007, a);
                this.g(a);
                d && d.ma && d.ma.reject(a)
              }.bind(a))["catch"](function (a) {
              if (this.c) return Promise.resolve();
              a = new v(2, 6, 6008, a.message);
              this.g(a);
              d && d.ma && d.ma.reject(a)
            }.bind(a))
          }

          function xb(a) {
            var b = $a(a.body, !0, !0);
            if (-1 == b.indexOf("PlayReadyKeyMessage")) a.headers["Content-Type"] = "text/xml; charset=utf-8"; else {
              for (var b = (new DOMParser).parseFromString(b, "application/xml"), c = b.getElementsByTagName("HttpHeader"), d = 0; d < c.length; ++d) a.headers[c[d].querySelector("name").textContent] = c[d].querySelector("value").textContent;
              a.body = fb(b.querySelector("Challenge").textContent).buffer
            }
          }

          k.jc = function (a) {
            a = a.target;
            var b;
            for (b = 0; b < this.a.length && this.a[b].da != a; ++b) ;
            if (b != this.a.length) {
              var c = !1;
              a.keyStatuses.forEach(function (a, d) {
                if ("string" == typeof d) {
                  var e = d;
                  d = a;
                  a = e
                }
                if ("com.microsoft.playready" == this.b.keySystem && 16 == d.byteLength) {
                  var e = new DataView(d), f = e.getUint32(0, !0), l = e.getUint16(4, !0), m = e.getUint16(6, !0);
                  e.setUint32(0, f, !1);
                  e.setUint16(4, l, !1);
                  e.setUint16(6, m, !1)
                }
                "com.microsoft.playready" == this.b.keySystem && "status-pending" == a && (a = "usable");
                "status-pending" != a && (this.a[b].loaded =
                  !0, this.a.every(function (a) {
                  return a.loaded
                }) && this.i.resolve());
                "expired" == a && (c = !0);
                e = hb(new Uint8Array(d));
                this.w[e] = a
              }.bind(this));
              var d = a.expiration - Date.now();
              (0 > d || c && 1E3 > d) && !this.a[b].ma && (this.a.splice(b, 1), a.close());
              db(this.B)
            }
          };
          k.Td = function () {
            function a(a, c) {
              return "expired" == c
            }

            !Sa(this.w) && Va(this.w, a) && this.g(new v(2, 6, 6014));
            this.sa(this.w)
          };

          function yb() {
            var a = [],
              b = [{contentType: 'video/mp4; codecs="avc1.42E01E"'}, {contentType: 'video/webm; codecs="vp8"'}], c = [{
                videoCapabilities: b,
                persistentState: "required",
                sessionTypes: ["persistent-license"]
              }, {videoCapabilities: b}], d = {};
            "org.w3.clearkey com.widevine.alpha com.microsoft.playready com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime".split(" ").forEach(function (b) {
              var e = navigator.requestMediaKeySystemAccess(b, c).then(function (a) {
                var c = a.getConfiguration().sessionTypes, c =
                  c ? 0 <= c.indexOf("persistent-license") : !1;
                0 <= navigator.userAgent.indexOf("Tizen 3") && (c = !1);
                d[b] = {persistentState: c};
                return a.createMediaKeys()
              })["catch"](function () {
                d[b] = null
              });
              a.push(e)
            });
            return Promise.all(a).then(function () {
              return d
            })
          }

          k.zd = function () {
            for (var a = 0; a < this.C.length; a++) wb(this, this.C[a]);
            this.T = !0;
            this.C = []
          };

          function zb(a, b) {
            var c = a.keySystem();
            return !b.drmInfos.length || b.drmInfos.some(function (a) {
              return a.keySystem == c
            })
          }

          function Ab(a, b) {
            if (!a.length) return b;
            if (!b.length) return a;
            for (var c = [], d = 0; d < a.length; d++) for (var e = 0; e < b.length; e++) if (a[d].keySystem == b[e].keySystem) {
              var f = a[d], e = b[e], g = [], g = g.concat(f.initData || []), g = g.concat(e.initData || []), h = [],
                h = h.concat(f.keyIds), h = h.concat(e.keyIds);
              c.push({
                keySystem: f.keySystem,
                licenseServerUri: f.licenseServerUri || e.licenseServerUri,
                distinctiveIdentifierRequired: f.distinctiveIdentifierRequired || e.distinctiveIdentifierRequired,
                persistentStateRequired: f.persistentStateRequired ||
                e.persistentStateRequired,
                videoRobustness: f.videoRobustness || e.videoRobustness,
                audioRobustness: f.audioRobustness || e.audioRobustness,
                serverCertificate: f.serverCertificate || e.serverCertificate,
                initData: g,
                keyIds: h
              });
              break
            }
            return c
          }

          k.Sd = function () {
            this.a.forEach(function (a) {
              var b = a.Eb, c = a.da.expiration;
              isNaN(c) && (c = Infinity);
              c != b && (this.na(a.da.sessionId, c), a.Eb = c)
            }.bind(this))
          };

          function Bb(a) {
            return !a || 1 == a.length && 1E-6 > a.end(0) - a.start(0) ? null : a.length ? a.end(a.length - 1) : null
          }

          function Cb(a, b) {
            return !a || !a.length || 1 == a.length && 1E-6 > a.end(0) - a.start(0) ? !1 : b >= a.start(0) && b <= a.end(a.length - 1)
          }

          function Db(a, b) {
            if (!a || !a.length || 1 == a.length && 1E-6 > a.end(0) - a.start(0)) return 0;
            for (var c = 0, d = a.length - 1; 0 <= d && a.end(d) > b; --d) c += a.end(d) - Math.max(a.start(d), b);
            return c
          };

          function Eb(a) {
            this.f = null;
            this.c = a;
            this.h = 0;
            this.g = Infinity;
            this.a = this.b = null
          }

          var Fb = {};

          function Gb(a, b) {
            Fb[a] = b.length ? Hb.bind(null, b) : b
          }

          n("shaka.text.TextEngine.registerParser", Gb);
          n("shaka.text.TextEngine.unregisterParser", function (a) {
            delete Fb[a]
          });
          Eb.prototype.o = function () {
            this.c = this.f = null;
            return Promise.resolve()
          };
          Eb.prototype.ie = function (a) {
            this.c = a
          };
          Eb.prototype.setDisplayer = Eb.prototype.ie;

          function Ib(a, b, c, d) {
            return Promise.resolve().then(function () {
              if (this.f && this.c) if (null == c || null == d) this.f.parseInit(b); else {
                var a = this.f.parseMedia(b, {
                  periodStart: this.h,
                  segmentStart: c,
                  segmentEnd: d
                }).filter(function (a) {
                  return a.startTime < this.g
                }.bind(this));
                this.c.append(a);
                null == this.b && (this.b = c);
                this.a = Math.min(d, this.g)
              }
            }.bind(a))
          }

          Eb.prototype.remove = function (a, b) {
            return Promise.resolve().then(function () {
              !this.c || !this.c.remove(a, b) || null == this.b || b <= this.b || a >= this.a || (a <= this.b && b >= this.a ? this.b = this.a = null : a <= this.b && b < this.a ? this.b = b : a > this.b && b >= this.a && (this.a = a))
            }.bind(this))
          };

          function Hb(a) {
            this.Ra = a
          }

          Hb.prototype.parseInit = function (a) {
            this.Ra(a, 0, null, null)
          };
          Hb.prototype.parseMedia = function (a, b) {
            return this.Ra(a, b.periodStart, b.segmentStart, b.segmentEnd)
          };

          function Jb(a, b, c) {
            this.g = a;
            this.f = b;
            this.j = c;
            this.c = {};
            this.a = null;
            this.b = {};
            this.h = new B;
            this.i = !1
          }

          function Kb() {
            var a = {};
            'video/mp4; codecs="avc1.42E01E",video/mp4; codecs="avc3.42E01E",video/mp4; codecs="hev1.1.6.L93.90",video/mp4; codecs="hvc1.1.6.L93.90",video/mp4; codecs="hev1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="hvc1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="vp9",video/mp4; codecs="vp09.00.10.08",audio/mp4; codecs="mp4a.40.2",audio/mp4; codecs="ac-3",audio/mp4; codecs="ec-3",audio/mp4; codecs="opus",audio/mp4; codecs="flac",video/webm; codecs="vp8",video/webm; codecs="vp9",video/webm; codecs="av1",audio/webm; codecs="vorbis",audio/webm; codecs="opus",video/mp2t; codecs="avc1.42E01E",video/mp2t; codecs="avc3.42E01E",video/mp2t; codecs="hvc1.1.6.L93.90",video/mp2t; codecs="mp4a.40.2",video/mp2t; codecs="ac-3",video/mp2t; codecs="ec-3",video/mp2t; codecs="mp4a.40.2",text/vtt,application/mp4; codecs="wvtt",application/ttml+xml,application/mp4; codecs="stpp"'.split(",").forEach(function (b) {
              a[b] = !!Fb[b] ||
                MediaSource.isTypeSupported(b);
              var c = b.split(";")[0];
              a[c] = a[c] || a[b]
            });
            return a
          }

          k = Jb.prototype;
          k.o = function () {
            this.i = !0;
            var a = [], b;
            for (b in this.b) {
              var c = this.b[b], d = c[0];
              this.b[b] = c.slice(0, 1);
              d && a.push(d.p["catch"](Ca));
              for (d = 1; d < c.length; ++d) c[d].p["catch"](Ca), c[d].p.reject()
            }
            this.a && a.push(this.a.o());
            return Promise.all(a).then(function () {
              this.h.o();
              this.j = this.a = this.f = this.g = this.h = null;
              this.c = {};
              this.b = {}
            }.bind(this))
          };
          k.init = function (a) {
            for (var b in a) {
              var c = a[b], c = Xa(c.mimeType, c.codecs);
              "text" == b ? Lb(this, c) : (c = this.f.addSourceBuffer(c), C(this.h, c, "error", this.we.bind(this, b)), C(this.h, c, "updateend", this.Ha.bind(this, b)), this.c[b] = c, this.b[b] = [])
            }
          };

          function Lb(a, b) {
            a.a || (a.a = new Eb(a.j));
            a.a.f = new Fb[b]
          }

          function Mb(a, b) {
            if ("text" == b) var c = a.a.b; else c = Nb(a, b), c = !c || 1 == c.length && 1E-6 > c.end(0) - c.start(0) ? null : 1 == c.length && 0 > c.start(0) ? 0 : c.length ? c.start(0) : null;
            return c
          }

          function Nb(a, b) {
            try {
              return a.c[b].buffered
            } catch (c) {
              return null
            }
          }

          function Ob(a, b, c, d, e) {
            return "text" == b ? Ib(a.a, c, d, e) : Pb(a, b, a.ve.bind(a, b, c))
          }

          k.remove = function (a, b, c) {
            return "text" == a ? this.a.remove(b, c) : Pb(this, a, this.vc.bind(this, a, b, c))
          };

          function Qb(a, b) {
            return "text" == b ? a.a.remove(0, Infinity) : Pb(a, b, a.vc.bind(a, b, 0, a.f.duration))
          }

          function Rb(a, b, c, d) {
            if ("text" == b) return a.a.h = c, null != d && (a.a.g = d), Promise.resolve();
            null == d && (d = Infinity);
            return Promise.all([Pb(a, b, a.Kc.bind(a, b)), Pb(a, b, a.ke.bind(a, b, c)), Pb(a, b, a.he.bind(a, b, d))])
          }

          k.endOfStream = function (a) {
            return Sb(this, function () {
              a ? this.f.endOfStream(a) : this.f.endOfStream()
            }.bind(this))
          };
          k.ea = function (a) {
            return Sb(this, function () {
              this.f.duration = a
            }.bind(this))
          };
          k.Y = function () {
            return this.f.duration
          };
          k.ve = function (a, b) {
            this.c[a].appendBuffer(b)
          };
          k.vc = function (a, b, c) {
            c <= b ? this.Ha(a) : this.c[a].remove(b, c)
          };
          k.Kc = function (a) {
            var b = this.c[a].appendWindowEnd;
            this.c[a].abort();
            this.c[a].appendWindowEnd = b;
            this.Ha(a)
          };
          k.Tc = function (a) {
            this.g.currentTime -= .001;
            this.Ha(a)
          };
          k.ke = function (a, b) {
            this.c[a].timestampOffset = b;
            this.Ha(a)
          };
          k.he = function (a, b) {
            this.c[a].appendWindowEnd = b;
            this.Ha(a)
          };
          k.we = function (a) {
            this.b[a][0].p.reject(new v(2, 3, 3014, this.g.error ? this.g.error.code : 0))
          };
          k.Ha = function (a) {
            var b = this.b[a][0];
            b && (b.p.resolve(), Tb(this, a))
          };

          function Pb(a, b, c) {
            if (a.i) return Promise.reject();
            c = {start: c, p: new y};
            a.b[b].push(c);
            if (1 == a.b[b].length) try {
              c.start()
            } catch (d) {
              "QuotaExceededError" == d.name ? c.p.reject(new v(2, 3, 3017, b)) : c.p.reject(new v(2, 3, 3015, d)), Tb(a, b)
            }
            return c.p
          }

          function Sb(a, b) {
            if (a.i) return Promise.reject();
            var c = [], d;
            for (d in a.c) {
              var e = new y, f = {
                start: function (a) {
                  a.resolve()
                }.bind(null, e), p: e
              };
              a.b[d].push(f);
              c.push(e);
              1 == a.b[d].length && f.start()
            }
            return Promise.all(c).then(function () {
              var a;
              try {
                b()
              } catch (l) {
                var c = Promise.reject(new v(2, 3, 3015, l))
              }
              for (a in this.c) Tb(this, a);
              return c
            }.bind(a), function () {
              return Promise.reject()
            }.bind(a))
          }

          function Tb(a, b) {
            a.b[b].shift();
            var c = a.b[b][0];
            if (c) try {
              c.start()
            } catch (d) {
              c.p.reject(new v(2, 3, 3015, d)), Tb(a, b)
            }
          };

          function Ub(a, b, c) {
            return c == b || a >= Vb && c == b.split("-")[0] || a >= Wb && c.split("-")[0] == b.split("-")[0] ? !0 : !1
          }

          var Vb = 1, Wb = 2;

          function Xb(a) {
            a = a.toLowerCase().split("-");
            var b = Yb[a[0]];
            b && (a[0] = b);
            return a.join("-")
          }

          var Yb = {
            aar: "aa",
            abk: "ab",
            afr: "af",
            aka: "ak",
            alb: "sq",
            amh: "am",
            ara: "ar",
            arg: "an",
            arm: "hy",
            asm: "as",
            ava: "av",
            ave: "ae",
            aym: "ay",
            aze: "az",
            bak: "ba",
            bam: "bm",
            baq: "eu",
            bel: "be",
            ben: "bn",
            bih: "bh",
            bis: "bi",
            bod: "bo",
            bos: "bs",
            bre: "br",
            bul: "bg",
            bur: "my",
            cat: "ca",
            ces: "cs",
            cha: "ch",
            che: "ce",
            chi: "zh",
            chu: "cu",
            chv: "cv",
            cor: "kw",
            cos: "co",
            cre: "cr",
            cym: "cy",
            cze: "cs",
            dan: "da",
            deu: "de",
            div: "dv",
            dut: "nl",
            dzo: "dz",
            ell: "el",
            eng: "en",
            epo: "eo",
            est: "et",
            eus: "eu",
            ewe: "ee",
            fao: "fo",
            fas: "fa",
            fij: "fj",
            fin: "fi",
            fra: "fr",
            fre: "fr",
            fry: "fy",
            ful: "ff",
            geo: "ka",
            ger: "de",
            gla: "gd",
            gle: "ga",
            glg: "gl",
            glv: "gv",
            gre: "el",
            grn: "gn",
            guj: "gu",
            hat: "ht",
            hau: "ha",
            heb: "he",
            her: "hz",
            hin: "hi",
            hmo: "ho",
            hrv: "hr",
            hun: "hu",
            hye: "hy",
            ibo: "ig",
            ice: "is",
            ido: "io",
            iii: "ii",
            iku: "iu",
            ile: "ie",
            ina: "ia",
            ind: "id",
            ipk: "ik",
            isl: "is",
            ita: "it",
            jav: "jv",
            jpn: "ja",
            kal: "kl",
            kan: "kn",
            kas: "ks",
            kat: "ka",
            kau: "kr",
            kaz: "kk",
            khm: "km",
            kik: "ki",
            kin: "rw",
            kir: "ky",
            kom: "kv",
            kon: "kg",
            kor: "ko",
            kua: "kj",
            kur: "ku",
            lao: "lo",
            lat: "la",
            lav: "lv",
            lim: "li",
            lin: "ln",
            lit: "lt",
            ltz: "lb",
            lub: "lu",
            lug: "lg",
            mac: "mk",
            mah: "mh",
            mal: "ml",
            mao: "mi",
            mar: "mr",
            may: "ms",
            mkd: "mk",
            mlg: "mg",
            mlt: "mt",
            mon: "mn",
            mri: "mi",
            msa: "ms",
            mya: "my",
            nau: "na",
            nav: "nv",
            nbl: "nr",
            nde: "nd",
            ndo: "ng",
            nep: "ne",
            nld: "nl",
            nno: "nn",
            nob: "nb",
            nor: "no",
            nya: "ny",
            oci: "oc",
            oji: "oj",
            ori: "or",
            orm: "om",
            oss: "os",
            pan: "pa",
            per: "fa",
            pli: "pi",
            pol: "pl",
            por: "pt",
            pus: "ps",
            que: "qu",
            roh: "rm",
            ron: "ro",
            rum: "ro",
            run: "rn",
            rus: "ru",
            sag: "sg",
            san: "sa",
            sin: "si",
            slk: "sk",
            slo: "sk",
            slv: "sl",
            sme: "se",
            smo: "sm",
            sna: "sn",
            snd: "sd",
            som: "so",
            sot: "st",
            spa: "es",
            sqi: "sq",
            srd: "sc",
            srp: "sr",
            ssw: "ss",
            sun: "su",
            swa: "sw",
            swe: "sv",
            tah: "ty",
            tam: "ta",
            tat: "tt",
            tel: "te",
            tgk: "tg",
            tgl: "tl",
            tha: "th",
            tib: "bo",
            tir: "ti",
            ton: "to",
            tsn: "tn",
            tso: "ts",
            tuk: "tk",
            tur: "tr",
            twi: "tw",
            uig: "ug",
            ukr: "uk",
            urd: "ur",
            uzb: "uz",
            ven: "ve",
            vie: "vi",
            vol: "vo",
            wel: "cy",
            wln: "wa",
            wol: "wo",
            xho: "xh",
            yid: "yi",
            yor: "yo",
            zha: "za",
            zho: "zh",
            zul: "zu"
          };

          function Zb(a, b, c) {
            var d = a.video;
            return d && (d.width < b.minWidth || d.width > b.maxWidth || d.width > c.width || d.height < b.minHeight || d.height > b.maxHeight || d.height > c.height || d.width * d.height < b.minPixels || d.width * d.height > b.maxPixels) || a.bandwidth < b.minBandwidth || a.bandwidth > b.maxBandwidth ? !1 : !0
          }

          function $b(a, b, c) {
            var d = !1;
            a.variants.forEach(function (a) {
              var e = a.allowedByApplication;
              a.allowedByApplication = Zb(a, b, c);
              e != a.allowedByApplication && (d = !0)
            });
            return d
          }

          function ac(a, b, c) {
            var d = b.video, e = b.audio;
            for (b = 0; b < c.variants.length; ++b) {
              var f = c.variants[b], g = a, h = e, l = d;
              (g && g.F && !zb(g, f) ? 0 : bc(f.audio, g, h) && bc(f.video, g, l)) || (c.variants.splice(b, 1), --b)
            }
            for (b = 0; b < c.textStreams.length; ++b) a = c.textStreams[b], Fb[Xa(a.mimeType, a.codecs)] || (c.textStreams.splice(b, 1), --b)
          }

          function bc(a, b, c) {
            if (!a) return !0;
            var d = null;
            b && b.F && (d = b.s);
            b = Xa(a.mimeType, a.codecs);
            var e = a.mimeType, f;
            for (f in Ya) {
              var g = a[f], h = Ya[f];
              g && (e += "; " + h + '="' + g + '"')
            }
            return !Fb[Xa(a.mimeType, a.codecs)] && !MediaSource.isTypeSupported(e) || d && a.encrypted && 0 > d.indexOf(b) || c && (a.mimeType != c.mimeType || a.codecs.split(".")[0] != c.codecs.split(".")[0]) ? !1 : !0
          }

          function cc(a, b, c) {
            var d = null;
            return dc(a.variants).map(function (a) {
              var e;
              a.video && a.audio ? e = c == a.video.id && b == a.audio.id : e = a.video && c == a.video.id || a.audio && b == a.audio.id;
              var g = "";
              a.video && (g += a.video.codecs);
              a.audio && ("" != g && (g += ", "), g += a.audio.codecs, d = a.audio.label);
              var h = a.audio ? a.audio.codecs : null, l = a.video ? a.video.codecs : null, m = null;
              a.video ? m = a.video.mimeType : a.audio && (m = a.audio.mimeType);
              var q = null;
              a.audio ? q = a.audio.kind : a.video && (q = a.video.kind);
              var w = Ja((a.audio ? a.audio.roles : []).concat(a.video ?
                a.video.roles : []));
              return {
                id: a.id,
                active: e,
                type: "variant",
                bandwidth: a.bandwidth,
                language: a.language,
                label: d,
                kind: q || null,
                width: a.video ? a.video.width : null,
                height: a.video ? a.video.height : null,
                frameRate: a.video ? a.video.frameRate : void 0,
                mimeType: m,
                codecs: g,
                audioCodec: h,
                videoCodec: l,
                primary: a.primary,
                roles: w,
                videoId: a.video ? a.video.id : null,
                audioId: a.audio ? a.audio.id : null,
                channelsCount: a.audio ? a.audio.channelsCount : null,
                audioBandwidth: a.audio && a.audio.bandwidth ? a.audio.bandwidth : null,
                videoBandwidth: a.video &&
                a.video.bandwidth ? a.video.bandwidth : null
              }
            })
          }

          function ec(a, b) {
            return a.textStreams.map(function (a) {
              return {
                id: a.id,
                active: b == a.id,
                type: "text",
                language: a.language,
                label: a.label,
                kind: a.kind,
                mimeType: a.mimeType,
                codecs: a.codecs || null,
                audioCodec: null,
                videoCodec: null,
                primary: a.primary,
                roles: a.roles,
                channelsCount: null,
                audioBandwidth: null,
                videoBandwidth: null
              }
            })
          }

          function fc(a, b) {
            for (var c = 0; c < a.variants.length; c++) if (a.variants[c].id == b.id) return a.variants[c];
            return null
          }

          function gc(a, b) {
            for (var c = 0; c < a.textStreams.length; c++) if (a.textStreams[c].id == b.id) return a.textStreams[c];
            return null
          }

          function dc(a) {
            return a.filter(function (a) {
              return a.allowedByApplication && a.allowedByKeySystem
            })
          }

          function hc(a, b, c, d) {
            var e = dc(a.variants), f = e.filter(function (a) {
              return a.primary
            });
            f.length || (f = e);
            var g = f.length ? f[0].language : "", f = f.filter(function (a) {
              return a.language == g
            });
            if (b) {
              var h = Xb(b);
              [Wb, Vb, 0].forEach(function (a) {
                var b = !1;
                e.forEach(function (c) {
                  h = Xb(h);
                  var e = Xb(c.language);
                  Ub(a, h, e) && (b ? f.push(c) : (f = [c], b = !0), d && (d.audio = !0))
                })
              })
            }
            if (c && (a = ic(f, c), a.length)) return a;
            a = f.map(function (a) {
              return (a.audio ? a.audio.roles : []).concat(a.video ? a.video.roles : [])
            }).reduce(z, []);
            return a.length ? ic(f,
              a[0]) : f
          }

          function jc(a, b, c, d) {
            var e = a.textStreams, f = e.filter(function (a) {
              return a.primary
            });
            f.length || (f = e);
            var g = f.length ? f[0].language : "", f = f.filter(function (a) {
              return a.language == g
            });
            if (b) {
              var h = Xb(b);
              [Wb, Vb, 0].forEach(function (a) {
                var b = !1;
                e.forEach(function (c) {
                  var e = Xb(c.language);
                  Ub(a, h, e) && (b ? f.push(c) : (f = [c], b = !0), d && (d.text = !0))
                })
              })
            }
            if (c && (a = kc(f, c), a.length)) return a;
            a = f.map(function (a) {
              return a.roles
            }).reduce(z, []);
            return a.length ? kc(f, a[0]) : f
          }

          function ic(a, b) {
            return a.filter(function (a) {
              return a.audio && 0 <= a.audio.roles.indexOf(b) || a.video && 0 <= a.video.roles.indexOf(b)
            })
          }

          function kc(a, b) {
            return a.filter(function (a) {
              return 0 <= a.roles.indexOf(b)
            })
          }

          function lc(a, b, c) {
            for (var d = 0; d < c.length; d++) if (c[d].audio == a && c[d].video == b) return c[d];
            return null
          }

          function mc(a, b, c) {
            function d(a, b) {
              return null == a ? null == b : b.id == a
            }

            for (var e = 0; e < c.length; e++) if (d(a, c[e].audio) && d(b, c[e].video)) return c[e];
            return null
          }

          function nc(a, b) {
            for (var c = a.periods.length - 1; 0 < c; --c) if (b + Ra >= a.periods[c].startTime) return c;
            return 0
          }

          function oc(a, b) {
            for (var c = 0; c < a.periods.length; ++c) {
              var d = a.periods[c];
              if ("text" == b.type) for (var e = 0; e < d.textStreams.length; ++e) {
                if (d.textStreams[e] == b) return c
              } else for (e = 0; e < d.variants.length; ++e) {
                var f = d.variants[e];
                if (f.audio == b || f.video == b || f.video && f.video.trickModeVideo == b) return c
              }
            }
            return -1
          };

          function F() {
            this.h = null;
            this.c = !1;
            this.b = new fa;
            this.g = [];
            this.i = !1;
            this.a = this.f = null
          }

          n("shaka.abr.SimpleAbrManager", F);
          F.prototype.stop = function () {
            this.h = null;
            this.c = !1;
            this.g = [];
            this.f = null
          };
          F.prototype.stop = F.prototype.stop;
          F.prototype.init = function (a) {
            this.h = a
          };
          F.prototype.init = F.prototype.init;
          F.prototype.chooseVariant = function () {
            var a = pc(this.a.restrictions, this.g), b = this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);
            if (this.g.length && !a.length) throw new v(2, 4, 4012);
            for (var c = a[0] || null, d = 0; d < a.length; ++d) {
              var e = a[d], f = (a[d + 1] || {bandwidth: Infinity}).bandwidth / this.a.bandwidthUpgradeTarget;
              b >= e.bandwidth / this.a.bandwidthDowngradeTarget && b <= f && (c = e)
            }
            this.f = Date.now();
            return c
          };
          F.prototype.chooseVariant = F.prototype.chooseVariant;
          F.prototype.enable = function () {
            this.c = !0
          };
          F.prototype.enable = F.prototype.enable;
          F.prototype.disable = function () {
            this.c = !1
          };
          F.prototype.disable = F.prototype.disable;
          F.prototype.segmentDownloaded = function (a, b) {
            var c = this.b;
            if (!(16E3 > b)) {
              var d = 8E3 * b / a, e = a / 1E3;
              c.a += b;
              da(c.b, e, d);
              da(c.c, e, d)
            }
            if (null != this.f && this.c) a:{
              if (!this.i) {
                if (!(128E3 <= this.b.a)) break a;
                this.i = !0
              } else if (Date.now() - this.f < 1E3 * this.a.switchInterval) break a;
              c = this.chooseVariant();
              this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);
              this.h(c)
            }
          };
          F.prototype.segmentDownloaded = F.prototype.segmentDownloaded;
          F.prototype.getBandwidthEstimate = function () {
            return this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate)
          };
          F.prototype.getBandwidthEstimate = F.prototype.getBandwidthEstimate;
          F.prototype.setVariants = function (a) {
            this.g = a
          };
          F.prototype.setVariants = F.prototype.setVariants;
          F.prototype.configure = function (a) {
            this.a = a
          };
          F.prototype.configure = F.prototype.configure;

          function pc(a, b) {
            return b.filter(function (b) {
              return Zb(b, a, {width: Infinity, height: Infinity})
            }).sort(function (a, b) {
              return a.bandwidth - b.bandwidth
            })
          };

          function G(a, b) {
            var c = b || {}, d;
            for (d in c) this[d] = c[d];
            this.defaultPrevented = this.cancelable = this.bubbles = !1;
            this.timeStamp = window.performance && window.performance.now ? window.performance.now() : Date.now();
            this.type = a;
            this.isTrusted = !1;
            this.target = this.currentTarget = null;
            this.a = !1
          }

          G.prototype.preventDefault = function () {
            this.cancelable && (this.defaultPrevented = !0)
          };
          G.prototype.stopImmediatePropagation = function () {
            this.a = !0
          };
          G.prototype.stopPropagation = function () {
          };
          var qc = "ended play playing pause pausing ratechange seeked seeking timeupdate volumechange".split(" "),
            rc = "buffered currentTime duration ended loop muted paused playbackRate seeking videoHeight videoWidth volume".split(" "),
            sc = ["loop", "playbackRate"], tc = ["pause", "play"],
            uc = "adaptation buffering emsg error loading unloading texttrackvisibility timelineregionadded timelineregionenter timelineregionexit trackschanged".split(" "),
            vc = "drmInfo getAudioLanguages getConfiguration getExpiration getManifestUri getPlaybackRate getTextLanguages getTextTracks getStats getVariantTracks isAudioOnly isBuffering isInProgress isLive isTextTrackVisible keySystem seekRange".split(" "),
            wc = ["getPlayheadTimeAsDate", "getPresentationStartTimeAsDate"], xc = [["getConfiguration", "configure"]],
            yc = [["isTextTrackVisible", "setTextTrackVisibility"]],
            zc = "addTextTrack cancelTrickPlay configure resetConfiguration retryStreaming selectAudioLanguage selectTextLanguage selectTextTrack selectVariantTrack setTextTrackVisibility trickPlay".split(" "),
            Ac = ["load", "unload"];

          function Bc(a) {
            return JSON.stringify(a, function (a, c) {
              if ("manager" != a && "function" != typeof c) {
                if (c instanceof Event || c instanceof G) {
                  var b = {}, e;
                  for (e in c) {
                    var f = c[e];
                    f && "object" == typeof f || e in Event || (b[e] = f)
                  }
                  return b
                }
                if (c instanceof TimeRanges) for (b = {
                  __type__: "TimeRanges",
                  length: c.length,
                  start: [],
                  end: []
                }, e = 0; e < c.length; ++e) b.start.push(c.start(e)), b.end.push(c.end(e)); else b = "number" == typeof c ? isNaN(c) ? "NaN" : isFinite(c) ? c : 0 > c ? "-Infinity" : "Infinity" : c;
                return b
              }
            })
          }

          function Cc(a) {
            return JSON.parse(a, function (a, c) {
              return "NaN" == c ? NaN : "-Infinity" == c ? -Infinity : "Infinity" == c ? Infinity : c && "object" == typeof c && "TimeRanges" == c.__type__ ? Dc(c) : c
            })
          }

          function Dc(a) {
            return {
              length: a.length, start: function (b) {
                return a.start[b]
              }, end: function (b) {
                return a.end[b]
              }
            }
          };

          function Ec(a, b, c, d, e, f) {
            this.F = a;
            this.h = b;
            this.J = c;
            this.l = !1;
            this.B = d;
            this.C = e;
            this.s = f;
            this.c = this.i = !1;
            this.w = "";
            this.a = this.j = null;
            this.b = {video: {}, player: {}};
            this.m = 0;
            this.f = {};
            this.g = null
          }

          var Fc = !1;
          k = Ec.prototype;
          k.o = function () {
            Gc(this);
            this.a && (this.a.leave(function () {
            }, function () {
            }), this.a = null);
            this.C = this.B = this.h = null;
            this.c = this.i = !1;
            this.g = this.f = this.b = this.j = null;
            return Promise.resolve()
          };
          k.Z = function () {
            return this.c
          };
          k.Kb = function () {
            return this.w
          };
          k.init = function () {
            if (window.chrome && chrome.cast && chrome.cast.isAvailable) {
              delete window.__onGCastApiAvailable;
              this.i = !0;
              this.h();
              var a = new chrome.cast.SessionRequest(this.F),
                a = new chrome.cast.ApiConfig(a, this.qd.bind(this), this.Bd.bind(this), "origin_scoped");
              chrome.cast.initialize(a, function () {
              }, function () {
              });
              Fc && setTimeout(this.h.bind(this), 20)
            } else window.__onGCastApiAvailable = function (a) {
              a && this.init()
            }.bind(this)
          };
          k.Ob = function (a) {
            this.j = a;
            this.c && Hc(this, {type: "appData", appData: this.j})
          };
          k.cast = function (a) {
            if (!this.i) return Promise.reject(new v(1, 8, 8E3));
            if (!Fc) return Promise.reject(new v(1, 8, 8001));
            if (this.c) return Promise.reject(new v(1, 8, 8002));
            this.g = new y;
            chrome.cast.requestSession(this.Gb.bind(this, a), this.hc.bind(this));
            return this.g
          };
          k.ib = function () {
            this.c && (Gc(this), this.a && (this.a.stop(function () {
            }, function () {
            }), this.a = null))
          };
          k.get = function (a, b) {
            if ("video" == a) {
              if (0 <= tc.indexOf(b)) return this.uc.bind(this, a, b)
            } else if ("player" == a) {
              if (0 <= wc.indexOf(b) && !this.get("player", "isLive")()) return function () {
              };
              if (0 <= zc.indexOf(b)) return this.uc.bind(this, a, b);
              if (0 <= Ac.indexOf(b)) return this.Xd.bind(this, a, b);
              if (0 <= vc.indexOf(b)) return this.qc.bind(this, a, b)
            }
            return this.qc(a, b)
          };
          k.set = function (a, b, c) {
            this.b[a][b] = c;
            Hc(this, {type: "set", targetName: a, property: b, value: c})
          };
          k.Gb = function (a, b) {
            this.a = b;
            this.a.addUpdateListener(this.ic.bind(this));
            this.a.addMessageListener("urn:x-cast:com.google.shaka.v2", this.vd.bind(this));
            this.ic();
            Hc(this, {type: "init", initState: a, appData: this.j});
            this.g.resolve()
          };
          k.hc = function (a) {
            var b = 8003;
            switch (a.code) {
              case "cancel":
                b = 8004;
                break;
              case "timeout":
                b = 8005;
                break;
              case "receiver_unavailable":
                b = 8006
            }
            this.g.reject(new v(2, 8, b, a))
          };
          k.qc = function (a, b) {
            return this.b[a][b]
          };
          k.uc = function (a, b) {
            Hc(this, {type: "call", targetName: a, methodName: b, args: Array.prototype.slice.call(arguments, 2)})
          };
          k.Xd = function (a, b) {
            var c = Array.prototype.slice.call(arguments, 2), d = new y, e = this.m.toString();
            this.m++;
            this.f[e] = d;
            Hc(this, {type: "asyncCall", targetName: a, methodName: b, args: c, id: e});
            return d
          };
          k.qd = function (a) {
            var b = this.s();
            this.g = new y;
            this.l = !0;
            this.Gb(b, a)
          };
          k.Bd = function (a) {
            Fc = "available" == a;
            this.h()
          };
          k.ic = function () {
            var a = this.a ? "connected" == this.a.status : !1;
            if (this.c && !a) {
              this.C();
              for (var b in this.b) this.b[b] = {};
              Gc(this)
            }
            this.w = (this.c = a) ? this.a.receiver.friendlyName : "";
            this.h()
          };

          function Gc(a) {
            for (var b in a.f) {
              var c = a.f[b];
              delete a.f[b];
              c.reject(new v(1, 7, 7E3))
            }
          }

          k.vd = function (a, b) {
            var c = Cc(b);
            switch (c.type) {
              case "event":
                var d = c.targetName, e = c.event;
                this.B(d, new G(e.type, e));
                break;
              case "update":
                e = c.update;
                for (d in e) {
                  var c = this.b[d] || {};
                  for (f in e[d]) c[f] = e[d][f]
                }
                this.l && (this.J(), this.l = !1);
                break;
              case "asyncComplete":
                d = c.id;
                var f = c.error;
                c = this.f[d];
                delete this.f[d];
                if (c) if (f) {
                  d = new v(f.severity, f.category, f.code);
                  for (e in f) d[e] = f[e];
                  c.reject(d)
                } else c.resolve()
            }
          };

          function Hc(a, b) {
            var c = Bc(b);
            a.a.sendMessage("urn:x-cast:com.google.shaka.v2", c, function () {
            }, ga)
          };

          function p() {
            this.ub = new Ma;
            this.Za = this
          }

          p.prototype.addEventListener = function (a, b) {
            this.ub.push(a, b)
          };
          p.prototype.removeEventListener = function (a, b) {
            this.ub.remove(a, b)
          };
          p.prototype.dispatchEvent = function (a) {
            for (var b = this.ub.get(a.type) || [], c = 0; c < b.length; ++c) {
              a.target = this.Za;
              a.currentTarget = this.Za;
              var d = b[c];
              try {
                d.handleEvent ? d.handleEvent(a) : d.call(this, a)
              } catch (e) {
              }
              if (a.a) break
            }
            return a.defaultPrevented
          };

          function H(a, b, c) {
            p.call(this);
            this.c = a;
            this.b = b;
            this.i = this.g = this.f = this.j = this.h = null;
            this.a = new Ec(c, this.qe.bind(this), this.re.bind(this), this.se.bind(this), this.te.bind(this), this.bc.bind(this));
            Ic(this)
          }

          ba(H);
          n("shaka.cast.CastProxy", H);
          H.prototype.o = function (a) {
            a && this.a && this.a.ib();
            a = [this.i ? this.i.o() : null, this.b ? this.b.o() : null, this.a ? this.a.o() : null];
            this.a = this.i = this.j = this.h = this.b = this.c = null;
            return Promise.all(a)
          };
          H.prototype.destroy = H.prototype.o;
          H.prototype.gd = function () {
            return this.h
          };
          H.prototype.getVideo = H.prototype.gd;
          H.prototype.Yc = function () {
            return this.j
          };
          H.prototype.getPlayer = H.prototype.Yc;
          H.prototype.Lc = function () {
            return this.a ? this.a.i && Fc : !1
          };
          H.prototype.canCast = H.prototype.Lc;
          H.prototype.Z = function () {
            return this.a ? this.a.Z() : !1
          };
          H.prototype.isCasting = H.prototype.Z;
          H.prototype.Kb = function () {
            return this.a ? this.a.Kb() : ""
          };
          H.prototype.receiverName = H.prototype.Kb;
          H.prototype.cast = function () {
            var a = this.bc();
            return this.a.cast(a).then(function () {
              return this.b.qb()
            }.bind(this))
          };
          H.prototype.cast = H.prototype.cast;
          H.prototype.Ob = function (a) {
            this.a.Ob(a)
          };
          H.prototype.setAppData = H.prototype.Ob;
          H.prototype.ze = function () {
            var a = this.a;
            if (a.c) {
              var b = a.s();
              chrome.cast.requestSession(a.Gb.bind(a, b), a.hc.bind(a))
            }
          };
          H.prototype.suggestDisconnect = H.prototype.ze;
          H.prototype.ib = function () {
            this.a.ib()
          };
          H.prototype.forceDisconnect = H.prototype.ib;

          function Ic(a) {
            a.a.init();
            a.i = new B;
            qc.forEach(function (a) {
              C(this.i, this.c, a, this.He.bind(this))
            }.bind(a));
            uc.forEach(function (a) {
              C(this.i, this.b, a, this.Rd.bind(this))
            }.bind(a));
            a.h = {};
            for (var b in a.c) Object.defineProperty(a.h, b, {
              configurable: !1,
              enumerable: !0,
              get: a.Ge.bind(a, b),
              set: a.Ie.bind(a, b)
            });
            a.j = {};
            for (b in a.b) Object.defineProperty(a.j, b, {configurable: !1, enumerable: !0, get: a.Qd.bind(a, b)});
            a.f = new p;
            a.f.Za = a.h;
            a.g = new p;
            a.g.Za = a.j
          }

          k = H.prototype;
          k.bc = function () {
            var a = {video: {}, player: {}, playerAfterLoad: {}, manifest: this.b.fb, startTime: null};
            this.c.pause();
            sc.forEach(function (b) {
              a.video[b] = this.c[b]
            }.bind(this));
            this.c.ended || (a.startTime = this.c.currentTime);
            xc.forEach(function (b) {
              var c = b[1];
              b = this.b[b[0]]();
              a.player[c] = b
            }.bind(this));
            yc.forEach(function (b) {
              var c = b[1];
              b = this.b[b[0]]();
              a.playerAfterLoad[c] = b
            }.bind(this));
            return a
          };
          k.qe = function () {
            this.dispatchEvent(new G("caststatuschanged"))
          };
          k.re = function () {
            this.f.dispatchEvent(new G(this.h.paused ? "pause" : "play"))
          };
          k.te = function () {
            xc.forEach(function (a) {
              var b = a[1];
              a = this.a.get("player", a[0])();
              this.b[b](a)
            }.bind(this));
            var a = this.a.get("player", "getManifestUri")(), b = this.a.get("video", "ended"), c = Promise.resolve(),
              d = this.c.autoplay, e = null;
            b || (e = this.a.get("video", "currentTime"));
            a && (this.c.autoplay = !1, c = this.b.load(a, e), c["catch"](function (a) {
              this.b.dispatchEvent(new G("error", {detail: a}))
            }.bind(this)));
            var f = {};
            sc.forEach(function (a) {
              f[a] = this.a.get("video", a)
            }.bind(this));
            c.then(function () {
              sc.forEach(function (a) {
                this.c[a] =
                  f[a]
              }.bind(this));
              yc.forEach(function (a) {
                var b = a[1];
                a = this.a.get("player", a[0])();
                this.b[b](a)
              }.bind(this));
              this.c.autoplay = d;
              a && this.c.play()
            }.bind(this))
          };
          k.Ge = function (a) {
            if ("addEventListener" == a) return this.f.addEventListener.bind(this.f);
            if ("removeEventListener" == a) return this.f.removeEventListener.bind(this.f);
            if (this.a.Z() && !Object.keys(this.a.b.video).length) {
              var b = this.c[a];
              if ("function" != typeof b) return b
            }
            return this.a.Z() ? this.a.get("video", a) : (b = this.c[a], "function" == typeof b && (b = b.bind(this.c)), b)
          };
          k.Ie = function (a, b) {
            this.a.Z() ? this.a.set("video", a, b) : this.c[a] = b
          };
          k.He = function (a) {
            this.a.Z() || this.f.dispatchEvent(new G(a.type, a))
          };
          k.Qd = function (a) {
            return "addEventListener" == a ? this.g.addEventListener.bind(this.g) : "removeEventListener" == a ? this.g.removeEventListener.bind(this.g) : "getMediaElement" == a ? function () {
              return this.h
            }.bind(this) : "getNetworkingEngine" == a ? this.b.cc.bind(this.b) : this.a.Z() && !Object.keys(this.a.b.video).length && 0 <= vc.indexOf(a) || !this.a.Z() ? (a = this.b[a], a.bind(this.b)) : this.a.get("player", a)
          };
          k.Rd = function (a) {
            this.a.Z() || this.g.dispatchEvent(a)
          };
          k.se = function (a, b) {
            this.a.Z() && ("video" == a ? this.f.dispatchEvent(b) : "player" == a && this.g.dispatchEvent(b))
          };

          function I(a, b, c, d) {
            p.call(this);
            this.a = a;
            this.b = b;
            this.j = {video: a, player: b};
            this.l = c || function () {
            };
            this.m = d || function (a) {
              return a
            };
            this.i = !1;
            this.f = !0;
            this.h = this.g = this.c = null;
            Nc(this)
          }

          ba(I);
          n("shaka.cast.CastReceiver", I);
          I.prototype.isConnected = function () {
            return this.i
          };
          I.prototype.isConnected = I.prototype.isConnected;
          I.prototype.kd = function () {
            return this.f
          };
          I.prototype.isIdle = I.prototype.kd;
          I.prototype.o = function () {
            var a = this.b ? this.b.o() : Promise.resolve();
            null != this.h && window.clearTimeout(this.h);
            this.l = this.j = this.b = this.a = null;
            this.i = !1;
            this.f = !0;
            this.h = this.g = this.c = null;
            return a.then(function () {
              cast.receiver.CastReceiverManager.getInstance().stop()
            })
          };
          I.prototype.destroy = I.prototype.o;

          function Nc(a) {
            var b = cast.receiver.CastReceiverManager.getInstance();
            b.onSenderConnected = a.oc.bind(a);
            b.onSenderDisconnected = a.oc.bind(a);
            b.onSystemVolumeChanged = a.Sc.bind(a);
            a.g = b.getCastMessageBus("urn:x-cast:com.google.cast.media");
            a.g.onMessage = a.rd.bind(a);
            a.c = b.getCastMessageBus("urn:x-cast:com.google.shaka.v2");
            a.c.onMessage = a.Ed.bind(a);
            b.start();
            qc.forEach(function (a) {
              this.a.addEventListener(a, this.rc.bind(this, "video"))
            }.bind(a));
            uc.forEach(function (a) {
              this.b.addEventListener(a, this.rc.bind(this,
                "player"))
            }.bind(a));
            cast.__platform__ && cast.__platform__.canDisplayType('video/mp4; codecs="avc1.640028"; width=3840; height=2160') ? a.b.Pb(3840, 2160) : a.b.Pb(1920, 1080);
            a.b.addEventListener("loading", function () {
              this.f = !1;
              Oc(this)
            }.bind(a));
            a.a.addEventListener("playing", function () {
              this.f = !1;
              Oc(this)
            }.bind(a));
            a.a.addEventListener("pause", function () {
              Oc(this)
            }.bind(a));
            a.b.addEventListener("unloading", function () {
              this.f = !0;
              Oc(this)
            }.bind(a));
            a.a.addEventListener("ended", function () {
              window.setTimeout(function () {
                this.a &&
                this.a.ended && (this.f = !0, Oc(this))
              }.bind(this), 5E3)
            }.bind(a))
          }

          k = I.prototype;
          k.oc = function () {
            this.i = !!cast.receiver.CastReceiverManager.getInstance().getSenders().length;
            Oc(this)
          };

          function Oc(a) {
            Promise.resolve().then(function () {
              this.dispatchEvent(new G("caststatuschanged"));
              Pc(this, 0)
            }.bind(a))
          }

          function Qc(a, b, c) {
            for (var d in b.player) a.b[d](b.player[d]);
            a.l(c);
            c = Promise.resolve();
            var e = a.a.autoplay;
            b.manifest && (a.a.autoplay = !1, c = a.b.load(b.manifest, b.startTime), c["catch"](function (a) {
              this.b.dispatchEvent(new G("error", {detail: a}))
            }.bind(a)));
            c.then(function () {
              var a;
              for (a in b.video) {
                var c = b.video[a];
                this.a[a] = c
              }
              for (a in b.playerAfterLoad) c = b.playerAfterLoad[a], this.b[a](c);
              this.a.autoplay = e;
              b.manifest && (this.a.play(), Pc(this, 0))
            }.bind(a))
          }

          k.rc = function (a, b) {
            this.Hb();
            Rc(this, {type: "event", targetName: a, event: b}, this.c)
          };
          k.Hb = function () {
            null != this.h && window.clearTimeout(this.h);
            this.h = window.setTimeout(this.Hb.bind(this), 500);
            var a = {video: {}, player: {}};
            rc.forEach(function (b) {
              a.video[b] = this.a[b]
            }.bind(this));
            var b = vc;
            this.b.P() && (b = b.concat(wc));
            b.forEach(function (b) {
              a.player[b] = this.b[b]()
            }.bind(this));
            if (b = cast.receiver.CastReceiverManager.getInstance().getSystemVolume()) a.video.volume = b.level, a.video.muted = b.muted;
            Rc(this, {type: "update", update: a}, this.c)
          };
          k.Sc = function () {
            var a = cast.receiver.CastReceiverManager.getInstance().getSystemVolume();
            a && Rc(this, {type: "update", update: {video: {volume: a.level, muted: a.muted}}}, this.c);
            Rc(this, {type: "event", targetName: "video", event: {type: "volumechange"}}, this.c)
          };
          k.Ed = function (a) {
            var b = Cc(a.data);
            switch (b.type) {
              case "init":
                Qc(this, b.initState, b.appData);
                this.Hb();
                break;
              case "appData":
                this.l(b.appData);
                break;
              case "set":
                var c = b.targetName, d = b.property, e = b.value;
                if ("video" == c) if (b = cast.receiver.CastReceiverManager.getInstance(), "volume" == d) {
                  b.setSystemVolumeLevel(e);
                  break
                } else if ("muted" == d) {
                  b.setSystemVolumeMuted(e);
                  break
                }
                this.j[c][d] = e;
                break;
              case "call":
                c = b.targetName;
                d = b.methodName;
                e = b.args;
                c = this.j[c];
                c[d].apply(c, e);
                break;
              case "asyncCall":
                c = b.targetName,
                  d = b.methodName, e = b.args, b = b.id, a = a.senderId, c = this.j[c], c[d].apply(c, e).then(this.zc.bind(this, a, b, null), this.zc.bind(this, a, b))
            }
          };
          k.rd = function (a) {
            var b = Cc(a.data);
            switch (b.type) {
              case "PLAY":
                this.a.play();
                Pc(this, 0);
                break;
              case "PAUSE":
                this.a.pause();
                Pc(this, 0);
                break;
              case "SEEK":
                a = b.currentTime;
                var c = b.resumeState;
                null != a && (this.a.currentTime = Number(a));
                c && "PLAYBACK_START" == c ? (this.a.play(), Pc(this, 0)) : c && "PLAYBACK_PAUSE" == c && (this.a.pause(), Pc(this, 0));
                break;
              case "STOP":
                this.b.qb().then(function () {
                  Pc(this, 0)
                }.bind(this));
                break;
              case "GET_STATUS":
                Pc(this, Number(b.requestId));
                break;
              case "VOLUME":
                c = b.volume;
                a = c.level;
                var c = c.muted,
                  d = this.a.volume, e = this.a.muted;
                null != a && (this.a.volume = Number(a));
                null != c && (this.a.muted = c);
                d == this.a.volume && e == this.a.muted || Pc(this, 0);
                break;
              case "LOAD":
                c = b.media.contentId;
                a = b.currentTime;
                var f = this.m(c);
                this.a.autoplay = !0;
                this.b.load(f, a).then(function () {
                  Pc(this, 0, {contentId: f, streamType: this.b.P() ? "LIVE" : "BUFFERED", contentType: ""})
                }.bind(this))["catch"](function (a) {
                  var c = "LOAD_FAILED";
                  7 == a.category && 7E3 == a.code && (c = "LOAD_CANCELLED");
                  Rc(this, {requestId: Number(b.requestId), type: c}, this.g)
                }.bind(this));
                break;
              default:
                Rc(this, {requestId: Number(b.requestId), type: "INVALID_REQUEST", reason: "INVALID_COMMAND"}, this.g)
            }
          };
          k.zc = function (a, b, c) {
            Rc(this, {type: "asyncComplete", id: b, error: c}, this.c, a)
          };

          function Rc(a, b, c, d) {
            a.i && (a = Bc(b), d ? c.getCastChannel(d).send(a) : c.broadcast(a))
          }

          function Pc(a, b, c) {
            var d = Sc, d = {
              mediaSessionId: 0,
              playbackRate: a.a.playbackRate,
              playerState: a.f ? d.IDLE : a.b.Na ? d.Gc : a.a.paused ? d.Hc : d.Ic,
              currentTime: a.a.currentTime,
              supportedMediaCommands: 15,
              volume: {level: a.a.volume, muted: a.a.muted}
            };
            c && (d.media = c);
            Rc(a, {requestId: b, type: "MEDIA_STATUS", status: [d]}, a.g)
          }

          var Sc = {IDLE: "IDLE", Ic: "PLAYING", Gc: "BUFFERING", Hc: "PAUSED"};

          function Tc(a, b) {
            var c = J(a, b);
            return 1 != c.length ? null : c[0]
          }

          function J(a, b) {
            return Array.prototype.filter.call(a.childNodes, function (a) {
              return a.tagName == b
            })
          }

          function Uc(a) {
            var b = a.firstChild;
            return b && b.nodeType == Node.TEXT_NODE ? a.textContent.trim() : null
          }

          function K(a, b, c, d) {
            var e = null;
            a = a.getAttribute(b);
            null != a && (e = c(a));
            return null == e ? void 0 != d ? d : null : e
          }

          function Vc(a) {
            if (!a) return null;
            /^\d+\-\d+\-\d+T\d+:\d+:\d+(\.\d+)?$/.test(a) && (a += "Z");
            a = Date.parse(a);
            return isNaN(a) ? null : Math.floor(a / 1E3)
          }

          function Wc(a) {
            if (!a) return null;
            a = /^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(a);
            if (!a) return null;
            a = 31536E3 * Number(a[1] || null) + 2592E3 * Number(a[2] || null) + 86400 * Number(a[3] || null) + 3600 * Number(a[4] || null) + 60 * Number(a[5] || null) + Number(a[6] || null);
            return isFinite(a) ? a : null
          }

          function Xc(a) {
            var b = /([0-9]+)-([0-9]+)/.exec(a);
            if (!b) return null;
            a = Number(b[1]);
            if (!isFinite(a)) return null;
            b = Number(b[2]);
            return isFinite(b) ? {start: a, end: b} : null
          }

          function Yc(a) {
            a = Number(a);
            return a % 1 ? null : a
          }

          function Zc(a) {
            a = Number(a);
            return !(a % 1) && 0 < a ? a : null
          }

          function $c(a) {
            a = Number(a);
            return !(a % 1) && 0 <= a ? a : null
          }

          function ad(a) {
            var b;
            a = (b = a.match(/^(\d+)\/(\d+)$/)) ? Number(b[1] / b[2]) : Number(a);
            return isNaN(a) ? null : a
          };var bd = {
            "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
            "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
            "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
            "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime"
          };

          function cd(a, b, c) {
            a = dd(a);
            var d = null, e = [], f = [], g = a.map(function (a) {
              return a.keyId
            }).filter(Da);
            if (g.length && 1 < g.filter(Ea).length) throw new v(2, 4, 4010);
            c || (f = a.filter(function (a) {
              return "urn:mpeg:dash:mp4protection:2011" == a.yc ? (d = a.init || d, !1) : !0
            }), f.length && (e = ed(d, b, f), e.length || (e = [Qa("", d)])));
            !a.length || !c && f.length || (e = Ta(bd).map(function (a) {
              return Qa(a, d)
            }));
            var h = g[0] || null;
            h && e.forEach(function (a) {
              a.initData.forEach(function (a) {
                a.keyId = h
              })
            });
            return {Yb: h, Ne: d, drmInfos: e, $b: !0}
          }

          function fd(a, b, c, d) {
            var e = cd(a, b, d);
            if (c.$b) {
              a = 1 == c.drmInfos.length && !c.drmInfos[0].keySystem;
              b = !e.drmInfos.length;
              if (!c.drmInfos.length || a && !b) c.drmInfos = e.drmInfos;
              c.$b = !1
            } else if (0 < e.drmInfos.length && (c.drmInfos = c.drmInfos.filter(function (a) {
                return e.drmInfos.some(function (b) {
                  return b.keySystem == a.keySystem
                })
              }), !c.drmInfos.length)) throw new v(2, 4, 4008);
            return e.Yb || c.Yb
          }

          function ed(a, b, c) {
            return c.map(function (c) {
              var d = bd[c.yc];
              return d ? [Qa(d, c.init || a)] : b(c.node) || []
            }).reduce(z, [])
          }

          function dd(a) {
            return a.map(function (a) {
              var b = a.getAttribute("schemeIdUri"), d = a.getAttribute("cenc:default_KID"),
                e = J(a, "cenc:pssh").map(Uc);
              if (!b) return null;
              b = b.toLowerCase();
              if (d && (d = d.replace(/-/g, "").toLowerCase(), 0 <= d.indexOf(" "))) throw new v(2, 4, 4009);
              var f = [];
              try {
                f = e.map(function (a) {
                  return {initDataType: "cenc", initData: fb(a), keyId: null}
                })
              } catch (g) {
                throw new v(2, 4, 4007);
              }
              return {node: a, yc: b, keyId: d, init: 0 < f.length ? f : null}
            }).filter(Da)
          };

          function gd(a, b, c, d, e) {
            null != e && (e = Math.round(e));
            var f = {RepresentationID: b, Number: c, Bandwidth: d, Time: e};
            return a.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\$/g, function (a, b, c) {
              if ("$$" == a) return "$";
              var d = f[b];
              if (null == d) return a;
              "RepresentationID" == b && c && (c = void 0);
              a = d.toString();
              c = window.parseInt(c, 10) || 1;
              return Array(Math.max(0, c - a.length) + 1).join("0") + a
            })
          }

          function hd(a, b) {
            var c = id(a, b, "timescale"), d = 1;
            c && (d = Zc(c) || 1);
            c = id(a, b, "duration");
            (c = Zc(c || "")) && (c /= d);
            var e = id(a, b, "startNumber"), f = id(a, b, "presentationTimeOffset"), g = $c(e || "");
            if (null == e || null == g) g = 1;
            var h = jd(a, b, "SegmentTimeline"), e = null;
            if (h) {
              for (var e = d, l = Number(f), m = a.R.duration || Infinity, h = J(h, "S"), q = [], w = 0, x = 0; x < h.length; ++x) {
                var r = h[x], u = K(r, "t", $c), t = K(r, "d", $c), r = K(r, "r", Yc);
                null != u && (u -= l);
                if (!t) break;
                u = null != u ? u : w;
                r = r || 0;
                if (0 > r) if (x + 1 < h.length) {
                  r = K(h[x + 1], "t", $c);
                  if (null == r) break;
                  else if (u >= r) break;
                  r = Math.ceil((r - u) / t) - 1
                } else {
                  if (Infinity == m) break; else if (u / e >= m) break;
                  r = Math.ceil((m * e - u) / t) - 1
                }
                0 < q.length && u != w && (q[q.length - 1].end = u / e);
                for (var Fa = 0; Fa <= r; ++Fa) w = u + t, q.push({start: u / e, end: w / e, Ee: u}), u = w
              }
              e = q
            }
            return {timescale: d, O: c, za: g, presentationTimeOffset: Number(f) / d || 0, Ub: Number(f), H: e}
          }

          function id(a, b, c) {
            return [b(a.A), b(a.U), b(a.W)].filter(Da).map(function (a) {
              return a.getAttribute(c)
            }).reduce(function (a, b) {
              return a || b
            })
          }

          function jd(a, b, c) {
            return [b(a.A), b(a.U), b(a.W)].filter(Da).map(function (a) {
              return Tc(a, c)
            }).reduce(function (a, b) {
              return a || b
            })
          }

          function kd(a, b) {
            var c = new DOMParser;
            try {
              var d = E(a);
              var e = c.parseFromString(d, "text/xml")
            } catch (g) {
            }
            if (e && e.documentElement.tagName == b) var f = e.documentElement;
            return f && 0 < f.getElementsByTagName("parsererror").length ? null : f
          }

          function ld(a, b, c, d, e, f) {
            for (var g = a.getAttribute("xlink:href"), h = a.getAttribute("xlink:actuate") || "onRequest", l = 0; l < a.attributes.length; l++) {
              var m = a.attributes[l].nodeName;
              -1 != m.indexOf("xlink:") && (a.removeAttribute(m), --l)
            }
            if (5 <= f) return Promise.reject(new v(2, 4, 4028));
            if ("onLoad" != h) return Promise.reject(new v(2, 4, 4027));
            var q = D([d], [g]);
            return e.request(0, Ha(q, b)).then(function (d) {
              d = kd(d.data, a.tagName);
              if (!d) return Promise.reject(new v(2, 4, 4001, g));
              for (; a.childNodes.length;) a.removeChild(a.childNodes[0]);
              for (; d.childNodes.length;) {
                var h = d.childNodes[0];
                d.removeChild(h);
                a.appendChild(h)
              }
              for (h = 0; h < d.attributes.length; h++) {
                var l = d.attributes[h].nodeName, m = d.getAttribute(l);
                a.setAttribute(l, m)
              }
              return md(a, b, c, q[0], e, f + 1)
            }.bind(a))
          }

          function md(a, b, c, d, e, f) {
            f = f || 0;
            if (a.getAttribute("xlink:href")) {
              var g = ld(a, b, c, d, e, f);
              c && (g = g["catch"](function () {
                return md(a, b, c, d, e, f)
              }));
              return g
            }
            for (g = 0; g < a.childNodes.length; g++) {
              var h = a.childNodes[g];
              h instanceof Element && "urn:mpeg:dash:resolve-to-zero:2013" == h.getAttribute("xlink:href") && (a.removeChild(h), --g)
            }
            for (var l = [], g = 0; g < a.childNodes.length; g++) h = a.childNodes[g], h.nodeType == Node.ELEMENT_NODE && (h = md(h, b, c, d, e, f), l.push(h));
            return Promise.all(l).then(function () {
              return a
            })
          };

          function nd(a, b, c) {
            this.a = a;
            this.V = b;
            this.K = c
          }

          n("shaka.media.InitSegmentReference", nd);

          function L(a, b, c, d, e, f) {
            this.position = a;
            this.startTime = b;
            this.endTime = c;
            this.a = d;
            this.V = e;
            this.K = f
          }

          n("shaka.media.SegmentReference", L);

          function M(a, b) {
            this.N = a;
            this.a = b == od;
            this.v = 0
          }

          n("shaka.util.DataViewReader", M);
          var od = 1;
          M.Endianness = {Je: 0, Le: od};
          M.prototype.ba = function () {
            return this.v < this.N.byteLength
          };
          M.prototype.hasMoreData = M.prototype.ba;
          M.prototype.$c = function () {
            return this.v
          };
          M.prototype.getPosition = M.prototype.$c;
          M.prototype.Vc = function () {
            return this.N.byteLength
          };
          M.prototype.getLength = M.prototype.Vc;
          M.prototype.Jb = function () {
            try {
              var a = this.N.getUint8(this.v)
            } catch (b) {
              pd()
            }
            this.v += 1;
            return a
          };
          M.prototype.readUint8 = M.prototype.Jb;
          M.prototype.tc = function () {
            try {
              var a = this.N.getUint16(this.v, this.a)
            } catch (b) {
              pd()
            }
            this.v += 2;
            return a
          };
          M.prototype.readUint16 = M.prototype.tc;
          M.prototype.D = function () {
            try {
              var a = this.N.getUint32(this.v, this.a)
            } catch (b) {
              pd()
            }
            this.v += 4;
            return a
          };
          M.prototype.readUint32 = M.prototype.D;
          M.prototype.sc = function () {
            try {
              var a = this.N.getInt32(this.v, this.a)
            } catch (b) {
              pd()
            }
            this.v += 4;
            return a
          };
          M.prototype.readInt32 = M.prototype.sc;
          M.prototype.Ta = function () {
            try {
              if (this.a) {
                var a = this.N.getUint32(this.v, !0);
                var b = this.N.getUint32(this.v + 4, !0)
              } else b = this.N.getUint32(this.v, !1), a = this.N.getUint32(this.v + 4, !1)
            } catch (c) {
              pd()
            }
            if (2097151 < b) throw new v(2, 3, 3001);
            this.v += 8;
            return b * Math.pow(2, 32) + a
          };
          M.prototype.readUint64 = M.prototype.Ta;
          M.prototype.Ja = function (a) {
            this.v + a > this.N.byteLength && pd();
            var b = qd(this, this.v, this.v + a);
            this.v += a;
            return new Uint8Array(b)
          };
          M.prototype.readBytes = M.prototype.Ja;
          M.prototype.I = function (a) {
            this.v + a > this.N.byteLength && pd();
            this.v += a
          };
          M.prototype.skip = M.prototype.I;
          M.prototype.Ib = function () {
            for (var a = this.v; this.ba() && this.N.getUint8(this.v);) this.v += 1;
            a = qd(this, a, this.v);
            this.v += 1;
            return E(a)
          };
          M.prototype.readTerminatedString = M.prototype.Ib;

          function pd() {
            throw new v(2, 3, 3E3);
          }

          function qd(a, b, c) {
            var d = new Uint8Array(c - b);
            d.set(new Uint8Array(a.N.buffer, b, c - b));
            return d.buffer
          };

          function N() {
            this.b = [];
            this.a = []
          }

          n("shaka.util.Mp4Parser", N);
          N.prototype.G = function (a, b) {
            var c = rd(a);
            this.b[c] = 0;
            this.a[c] = b;
            return this
          };
          N.prototype.box = N.prototype.G;
          N.prototype.aa = function (a, b) {
            var c = rd(a);
            this.b[c] = 1;
            this.a[c] = b;
            return this
          };
          N.prototype.fullBox = N.prototype.aa;
          N.prototype.parse = function (a) {
            for (a = new M(new DataView(a), 0); a.ba();) this.nb(0, a)
          };
          N.prototype.parse = N.prototype.parse;
          N.prototype.nb = function (a, b) {
            var c = b.v, d = b.D(), e = b.D();
            switch (d) {
              case 0:
                d = b.N.byteLength - c;
                break;
              case 1:
                d = b.Ta()
            }
            var f = this.a[e];
            if (f) {
              var g = null, h = null;
              1 == this.b[e] && (h = b.D(), g = h >>> 24, h &= 16777215);
              e = c + d - b.v;
              e = 0 < e ? b.Ja(e).buffer : new ArrayBuffer(0);
              e = new M(new DataView(e), 0);
              f({Ra: this, version: g, ac: h, u: e, size: d, start: c + a})
            } else b.I(c + d - b.v)
          };
          N.prototype.parseNext = N.prototype.nb;

          function O(a) {
            for (; a.u.ba();) a.Ra.nb(a.start, a.u)
          }

          N.children = O;

          function sd(a) {
            for (var b = a.u.D(); 0 < b; --b) a.Ra.nb(a.start, a.u)
          }

          N.sampleDescription = sd;

          function td(a) {
            return function (b) {
              a(b.u.Ja(b.u.N.byteLength - b.u.v))
            }
          }

          N.allData = td;

          function rd(a) {
            for (var b = 0, c = 0; c < a.length; c++) b = b << 8 | a.charCodeAt(c);
            return b
          };

          function ud(a, b, c, d) {
            var e, f = (new N).aa("sidx", function (a) {
              e = vd(b, d, c, a)
            });
            a && f.parse(a);
            if (e) return e;
            throw new v(2, 3, 3004);
          }

          function vd(a, b, c, d) {
            var e = [];
            d.u.I(4);
            var f = d.u.D();
            if (!f) throw new v(2, 3, 3005);
            if (d.version) {
              var g = d.u.Ta();
              var h = d.u.Ta()
            } else g = d.u.D(), h = d.u.D();
            d.u.I(2);
            var l = d.u.tc();
            b = g - b;
            a = a + d.size + h;
            for (h = 0; h < l; h++) {
              var m = d.u.D();
              g = (m & 2147483648) >>> 31;
              var m = m & 2147483647, q = d.u.D();
              d.u.I(4);
              if (1 == g) throw new v(2, 3, 3006);
              e.push(new L(e.length, b / f, (b + q) / f, function () {
                return c
              }, a, a + m - 1));
              b += q;
              a += m
            }
            return e
          };

          function P(a) {
            this.a = a
          }

          n("shaka.media.SegmentIndex", P);
          P.prototype.o = function () {
            this.a = null;
            return Promise.resolve()
          };
          P.prototype.destroy = P.prototype.o;
          P.prototype.find = function (a) {
            for (var b = this.a.length - 1; 0 <= b; --b) {
              var c = this.a[b];
              if (a >= c.startTime && a < c.endTime) return c.position
            }
            return this.a.length && a < this.a[0].startTime ? this.a[0].position : null
          };
          P.prototype.find = P.prototype.find;
          P.prototype.get = function (a) {
            if (!this.a.length) return null;
            a -= this.a[0].position;
            return 0 > a || a >= this.a.length ? null : this.a[a]
          };
          P.prototype.get = P.prototype.get;
          P.prototype.lb = function (a) {
            for (var b, c, d, e = [], f = b = 0; b < this.a.length && f < a.length;) c = this.a[b], d = a[f], c.startTime < d.startTime ? (e.push(c), b++) : (c.startTime > d.startTime || (.1 < Math.abs(c.endTime - d.endTime) ? (d = new L(c.position, d.startTime, d.endTime, d.a, d.V, d.K), e.push(d)) : e.push(c), b++), f++);
            for (; b < this.a.length;) e.push(this.a[b++]);
            if (e.length) for (b = e[e.length - 1].position + 1; f < a.length;) d = a[f++], d = new L(b++, d.startTime, d.endTime, d.a, d.V, d.K), e.push(d); else e = a;
            this.a = e
          };
          P.prototype.merge = P.prototype.lb;
          P.prototype.wb = function (a) {
            for (var b = 0; b < this.a.length && !(this.a[b].endTime > a); ++b) ;
            this.a.splice(0, b)
          };
          P.prototype.evict = P.prototype.wb;

          function wd(a, b) {
            if (a.a.length) {
              var c = a.a[a.a.length - 1];
              c.startTime > b || (a.a[a.a.length - 1] = new L(c.position, c.startTime, b, c.a, c.V, c.K))
            }
          };

          function xd(a) {
            this.b = a;
            this.a = new M(a, 0);
            yd || (yd = [new Uint8Array([255]), new Uint8Array([127, 255]), new Uint8Array([63, 255, 255]), new Uint8Array([31, 255, 255, 255]), new Uint8Array([15, 255, 255, 255, 255]), new Uint8Array([7, 255, 255, 255, 255, 255]), new Uint8Array([3, 255, 255, 255, 255, 255, 255]), new Uint8Array([1, 255, 255, 255, 255, 255, 255, 255])])
          }

          var yd;
          xd.prototype.ba = function () {
            return this.a.ba()
          };

          function zd(a) {
            var b = Ad(a);
            if (7 < b.length) throw new v(2, 3, 3002);
            for (var c = 0, d = 0; d < b.length; d++) c = 256 * c + b[d];
            b = c;
            c = Ad(a);
            a:{
              for (d = 0; d < yd.length; d++) if (ib(c, yd[d])) {
                d = !0;
                break a
              }
              d = !1
            }
            if (d) c = a.b.byteLength - a.a.v; else {
              if (8 == c.length && c[1] & 224) throw new v(2, 3, 3001);
              for (var d = c[0] & (1 << 8 - c.length) - 1, e = 1; e < c.length; e++) d = 256 * d + c[e];
              c = d
            }
            c = a.a.v + c <= a.b.byteLength ? c : a.b.byteLength - a.a.v;
            d = new DataView(a.b.buffer, a.b.byteOffset + a.a.v, c);
            a.a.I(c);
            return new Bd(b, d)
          }

          function Ad(a) {
            var b = a.a.Jb(), c;
            for (c = 1; 8 >= c && !(b & 1 << 8 - c); c++) ;
            if (8 < c) throw new v(2, 3, 3002);
            var d = new Uint8Array(c);
            d[0] = b;
            for (b = 1; b < c; b++) d[b] = a.a.Jb();
            return d
          }

          function Bd(a, b) {
            this.id = a;
            this.a = b
          }

          function Cd(a) {
            if (8 < a.a.byteLength) throw new v(2, 3, 3002);
            if (8 == a.a.byteLength && a.a.getUint8(0) & 224) throw new v(2, 3, 3001);
            for (var b = 0, c = 0; c < a.a.byteLength; c++) var d = a.a.getUint8(c), b = 256 * b + d;
            return b
          };

          function Dd() {
          }

          Dd.prototype.parse = function (a, b, c, d) {
            var e;
            b = new xd(new DataView(b));
            if (440786851 != zd(b).id) throw new v(2, 3, 3008);
            var f = zd(b);
            if (408125543 != f.id) throw new v(2, 3, 3009);
            b = f.a.byteOffset;
            f = new xd(f.a);
            for (e = null; f.ba();) {
              var g = zd(f);
              if (357149030 == g.id) {
                e = g;
                break
              }
            }
            if (!e) throw new v(2, 3, 3010);
            f = new xd(e.a);
            e = 1E6;
            for (g = null; f.ba();) {
              var h = zd(f);
              if (2807729 == h.id) e = Cd(h); else if (17545 == h.id) if (g = h, 4 == g.a.byteLength) g = g.a.getFloat32(0); else if (8 == g.a.byteLength) g = g.a.getFloat64(0); else throw new v(2, 3, 3003);
            }
            if (null == g) throw new v(2, 3, 3011);
            f = e / 1E9;
            e = g * f;
            a = zd(new xd(new DataView(a)));
            if (475249515 != a.id) throw new v(2, 3, 3007);
            return Ed(a, b, f, e, c, d)
          };

          function Ed(a, b, c, d, e, f) {
            function g() {
              return e
            }

            var h = [];
            a = new xd(a.a);
            for (var l = -1, m = -1; a.ba();) {
              var q = zd(a);
              if (187 == q.id) {
                var w = Fd(q);
                w && (q = c * (w.Fe - f), w = b + w.Wd, 0 <= l && h.push(new L(h.length, l, q, g, m, w - 1)), l = q, m = w)
              }
            }
            0 <= l && h.push(new L(h.length, l, d, g, m, null));
            return h
          }

          function Fd(a) {
            var b = new xd(a.a);
            a = zd(b);
            if (179 != a.id) throw new v(2, 3, 3013);
            a = Cd(a);
            b = zd(b);
            if (183 != b.id) throw new v(2, 3, 3012);
            for (var b = new xd(b.a), c = 0; b.ba();) {
              var d = zd(b);
              if (241 == d.id) {
                c = Cd(d);
                break
              }
            }
            return {Fe: a, Wd: c}
          };

          function Gd(a, b) {
            var c = jd(a, b, "Initialization");
            if (!c) return null;
            var d = a.A.X, e = c.getAttribute("sourceURL");
            e && (d = D(a.A.X, [e]));
            var e = 0, f = null;
            if (c = K(c, "range", Xc)) e = c.start, f = c.end;
            return new nd(function () {
              return d
            }, e, f)
          }

          function Hd(a, b) {
            var c = id(a, Id, "presentationTimeOffset"), d = Gd(a, Id);
            var e = Number(c);
            var f = a.A.contentType, g = a.A.mimeType.split("/")[1];
            if ("text" != f && "mp4" != g && "webm" != g) throw new v(2, 4, 4006);
            if ("webm" == g && !d) throw new v(2, 4, 4005);
            var f = jd(a, Id, "RepresentationIndex"), h = id(a, Id, "indexRange"), l = a.A.X, h = Xc(h || "");
            if (f) {
              var m = f.getAttribute("sourceURL");
              m && (l = D(a.A.X, [m]));
              h = K(f, "range", Xc, h)
            }
            if (!h) throw new v(2, 4, 4002);
            e = Jd(a, b, d, l, h.start, h.end, g, e);
            return {
              createSegmentIndex: e.createSegmentIndex,
              findSegmentPosition: e.findSegmentPosition,
              getSegmentReference: e.getSegmentReference,
              initSegmentReference: d,
              presentationTimeOffset: Number(c) || 0
            }
          }

          function Jd(a, b, c, d, e, f, g, h) {
            var l = a.presentationTimeline, m = !a.Ca || !a.R.yb, q = a.R.duration, w = b, x = null;
            return {
              createSegmentIndex: function () {
                var a = [w(d, e, f), "webm" == g ? w(c.a(), c.V, c.K) : null];
                w = null;
                return Promise.all(a).then(function (a) {
                  var b = a[0];
                  a = a[1] || null;
                  b = "mp4" == g ? ud(b, e, d, h) : (new Dd).parse(b, a, d, h);
                  l.Ga(0, b);
                  x = new P(b);
                  m && wd(x, q)
                })
              }, findSegmentPosition: function (a) {
                return x.find(a)
              }, getSegmentReference: function (a) {
                return x.get(a)
              }
            }
          }

          function Id(a) {
            return a.Ua
          };

          function Kd(a, b) {
            var c = Gd(a, Ld);
            var d = Md(a);
            var e = hd(a, Ld), f = e.za;
            f || (f = 1);
            var g = 0;
            e.O ? g = e.O * (f - 1) : e.H && 0 < e.H.length && (g = e.H[0].start);
            d = {O: e.O, startTime: g, za: f, presentationTimeOffset: e.presentationTimeOffset, H: e.H, Fa: d};
            if (!d.O && !d.H && 1 < d.Fa.length) throw new v(2, 4, 4002);
            if (!d.O && !a.R.duration && !d.H && 1 == d.Fa.length) throw new v(2, 4, 4002);
            if (d.H && !d.H.length) throw new v(2, 4, 4002);
            f = e = null;
            a.W.id && a.A.id && (f = a.W.id + "," + a.A.id, e = b[f]);
            g = Nd(a.R.duration, d.za, a.A.X, d);
            e ? (e.lb(g), e.wb(a.presentationTimeline.ia() -
              a.R.start)) : (a.presentationTimeline.Ga(0, g), e = new P(g), f && a.Ca && (b[f] = e));
            a.Ca && a.R.yb || wd(e, a.R.duration);
            return {
              createSegmentIndex: Promise.resolve.bind(Promise),
              findSegmentPosition: e.find.bind(e),
              getSegmentReference: e.get.bind(e),
              initSegmentReference: c,
              presentationTimeOffset: d.presentationTimeOffset
            }
          }

          function Ld(a) {
            return a.pa
          }

          function Nd(a, b, c, d) {
            var e = d.Fa.length;
            d.H && d.H.length != d.Fa.length && (e = Math.min(d.H.length, d.Fa.length));
            for (var f = [], g = d.startTime, h = 0; h < e; h++) {
              var l = d.Fa[h], m = D(c, [l.md]);
              var q = null != d.O ? g + d.O : d.H ? d.H[h].end : g + a;
              f.push(new L(h + b, g, q, function (a) {
                return a
              }.bind(null, m), l.start, l.end));
              g = q
            }
            return f
          }

          function Md(a) {
            return [a.A.pa, a.U.pa, a.W.pa].filter(Da).map(function (a) {
              return J(a, "SegmentURL")
            }).reduce(function (a, c) {
              return 0 < a.length ? a : c
            }).map(function (b) {
              b.getAttribute("indexRange") && !a.ec && (a.ec = !0);
              var c = b.getAttribute("media");
              b = K(b, "mediaRange", Xc, {start: 0, end: null});
              return {md: c, start: b.start, end: b.end}
            })
          };

          function Od(a, b, c, d) {
            var e = Pd(a);
            var f = hd(a, Qd);
            var g = id(a, Qd, "media"), h = id(a, Qd, "index");
            f = {
              O: f.O,
              timescale: f.timescale,
              za: f.za,
              presentationTimeOffset: f.presentationTimeOffset,
              Ub: f.Ub,
              H: f.H,
              Bb: g,
              Qa: h
            };
            g = 0 + (f.Qa ? 1 : 0);
            g += f.H ? 1 : 0;
            g += f.O ? 1 : 0;
            if (!g) throw new v(2, 4, 4002);
            1 != g && (f.Qa && (f.H = null), f.O = null);
            if (!f.Qa && !f.Bb) throw new v(2, 4, 4002);
            if (f.Qa) {
              c = a.A.mimeType.split("/")[1];
              if ("mp4" != c && "webm" != c) throw new v(2, 4, 4006);
              if ("webm" == c && !e) throw new v(2, 4, 4005);
              d = gd(f.Qa, a.A.id, null, a.bandwidth || null,
                null);
              d = D(a.A.X, [d]);
              a = Jd(a, b, e, d, 0, null, c, f.presentationTimeOffset)
            } else f.O ? (d || a.presentationTimeline.Cb(f.O), a = Rd(a, f)) : (d = b = null, a.W.id && a.A.id && (d = a.W.id + "," + a.A.id, b = c[d]), g = Sd(a, f), b ? (b.lb(g), b.wb(a.presentationTimeline.ia() - a.R.start)) : (a.presentationTimeline.Ga(0, g), b = new P(g), d && a.Ca && (c[d] = b)), a.Ca && a.R.yb || wd(b, a.R.duration), a = {
              createSegmentIndex: Promise.resolve.bind(Promise),
              findSegmentPosition: b.find.bind(b),
              getSegmentReference: b.get.bind(b)
            });
            return {
              createSegmentIndex: a.createSegmentIndex,
              findSegmentPosition: a.findSegmentPosition,
              getSegmentReference: a.getSegmentReference,
              initSegmentReference: e,
              presentationTimeOffset: f.presentationTimeOffset
            }
          }

          function Qd(a) {
            return a.Va
          }

          function Rd(a, b) {
            var c = a.R.duration, d = b.O, e = b.za, f = b.timescale, g = b.Bb, h = a.bandwidth || null, l = a.A.id,
              m = a.A.X;
            return {
              createSegmentIndex: Promise.resolve.bind(Promise), findSegmentPosition: function (a) {
                return 0 > a || c && a >= c ? null : Math.floor(a / d)
              }, getSegmentReference: function (a) {
                var b = a * d;
                return 0 > b || c && b >= c ? null : new L(a, b, b + d, function () {
                  var c = gd(g, l, a + e, h, b * f);
                  return D(m, [c])
                }, 0, null)
              }
            }
          }

          function Sd(a, b) {
            for (var c = [], d = 0; d < b.H.length; d++) {
              var e = d + b.za;
              c.push(new L(e, b.H[d].start, b.H[d].end, function (a, b, c, d, e, q) {
                a = gd(a, b, e, c, q);
                return D(d, [a]).map(function (a) {
                  return a.toString()
                })
              }.bind(null, b.Bb, a.A.id, a.bandwidth || null, a.A.X, e, b.H[d].Ee + b.Ub), 0, null))
            }
            return c
          }

          function Pd(a) {
            var b = id(a, Qd, "initialization");
            if (!b) return null;
            var c = a.A.id, d = a.bandwidth || null, e = a.A.X;
            return new nd(function () {
              var a = gd(b, c, null, d, null);
              return D(e, [a])
            }, 0, null)
          };var Td = {}, Ud = {};
          n("shaka.media.ManifestParser.registerParserByExtension", function (a, b) {
            Ud[a] = b
          });
          n("shaka.media.ManifestParser.registerParserByMime", function (a, b) {
            Td[a] = b
          });

          function Vd() {
            var a = {}, b;
            for (b in Td) a[b] = !0;
            for (b in Ud) a[b] = !0;
            ["application/dash+xml", "application/x-mpegurl", "application/vnd.apple.mpegurl", "application/vnd.ms-sstr+xml"].forEach(function (b) {
              a[b] = !!Td[b]
            });
            ["mpd", "m3u8", "ism"].forEach(function (b) {
              a[b] = !!Ud[b]
            });
            return a
          }

          function Wd(a, b, c, d) {
            var e = d;
            e || (d = (new ia(a)).$.split("/").pop().split("."), 1 < d.length && (d = d.pop().toLowerCase(), e = Ud[d]));
            if (e) return Promise.resolve(e);
            c = Ha([a], c);
            c.method = "HEAD";
            return b.request(0, c).then(function (b) {
              (b = b.headers["content-type"]) && (b = b.toLowerCase());
              return (e = Td[b]) ? e : Promise.reject(new v(2, 4, 4E3, a))
            }, function (a) {
              a.severity = 2;
              return Promise.reject(a)
            })
          };

          function Q(a, b) {
            this.c = a;
            this.j = b;
            this.f = this.a = Infinity;
            this.b = 1;
            this.i = 0;
            this.h = !0;
            this.g = 0
          }

          n("shaka.media.PresentationTimeline", Q);
          Q.prototype.Y = function () {
            return this.a
          };
          Q.prototype.getDuration = Q.prototype.Y;
          Q.prototype.ea = function (a) {
            this.a = a
          };
          Q.prototype.setDuration = Q.prototype.ea;
          Q.prototype.ad = function () {
            return this.c
          };
          Q.prototype.getPresentationStartTime = Q.prototype.ad;
          Q.prototype.Bc = function (a) {
            this.i = a
          };
          Q.prototype.setClockOffset = Q.prototype.Bc;
          Q.prototype.ob = function (a) {
            this.h = a
          };
          Q.prototype.setStatic = Q.prototype.ob;
          Q.prototype.cd = function () {
            return this.f
          };
          Q.prototype.getSegmentAvailabilityDuration = Q.prototype.cd;
          Q.prototype.Dc = function (a) {
            this.f = a
          };
          Q.prototype.setSegmentAvailabilityDuration = Q.prototype.Dc;
          Q.prototype.Cc = function (a) {
            this.j = a
          };
          Q.prototype.setDelay = Q.prototype.Cc;
          Q.prototype.Ga = function (a, b) {
            b.length && (this.b = b.reduce(function (a, b) {
              return Math.max(a, b.endTime - b.startTime)
            }, this.b))
          };
          Q.prototype.notifySegments = Q.prototype.Ga;
          Q.prototype.Cb = function (a) {
            this.b = Math.max(this.b, a)
          };
          Q.prototype.notifyMaxSegmentDuration = Q.prototype.Cb;
          Q.prototype.P = function () {
            return Infinity == this.a && !this.h
          };
          Q.prototype.isLive = Q.prototype.P;
          Q.prototype.wa = function () {
            return Infinity != this.a && !this.h
          };
          Q.prototype.isInProgress = Q.prototype.wa;
          Q.prototype.ia = function () {
            return this.Da(0)
          };
          Q.prototype.getSegmentAvailabilityStart = Q.prototype.ia;
          Q.prototype.Da = function (a) {
            if (Infinity == this.f) return this.g;
            var b = this.va();
            return Math.max(this.g, Math.min(b - this.f + a, b))
          };
          Q.prototype.getSafeAvailabilityStart = Q.prototype.Da;
          Q.prototype.Ac = function (a) {
            this.g = a
          };
          Q.prototype.setAvailabilityStart = Q.prototype.Ac;
          Q.prototype.va = function () {
            return this.P() || this.wa() ? Math.min(Math.max(0, (Date.now() + this.i) / 1E3 - this.b - this.c), this.a) : this.a
          };
          Q.prototype.getSegmentAvailabilityEnd = Q.prototype.va;
          Q.prototype.kb = function () {
            return Math.max(0, this.va() - (this.P() || this.wa() ? this.j : 0))
          };
          Q.prototype.getSeekRangeEnd = Q.prototype.kb;

          function Xd() {
            this.a = this.b = null;
            this.g = [];
            this.c = null;
            this.i = [];
            this.h = 1;
            this.j = {};
            this.l = 0;
            this.f = null
          }

          n("shaka.dash.DashParser", Xd);
          k = Xd.prototype;
          k.configure = function (a) {
            this.b = a
          };
          k.start = function (a, b) {
            this.g = [a];
            this.a = b;
            return Yd(this).then(function () {
              this.a && Zd(this, 0);
              return this.c
            }.bind(this))
          };
          k.stop = function () {
            this.b = this.a = null;
            this.g = [];
            this.c = null;
            this.i = [];
            this.j = {};
            null != this.f && (window.clearTimeout(this.f), this.f = null);
            return Promise.resolve()
          };
          k.update = function () {
            Yd(this)["catch"](function (a) {
              if (this.a) this.a.onError(a)
            }.bind(this))
          };
          k.onExpirationUpdated = function () {
          };

          function Yd(a) {
            return a.a.networkingEngine.request(0, Ha(a.g, a.b.retryParameters)).then(function (a) {
              if (this.a) return $d(this, a.data, a.uri)
            }.bind(a))
          }

          function $d(a, b, c) {
            b = kd(b, "MPD");
            if (!b) throw new v(2, 4, 4001, c);
            return md(b, a.b.retryParameters, a.b.dash.xlinkFailGracefully, c, a.a.networkingEngine).then(function (a) {
              return ae(this, a, c)
            }.bind(a))
          }

          function ae(a, b, c) {
            c = [c];
            var d = J(b, "Location").map(Uc).filter(Da);
            0 < d.length && (c = a.g = d);
            d = J(b, "BaseURL").map(Uc);
            c = D(c, d);
            var e = K(b, "minBufferTime", Wc);
            a.l = K(b, "minimumUpdatePeriod", Wc, -1);
            var f = K(b, "availabilityStartTime", Vc), d = K(b, "timeShiftBufferDepth", Wc),
              g = K(b, "suggestedPresentationDelay", Wc), h = K(b, "maxSegmentDuration", Wc),
              l = b.getAttribute("type") || "static";
            if (a.c) var m = a.c.presentationTimeline; else {
              var q = Math.max(10, 1.5 * e);
              m = new Q(f, null != g ? g : q)
            }
            var f = be(a, {
              Ca: "static" != l, presentationTimeline: m,
              W: null, R: null, U: null, A: null, bandwidth: 0, ec: !1
            }, c, b), g = f.duration, w = f.periods;
            m.ob("static" == l);
            m.ea(g || Infinity);
            m.Dc(null != d ? d : Infinity);
            m.Cb(h || 1);
            if (a.c) return Promise.resolve();
            b = J(b, "UTCTiming");
            return ce(a, c, b, m.P()).then(function (a) {
              this.a && (m.Bc(a), this.c = {
                presentationTimeline: m,
                periods: w,
                offlineSessionIds: [],
                minBufferTime: e || 0
              })
            }.bind(a))
          }

          function be(a, b, c, d) {
            var e = K(d, "mediaPresentationDuration", Wc), f = [], g = 0;
            d = J(d, "Period");
            for (var h = 0; h < d.length; h++) {
              var l = d[h], g = K(l, "start", Wc, g), m = K(l, "duration", Wc), q = null;
              if (h != d.length - 1) {
                var w = K(d[h + 1], "start", Wc);
                null != w && (q = w - g)
              } else null != e && (q = e - g);
              null == q && (q = m);
              l = de(a, b, c, {start: g, duration: q, node: l, yb: null == q || h == d.length - 1});
              f.push(l);
              m = b.W.id;
              -1 == a.i.indexOf(m) && (a.i.push(m), a.c && (a.a.filterNewPeriod(l), a.c.periods.push(l)));
              if (null == q) {
                g = null;
                break
              }
              g += q
            }
            a.c || a.a.filterAllPeriods(f);
            return null != e ? {periods: f, duration: e} : {periods: f, duration: g}
          }

          function de(a, b, c, d) {
            b.W = ee(d.node, null, c);
            b.R = d;
            b.W.id || (b.W.id = "__shaka_period_" + d.start);
            J(d.node, "EventStream").forEach(a.Od.bind(a, d.start, d.duration));
            c = J(d.node, "AdaptationSet").map(a.Md.bind(a, b)).filter(Da);
            var e = c.map(function (a) {
              return a.Yd
            }).reduce(z, []), f = e.filter(Ea);
            if (b.Ca && e.length != f.length) throw new v(2, 4, 4018);
            var g = c.filter(function (a) {
              return !a.Tb
            });
            c.filter(function (a) {
              return a.Tb
            }).forEach(function (a) {
              var b = a.streams[0], c = a.Tb;
              g.forEach(function (a) {
                a.id == c && a.streams.forEach(function (a) {
                  a.trickModeVideo =
                    b
                })
              })
            });
            e = fe(g, "video");
            f = fe(g, "audio");
            if (!e.length && !f.length) throw new v(2, 4, 4004);
            f.length || (f = [null]);
            e.length || (e = [null]);
            b = [];
            for (c = 0; c < f.length; c++) for (var h = 0; h < e.length; h++) ge(a, f[c], e[h], b);
            a = fe(g, "text");
            e = [];
            for (c = 0; c < a.length; c++) e.push.apply(e, a[c].streams);
            return {startTime: d.start, textStreams: e, variants: b}
          }

          function fe(a, b) {
            return a.filter(function (a) {
              return a.contentType == b
            })
          }

          function ge(a, b, c, d) {
            if (b || c) if (b && c) {
              var e = b.drmInfos;
              var f = c.drmInfos;
              if (e.length && f.length ? 0 < Ab(e, f).length : 1) for (var g = Ab(b.drmInfos, c.drmInfos), e = 0; e < b.streams.length; e++) for (var h = 0; h < c.streams.length; h++) f = (c.streams[h].bandwidth || 0) + (b.streams[e].bandwidth || 0), f = {
                id: a.h++,
                language: b.language,
                primary: b.Ab || c.Ab,
                audio: b.streams[e],
                video: c.streams[h],
                bandwidth: f,
                drmInfos: g,
                allowedByApplication: !0,
                allowedByKeySystem: !0
              }, d.push(f)
            } else for (g = b || c, e = 0; e < g.streams.length; e++) f = g.streams[e].bandwidth ||
              0, f = {
              id: a.h++,
              language: g.language || "und",
              primary: g.Ab,
              audio: b ? g.streams[e] : null,
              video: c ? g.streams[e] : null,
              bandwidth: f,
              drmInfos: g.drmInfos,
              allowedByApplication: !0,
              allowedByKeySystem: !0
            }, d.push(f)
          }

          k.Md = function (a, b) {
            a.U = ee(b, a.W, null);
            var c = !1, d = J(b, "Role"), e = d.map(function (a) {
              return a.getAttribute("value")
            }).filter(Da), f = void 0;
            "text" == a.U.contentType && (f = "subtitle");
            for (var g = 0; g < d.length; g++) {
              var h = d[g].getAttribute("schemeIdUri");
              if (null == h || "urn:mpeg:dash:role:2011" == h) switch (h = d[g].getAttribute("value"), h) {
                case "main":
                  c = !0;
                  break;
                case "caption":
                case "subtitle":
                  f = h
              }
            }
            var l = null, m = !1;
            J(b, "EssentialProperty").forEach(function (a) {
              "http://dashif.org/guidelines/trickmode" == a.getAttribute("schemeIdUri") ?
                l = a.getAttribute("value") : m = !0
            });
            if (m) return null;
            var d = J(b, "ContentProtection"), q = cd(d, this.b.dash.customScheme, this.b.dash.ignoreDrmInfo),
              d = Xb(b.getAttribute("lang") || "und"), h = b.getAttribute("label"), g = J(b, "Representation"),
              e = g.map(this.Pd.bind(this, a, q, f, d, h, c, e)).filter(function (a) {
                return !!a
              });
            if (!e.length) throw new v(2, 4, 4003);
            a.U.contentType && "application" != a.U.contentType || (a.U.contentType = he(e[0].mimeType, e[0].codecs), e.forEach(function (b) {
              b.type = a.U.contentType
            }));
            e.forEach(function (a) {
              q.drmInfos.forEach(function (b) {
                a.keyId &&
                b.keyIds.push(a.keyId)
              })
            });
            f = g.map(function (a) {
              return a.getAttribute("id")
            }).filter(Da);
            return {
              id: a.U.id || "__fake__" + this.h++,
              contentType: a.U.contentType,
              language: d,
              Ab: c,
              streams: e,
              drmInfos: q.drmInfos,
              Tb: l,
              Yd: f
            }
          };
          k.Pd = function (a, b, c, d, e, f, g, h) {
            a.A = ee(h, a.U, null);
            if (!ie(a.A)) return null;
            a.bandwidth = K(h, "bandwidth", Zc) || 0;
            var l = this.Zd.bind(this);
            if (a.A.Ua) l = Hd(a, l); else if (a.A.pa) l = Kd(a, this.j); else if (a.A.Va) l = Od(a, l, this.j, !!this.c); else {
              var m = a.A.X, q = a.R.duration || 0;
              l = {
                createSegmentIndex: Promise.resolve.bind(Promise), findSegmentPosition: function (a) {
                  return 0 <= a && a < q ? 1 : null
                }, getSegmentReference: function (a) {
                  return 1 != a ? null : new L(1, 0, q, function () {
                    return m
                  }, 0, null)
                }, initSegmentReference: null, presentationTimeOffset: 0
              }
            }
            h =
              J(h, "ContentProtection");
            h = fd(h, this.b.dash.customScheme, b, this.b.dash.ignoreDrmInfo);
            return {
              id: this.h++,
              createSegmentIndex: l.createSegmentIndex,
              findSegmentPosition: l.findSegmentPosition,
              getSegmentReference: l.getSegmentReference,
              initSegmentReference: l.initSegmentReference,
              presentationTimeOffset: l.presentationTimeOffset,
              mimeType: a.A.mimeType,
              codecs: a.A.codecs,
              frameRate: a.A.frameRate,
              bandwidth: a.bandwidth,
              width: a.A.width,
              height: a.A.height,
              kind: c,
              encrypted: 0 < b.drmInfos.length,
              keyId: h,
              language: d,
              label: e,
              type: a.U.contentType,
              primary: f,
              trickModeVideo: null,
              containsEmsgBoxes: a.A.containsEmsgBoxes,
              roles: g,
              channelsCount: a.A.Db
            }
          };
          k.ue = function () {
            this.f = null;
            var a = Date.now();
            Yd(this).then(function () {
              this.a && Zd(this, (Date.now() - a) / 1E3)
            }.bind(this))["catch"](function (a) {
              this.a && (a.severity = 1, this.a.onError(a), Zd(this, 0))
            }.bind(this))
          };

          function Zd(a, b) {
            0 > a.l || (a.f = window.setTimeout(a.ue.bind(a), 1E3 * Math.max(Math.max(3, a.l) - b, 0)))
          }

          function ee(a, b, c) {
            b = b || {contentType: "", mimeType: "", codecs: "", containsEmsgBoxes: !1, frameRate: void 0, Db: null};
            c = c || b.X;
            var d = J(a, "BaseURL").map(Uc), e = a.getAttribute("contentType") || b.contentType,
              f = a.getAttribute("mimeType") || b.mimeType, g = a.getAttribute("codecs") || b.codecs,
              h = K(a, "frameRate", ad) || b.frameRate, l = !!J(a, "InbandEventStream").length,
              m = J(a, "AudioChannelConfiguration"), m = je(m) || b.Db;
            e || (e = he(f, g));
            return {
              X: D(c, d),
              Ua: Tc(a, "SegmentBase") || b.Ua,
              pa: Tc(a, "SegmentList") || b.pa,
              Va: Tc(a, "SegmentTemplate") ||
              b.Va,
              width: K(a, "width", $c) || b.width,
              height: K(a, "height", $c) || b.height,
              contentType: e,
              mimeType: f,
              codecs: g,
              frameRate: h,
              containsEmsgBoxes: l || b.containsEmsgBoxes,
              id: a.getAttribute("id"),
              Db: m
            }
          }

          function je(a) {
            for (var b = 0; b < a.length; ++b) {
              var c = a[b], d = c.getAttribute("schemeIdUri");
              if (d && (c = c.getAttribute("value"))) switch (d) {
                case "urn:mpeg:dash:outputChannelPositionList:2012":
                  return c.trim().split(/ +/).length;
                case "urn:mpeg:dash:23003:3:audio_channel_configuration:2011":
                case "urn:dts:dash:audio_channel_configuration:2012":
                  d = parseInt(c, 10);
                  if (!d) continue;
                  return d;
                case "tag:dolby.com,2014:dash:audio_channel_configuration:2011":
                case "urn:dolby:dash:audio_channel_configuration:2011":
                  if (d = parseInt(c,
                      16)) {
                    for (a = 0; d;) d & 1 && ++a, d >>= 1;
                    return a
                  }
              }
            }
            return null
          }

          function ie(a) {
            var b = 0 + (a.Ua ? 1 : 0);
            b += a.pa ? 1 : 0;
            b += a.Va ? 1 : 0;
            if (!b) return "text" == a.contentType || "application" == a.contentType ? !0 : !1;
            1 != b && (a.Ua && (a.pa = null), a.Va = null);
            return !0
          }

          function ke(a, b, c, d) {
            b = D(b, [c]);
            b = Ha(b, a.b.retryParameters);
            b.method = d;
            return a.a.networkingEngine.request(0, b).then(function (a) {
              if ("HEAD" == d) {
                if (!a.headers || !a.headers.date) return 0;
                a = a.headers.date
              } else a = E(a.data);
              a = Date.parse(a);
              return isNaN(a) ? 0 : a - Date.now()
            })
          }

          function ce(a, b, c, d) {
            c = c.map(function (a) {
              return {scheme: a.getAttribute("schemeIdUri"), value: a.getAttribute("value")}
            });
            var e = a.b.dash.clockSyncUri;
            d && !c.length && e && c.push({scheme: "urn:mpeg:dash:utc:http-head:2014", value: e});
            return Ba(c, function (a) {
              var c = a.value;
              switch (a.scheme) {
                case "urn:mpeg:dash:utc:http-head:2014":
                case "urn:mpeg:dash:utc:http-head:2012":
                  return ke(this, b, c, "HEAD");
                case "urn:mpeg:dash:utc:http-xsdate:2014":
                case "urn:mpeg:dash:utc:http-iso:2014":
                case "urn:mpeg:dash:utc:http-xsdate:2012":
                case "urn:mpeg:dash:utc:http-iso:2012":
                  return ke(this,
                    b, c, "GET");
                case "urn:mpeg:dash:utc:direct:2014":
                case "urn:mpeg:dash:utc:direct:2012":
                  return a = Date.parse(c), isNaN(a) ? 0 : a - Date.now();
                case "urn:mpeg:dash:utc:http-ntp:2014":
                case "urn:mpeg:dash:utc:ntp:2014":
                case "urn:mpeg:dash:utc:sntp:2014":
                  return Promise.reject();
                default:
                  return Promise.reject()
              }
            }.bind(a))["catch"](function () {
              return 0
            })
          }

          k.Od = function (a, b, c) {
            var d = c.getAttribute("schemeIdUri") || "", e = c.getAttribute("value") || "",
              f = K(c, "timescale", $c) || 1;
            J(c, "Event").forEach(function (c) {
              var g = K(c, "presentationTime", $c) || 0, l = K(c, "duration", $c) || 0, g = g / f + a, l = g + l / f;
              null != b && (g = Math.min(g, a + b), l = Math.min(l, a + b));
              c = {schemeIdUri: d, value: e, startTime: g, endTime: l, id: c.getAttribute("id") || "", eventElement: c};
              this.a.onTimelineRegionAdded(c)
            }.bind(this))
          };
          k.Zd = function (a, b, c) {
            a = Ha(a, this.b.retryParameters);
            null != b && (a.headers.Range = "bytes=" + b + "-" + (null != c ? c : ""));
            return this.a.networkingEngine.request(1, a).then(function (a) {
              return a.data
            })
          };

          function he(a, b) {
            return Fb[Xa(a, b)] ? "text" : a.split("/")[0]
          }

          Ud.mpd = Xd;
          Td["application/dash+xml"] = Xd;

          function le(a, b, c, d) {
            this.uri = a;
            this.type = b;
            this.S = c;
            this.segments = d || null
          }

          function me(a, b, c, d) {
            this.id = a;
            this.name = b;
            this.a = c;
            this.value = d || null
          }

          me.prototype.toString = function () {
            function a(a) {
              return a.name + '="' + a.value + '"'
            }

            return this.value ? "#" + this.name + ":" + this.value : 0 < this.a.length ? "#" + this.name + ":" + this.a.map(a).join(",") : "#" + this.name
          };

          function ne(a, b) {
            this.name = a;
            this.value = b
          }

          me.prototype.getAttribute = function (a) {
            var b = this.a.filter(function (b) {
              return b.name == a
            });
            return b.length ? b[0] : null
          };

          function oe(a, b, c) {
            c = c || null;
            return (a = a.getAttribute(b)) ? a.value : c
          }

          function pe(a, b) {
            this.S = b;
            this.uri = a
          };

          function qe(a, b) {
            return a.filter(function (a) {
              return a.name == b
            })
          }

          function re(a, b) {
            var c = qe(a, b);
            return c.length ? c[0] : null
          }

          function se(a, b, c) {
            return a.filter(function (a) {
              var d = a.getAttribute("TYPE");
              a = a.getAttribute("GROUP-ID");
              return d.value == b && a.value == c
            })
          };

          function te(a) {
            this.b = a;
            this.a = 0
          }

          function ue(a, b) {
            b.lastIndex = a.a;
            var c = (c = b.exec(a.b)) ? {position: c.index, length: c[0].length, ae: c} : null;
            if (a.a == a.b.length || !c || c.position != a.a) return null;
            a.a += c.length;
            return c.ae
          }

          function ve(a) {
            return a.a == a.b.length ? null : (a = ue(a, /[^ \t\n]*/gm)) ? a[0] : null
          };

          function we() {
            this.a = 0
          }

          function xe(a, b, c) {
            b = E(b);
            b = b.replace(/\r\n|\r(?=[^\n]|$)/gm, "\n").trim();
            var d = b.split(/\n+/m);
            if (!/^#EXTM3U($|[ \t\n])/m.test(d[0])) throw new v(2, 4, 4015);
            b = 0;
            for (var e = [], f = 1; f < d.length;) if (/^#(?!EXT)/m.test(d[f])) f += 1; else {
              var g = d[f];
              g = ye(a.a++, g);
              if (0 <= ze.indexOf(g.name)) b = 1; else if (0 <= Ae.indexOf(g.name)) {
                if (1 != b) throw new v(2, 4, 4017);
                d = d.splice(f, d.length - f);
                a = Be(a, d, e);
                return new le(c, b, e, a)
              }
              e.push(g);
              f += 1;
              "EXT-X-STREAM-INF" == g.name && (g.a.push(new ne("URI", d[f])), f += 1)
            }
            return new le(c, b, e)
          }

          function Be(a, b, c) {
            var d = [], e = [];
            b.forEach(function (a) {
              /^(#EXT)/.test(a) ? (a = ye(this.a++, a), 0 <= ze.indexOf(a.name) ? c.push(a) : e.push(a)) : /^#(?!EXT)/m.test(a) || (d.push(new pe(a.trim(), e)), e = [])
            }.bind(a));
            return d
          }

          function ye(a, b) {
            var c = b.match(/^#(EXT[^:]*)(?::(.*))?$/);
            if (!c) throw new v(2, 4, 4016);
            var d = c[1], e = c[2], c = [];
            if (e && 0 <= e.indexOf("=")) for (var e = new te(e), f, g = /([^=]+)=(?:"([^"]*)"|([^",]*))(?:,|$)/g; f = ue(e, g);) c.push(new ne(f[1], f[2] || f[3])); else if (e) return new me(a, d, c, e);
            return new me(a, d, c)
          }

          var ze = "EXT-X-TARGETDURATION EXT-X-MEDIA-SEQUENCE EXT-X-DISCONTINUITY-SEQUENCE EXT-X-PLAYLIST-TYPE EXT-X-MAP EXT-X-I-FRAMES-ONLY EXT-X-ENDLIST".split(" "),
            Ae = "EXTINF EXT-X-BYTERANGE EXT-X-DISCONTINUITY EXT-X-PROGRAM-DATE-TIME EXT-X-KEY EXT-X-DATERANGE".split(" ");

          function Ce(a) {
            return new Promise(function (b) {
              var c = Ce.parse(a);
              b({uri: a, data: c.data, headers: {"content-type": c.contentType}})
            })
          }

          n("shaka.net.DataUriPlugin", Ce);
          Ce.parse = function (a) {
            var b = a.split(":");
            if (2 > b.length || "data" != b[0]) throw new v(2, 1, 1004, a);
            b = b.slice(1).join(":").split(",");
            if (2 > b.length) throw new v(2, 1, 1004, a);
            var c = b[0], b = window.decodeURIComponent(b.slice(1).join(",")), c = c.split(";"), d = null;
            1 < c.length && (d = c[1]);
            if ("base64" == d) a = fb(b).buffer; else {
              if (d) throw new v(2, 1, 1005, a);
              a = bb(b)
            }
            return {data: a, contentType: c[0]}
          };
          Ga.data = Ce;

          function De() {
            this.h = this.b = null;
            this.F = 1;
            this.g = {};
            this.C = {};
            this.j = {};
            this.s = {};
            this.a = null;
            this.m = "";
            this.w = new we;
            this.i = this.c = null;
            this.f = !1;
            this.B = null;
            this.l = 0
          }

          n("shaka.hls.HlsParser", De);
          k = De.prototype;
          k.configure = function (a) {
            this.h = a
          };
          k.start = function (a, b) {
            this.b = b;
            this.m = a;
            return Ee(this, a).then(function (b) {
              return Fe(this, b.data, a).then(function () {
                Ge(this, this.c);
                return this.B
              }.bind(this))
            }.bind(this))
          };
          k.stop = function () {
            this.h = this.b = null;
            this.g = {};
            this.C = {};
            this.B = null;
            return Promise.resolve()
          };
          k.update = function () {
            if (this.f) {
              for (var a = [], b = Object.keys(this.s), c = 0; c < b.length; c++) {
                var d = b[c];
                a.push(He(this, this.s[d], d))
              }
              return Promise.all(a)
            }
          };

          function He(a, b, c) {
            Ee(a, c).then(function (a) {
              a = xe(this.w, a.data, a.uri);
              if (1 != a.type) throw new v(2, 4, 4017);
              for (var c = re(a.S, "EXT-X-MEDIA-SEQUENCE"), c = Ie(this, a, c ? Number(c.value) : 0), d = b.zb, g = [], h = d.endTime, l = 0; l < c.length; l++) {
                var m = c[l];
                if (m.position > d.position) {
                  var q = m.endTime - m.startTime, w = h, x = h + q, h = h + q;
                  g.push(new L(m.position, w, x, m.a, m.V, m.K))
                }
              }
              c = g;
              b.ce.lb(c);
              c.length && (b.zb = c[c.length - 1]);
              re(a.S, "EXT-X-ENDLIST") && (a = b.zb.endTime, Je(this, !1), this.a.ea(a))
            }.bind(a))
          }

          k.onExpirationUpdated = function () {
          };

          function Fe(a, b, c) {
            b = xe(a.w, b, c);
            if (0 != b.type) throw new v(2, 4, 4022);
            return Le(a, b).then(function (a) {
              this.b.filterAllPeriods([a]);
              this.f && this.a.Cc(3 * this.l);
              this.B = {presentationTimeline: this.a, periods: [a], offlineSessionIds: [], minBufferTime: 0}
            }.bind(a))
          }

          function Le(a, b) {
            var c = b.S, d = qe(b.S, "EXT-X-MEDIA").filter(function (a) {
              return "SUBTITLES" == R(a, "TYPE")
            }.bind(a)).map(function (a) {
              return Me(this, a, b)
            }.bind(a));
            return Promise.all(d).then(function (a) {
              var d = qe(c, "EXT-X-STREAM-INF").map(function (a) {
                return Ne(this, a, b)
              }.bind(this));
              return Promise.all(d).then(function (b) {
                b = b.reduce(z, []);
                this.f || Oe(this, b);
                return {startTime: 0, variants: b, textStreams: a}
              }.bind(this))
            }.bind(a))
          }

          function Ne(a, b, c) {
            var d = oe(b, "CODECS", "avc1.42E01E,mp4a.40.2").split(","), e = b.getAttribute("RESOLUTION"), f = null,
              g = null, h = oe(b, "FRAME-RATE"), l = Number(R(b, "BANDWIDTH"));
            if (e) var m = e.value.split("x"), f = m[0], g = m[1];
            var q = Pe(a, c);
            c = qe(c.S, "EXT-X-MEDIA");
            var w = oe(b, "AUDIO"), x = oe(b, "VIDEO");
            w ? c = se(c, "AUDIO", w) : x && (c = se(c, "VIDEO", x));
            if (m = Qe("text", d)) {
              var r = oe(b, "SUBTITLES");
              r && (r = se(c, "SUBTITLES", r), r.length && (a.g[r[0].id].stream.codecs = m));
              d.splice(d.indexOf(m), 1)
            }
            c = c.map(function (a) {
              return Se(this, a,
                d, q)
            }.bind(a));
            var u = [], t = [];
            return Promise.all(c).then(function (a) {
              w ? u = a : x && (t = a);
              if (u.length || t.length) if (u.length) if (R(b, "URI") == u[0].Mb) {
                a = "audio";
                var c = !0
              } else a = "video"; else a = "audio"; else c = !1, 1 == d.length ? (a = Qe("video", d), a = e || h || a ? "video" : "audio") : (a = "video", d = [d.join(",")]);
              return c ? Promise.resolve() : Te(this, b, d, a, q)
            }.bind(a)).then(function (a) {
              a && ("audio" == a.stream.type ? u = [a] : t = [a]);
              return Ue(this, u, t, l, f, g, h)
            }.bind(a))
          }

          function Ue(a, b, c, d, e, f, g) {
            c.forEach(function (a) {
              if (a = a.stream) a.width = Number(e) || void 0, a.height = Number(f) || void 0, a.frameRate = Number(g) || void 0
            }.bind(a));
            b.length || (b = [null]);
            c.length || (c = [null]);
            for (var h = [], l = 0; l < b.length; l++) for (var m = 0; m < c.length; m++) {
              var q = b[l] ? b[l].stream : null, w = c[m] ? c[m].stream : null, x = b[l] ? b[l].drmInfos : null,
                r = c[m] ? c[m].drmInfos : null;
              if (q && w) if (x.length && r.length ? 0 < Ab(x, r).length : 1) var u = Ab(x, r); else continue; else q ? u = x : w && (u = r);
              x = (c[l] ? c[l].Mb : "") + " - " + (b[l] ? b[l].Mb : "");
              a.C[x] || (q = Ve(a, q, w, d, u), h.push(q), a.C[x] = q)
            }
            return h
          }

          function Ve(a, b, c, d, e) {
            return {
              id: a.F++,
              language: b ? b.language : "und",
              primary: !!b && b.primary || !!c && c.primary,
              audio: b,
              video: c,
              bandwidth: d,
              drmInfos: e,
              allowedByApplication: !0,
              allowedByKeySystem: !0
            }
          }

          function Me(a, b, c) {
            R(b, "TYPE");
            c = Pe(a, c);
            return Se(a, b, [], c).then(function (a) {
              return a.stream
            })
          }

          function Se(a, b, c, d) {
            if (a.g[b.id]) return Promise.resolve().then(function () {
              return this.g[b.id]
            }.bind(a));
            var e = R(b, "TYPE").toLowerCase();
            "subtitles" == e && (e = "text");
            var f = Xb(oe(b, "LANGUAGE", "und")), g = oe(b, "NAME"), h = b.getAttribute("DEFAULT"),
              l = b.getAttribute("AUTOSELECT"), m = oe(b, "CHANNELS"), m = "audio" == e ? We(m) : null, q = R(b, "URI"),
              q = D([a.m], [q])[0];
            return Xe(a, q, c, e, d, f, !!h || !!l, g, m).then(function (a) {
              this.g[b.id] = a;
              return this.s[q] = a
            }.bind(a))
          }

          function We(a) {
            if (!a) return null;
            a = a.split("/")[0];
            return parseInt(a, 10)
          }

          function Te(a, b, c, d, e) {
            var f = R(b, "URI"), f = D([a.m], [f])[0];
            return Xe(a, f, c, d, e, "und", !1, null, null).then(function (a) {
              return this.s[f] = a
            }.bind(a))
          }

          function Xe(a, b, c, d, e, f, g, h, l) {
            var m = b;
            b = D([a.m], [b])[0];
            return Ee(a, b).then(function (a) {
              a = xe(this.w, a.data, a.uri);
              if (1 != a.type) throw new v(2, 4, 4017);
              var b = re(a.S, "EXT-X-MEDIA-SEQUENCE"), q = Ie(this, a, b ? Number(b.value) : 0), r = new P(q);
              Ye(this, a);
              this.a || Ze(this, q[q.length - 1].endTime);
              e = Pe(this, a) || e;
              var u = null;
              "text" != d && (u = $e(a));
              this.a.Ga(0, q);
              if (!this.f) {
                var b = q[q.length - 1].endTime - q[0].startTime, t = this.a.Y();
                (Infinity == t || t < b) && this.a.ea(b)
              }
              var Fa = af(d, c), Jc = void 0;
              "text" == d && (Jc = "subtitle");
              var Kc =
                [];
              a.segments.forEach(function (a) {
                a = qe(a.S, "EXT-X-KEY");
                Kc.push.apply(Kc, a)
              });
              var Lc = !1, Mc = [], Re = null;
              Kc.forEach(function (a) {
                if ("NONE" != R(a, "METHOD")) {
                  Lc = !0;
                  var b = R(a, "KEYFORMAT");
                  if (a = (b = bf[b]) ? b(a) : null) a.keyIds.length && (Re = a.keyIds[0]), Mc.push(a)
                }
              });
              if (Lc && !Mc.length) throw new v(2, 4, 4026);
              return cf(this, d, Fa, q[0].a()[0]).then(function (a) {
                a = {
                  id: this.F++,
                  createSegmentIndex: Promise.resolve.bind(Promise),
                  findSegmentPosition: r.find.bind(r),
                  getSegmentReference: r.get.bind(r),
                  initSegmentReference: u,
                  presentationTimeOffset: e ||
                  0,
                  mimeType: a,
                  codecs: Fa,
                  kind: Jc,
                  encrypted: Lc,
                  keyId: Re,
                  language: f,
                  label: h || null,
                  type: d,
                  primary: g,
                  trickModeVideo: null,
                  containsEmsgBoxes: !1,
                  frameRate: void 0,
                  width: void 0,
                  height: void 0,
                  bandwidth: void 0,
                  roles: [],
                  channelsCount: l
                };
                this.j[a.id] = r;
                return {stream: a, ce: r, drmInfos: Mc, Mb: m, zb: q[q.length - 1]}
              }.bind(this))
            }.bind(a))
          }

          function Ye(a, b) {
            var c = re(b.S, "EXT-X-PLAYLIST-TYPE");
            if (re(b.S, "EXT-X-ENDLIST") || c && "VOD" == c.value) Je(a, !1); else if (c) c = df(b.S, "EXT-X-TARGETDURATION"), c = Number(c.value), a.c ? a.c > c && (a.c = c) : (Je(a, !0), a.c = c), a.l = Math.max(c, a.l); else throw new v(2, 4, 4029);
          }

          function Ze(a, b) {
            var c = null, d = 0;
            a.f && (c = Date.now() / 1E3 - b, d = 3 * a.l);
            a.a = new Q(c, d);
            a.a.ob(!a.f)
          }

          function $e(a) {
            var b = qe(a.S, "EXT-X-MAP");
            if (!b.length) return null;
            if (1 < b.length) throw new v(2, 4, 4020);
            var b = b[0], c = R(b, "URI"), d = D([a.uri], [c])[0];
            a = 0;
            c = null;
            if (b = oe(b, "BYTERANGE")) a = b.split("@"), b = Number(a[0]), a = Number(a[1]), c = a + b - 1;
            return new nd(function () {
              return [d]
            }, a, c)
          }

          function Ie(a, b, c) {
            var d = b.segments, e = [];
            d.forEach(function (a) {
              var f = a.S, h = D([b.uri], [a.uri])[0], l = df(f, "EXTINF").value.split(","), l = Number(l[0]), m;
              (a = d.indexOf(a)) ? m = e[a - 1].endTime : m = 0;
              var l = m + l, q = 0, w = null;
              if (f = re(f, "EXT-X-BYTERANGE")) f = f.value.split("@"), w = Number(f[0]), f[1] ? q = Number(f[1]) : q = e[a - 1].K + 1, w = q + w - 1, a == d.length - 1 && (w = null);
              e.push(new L(c + a, m, l, function () {
                return [h]
              }, q, w))
            }.bind(a));
            return e
          }

          function Oe(a, b) {
            b.forEach(function (a) {
              var b = this.a.Y(), c = a.video;
              a = a.audio;
              c && this.j[c.id] && wd(this.j[c.id], b);
              a && this.j[a.id] && wd(this.j[a.id], b)
            }.bind(a))
          }

          function Qe(a, b) {
            for (var c = ef[a], d = 0; d < c.length; d++) for (var e = 0; e < b.length; e++) if (c[d].test(b[e].trim())) return b[e].trim();
            return "text" == a ? "" : null
          }

          function af(a, b) {
            if (1 == b.length) return b[0];
            var c = Qe(a, b);
            if (null != c) return c;
            throw new v(2, 4, 4025, b);
          }

          function cf(a, b, c, d) {
            var e = d.split("."), f = e[e.length - 1];
            if (e = ff[b][f]) return Promise.resolve(e);
            if ("text" == b) return c && "vtt" != c ? Promise.resolve("application/mp4") : Promise.resolve("text/vtt");
            b = Ha([d], a.h.retryParameters);
            b.method = "HEAD";
            return a.b.networkingEngine.request(1, b).then(function (a) {
              a = a.headers["content-type"];
              if (!a) throw new v(2, 4, 4021, f);
              return a.split(";")[0]
            })
          }

          function Pe(a, b) {
            var c = re(b.S, "EXT-X-START");
            return c ? Number(R(c, "TIME-OFFSET")) : a.h.hls.defaultTimeOffset
          }

          function R(a, b) {
            var c = a.getAttribute(b);
            if (!c) throw new v(2, 4, 4023, b);
            return c.value
          }

          function df(a, b) {
            var c = re(a, b);
            if (!c) throw new v(2, 4, 4024, b);
            return c
          }

          function Ee(a, b) {
            return a.b.networkingEngine.request(0, Ha([b], a.h.retryParameters))
          }

          var ef = {
            audio: [/^vorbis$/, /^opus$/, /^flac$/, /^mp4a/, /^[ae]c-3$/],
            video: [/^avc/, /^hev/, /^hvc/, /^vp0?[89]/, /^av1$/],
            text: [/^vtt$/, /^wvtt/, /^stpp/]
          }, ff = {
            audio: {mp4: "audio/mp4", m4s: "audio/mp4", m4i: "audio/mp4", m4a: "audio/mp4", ts: "video/mp2t"},
            video: {mp4: "video/mp4", m4s: "video/mp4", m4i: "video/mp4", m4v: "video/mp4", ts: "video/mp2t"},
            text: {
              mp4: "application/mp4",
              m4s: "application/mp4",
              m4i: "application/mp4",
              vtt: "text/vtt",
              ttml: "application/ttml+xml"
            }
          };
          De.prototype.J = function () {
            this.b && (this.i = null, this.update().then(function () {
              Ge(this, this.c)
            }.bind(this))["catch"](function (a) {
              this.b && (a.severity = 1, this.b.onError(a), Ge(this, 0))
            }.bind(this)))
          };

          function Ge(a, b) {
            null != a.c && null != b && (a.i = window.setTimeout(a.J.bind(a), 1E3 * b))
          }

          function Je(a, b) {
            a.f = b;
            a.a && a.a.ob(!b);
            b || null == a.i || (window.clearTimeout(a.i), a.i = null, a.c = null)
          }

          var bf = {
            "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": function (a) {
              if ("SAMPLE-AES-CENC" != R(a, "METHOD")) return null;
              var b = R(a, "URI"), b = Ce.parse(b), b = new Uint8Array(b.data),
                b = Qa("com.widevine.alpha", [{initDataType: "cenc", initData: b}]);
              if (a = oe(a, "KEYID")) b.keyIds = [a.substr(2).toLowerCase()];
              return b
            }
          };
          Ud.m3u8 = De;
          Td["application/x-mpegurl"] = De;
          Td["application/vnd.apple.mpegurl"] = De;

          function gf(a, b, c, d, e, f) {
            this.a = a;
            this.c = b;
            this.l = c;
            this.B = d;
            this.J = e;
            this.F = f;
            this.b = new B;
            this.h = !1;
            this.g = 1;
            this.j = this.f = null;
            this.C = a.readyState;
            this.i = !1;
            this.w = this.T = -1;
            this.m = this.s = !1;
            0 < a.readyState ? this.kc() : Pa(this.b, a, "loadedmetadata", this.kc.bind(this));
            b = this.mc.bind(this);
            C(this.b, a, "ratechange", this.Ad.bind(this));
            C(this.b, a, "waiting", b);
            this.j = setInterval(b, 250)
          }

          k = gf.prototype;
          k.o = function () {
            var a = this.b.o();
            this.b = null;
            null != this.f && (window.clearInterval(this.f), this.f = null);
            null != this.j && (window.clearInterval(this.j), this.j = null);
            this.F = this.J = this.l = this.c = this.a = null;
            return a
          };

          function hf(a, b) {
            0 < a.a.readyState ? a.a.currentTime = jf(a, b) : a.B = b
          }

          function kf(a) {
            return 0 < a.a.readyState ? jf(a, a.a.currentTime) : lf(a)
          }

          function lf(a) {
            if (a.B) return jf(a, a.B);
            a = a.c.presentationTimeline;
            return Infinity > a.Y() ? a.ia() : a.kb()
          }

          k.xb = function () {
            return this.g
          };

          function mf(a, b) {
            null != a.f && (window.clearInterval(a.f), a.f = null);
            a.g = b;
            a.a.playbackRate = a.h || 0 > b ? 0 : b;
            !a.h && 0 > b && (a.f = window.setInterval(function () {
              this.a.currentTime += b / 4
            }.bind(a), 250))
          }

          k.Fb = function () {
            this.m = !0;
            this.mc()
          };
          k.Ad = function () {
            var a = this.h || 0 > this.g ? 0 : this.g;
            this.a.playbackRate && this.a.playbackRate != a && mf(this, this.a.playbackRate)
          };
          k.kc = function () {
            var a = lf(this);
            .001 > Math.abs(this.a.currentTime - a) ? (C(this.b, this.a, "seeking", this.nc.bind(this)), C(this.b, this.a, "playing", this.lc.bind(this))) : (Pa(this.b, this.a, "seeking", this.Cd.bind(this)), this.a.currentTime = a)
          };
          k.Cd = function () {
            C(this.b, this.a, "seeking", this.nc.bind(this));
            C(this.b, this.a, "playing", this.lc.bind(this))
          };
          k.mc = function () {
            if (this.a.readyState) {
              this.a.readyState != this.C && (this.i = !1, this.C = this.a.readyState);
              var a = this.l.smallGapLimit, b = this.a.currentTime, c = this.a.buffered;
              if (b < this.c.presentationTimeline.ia()) c = nf(this, b), of(this, b, c); else {
                a:{
                  if (c && c.length && !(1 == c.length && 1E-6 > c.end(0) - c.start(0))) {
                    var d = .1;
                    /(Edge\/|Trident\/|Tizen)/.test(navigator.userAgent) && (d = .5);
                    for (var e = 0; e < c.length; e++) if (c.start(e) > b && (!e || c.end(e - 1) - b <= d)) {
                      d = e;
                      break a
                    }
                  }
                  d = null
                }
                if (null == d) {
                  if (3 > this.a.readyState && 0 < this.a.playbackRate) if (this.w !=
                    b) this.w = b, this.T = Date.now(), this.s = !1; else if (!this.s && this.T < Date.now() - 1E3) for (d = 0; d < c.length; d++) if (b >= c.start(d) && b < c.end(d) - .5) {
                    this.a.currentTime += .1;
                    this.w = this.a.currentTime;
                    this.s = !0;
                    break
                  }
                } else if (d || this.m) if (e = c.start(d), !(e >= this.c.presentationTimeline.kb())) {
                  var f = e - b, a = f <= a, g = !1;
                  a || this.i || (this.i = !0, f = new G("largegap", {
                    currentTime: b,
                    gapSize: f
                  }), f.cancelable = !0, this.F(f), this.l.jumpLargeGaps && !f.defaultPrevented && (g = !0));
                  if (a || g) d && c.end(d - 1), of(this, b, e)
                }
              }
            }
          };
          k.nc = function () {
            this.m = !1;
            var a = this.a.currentTime, b = nf(this, a);
            .001 < Math.abs(b - a) ? of(this, a, b) : (this.i = !1, this.J())
          };
          k.lc = function () {
            var a = this.a.currentTime, b = nf(this, a);
            .001 < Math.abs(b - a) && of(this, a, b)
          };

          function nf(a, b) {
            var c = Cb.bind(null, a.a.buffered), d = 1 * Math.max(a.c.minBufferTime || 0, a.l.rebufferingGoal),
              e = a.c.presentationTimeline, f = e.va(), g = e.Da(d), h = e.Da(5), d = e.Da(d + 5);
            return b > f ? f : b < e.Da(0) ? c(h) ? h : d : b >= g || c(b) ? b : d
          }

          function of(a, b, c) {
            a.a.currentTime = c;
            var d = 0, e = function () {
              !this.a || 10 <= d++ || this.a.currentTime != b || (this.a.currentTime = c, setTimeout(e, 100))
            }.bind(a);
            setTimeout(e, 100)
          }

          function jf(a, b) {
            var c = a.c.presentationTimeline.ia();
            if (b < c) return c;
            c = a.c.presentationTimeline.va();
            return b > c ? c : b
          };

          function pf(a, b, c, d, e, f, g) {
            this.a = a;
            this.B = b;
            this.g = c;
            this.w = d;
            this.l = e;
            this.h = f;
            this.C = g;
            this.c = [];
            this.j = new B;
            this.b = !1;
            this.i = -1;
            this.f = null;
            qf(this)
          }

          pf.prototype.o = function () {
            var a = this.j ? this.j.o() : Promise.resolve();
            this.j = null;
            rf(this);
            this.C = this.h = this.l = this.w = this.g = this.B = this.a = null;
            this.c = [];
            return a
          };
          pf.prototype.s = function (a) {
            if (!this.c.some(function (b) {
                return b.info.schemeIdUri == a.schemeIdUri && b.info.startTime == a.startTime && b.info.endTime == a.endTime
              })) {
              var b = {info: a, status: 1};
              this.c.push(b);
              var c = new G("timelineregionadded", {detail: sf(a)});
              this.h(c);
              this.m(!0, b)
            }
          };

          function sf(a) {
            var b = Aa(a);
            b.eventElement = a.eventElement;
            return b
          }

          pf.prototype.m = function (a, b) {
            var c = b.info.startTime > this.a.currentTime ? 1 : b.info.endTime < this.a.currentTime ? 3 : 2,
              d = 2 == b.status, e = 2 == c;
            if (c != b.status) {
              if (!a || d || e) d || this.h(new G("timelineregionenter", {detail: sf(b.info)})), e || this.h(new G("timelineregionexit", {detail: sf(b.info)}));
              b.status = c
            }
          };

          function qf(a) {
            rf(a);
            a.f = window.setTimeout(a.F.bind(a), 250)
          }

          function rf(a) {
            a.f && (window.clearTimeout(a.f), a.f = null)
          }

          pf.prototype.F = function () {
            this.f = null;
            qf(this);
            var a = nc(this.g, this.a.currentTime);
            a != this.i && (-1 != this.i && this.C(), this.i = a);
            var a = Db(this.a.buffered, this.a.currentTime), b = Bb(this.a.buffered), c = this.g.presentationTimeline,
              d = c.va(), e = "ended" == this.B.readyState, b = c.P() && b >= d || this.a.ended || e;
            this.b ? (c = 1 * Math.max(this.g.minBufferTime || 0, this.w.rebufferingGoal), (b || a >= c) && 0 != this.b && (this.b = !1, this.l(!1))) : !b && .5 > a && 1 != this.b && (this.b = !0, this.l(!0));
            this.c.forEach(this.m.bind(this, !1))
          };

          function tf(a, b) {
            this.a = b;
            this.b = a;
            this.h = null;
            this.i = 1;
            this.m = Promise.resolve();
            this.g = [];
            this.j = {};
            this.c = {};
            this.s = !1;
            this.w = null;
            this.f = this.l = !1
          }

          k = tf.prototype;
          k.o = function () {
            for (var a in this.c) uf(this.c[a]);
            this.h = this.c = this.j = this.g = this.m = this.b = this.a = null;
            this.f = !0;
            return Promise.resolve()
          };
          k.configure = function (a) {
            this.h = a;
            this.w = new wa({
              maxAttempts: Math.max(a.retryParameters.maxAttempts, 2),
              baseDelay: a.retryParameters.baseDelay,
              backoffFactor: a.retryParameters.backoffFactor,
              fuzzFactor: a.retryParameters.fuzzFactor,
              timeout: 0
            }, !0)
          };
          k.init = function () {
            var a = this.a.gc(this.b.periods[nc(this.b, kf(this.a.Sa))]);
            return a.variant || a.text ? vf(this, a).then(function () {
              this.a && this.a.sd && this.a.sd()
            }.bind(this)) : Promise.reject(new v(2, 5, 5005))
          };

          function S(a) {
            return a.b.periods[nc(a.b, kf(a.a.Sa))]
          }

          function wf(a) {
            var b = a.c.video || a.c.audio;
            return b ? a.b.periods[b.xa] : null
          }

          function xf(a) {
            return Ua(a.c, function (a) {
              return a.oa || a.stream
            })
          }

          function yf(a, b) {
            var c = a.c.video;
            if (c) {
              var d = c.stream;
              if (d) if (b) {
                var e = d.trickModeVideo;
                if (e) {
                  var f = c.oa;
                  f || (zf(a, e, !1), c.oa = d)
                }
              } else if (f = c.oa) c.oa = null, zf(a, f, !0)
            }
          }

          function Af(a, b, c) {
            b.video && zf(a, b.video, c);
            b.audio && zf(a, b.audio, c)
          }

          function zf(a, b, c) {
            var d = a.c[b.type];
            if (!d && "text" == b.type && a.h.ignoreTextStreamFailures) vf(a, {text: b}); else if (d) {
              var e = oc(a.b, b);
              c && e != d.xa ? Bf(a) : (d.oa && (b.trickModeVideo ? (d.oa = b, b = b.trickModeVideo) : d.oa = null), (e = a.g[e]) && e.Ka && (e = a.j[b.id]) && e.Ka && d.stream != b && ("text" == b.type && Lb(a.a.L, Xa(b.mimeType, b.codecs)), d.stream = b, d.mb = !0, c && (d.ta ? d.sb = !0 : d.ya ? (d.ra = !0, d.sb = !0) : (uf(d), Cf(a, d, !0)))))
            }
          }

          function Df(a) {
            var b = kf(a.a.Sa);
            Object.keys(a.c).every(function (a) {
              var c = this.a.L;
              "text" == a ? (a = c.a, a = b >= a.b && b < a.a) : (a = Nb(c, a), a = Cb(a, b));
              return a
            }.bind(a)) || Bf(a)
          }

          function Bf(a) {
            for (var b in a.c) {
              var c = a.c[b];
              c.ta || c.ra || (c.ya ? c.ra = !0 : null == Mb(a.a.L, b) ? null == c.qa && Ef(a, c, 0) : (uf(c), Cf(a, c, !1)))
            }
          }

          function vf(a, b, c) {
            var d = nc(a.b, kf(a.a.Sa)), e = {}, f = [];
            b.variant && b.variant.audio && (e.audio = b.variant.audio, f.push(b.variant.audio));
            b.variant && b.variant.video && (e.video = b.variant.video, f.push(b.variant.video));
            b.text && (e.text = b.text, f.push(b.text));
            a.a.L.init(e);
            Ff(a);
            return Gf(a, f).then(function () {
              if (!this.f) for (var a in e) {
                var b = e[a];
                this.c[a] || (this.c[a] = {
                  stream: b,
                  type: a,
                  Ea: null,
                  ja: null,
                  oa: null,
                  mb: !0,
                  xa: d,
                  endOfStream: !1,
                  ya: !1,
                  qa: null,
                  ra: !1,
                  sb: !1,
                  ta: !1,
                  Lb: !1,
                  Pa: !1,
                  wc: c || 0
                }, Ef(this, this.c[a], 0))
              }
            }.bind(a))
          }

          function Hf(a, b) {
            var c = a.g[b];
            if (c) return c.M;
            c = {M: new y, Ka: !1};
            a.g[b] = c;
            var d = a.b.periods[b].variants.map(function (a) {
              var b = [];
              a.audio && b.push(a.audio);
              a.video && b.push(a.video);
              a.video && a.video.trickModeVideo && b.push(a.video.trickModeVideo);
              return b
            }).reduce(z, []).filter(Ea);
            d.push.apply(d, a.b.periods[b].textStreams);
            a.m = a.m.then(function () {
              if (!this.f) return Gf(this, d)
            }.bind(a)).then(function () {
              this.f || (this.g[b].M.resolve(), this.g[b].Ka = !0)
            }.bind(a))["catch"](function (a) {
              this.f || (this.g[b].M.reject(),
                delete this.g[b], this.a.onError(a))
            }.bind(a));
            return c.M
          }

          function Gf(a, b) {
            b.map(function (a) {
              return a.id
            }).filter(Ea);
            for (var c = [], d = 0; d < b.length; ++d) {
              var e = b[d];
              var f = a.j[e.id];
              f ? c.push(f.M) : (a.j[e.id] = {M: new y, Ka: !1}, c.push(e.createSegmentIndex()))
            }
            return Promise.all(c).then(function () {
              if (!this.f) for (var a = 0; a < b.length; ++a) {
                var c = this.j[b[a].id];
                c.Ka || (c.M.resolve(), c.Ka = !0)
              }
            }.bind(a))["catch"](function (a) {
              if (!this.f) return this.j[e.id].M.reject(), delete this.j[e.id], Promise.reject(a)
            }.bind(a))
          }

          function Ff(a) {
            var b = a.b.presentationTimeline.Y();
            Infinity > b ? a.a.L.ea(b) : a.a.L.ea(Math.pow(2, 32))
          }

          k.xe = function (a) {
            if (!this.f && !a.ya && null != a.qa && !a.ta) if (a.qa = null, a.ra) Cf(this, a, a.sb); else {
              try {
                var b = If(this, a);
                null != b && (Ef(this, a, b), a.Pa = !1)
              } catch (c) {
                Jf(this, c);
                return
              }
              b = Ta(this.c);
              Kf(this, a);
              b.every(function (a) {
                return a.endOfStream
              }) && this.a.L.endOfStream().then(function () {
                this.b.presentationTimeline.ea(this.a.L.Y())
              }.bind(this))
            }
          };

          function If(a, b) {
            var c = kf(a.a.Sa),
              d = b.Ea && b.ja ? a.b.periods[oc(a.b, b.Ea)].startTime + b.ja.endTime : Math.max(c, b.wc),
              e = oc(a.b, b.stream), f = nc(a.b, d);
            var g = a.a.L;
            var h = b.type;
            "text" == h ? (g = g.a, g = null == g.a || g.a < c ? 0 : g.a - Math.max(c, g.b)) : (g = Nb(g, h), g = Db(g, c));
            h = Math.max(a.i * Math.max(a.b.minBufferTime || 0, a.h.rebufferingGoal), a.i * a.h.bufferingGoal);
            if (d >= a.b.presentationTimeline.Y()) return b.endOfStream = !0, null;
            b.endOfStream = !1;
            b.xa = f;
            if (f != e) return null;
            if (g >= h) return .5;
            d = a.a.L;
            f = b.type;
            d = "text" == f ? d.a.a : Bb(Nb(d,
              f));
            b.ja && b.stream == b.Ea ? (f = b.ja.position + 1, d = Lf(a, b, e, f)) : (f = b.ja ? b.stream.findSegmentPosition(Math.max(0, a.b.periods[oc(a.b, b.Ea)].startTime + b.ja.endTime - a.b.periods[e].startTime)) : b.stream.findSegmentPosition(Math.max(0, (d || c) - a.b.periods[e].startTime)), null == f ? d = null : (g = null, null == d && (g = Lf(a, b, e, Math.max(0, f - 1))), d = g || Lf(a, b, e, f)));
            if (!d) return 1;
            b.wc = 0;
            Mf(a, b, c, e, d);
            return null
          }

          function Lf(a, b, c, d) {
            c = a.b.periods[c];
            b = b.stream.getSegmentReference(d);
            if (!b) return null;
            a = a.b.presentationTimeline;
            d = a.va();
            return c.startTime + b.endTime < a.ia() || c.startTime + b.startTime > d ? null : b
          }

          function Mf(a, b, c, d, e) {
            var f = a.b.periods[d], g = b.stream, h = a.b.periods[d + 1], l = null,
              l = h ? h.startTime : a.b.presentationTimeline.Y();
            d = Nf(a, b, d, l);
            b.ya = !0;
            b.mb = !1;
            h = Of(a, e);
            Promise.all([d, h]).then(function (a) {
              if (!this.f && !this.l) return Pf(this, b, c, f, g, e, a[1])
            }.bind(a)).then(function () {
              this.f || this.l || (b.ya = !1, b.Lb = !1, b.ra || this.a.Fb(), Ef(this, b, 0), Qf(this, g))
            }.bind(a))["catch"](function (a) {
              this.f || this.l || (b.ya = !1, "text" == b.type && this.h.ignoreTextStreamFailures ? delete this.c.text : 3017 == a.code ? Rf(this, b,
                a) : (b.Pa = !0, a.severity = 2, Jf(this, a)))
            }.bind(a))
          }

          function Rf(a, b, c) {
            if (!Ta(a.c).some(function (a) {
                return a != b && a.Lb
              })) {
              var d = Math.round(100 * a.i);
              if (20 < d) a.i -= .2; else if (4 < d) a.i -= .04; else {
                b.Pa = !0;
                a.l = !0;
                a.a.onError(c);
                return
              }
              b.Lb = !0
            }
            Ef(a, b, 4)
          }

          function Nf(a, b, c, d) {
            if (!b.mb) return Promise.resolve();
            c = Rb(a.a.L, b.type, a.b.periods[c].startTime - b.stream.presentationTimeOffset, d);
            if (!b.stream.initSegmentReference) return c;
            a = Of(a, b.stream.initSegmentReference).then(function (a) {
              if (!this.f) return Ob(this.a.L, b.type, a, null, null)
            }.bind(a))["catch"](function (a) {
              b.mb = !0;
              return Promise.reject(a)
            });
            return Promise.all([c, a])
          }

          function Pf(a, b, c, d, e, f, g) {
            e.containsEmsgBoxes && (new N).aa("emsg", a.Nd.bind(a, d, f)).parse(g);
            return Sf(a, b, c).then(function () {
              if (!this.f) return Ob(this.a.L, b.type, g, f.startTime + d.startTime, f.endTime + d.startTime)
            }.bind(a)).then(function () {
              if (!this.f) return b.Ea = e, b.ja = f, Promise.resolve()
            }.bind(a))
          }

          k.Nd = function (a, b, c) {
            var d = c.u.Ib(), e = c.u.Ib(), f = c.u.D(), g = c.u.D(), h = c.u.D(), l = c.u.D();
            c = c.u.Ja(c.u.N.byteLength - c.u.v);
            a = a.startTime + b.startTime + g / f;
            if ("urn:mpeg:dash:event:2012" == d) this.a.td(); else this.a.onEvent(new G("emsg", {
              detail: {
                startTime: a,
                endTime: a + h / f,
                schemeIdUri: d,
                value: e,
                timescale: f,
                presentationTimeDelta: g,
                eventDuration: h,
                id: l,
                messageData: c
              }
            }))
          };

          function Sf(a, b, c) {
            var d = Mb(a.a.L, b.type);
            if (null == d) return Promise.resolve();
            c = c - d - a.h.bufferBehind;
            return 0 >= c ? Promise.resolve() : a.a.L.remove(b.type, d, d + c).then(function () {
            }.bind(a))
          }

          function Qf(a, b) {
            if (!a.s && (a.s = Ta(a.c).every(function (a) {
                return "text" == a.type ? !0 : !a.ra && !a.ta && a.ja
              }), a.s)) {
              var c = oc(a.b, b);
              a.g[c] || Hf(a, c).then(function () {
                this.a.fc()
              }.bind(a))["catch"](Ca);
              for (c = 0; c < a.b.periods.length; ++c) Hf(a, c)["catch"](Ca);
              a.a.Fd && a.a.Fd()
            }
          }

          function Kf(a, b) {
            if (b.xa != oc(a.b, b.stream)) {
              var c = b.xa, d = Ta(a.c);
              d.every(function (a) {
                return a.xa == c
              }) && d.every(Tf) && Hf(a, c).then(function () {
                if (!this.f && d.every(function (a) {
                    var b = oc(this.b, a.stream);
                    return Tf(a) && a.xa == c && b != c
                  }.bind(this))) {
                  var a = this.b.periods[c], b = this.a.gc(a), g = {};
                  b.variant && b.variant.video && (g.video = b.variant.video);
                  b.variant && b.variant.audio && (g.audio = b.variant.audio);
                  b.text && (g.text = b.text);
                  for (var h in this.c) if (!g[h] && "text" != h) {
                    this.a.onError(new v(2, 5, 5005));
                    return
                  }
                  for (h in g) if (!this.c[h]) if ("text" ==
                    h) vf(this, {text: g.text}, a.startTime), delete g[h]; else {
                    this.a.onError(new v(2, 5, 5005));
                    return
                  }
                  for (h in this.c) (a = g[h]) ? (zf(this, a, !1), Ef(this, this.c[h], 0)) : delete this.c[h];
                  this.a.fc()
                }
              }.bind(a))["catch"](Ca)
            }
          }

          function Tf(a) {
            return !a.ya && null == a.qa && !a.ra && !a.ta
          }

          function Of(a, b) {
            var c = Ha(b.a(), a.h.retryParameters);
            if (b.V || null != b.K) {
              var d = "bytes=" + b.V + "-";
              null != b.K && (d += b.K);
              c.headers.Range = d
            }
            return a.a.nd.request(1, c).then(function (a) {
              return a.data
            })
          }

          function Cf(a, b, c) {
            b.ra = !1;
            b.sb = !1;
            b.ta = !0;
            Qb(a.a.L, b.type).then(function () {
              if (!this.f && c) {
                var a = this.a.L, e = b.type;
                return "text" == e ? Promise.resolve() : Pb(a, e, a.Tc.bind(a, e))
              }
            }.bind(a)).then(function () {
              this.f || (b.Ea = null, b.ja = null, b.ta = !1, b.endOfStream = !1, Ef(this, b, 0))
            }.bind(a))
          }

          function Ef(a, b, c) {
            b.qa = window.setTimeout(a.xe.bind(a, b), 1E3 * c)
          }

          function uf(a) {
            null != a.qa && (window.clearTimeout(a.qa), a.qa = null)
          }

          function Jf(a, b) {
            ya(a.w).then(function () {
              this.a.onError(b);
              b.handled || this.h.failureCallback(b)
            }.bind(a))
          };

          function Uf(a, b) {
            return new Promise(function (c, d) {
              var e = new XMLHttpRequest;
              e.open(b.method, a, !0);
              e.responseType = "arraybuffer";
              e.timeout = b.retryParameters.timeout;
              e.withCredentials = b.allowCrossSiteCredentials;
              e.onload = function (b) {
                b = b.target;
                var e = b.getAllResponseHeaders().split("\r\n").reduce(function (a, b) {
                  var c = b.split(": ");
                  a[c[0].toLowerCase()] = c.slice(1).join(": ");
                  return a
                }, {});
                if (200 <= b.status && 299 >= b.status && 202 != b.status) b.responseURL && (a = b.responseURL), c({
                  uri: a,
                  data: b.response,
                  headers: e,
                  fromCache: !!e["x-shaka-from-cache"]
                });
                else {
                  var f = null;
                  try {
                    f = ab(b.response)
                  } catch (m) {
                  }
                  d(new v(401 == b.status || 403 == b.status ? 2 : 1, 1, 1001, a, b.status, f, e))
                }
              };
              e.onerror = function () {
                d(new v(1, 1, 1002, a))
              };
              e.ontimeout = function () {
                d(new v(1, 1, 1003, a))
              };
              for (var f in b.headers) e.setRequestHeader(f, b.headers[f]);
              e.send(b.body)
            })
          }

          n("shaka.net.HttpPlugin", Uf);
          Ga.http = Uf;
          Ga.https = Uf;

          function Vf() {
            this.a = null;
            this.b = [];
            this.c = {}
          }

          k = Vf.prototype;
          k.init = function (a, b) {
            return Wf(this, a, b).then(function () {
              var b = Object.keys(a);
              return Promise.all(b.map(function (a) {
                return Xf(this, a).then(function (b) {
                  this.c[a] = b
                }.bind(this))
              }.bind(this)))
            }.bind(this))
          };
          k.o = function () {
            return Promise.all(this.b.map(function (a) {
              try {
                a.transaction.abort()
              } catch (b) {
              }
              return a.M["catch"](Ca)
            })).then(function () {
              this.a && (this.a.close(), this.a = null)
            }.bind(this))
          };
          k.get = function (a, b) {
            var c;
            return Yf(this, a, "readonly", function (a) {
              c = a.get(b)
            }).then(function () {
              return c.result
            })
          };
          k.forEach = function (a, b) {
            return Yf(this, a, "readonly", function (a) {
              a.openCursor().onsuccess = function (a) {
                if (a = a.target.result) b(a.value), a["continue"]()
              }
            })
          };

          function Zf(a, b, c) {
            return Yf(a, b, "readwrite", function (a) {
              a.put(c)
            })
          }

          k.remove = function (a, b) {
            return Yf(this, a, "readwrite", function (a) {
              a["delete"](b)
            })
          };

          function $f(a, b, c) {
            return Yf(a, "segment", "readwrite", function (a) {
              for (var d = 0; d < b.length; d++) a["delete"](b[d]).onsuccess = c || function () {
              }
            })
          }

          function Xf(a, b) {
            var c = 0;
            return Yf(a, b, "readonly", function (a) {
              a.openCursor(null, "prev").onsuccess = function (a) {
                (a = a.target.result) && (c = a.key + 1)
              }
            }).then(function () {
              return c
            })
          }

          function Yf(a, b, c, d) {
            var e = {transaction: a.a.transaction([b], c), M: new y};
            e.transaction.oncomplete = function () {
              this.b.splice(this.b.indexOf(e), 1);
              e.M.resolve()
            }.bind(a);
            e.transaction.onabort = function (a) {
              this.b.splice(this.b.indexOf(e), 1);
              ag(e.transaction, e.M, a)
            }.bind(a);
            e.transaction.onerror = function (a) {
              a.preventDefault()
            }.bind(a);
            b = e.transaction.objectStore(b);
            d(b);
            a.b.push(e);
            return e.M
          }

          function Wf(a, b, c) {
            var d = window.indexedDB.open("shaka_offline_db", 1), e = !1, f = new y;
            d.onupgradeneeded = function (a) {
              e = !0;
              a = a.target.result;
              for (var c in b) a.createObjectStore(c, {keyPath: b[c]})
            };
            d.onsuccess = function (a) {
              c && !e ? (a.target.result.close(), setTimeout(function () {
                Wf(this, b, c - 1).then(f.resolve, f.reject)
              }.bind(this), 1E3)) : (this.a = a.target.result, f.resolve())
            }.bind(a);
            d.onerror = ag.bind(null, d, f);
            return f
          }

          function ag(a, b, c) {
            a.error ? b.reject(new v(2, 9, 9001, a.error)) : b.reject(new v(2, 9, 9002));
            c.preventDefault()
          };var bg = {manifest: "key", segment: "key"};

          function cg(a) {
            var b = dg(a.periods[0], [], new Q(null, 0)), c = cc(b, null, null), b = ec(b, null);
            c.push.apply(c, b);
            return {
              offlineUri: "offline:" + a.key,
              originalManifestUri: a.originalManifestUri,
              duration: a.duration,
              size: a.size,
              expiration: void 0 == a.expiration ? Infinity : a.expiration,
              tracks: c,
              appMetadata: a.appMetadata
            }
          }

          function dg(a, b, c) {
            var d = a.streams.filter(function (a) {
              return "text" == a.contentType
            }), e = a.streams.filter(function (a) {
              return "audio" == a.contentType
            }), f = a.streams.filter(function (a) {
              return "video" == a.contentType
            });
            b = eg(e, f, b);
            d = d.map(fg);
            a.streams.forEach(function (a) {
              a = gg(a);
              c.Ga(0, a)
            });
            return {startTime: a.startTime, variants: b, textStreams: d}
          }

          function gg(a) {
            return a.segments.map(function (a, c) {
              return new L(c, a.startTime, a.endTime, function () {
                return [a.uri]
              }, 0, null)
            })
          }

          function eg(a, b, c) {
            var d = [];
            if (!a.length && !b.length) return d;
            a.length ? b.length || (b = [null]) : a = [null];
            for (var e = 0, f = 0; f < a.length; f++) for (var g = 0; g < b.length; g++) if (hg(a[f], b[g])) {
              var h = a[f];
              var l = b[g], m = c;
              h = {
                id: e++,
                language: h ? h.language : "",
                primary: !!h && h.primary || !!l && l.primary,
                audio: fg(h),
                video: fg(l),
                bandwidth: 0,
                drmInfos: m,
                allowedByApplication: !0,
                allowedByKeySystem: !0
              };
              d.push(h)
            }
            return d
          }

          function hg(a, b) {
            if (!(a && b && a.variantIds && b.variantIds)) return !0;
            for (var c = 0; c < a.variantIds.length; c++) if (b.variantIds.some(function (b) {
                return b == a.variantIds[c]
              })) return !0;
            return !1
          }

          function fg(a) {
            if (!a) return null;
            var b = gg(a), b = new P(b);
            return {
              id: a.id,
              createSegmentIndex: Promise.resolve.bind(Promise),
              findSegmentPosition: b.find.bind(b),
              getSegmentReference: b.get.bind(b),
              initSegmentReference: a.initSegmentUri ? new nd(function () {
                return [a.initSegmentUri]
              }, 0, null) : null,
              presentationTimeOffset: a.presentationTimeOffset,
              mimeType: a.mimeType,
              codecs: a.codecs,
              width: a.width || void 0,
              height: a.height || void 0,
              frameRate: a.frameRate || void 0,
              kind: a.kind,
              encrypted: a.encrypted,
              keyId: a.keyId,
              language: a.language,
              label: a.label || null,
              type: a.contentType,
              primary: a.primary,
              trickModeVideo: null,
              containsEmsgBoxes: !1,
              roles: [],
              channelsCount: null
            }
          }

          function ig() {
            return window.indexedDB ? new Vf : null
          };

          function jg(a, b, c, d) {
            this.b = {};
            this.l = [];
            this.m = d;
            this.j = a;
            this.s = b;
            this.w = c;
            this.i = this.a = null;
            this.f = this.g = this.h = this.c = 0
          }

          jg.prototype.o = function () {
            var a = this.j, b = this.l, c = this.i || Promise.resolve();
            b.length && (c = c.then(function () {
              return $f(a, b)
            }));
            this.b = {};
            this.l = [];
            this.i = this.a = this.w = this.s = this.j = this.m = null;
            return c
          };

          function kg(a, b, c, d, e) {
            a.b[b] = a.b[b] || [];
            a.b[b].push({uris: c.a(), V: c.V, K: c.K, Xb: d, Nb: e})
          }

          function lg(a, b) {
            a.c = 0;
            a.h = 0;
            a.g = 0;
            a.f = 0;
            Ta(a.b).forEach(function (a) {
              a.forEach(function (a) {
                null != a.K ? this.c += a.K - a.V + 1 : this.g += a.Xb
              }.bind(this))
            }.bind(a));
            a.a = b;
            a.a.size = a.c;
            var c = Ta(a.b).map(function (a) {
              var b = 0, c = function () {
                if (!this.m) return Promise.reject(new v(2, 9, 9002));
                if (b >= a.length) return Promise.resolve();
                var d = a[b++];
                return mg(this, d).then(c)
              }.bind(this);
              return c()
            }.bind(a));
            a.b = {};
            a.i = Promise.all(c).then(function () {
              return Zf(this.j, "manifest", b)
            }.bind(a)).then(function () {
              this.l = []
            }.bind(a));
            return a.i
          }

          function mg(a, b) {
            var c = Ha(b.uris, a.w);
            if (b.V || null != b.K) c.headers.Range = "bytes=" + b.V + "-" + (null == b.K ? "" : b.K);
            var d;
            return a.s.request(1, c).then(function (a) {
              if (!this.a) return Promise.reject(new v(2, 9, 9002));
              d = a.data.byteLength;
              this.l.push(b.Nb.key);
              b.Nb.data = a.data;
              return Zf(this.j, "segment", b.Nb)
            }.bind(a)).then(function () {
              if (!this.a) return Promise.reject(new v(2, 9, 9002));
              null == b.K ? (this.a.size += d, this.f += b.Xb) : this.h += d;
              var a = (this.h + this.f) / (this.c + this.g), c = cg(this.a);
              this.m.progressCallback(c, a)
            }.bind(a))
          }
          ;

          function ng() {
            this.a = -1
          }

          k = ng.prototype;
          k.configure = function () {
          };
          k.start = function (a) {
            var b = /^offline:([0-9]+)$/.exec(a);
            if (!b) return Promise.reject(new v(2, 1, 9004, a));
            var c = Number(b[1]), d = ig();
            this.a = c;
            return d ? d.init(bg).then(function () {
              return d.get("manifest", c)
            }).then(function (a) {
              if (!a) throw new v(2, 9, 9003, c);
              return og(a)
            }).then(function (a) {
              return d.o().then(function () {
                return a
              })
            }, function (a) {
              return d.o().then(function () {
                throw a;
              })
            }) : Promise.reject(new v(2, 9, 9E3))
          };
          k.stop = function () {
            return Promise.resolve()
          };
          k.update = function () {
          };
          k.onExpirationUpdated = function (a, b) {
            var c = ig();
            c.init(bg).then(function () {
              return c.get("manifest", this.a)
            }.bind(this)).then(function (d) {
              if (d && !(0 > d.sessionIds.indexOf(a)) && (void 0 == d.expiration || d.expiration > b)) return d.expiration = b, Zf(c, "manifest", d)
            })["catch"](function () {
            }).then(function () {
              return c.o()
            })
          };

          function og(a) {
            var b = new Q(null, 0);
            b.ea(a.duration);
            var c = a.drmInfo ? [a.drmInfo] : [];
            return {
              presentationTimeline: b,
              minBufferTime: 10,
              offlineSessionIds: a.sessionIds,
              periods: a.periods.map(function (a) {
                return dg(a, c, b)
              })
            }
          }

          Td["application/x-offline-manifest"] = ng;

          function pg(a) {
            if (/^offline:([0-9]+)$/.exec(a)) {
              var b = {uri: a, data: new ArrayBuffer(0), headers: {"content-type": "application/x-offline-manifest"}};
              return Promise.resolve(b)
            }
            if (b = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a)) {
              var c = Number(b[1]), d = ig();
              return d ? d.init(bg).then(function () {
                return d.get("segment", c)
              }).then(function (b) {
                return d.o().then(function () {
                  if (!b) throw new v(2, 9, 9003, c);
                  return {uri: a, data: b.data, headers: {}}
                })
              }) : Promise.reject(new v(2, 9, 9E3))
            }
            return Promise.reject(new v(2, 1, 9004, a))
          }

          n("shaka.offline.OfflineScheme", pg);
          Ga.offline = pg;

          function T(a) {
            this.a = null;
            for (var b = 0; b < a.textTracks.length; ++b) {
              var c = a.textTracks[b];
              c.mode = "disabled";
              "Shaka Player TextTrack" == c.label && (this.a = c)
            }
            this.a || (this.a = a.addTextTrack("subtitles", "Shaka Player TextTrack"));
            this.a.mode = "hidden";
            this.b = this.a.cues
          }

          n("shaka.text.SimpleTextDisplayer", T);
          T.prototype.remove = function (a, b) {
            if (!this.a) return !1;
            qg(this, function (c) {
              return c.startTime >= b || c.endTime <= a ? !1 : !0
            });
            return !0
          };
          T.prototype.remove = T.prototype.remove;
          T.prototype.append = function (a) {
            for (var b = [], c = 0; c < a.length; c++) {
              var d = rg(a[c]);
              d && b.push(d)
            }
            b.slice().sort(function (a, c) {
              return a.startTime != c.startTime ? a.startTime - c.startTime : a.endTime != c.endTime ? a.endTime - c.startTime : b.indexOf(c) - b.indexOf(a)
            }).forEach(function (a) {
              this.a.addCue(a)
            }.bind(this))
          };
          T.prototype.append = T.prototype.append;
          T.prototype.o = function () {
            this.a && qg(this, function () {
              return !0
            });
            this.a = null;
            return Promise.resolve()
          };
          T.prototype.destroy = T.prototype.o;
          T.prototype.isTextVisible = function () {
            return "showing" == this.a.mode
          };
          T.prototype.isTextVisible = T.prototype.isTextVisible;
          T.prototype.setTextVisibility = function (a) {
            this.a.mode = a ? "showing" : "hidden"
          };
          T.prototype.setTextVisibility = T.prototype.setTextVisibility;

          function rg(a) {
            if (a.startTime >= a.endTime) return null;
            var b = new VTTCue(a.startTime, a.endTime, a.payload);
            b.lineAlign = a.lineAlign;
            b.positionAlign = a.positionAlign;
            b.size = a.size;
            try {
              b.align = a.textAlign
            } catch (d) {
            }
            "center" == a.textAlign && "center" != b.align && (b.align = "middle");
            a.writingDirection == sg ? b.vertical = "lr" : a.writingDirection == tg && (b.vertical = "rl");
            a.lineInterpretation == ug && (b.snapToLines = !1);
            null != a.line && (b.line = a.line);
            null != a.position && (b.position = a.position);
            if (window.VTTRegion && a.region) {
              var c =
                new VTTRegion;
              c.viewportAnchorX = a.region.x;
              c.viewportAnchorY = a.region.y;
              c.width = a.region.width;
              c.height = a.region.height;
              b.region = c
            }
            return b
          }

          function qg(a, b) {
            for (var c = a.b, d = [], e = 0; e < c.length; ++e) b(c[e]) && d.push(c[e]);
            for (e = 0; e < d.length; ++e) a.a.removeCue(d[e])
          };

          function vg() {
            this.a = Promise.resolve();
            this.b = this.c = this.f = !1;
            this.i = new Promise(function (a) {
              this.g = a
            }.bind(this))
          }

          vg.prototype.then = function (a) {
            this.a = this.a.then(a).then(function (a) {
              return this.b ? (this.g(), Promise.reject(this.h)) : Promise.resolve(a)
            }.bind(this));
            return this
          };

          function wg(a) {
            a.f || (a.a = a.a.then(function (a) {
              this.c = !0;
              return Promise.resolve(a)
            }.bind(a), function (a) {
              this.c = !0;
              return this.b ? (this.g(), Promise.reject(this.h)) : Promise.reject(a)
            }.bind(a)));
            a.f = !0;
            return a.a
          }

          vg.prototype.cancel = function (a) {
            if (this.c) return Promise.resolve();
            this.b = !0;
            this.h = a;
            return this.i
          };

          function U(a, b) {
            p.call(this);
            this.J = !1;
            this.f = a;
            this.gb = !1;
            this.w = null;
            this.m = new B;
            this.g = this.fb = this.b = this.l = this.a = this.B = this.h = this.cb = this.Ma = this.T = this.j = this.s = null;
            this.Jc = 1E9;
            this.ab = [];
            this.Na = !1;
            this.ga = !0;
            this.sa = this.Oa = this.F = null;
            this.Vb = !1;
            this.fa = null;
            this.eb = [];
            this.C = {};
            this.c = xg(this);
            this.bb = {width: Infinity, height: Infinity};
            this.i = yg();
            this.$a = 0;
            this.na = this.c.preferredAudioLanguage;
            this.Xa = this.c.preferredTextLanguage;
            this.tb = this.Ya = "";
            this.Wb = !0;
            b && b(this);
            this.s = new A(this.pe.bind(this));
            this.cb = zg(this);
            C(this.m, this.f, "error", this.Hd.bind(this))
          }

          ba(U);
          n("shaka.Player", U);
          U.prototype.o = function () {
            this.J = !0;
            var a = Promise.resolve();
            this.F && (a = this.F.cancel(new v(2, 7, 7E3)));
            return a.then(function () {
              var a = Promise.all([this.Oa, Ag(this), this.m ? this.m.o() : null, this.s ? this.s.o() : null]);
              this.f = null;
              this.gb = !1;
              this.c = this.s = this.g = this.m = null;
              return a
            }.bind(this))
          };
          U.prototype.destroy = U.prototype.o;
          U.version = "v2.2.2";
          var Bg = {};
          U.registerSupportPlugin = function (a, b) {
            Bg[a] = b
          };
          U.isBrowserSupported = function () {
            return !!window.Promise && !!window.Uint8Array && !!Array.prototype.forEach && !!window.MediaSource && !!MediaSource.isTypeSupported && !!window.MediaKeys && !!window.navigator && !!window.navigator.requestMediaKeySystemAccess && !!window.MediaKeySystemAccess && !!window.MediaKeySystemAccess.prototype.getConfiguration
          };
          U.probeSupport = function () {
            return yb().then(function (a) {
              var b = Vd(), c = Kb();
              a = {manifest: b, media: c, drm: a};
              for (var d in Bg) a[d] = Bg[d]();
              return a
            })
          };
          U.prototype.load = function (a, b, c) {
            var d = this.qb(), e = new vg;
            this.F = e;
            this.dispatchEvent(new G("loading"));
            var f = Date.now();
            return wg(e.then(function () {
              return d
            }).then(function () {
              this.i = yg();
              C(this.m, this.f, "playing", this.Wa.bind(this));
              C(this.m, this.f, "pause", this.Wa.bind(this));
              C(this.m, this.f, "ended", this.Wa.bind(this));
              this.g = new this.c.abrFactory;
              Cg(this);
              this.w = new this.c.textDisplayFactory;
              this.w.setTextVisibility(this.gb);
              return Wd(a, this.s, this.c.manifest.retryParameters, c)
            }.bind(this)).then(function (b) {
              this.l =
                new b;
              this.l.configure(this.c.manifest);
              b = {
                networkingEngine: this.s,
                filterNewPeriod: this.hb.bind(this),
                filterAllPeriods: this.Qb.bind(this),
                onTimelineRegionAdded: this.Gd.bind(this),
                onEvent: this.pb.bind(this),
                onError: this.La.bind(this)
              };
              return 2 < this.l.start.length ? this.l.start(a, this.s, b.filterNewPeriod, b.onError, b.onEvent) : this.l.start(a, b)
            }.bind(this)).then(function (b) {
              b.periods.some(function (a) {
                return a.variants.some(function (a) {
                  return a.video && a.audio
                })
              }) && b.periods.forEach(function (a) {
                a.variants =
                  a.variants.filter(function (a) {
                    return a.video && a.audio
                  })
              });
              if (0 == b.periods.length) throw new v(2, 4, 4014);
              this.b = b;
              this.fb = a;
              this.j = new jb(this.s, this.La.bind(this), this.ne.bind(this), this.me.bind(this));
              this.j.configure(this.c.drm);
              return this.j.init(b, !1)
            }.bind(this)).then(function () {
              this.Qb(this.b.periods);
              this.$a = Date.now() / 1E3;
              this.na = this.c.preferredAudioLanguage;
              this.Xa = this.c.preferredTextLanguage;
              var a = this.b.presentationTimeline.Y(), b = this.c.playRangeEnd, c = this.c.playRangeStart;
              0 < c && (this.P() ||
                this.b.presentationTimeline.Ac(c));
              b < a && (this.P() || this.b.presentationTimeline.ea(b));
              return Promise.all([mb(this.j, this.f), this.cb])
            }.bind(this)).then(function () {
              this.g.chooseStreams ? this.g.init(this.Ae.bind(this)) : this.g.init(this.Fc.bind(this));
              this.h = new gf(this.f, this.b, this.c.streaming, b || this.c.playRangeStart || null, this.oe.bind(this), this.pb.bind(this));
              this.B = new pf(this.f, this.T, this.b, this.c.streaming, this.Ec.bind(this), this.pb.bind(this), this.le.bind(this));
              this.Ma = new Jb(this.f, this.T,
                this.w);
              this.a = new tf(this.b, {
                Sa: this.h,
                L: this.Ma,
                nd: this.s,
                gc: this.od.bind(this),
                fc: this.Mc.bind(this),
                onError: this.La.bind(this),
                onEvent: this.pb.bind(this),
                td: this.ud.bind(this),
                Fb: this.Dd.bind(this),
                filterNewPeriod: this.hb.bind(this),
                filterAllPeriods: this.Qb.bind(this)
              });
              this.a.configure(this.c.streaming);
              Dg(this);
              return this.a.init()
            }.bind(this)).then(function () {
              if (this.c.streaming.startAtSegmentBoundary) {
                var a = Eg(this, kf(this.h));
                hf(this.h, a)
              }
              this.b.periods.forEach(this.hb.bind(this));
              Fg(this);
              Gg(this);
              var a = S(this.a), b = hc(a, this.na, this.Ya);
              this.g.setVariants(b);
              a.variants.some(function (a) {
                return a.primary
              });
              this.eb.forEach(this.B.s.bind(this.B));
              this.eb = [];
              Pa(this.m, this.f, "loadeddata", function () {
                this.i.loadLatency = (Date.now() - f) / 1E3
              }.bind(this));
              this.F = null
            }.bind(this)))["catch"](function (a) {
              this.F == e && (this.F = null, this.dispatchEvent(new G("unloading")));
              return Promise.reject(a)
            }.bind(this))
          };
          U.prototype.load = U.prototype.load;

          function Dg(a) {
            function b(a) {
              return (a.video ? a.video.codecs.split(".")[0] : "") + "-" + (a.audio ? a.audio.codecs.split(".")[0] : "")
            }

            var c = {};
            a.b.periods.forEach(function (a) {
              a.variants.forEach(function (a) {
                var d = b(a);
                d in c || (c[d] = []);
                c[d].push(a)
              })
            });
            var d = null, e = Infinity;
            Wa(c, function (a, b) {
              var c = 0, f = 0;
              b.forEach(function (a) {
                c += a.bandwidth || 0;
                ++f
              });
              var g = c / f;
              g < e && (d = a, e = g)
            });
            a.b.periods.forEach(function (a) {
              a.variants = a.variants.filter(function (a) {
                return b(a) == d ? !0 : !1
              })
            })
          }

          function zg(a) {
            a.T = new MediaSource;
            var b = new y;
            C(a.m, a.T, "sourceopen", b.resolve);
            a.f.src = window.URL.createObjectURL(a.T);
            return b
          }

          U.prototype.configure = function (a) {
            if (a.abr && a.abr.manager) {
              var b = a.abr.manager;
              delete a.abr.manager;
              a.abrFactory = function () {
                return b
              }
            }
            a.streaming && null != a.streaming.infiniteRetriesForLiveStreams && (this.Wb = !!a.streaming.infiniteRetriesForLiveStreams, delete a.streaming.infiniteRetriesForLiveStreams);
            za(this.c, a, xg(this), Hg(), "");
            Ig(this)
          };
          U.prototype.configure = U.prototype.configure;

          function Ig(a) {
            a.l && a.l.configure(a.c.manifest);
            a.j && a.j.configure(a.c.drm);
            if (a.a) {
              a.a.configure(a.c.streaming);
              try {
                a.b.periods.forEach(a.hb.bind(a))
              } catch (b) {
                a.La(b)
              }
              Jg(a, S(a.a))
            }
            a.g && (Cg(a), a.c.abr.enabled && !a.ga ? a.g.enable() : a.g.disable())
          }

          function Cg(a) {
            a.g.configure ? a.g.configure(a.c.abr) : (a.g.setDefaultEstimate(a.c.abr.defaultBandwidthEstimate), a.g.setRestrictions(a.c.abr.restrictions))
          }

          U.prototype.getConfiguration = function () {
            var a = xg(this);
            za(a, this.c, xg(this), Hg(), "");
            return a
          };
          U.prototype.getConfiguration = U.prototype.getConfiguration;
          U.prototype.$d = function () {
            this.c = xg(this);
            Ig(this)
          };
          U.prototype.resetConfiguration = U.prototype.$d;
          U.prototype.Xc = function () {
            return this.f
          };
          U.prototype.getMediaElement = U.prototype.Xc;
          U.prototype.cc = function () {
            return this.s
          };
          U.prototype.getNetworkingEngine = U.prototype.cc;
          U.prototype.Wc = function () {
            return this.fb
          };
          U.prototype.getManifestUri = U.prototype.Wc;
          U.prototype.P = function () {
            return this.b ? this.b.presentationTimeline.P() : !1
          };
          U.prototype.isLive = U.prototype.P;
          U.prototype.wa = function () {
            return this.b ? this.b.presentationTimeline.wa() : !1
          };
          U.prototype.isInProgress = U.prototype.wa;
          U.prototype.hd = function () {
            if (!this.b || !this.b.periods.length) return !1;
            var a = this.b.periods[0].variants;
            return a.length ? !a[0].video : !1
          };
          U.prototype.isAudioOnly = U.prototype.hd;
          U.prototype.be = function () {
            var a = 0, b = 0;
            this.b && (b = this.b.presentationTimeline, a = b.ia(), b = b.kb());
            return {start: a, end: b}
          };
          U.prototype.seekRange = U.prototype.be;
          U.prototype.keySystem = function () {
            return this.j ? this.j.keySystem() : ""
          };
          U.prototype.keySystem = U.prototype.keySystem;
          U.prototype.drmInfo = function () {
            return this.j ? this.j.b : null
          };
          U.prototype.drmInfo = U.prototype.drmInfo;
          U.prototype.jb = function () {
            return this.j ? this.j.jb() : Infinity
          };
          U.prototype.getExpiration = U.prototype.jb;
          U.prototype.jd = function () {
            return this.Na
          };
          U.prototype.isBuffering = U.prototype.jd;
          U.prototype.qb = function () {
            if (this.J) return Promise.resolve();
            this.dispatchEvent(new G("unloading"));
            var a = Promise.resolve();
            this.F && (a = this.F.cancel(new v(2, 7, 7E3)));
            return a.then(function () {
              this.Oa || (this.Oa = Kg(this).then(function () {
                this.Oa = null
              }.bind(this)));
              return this.Oa
            }.bind(this))
          };
          U.prototype.unload = U.prototype.qb;
          U.prototype.xb = function () {
            return this.h ? this.h.xb() : 0
          };
          U.prototype.getPlaybackRate = U.prototype.xb;
          U.prototype.Be = function (a) {
            this.h && mf(this.h, a);
            this.a && yf(this.a, 1 != a)
          };
          U.prototype.trickPlay = U.prototype.Be;
          U.prototype.Nc = function () {
            this.h && mf(this.h, 1);
            this.a && yf(this.a, !1)
          };
          U.prototype.cancelTrickPlay = U.prototype.Nc;
          U.prototype.fd = function () {
            if (!this.b) return [];
            var a = nc(this.b, kf(this.h)), b = this.C[a] || {};
            return cc(this.b.periods[a], b.audio, b.video)
          };
          U.prototype.getVariantTracks = U.prototype.fd;
          U.prototype.ed = function () {
            if (!this.b) return [];
            var a = nc(this.b, kf(this.h));
            return ec(this.b.periods[a], (this.C[a] || {}).text).filter(function (a) {
              return 0 > this.ab.indexOf(a.id)
            }.bind(this))
          };
          U.prototype.getTextTracks = U.prototype.ed;
          U.prototype.fe = function (a) {
            this.a && (a = gc(S(this.a), a)) && (Lg(this, a, !1), this.ga ? this.fa = a : zf(this.a, a, !0))
          };
          U.prototype.selectTextTrack = U.prototype.fe;
          U.prototype.ge = function (a, b) {
            if (this.a) {
              var c = fc(S(this.a), a);
              c && c.allowedByApplication && c.allowedByKeySystem && (Mg(this, c, !1), Ng(this, c, b))
            }
          };
          U.prototype.selectVariantTrack = U.prototype.ge;
          U.prototype.Uc = function () {
            return this.a ? dc(S(this.a).variants).map(function (a) {
              return a.language
            }).filter(Ea) : []
          };
          U.prototype.getAudioLanguages = U.prototype.Uc;
          U.prototype.dd = function () {
            return this.a ? S(this.a).textStreams.map(function (a) {
              return a.language
            }).filter(Ea) : []
          };
          U.prototype.getTextLanguages = U.prototype.dd;
          U.prototype.de = function (a, b) {
            if (this.a) {
              var c = S(this.a);
              this.na = a;
              this.Ya = b || "";
              Jg(this, c)
            }
          };
          U.prototype.selectAudioLanguage = U.prototype.de;
          U.prototype.ee = function (a, b) {
            if (this.a) {
              var c = S(this.a);
              this.Xa = a;
              this.tb = b || "";
              Jg(this, c)
            }
          };
          U.prototype.selectTextLanguage = U.prototype.ee;
          U.prototype.ld = function () {
            return this.w ? this.w.isTextVisible() : this.gb
          };
          U.prototype.isTextTrackVisible = U.prototype.ld;
          U.prototype.je = function (a) {
            this.w ? this.w.setTextVisibility(a) : this.gb = a;
            Og(this)
          };
          U.prototype.setTextTrackVisibility = U.prototype.je;
          U.prototype.Zc = function () {
            return this.b ? new Date(1E3 * this.b.presentationTimeline.c + 1E3 * this.f.currentTime) : null
          };
          U.prototype.getPlayheadTimeAsDate = U.prototype.Zc;
          U.prototype.bd = function () {
            return this.b ? new Date(1E3 * this.b.presentationTimeline.c) : null
          };
          U.prototype.getPresentationStartTimeAsDate = U.prototype.bd;
          U.prototype.getStats = function () {
            Pg(this);
            this.Wa();
            var a = null, b = null, c = this.f, c = c && c.getVideoPlaybackQuality ? c.getVideoPlaybackQuality() : {};
            this.h && this.b && (a = nc(this.b, kf(this.h)), b = this.C[a], b = mc(b.audio, b.video, this.b.periods[a].variants), a = b.video || {});
            a || (a = {});
            b || (b = {});
            return {
              width: a.width || 0,
              height: a.height || 0,
              streamBandwidth: b.bandwidth || 0,
              decodedFrames: Number(c.totalVideoFrames),
              droppedFrames: Number(c.droppedVideoFrames),
              estimatedBandwidth: this.g ? this.g.getBandwidthEstimate() : NaN,
              loadLatency: this.i.loadLatency,
              playTime: this.i.playTime,
              bufferingTime: this.i.bufferingTime,
              switchHistory: Aa(this.i.switchHistory),
              stateHistory: Aa(this.i.stateHistory)
            }
          };
          U.prototype.getStats = U.prototype.getStats;
          U.prototype.addTextTrack = function (a, b, c, d, e, f) {
            if (!this.a) return Promise.reject();
            for (var g = S(this.a), h, l = 0; l < this.b.periods.length; l++) if (this.b.periods[l] == g) {
              if (l == this.b.periods.length - 1) {
                if (h = this.b.presentationTimeline.Y() - g.startTime, Infinity == h) return Promise.reject()
              } else h = this.b.periods[l + 1].startTime - g.startTime;
              break
            }
            var m = {
              id: this.Jc++,
              createSegmentIndex: Promise.resolve.bind(Promise),
              findSegmentPosition: function () {
                return 1
              },
              getSegmentReference: function (b) {
                return 1 != b ? null : new L(1, 0,
                  h, function () {
                    return [a]
                  }, 0, null)
              },
              initSegmentReference: null,
              presentationTimeOffset: 0,
              mimeType: d,
              codecs: e || "",
              kind: c,
              encrypted: !1,
              keyId: null,
              language: b,
              label: f || null,
              type: "text",
              primary: !1,
              trickModeVideo: null,
              containsEmsgBoxes: !1,
              roles: [],
              channelsCount: null
            };
            this.ab.push(m.id);
            g.textStreams.push(m);
            return vf(this.a, {text: m}).then(function () {
              if (!this.J) {
                var a = this.b.periods.indexOf(g), d = xf(this.a);
                d.text && (this.C[a].text = d.text.id);
                this.ab.splice(this.ab.indexOf(m.id), 1);
                Jg(this, g);
                Fg(this);
                return {
                  id: m.id,
                  active: !1,
                  type: "text",
                  bandwidth: 0,
                  language: b,
                  label: f || null,
                  kind: c,
                  width: null,
                  height: null
                }
              }
            }.bind(this))
          };
          U.prototype.addTextTrack = U.prototype.addTextTrack;
          U.prototype.Pb = function (a, b) {
            this.bb.width = a;
            this.bb.height = b
          };
          U.prototype.setMaxHardwareResolution = U.prototype.Pb;
          U.prototype.xc = function () {
            if (this.a) {
              var a = this.a;
              if (a.f) a = !1; else if (a.l) a = !1; else {
                for (var b in a.c) {
                  var c = a.c[b];
                  c.Pa && (c.Pa = !1, Ef(a, c, .1))
                }
                a = !0
              }
            } else a = !1;
            return a
          };
          U.prototype.retryStreaming = U.prototype.xc;

          function Mg(a, b, c) {
            b.video && Qg(a, b.video);
            b.audio && Qg(a, b.audio);
            var d = wf(a.a), e = xf(a.a);
            b != lc(e.audio, e.video, d ? d.variants : []) && a.i.switchHistory.push({
              timestamp: Date.now() / 1E3,
              id: b.id,
              type: "variant",
              fromAdaptation: c,
              bandwidth: b.bandwidth
            })
          }

          function Lg(a, b, c) {
            Qg(a, b);
            a.i.switchHistory.push({
              timestamp: Date.now() / 1E3,
              id: b.id,
              type: "text",
              fromAdaptation: c,
              bandwidth: null
            })
          }

          function Qg(a, b) {
            var c = oc(a.b, b);
            a.C[c] || (a.C[c] = {});
            a.C[c][b.type] = b.id
          }

          function Ag(a) {
            a.m && (a.m.la(a.T, "sourceopen"), a.m.la(a.f, "loadeddata"), a.m.la(a.f, "playing"), a.m.la(a.f, "pause"), a.m.la(a.f, "ended"));
            a.f && (a.f.removeAttribute("src"), a.f.load());
            var b = Promise.all([a.g ? a.g.stop() : null, a.j ? a.j.o() : null, a.Ma ? a.Ma.o() : null, a.h ? a.h.o() : null, a.B ? a.B.o() : null, a.a ? a.a.o() : null, a.l ? a.l.stop() : null, a.w ? a.w.o() : null]);
            a.j = null;
            a.Ma = null;
            a.h = null;
            a.B = null;
            a.a = null;
            a.l = null;
            a.w = null;
            a.b = null;
            a.fb = null;
            a.cb = null;
            a.T = null;
            a.eb = [];
            a.C = {};
            a.i = yg();
            return b
          }

          function Kg(a) {
            return a.l ? Ag(a).then(function () {
              this.J || (this.Ec(!1), this.cb = zg(this))
            }.bind(a)) : Promise.resolve()
          }

          function Hg() {
            return {
              ".drm.servers": "",
              ".drm.clearKeys": "",
              ".drm.advanced": {
                distinctiveIdentifierRequired: !1,
                persistentStateRequired: !1,
                videoRobustness: "",
                audioRobustness: "",
                serverCertificate: new Uint8Array(0)
              }
            }
          }

          function xg(a) {
            return {
              drm: {
                retryParameters: xa(),
                servers: {},
                clearKeys: {},
                advanced: {},
                delayLicenseRequestUntilPlayed: !1
              },
              manifest: {
                retryParameters: xa(), dash: {
                  customScheme: function (a) {
                    if (a) return null
                  }, clockSyncUri: "", ignoreDrmInfo: !1, xlinkFailGracefully: !1
                }, hls: {defaultTimeOffset: 0}
              },
              streaming: {
                retryParameters: xa(),
                failureCallback: a.Qc.bind(a),
                rebufferingGoal: 2,
                bufferingGoal: 10,
                bufferBehind: 30,
                ignoreTextStreamFailures: !1,
                startAtSegmentBoundary: !1,
                smallGapLimit: .5,
                jumpLargeGaps: !1
              },
              abrFactory: F,
              textDisplayFactory: function (a) {
                return new T(a)
              }.bind(null,
                a.f),
              abr: {
                enabled: !0,
                defaultBandwidthEstimate: 5E5,
                switchInterval: 8,
                bandwidthUpgradeTarget: .85,
                bandwidthDowngradeTarget: .95,
                restrictions: {
                  minWidth: 0,
                  maxWidth: Infinity,
                  minHeight: 0,
                  maxHeight: Infinity,
                  minPixels: 0,
                  maxPixels: Infinity,
                  minBandwidth: 0,
                  maxBandwidth: Infinity
                }
              },
              preferredAudioLanguage: "",
              preferredTextLanguage: "",
              restrictions: {
                minWidth: 0,
                maxWidth: Infinity,
                minHeight: 0,
                maxHeight: Infinity,
                minPixels: 0,
                maxPixels: Infinity,
                minBandwidth: 0,
                maxBandwidth: Infinity
              },
              playRangeStart: 0,
              playRangeEnd: Infinity
            }
          }

          k = U.prototype;
          k.Qc = function (a) {
            var b = [1001, 1002, 1003];
            this.P() && this.Wb && 0 <= b.indexOf(a.code) && (a.severity = 1, this.xc())
          };

          function yg() {
            return {
              width: NaN,
              height: NaN,
              streamBandwidth: NaN,
              decodedFrames: NaN,
              droppedFrames: NaN,
              estimatedBandwidth: NaN,
              loadLatency: NaN,
              playTime: 0,
              bufferingTime: 0,
              switchHistory: [],
              stateHistory: []
            }
          }

          k.Qb = function (a) {
            var b = this.a ? xf(this.a) : {};
            a.forEach(function (a) {
              ac(this.j, b, a)
            }.bind(this));
            var c = 0;
            a.forEach(function (a) {
              0 < dc(a.variants).length && c++
            }.bind(this));
            if (!c) throw new v(2, 4, 9009);
            if (c < a.length) throw new v(2, 4, 4011);
            a.forEach(function (a) {
              $b(a, this.c.restrictions, this.bb) && this.a && S(this.a) == a && Fg(this);
              if (1 > dc(a.variants).length) throw new v(2, 4, 4012);
            }.bind(this))
          };
          k.hb = function (a) {
            var b = this.a ? xf(this.a) : {};
            ac(this.j, b, a);
            b = 0 < dc(a.variants).length;
            $b(a, this.c.restrictions, this.bb) && this.a && S(this.a) == a && Fg(this);
            a = 1 > dc(a.variants).length;
            if (!b) throw new v(2, 4, 4011);
            if (a) throw new v(2, 4, 4012);
          };

          function Ng(a, b, c) {
            a.ga ? (a.sa = b, a.Vb = c || !1) : Af(a.a, b, c || !1)
          }

          function Pg(a) {
            if (a.b) {
              var b = Date.now() / 1E3;
              a.Na ? a.i.bufferingTime += b - a.$a : a.i.playTime += b - a.$a;
              a.$a = b
            }
          }

          function Eg(a, b) {
            function c(a, b) {
              if (!a) return null;
              var c = a.findSegmentPosition(b - e.startTime);
              return null == c ? null : (c = a.getSegmentReference(c)) ? c.startTime + e.startTime : null
            }

            var d = xf(a.a), e = S(a.a), f = c(d.video, b), d = c(d.audio, b);
            return null != f && null != d ? Math.max(f, d) : null != f ? f : null != d ? d : b
          }

          k.pe = function (a, b) {
            this.g && this.g.segmentDownloaded(a, b)
          };
          k.Ec = function (a) {
            Pg(this);
            this.Na = a;
            this.Wa();
            if (this.h) {
              var b = this.h;
              a != b.h && (b.h = a, mf(b, b.g))
            }
            this.dispatchEvent(new G("buffering", {buffering: a}))
          };
          k.le = function () {
            Fg(this)
          };
          k.Wa = function () {
            if (!this.J) {
              var a = this.Na ? "buffering" : this.f.ended ? "ended" : this.f.paused ? "paused" : "playing";
              var b = Date.now() / 1E3;
              if (this.i.stateHistory.length) {
                var c = this.i.stateHistory[this.i.stateHistory.length - 1];
                c.duration = b - c.timestamp;
                if (a == c.state) return
              }
              this.i.stateHistory.push({timestamp: b, state: a, duration: 0})
            }
          };
          k.oe = function () {
            if (this.B) {
              var a = this.B;
              a.c.forEach(a.m.bind(a, !0))
            }
            this.a && Df(this.a)
          };

          function Rg(a, b) {
            if (!b || !b.length) return a.La(new v(2, 4, 4012)), null;
            a.g.setVariants(b);
            if (a.g.chooseStreams) {
              var c = a.g.chooseStreams(["video", "audio"]);
              return lc(c.audio, c.video, b)
            }
            return a.g.chooseVariant()
          }

          function Jg(a, b) {
            var c = hc(b, a.na, a.Ya), d = jc(b, a.Xa, a.tb);
            if (c = Rg(a, c)) Mg(a, c, !0), Ng(a, c, !0);
            if (d = d[0]) Lg(a, d, !0), a.ga ? a.fa = d : zf(a.a, d, !0);
            Gg(a)
          }

          k.od = function (a) {
            this.ga = !0;
            this.g.disable();
            var b = {audio: !1, text: !1}, c = hc(a, this.na, this.Ya, b);
            a = jc(a, this.Xa, this.tb, b);
            c = Rg(this, c);
            a = a[0] || null;
            this.fa = this.sa = null;
            c && Mg(this, c, !0);
            a && (Lg(this, a, !0), !wf(this.a) && c && c.audio && b.text && a.language != c.audio.language && (this.w.setTextVisibility(!0), Og(this)));
            return {variant: c, text: a}
          };
          k.Mc = function () {
            this.ga = !1;
            this.c.abr.enabled && this.g.enable();
            this.sa && (Af(this.a, this.sa, this.Vb), this.sa = null);
            this.fa && (zf(this.a, this.fa, !0), this.fa = null)
          };
          k.ud = function () {
            this.l && this.l.update && this.l.update()
          };
          k.Dd = function () {
            this.h && this.h.Fb()
          };
          k.Fc = function (a, b) {
            Mg(this, a, !0);
            this.a && (Af(this.a, a, b || !1), Gg(this))
          };
          k.Ae = function (a, b) {
            if (this.a) {
              var c = wf(this.a);
              (c = lc(a.audio, a.video, c ? c.variants : [])) && this.Fc(c, b)
            }
          };

          function Gg(a) {
            Promise.resolve().then(function () {
              this.J || this.dispatchEvent(new G("adaptation"))
            }.bind(a))
          }

          function Fg(a) {
            Promise.resolve().then(function () {
              this.J || this.dispatchEvent(new G("trackschanged"))
            }.bind(a))
          }

          function Og(a) {
            a.dispatchEvent(new G("texttrackvisibility"))
          }

          k.La = function (a) {
            if (!this.J) {
              var b = new G("error", {detail: a});
              this.dispatchEvent(b);
              b.defaultPrevented && (a.handled = !0)
            }
          };
          k.Gd = function (a) {
            this.B ? this.B.s(a) : this.eb.push(a)
          };
          k.pb = function (a) {
            this.dispatchEvent(a)
          };
          k.Hd = function () {
            if (this.f.error) {
              var a = this.f.error.code;
              if (1 != a) {
                var b = this.f.error.msExtendedCode;
                b && (0 > b && (b += Math.pow(2, 32)), b = b.toString(16));
                this.La(new v(2, 3, 3016, a, b, this.f.error.message))
              }
            }
          };
          k.ne = function (a) {
            var b = ["output-restricted", "internal-error"], c = S(this.a), d = !1,
              e = 1 == Object.keys(a).length && "00" == Object.keys(a)[0];
            c.variants.forEach(function (c) {
              var f = [];
              c.audio && f.push(c.audio);
              c.video && f.push(c.video);
              f.forEach(function (f) {
                var g = c.allowedByKeySystem;
                f.keyId && (f = a[e ? "00" : f.keyId], c.allowedByKeySystem = !!f && 0 > b.indexOf(f));
                g != c.allowedByKeySystem && (d = !0)
              })
            });
            var f = xf(this.a);
            (f = lc(f.audio, f.video, c.variants)) && !f.allowedByKeySystem && Jg(this, c);
            d && Fg(this)
          };
          k.me = function (a, b) {
            if (this.l && this.l.onExpirationUpdated) this.l.onExpirationUpdated(a, b);
            this.dispatchEvent(new G("expirationupdated"))
          };

          function V(a) {
            if (!a || a.constructor != U) throw new v(2, 9, 9008);
            this.a = ig();
            this.g = a;
            this.b = Sg(this);
            this.c = null;
            this.s = !1;
            this.j = null;
            this.h = -1;
            this.l = 0;
            this.f = null;
            this.i = new jg(this.a, a.s, a.getConfiguration().streaming.retryParameters, this.b)
          }

          n("shaka.offline.Storage", V);

          function Tg() {
            return !!window.indexedDB
          }

          V.support = Tg;
          V.prototype.o = function () {
            var a = this.a, b = this.i ? this.i.o()["catch"](function () {
            }).then(function () {
              if (a) return a.o()
            }) : Promise.resolve();
            this.b = this.g = this.i = this.a = null;
            return b
          };
          V.prototype.destroy = V.prototype.o;
          V.prototype.configure = function (a) {
            za(this.b, a, Sg(this), {}, "")
          };
          V.prototype.configure = V.prototype.configure;
          V.prototype.ye = function (a, b, c) {
            function d(a) {
              f = a
            }

            if (this.s) return Promise.reject(new v(2, 9, 9006));
            this.s = !0;
            var e, f = null;
            return Ug(this).then(function () {
              W(this);
              return Vg(this, a, d, c)
            }.bind(this)).then(function (c) {
              W(this);
              this.f = c.manifest;
              this.c = c.Rc;
              if (this.f.presentationTimeline.P() || this.f.presentationTimeline.wa()) throw new v(2, 9, 9005, a);
              this.m(this.f.periods);
              this.h = this.a.c.manifest++;
              this.l = 0;
              c = b || {};
              var d = this.f.periods.map(this.C.bind(this)), f = this.c.b, g = rb(this.c);
              if (f) {
                if (!g.length) throw new v(2,
                  9, 9007, a);
                f.initData = []
              }
              e = {
                key: this.h,
                originalManifestUri: a,
                duration: this.l,
                size: 0,
                expiration: this.c.jb(),
                periods: d,
                sessionIds: this.b.usePersistentLicense ? g : [],
                drmInfo: f,
                appMetadata: c
              };
              return lg(this.i, e)
            }.bind(this)).then(function () {
              W(this);
              if (f) throw f;
              return Wg(this)
            }.bind(this)).then(function () {
              return cg(e)
            }.bind(this))["catch"](function (a) {
              return Wg(this)["catch"](Ca).then(function () {
                throw a;
              })
            }.bind(this))
          };
          V.prototype.store = V.prototype.ye;
          V.prototype.remove = function (a) {
            function b(a) {
              6013 != a.code && (e = a)
            }

            var c = a.offlineUri, d = /^offline:([0-9]+)$/.exec(c);
            if (!d) return Promise.reject(new v(2, 9, 9004, c));
            var e = null, f, g, h = Number(d[1]);
            return Ug(this).then(function () {
              W(this);
              return this.a.get("manifest", h)
            }.bind(this)).then(function (a) {
              W(this);
              if (!a) throw new v(2, 9, 9003, c);
              f = a;
              a = og(f);
              g = new jb(this.g.s, b, function () {
              }, function () {
              });
              g.configure(this.g.getConfiguration().drm);
              return g.init(a, this.b.usePersistentLicense || !1)
            }.bind(this)).then(function () {
              return ob(g,
                f.sessionIds)
            }.bind(this)).then(function () {
              return g.o()
            }.bind(this)).then(function () {
              W(this);
              if (e) throw e;
              var b = f.periods.map(function (a) {
                return a.streams.map(function (a) {
                  var b = a.segments.map(function (a) {
                    a = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a.uri);
                    return Number(a[1])
                  });
                  a.initSegmentUri && (a = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a.initSegmentUri), b.push(Number(a[1])));
                  return b
                }).reduce(z, [])
              }).reduce(z, []), c = 0, d = b.length, g = this.b.progressCallback;
              return $f(this.a, b, function () {
                c++;
                g(a, c / d)
              })
            }.bind(this)).then(function () {
              W(this);
              this.b.progressCallback(a, 1);
              return this.a.remove("manifest", h)
            }.bind(this))
          };
          V.prototype.remove = V.prototype.remove;
          V.prototype.list = function () {
            var a = [];
            return Ug(this).then(function () {
              W(this);
              return this.a.forEach("manifest", function (b) {
                a.push(cg(b))
              })
            }.bind(this)).then(function () {
              return a
            })
          };
          V.prototype.list = V.prototype.list;

          function Vg(a, b, c, d) {
            function e() {
            }

            var f = a.g.s, g = a.g.getConfiguration(), h, l, m;
            return Wd(b, f, g.manifest.retryParameters, d).then(function (a) {
              W(this);
              m = new a;
              m.configure(g.manifest);
              return m.start(b, {
                networkingEngine: f,
                filterAllPeriods: this.m.bind(this),
                filterNewPeriod: this.w.bind(this),
                onTimelineRegionAdded: function () {
                },
                onEvent: function () {
                },
                onError: c
              })
            }.bind(a)).then(function (a) {
              W(this);
              h = a;
              l = new jb(f, c, e, function () {
              });
              l.configure(g.drm);
              return l.init(h, this.b.usePersistentLicense || !1)
            }.bind(a)).then(function () {
              W(this);
              return Xg(h)
            }.bind(a)).then(function () {
              W(this);
              return nb(l)
            }.bind(a)).then(function () {
              W(this);
              return m.stop()
            }.bind(a)).then(function () {
              W(this);
              return {manifest: h, Rc: l}
            }.bind(a))["catch"](function (a) {
              if (m) return m.stop().then(function () {
                throw a;
              });
              throw a;
            })
          }

          V.prototype.B = function (a) {
            for (var b = [], c = Xb(this.g.getConfiguration().preferredAudioLanguage), d = [0, Vb, Wb], e = a.filter(function (a) {
              return "variant" == a.type
            }), d = d.map(function (a) {
              return e.filter(function (b) {
                b = Xb(b.language);
                return Ub(a, c, b)
              })
            }), f, g = 0; g < d.length; g++) if (d[g].length) {
              f = d[g];
              break
            }
            f || (d = e.filter(function (a) {
              return a.primary
            }), d.length && (f = d));
            f || (f = e, e.map(function (a) {
              return a.language
            }).filter(Ea));
            var h = f.filter(function (a) {
              return a.height && 480 >= a.height
            });
            h.length && (h.sort(function (a,
                                          b) {
              return b.height - a.height
            }), f = h.filter(function (a) {
              return a.height == h[0].height
            }));
            f.sort(function (a, b) {
              return a.bandwidth - b.bandwidth
            });
            f.length && b.push(f[Math.floor(f.length / 2)]);
            b.push.apply(b, a.filter(function (a) {
              return "text" == a.type
            }));
            return b
          };

          function Sg(a) {
            return {
              trackSelectionCallback: a.B.bind(a), progressCallback: function (a, c) {
                if (a || c) return null
              }, usePersistentLicense: !0
            }
          }

          function Ug(a) {
            return a.a ? a.a.a ? Promise.resolve() : a.a.init(bg) : Promise.reject(new v(2, 9, 9E3))
          }

          V.prototype.m = function (a) {
            a.forEach(this.w.bind(this))
          };
          V.prototype.w = function (a) {
            var b = {};
            if (this.j) {
              var c = this.j.filter(function (a) {
                return "variant" == a.type
              }), d = null;
              c.length && (d = fc(a, c[0]));
              d && (d.video && (b.video = d.video), d.audio && (b.audio = d.audio))
            }
            ac(this.c, b, a);
            $b(a, this.g.getConfiguration().restrictions, {width: Infinity, height: Infinity})
          };

          function Wg(a) {
            var b = a.c ? a.c.o() : Promise.resolve();
            a.c = null;
            a.f = null;
            a.s = !1;
            a.j = null;
            a.h = -1;
            return b
          }

          function Xg(a) {
            var b = a.periods.map(function (a) {
              return a.variants
            }).reduce(z, []).map(function (a) {
              var b = [];
              a.audio && b.push(a.audio);
              a.video && b.push(a.video);
              return b
            }).reduce(z, []).filter(Ea);
            a = a.periods.map(function (a) {
              return a.textStreams
            }).reduce(z, []);
            b.push.apply(b, a);
            return Promise.all(b.map(function (a) {
              return a.createSegmentIndex()
            }))
          }

          V.prototype.C = function (a) {
            var b, c, d = cc(a, null, null), e = ec(a, null), d = this.b.trackSelectionCallback(d.concat(e));
            this.j || (this.j = d, this.m(this.f.periods));
            for (e = d.length - 1; 0 < e; --e) {
              var f = !1;
              for (c = e - 1; 0 <= c; --c) if (d[e].type == d[c].type && d[e].kind == d[c].kind && d[e].language == d[c].language) {
                f = !0;
                break
              }
              if (f) break
            }
            f = [];
            for (e = 0; e < d.length; e++) (b = fc(a, d[e])) ? (b.audio && ((c = f.filter(function (a) {
              return a.id == b.audio.id
            })[0]) ? c.variantIds.push(b.id) : (c = b.video ? b.bandwidth / 2 : b.bandwidth, f.push(Yg(this, a, b.audio, c,
              b.id)))), b.video && ((c = f.filter(function (a) {
              return a.id == b.video.id
            })[0]) ? c.variantIds.push(b.id) : (c = b.audio ? b.bandwidth / 2 : b.bandwidth, f.push(Yg(this, a, b.video, c, b.id))))) : f.push(Yg(this, a, gc(a, d[e]), 0));
            return {startTime: a.startTime, streams: f}
          };

          function Yg(a, b, c, d, e) {
            var f = [], g = a.f.presentationTimeline.ia();
            var h = g;
            for (var l = c.findSegmentPosition(g), m = null != l ? c.getSegmentReference(l) : null; m;) h = a.a.c.segment++, kg(a.i, c.type, m, (m.endTime - m.startTime) * d / 8, {
              key: h,
              data: null,
              manifestKey: a.h,
              streamNumber: c.id,
              segmentNumber: h
            }), f.push({
              startTime: m.startTime,
              endTime: m.endTime,
              uri: "offline:" + a.h + "/" + c.id + "/" + h
            }), h = m.endTime + b.startTime, m = c.getSegmentReference(++l);
            a.l = Math.max(a.l, h - g);
            b = null;
            c.initSegmentReference && (h = a.a.c.segment++, b = "offline:" +
              a.h + "/" + c.id + "/" + h, kg(a.i, c.contentType, c.initSegmentReference, 0, {
              key: h,
              data: null,
              manifestKey: a.h,
              streamNumber: c.id,
              segmentNumber: -1
            }));
            a = [];
            null != e && a.push(e);
            return {
              id: c.id,
              primary: c.primary,
              presentationTimeOffset: c.presentationTimeOffset || 0,
              contentType: c.type,
              mimeType: c.mimeType,
              codecs: c.codecs,
              frameRate: c.frameRate,
              kind: c.kind,
              language: c.language,
              label: c.label,
              width: c.width || null,
              height: c.height || null,
              initSegmentUri: b,
              encrypted: c.encrypted,
              keyId: c.keyId,
              segments: f,
              variantIds: a
            }
          }

          function W(a) {
            if (!a.g) throw new v(2, 9, 9002);
          }

          Bg.offline = Tg;
          n("shaka.polyfill.installAll", function () {
            for (var a = 0; a < Zg.length; ++a) Zg[a]()
          });
          var Zg = [];

          function $g(a) {
            Zg.push(a)
          }

          n("shaka.polyfill.register", $g);

          function ah(a) {
            var b = a.type.replace(/^(webkit|moz|MS)/, "").toLowerCase();
            if ("function" === typeof Event) var c = new Event(b, a); else c = document.createEvent("Event"), c.initEvent(b, a.bubbles, a.cancelable);
            a.target.dispatchEvent(c)
          }

          $g(function () {
            if (window.Document) {
              var a = Element.prototype;
              a.requestFullscreen = a.requestFullscreen || a.mozRequestFullScreen || a.msRequestFullscreen || a.webkitRequestFullscreen;
              a = Document.prototype;
              a.exitFullscreen = a.exitFullscreen || a.mozCancelFullScreen || a.msExitFullscreen || a.webkitExitFullscreen;
              "fullscreenElement" in document || (Object.defineProperty(document, "fullscreenElement", {
                get: function () {
                  return document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement
                }
              }), Object.defineProperty(document,
                "fullscreenEnabled", {
                  get: function () {
                    return document.mozFullScreenEnabled || document.msFullscreenEnabled || document.webkitFullscreenEnabled
                  }
                }));
              document.addEventListener("webkitfullscreenchange", ah);
              document.addEventListener("webkitfullscreenerror", ah);
              document.addEventListener("mozfullscreenchange", ah);
              document.addEventListener("mozfullscreenerror", ah);
              document.addEventListener("MSFullscreenChange", ah);
              document.addEventListener("MSFullscreenError", ah)
            }
          });
          $g(function () {
            var a = navigator.userAgent;
            a && 0 <= a.indexOf("CrKey") && delete window.indexedDB
          });
          var bh;

          function ch(a, b, c) {
            if ("input" == a) switch (this.type) {
              case "range":
                a = "change"
            }
            bh.call(this, a, b, c)
          }

          $g(function () {
            0 > navigator.userAgent.indexOf("Trident/") || HTMLInputElement.prototype.addEventListener == ch || (bh = HTMLInputElement.prototype.addEventListener, HTMLInputElement.prototype.addEventListener = ch)
          });
          $g(function () {
            if (4503599627370497 != Math.round(4503599627370497)) {
              var a = Math.round;
              Math.round = function (b) {
                var c = b;
                4503599627370496 >= b && (c = a(b));
                return c
              }
            }
          });

          function dh(a) {
            this.f = [];
            this.b = [];
            this.a = [];
            (new N).aa("pssh", this.c.bind(this)).parse(a.buffer)
          }

          dh.prototype.c = function (a) {
            if (!(1 < a.version)) {
              var b = hb(a.u.Ja(16)), c = [];
              if (0 < a.version) for (var d = a.u.D(), e = 0; e < d; ++e) {
                var f = hb(a.u.Ja(16));
                c.push(f)
              }
              d = a.u.D();
              a.u.I(d);
              this.b.push.apply(this.b, c);
              this.f.push(b);
              this.a.push({start: a.start, end: a.start + a.size - 1})
            }
          };

          function eh(a, b) {
            try {
              var c = new fh(a, b);
              return Promise.resolve(c)
            } catch (d) {
              return Promise.reject(d)
            }
          }

          function fh(a, b) {
            this.keySystem = a;
            for (var c = !1, d = 0; d < b.length; ++d) {
              var e = b[d];
              var f = {
                audioCapabilities: [],
                videoCapabilities: [],
                persistentState: "optional",
                distinctiveIdentifier: "optional",
                initDataTypes: e.initDataTypes,
                sessionTypes: ["temporary"],
                label: e.label
              }, g = !1;
              if (e.audioCapabilities) for (var h = 0; h < e.audioCapabilities.length; ++h) {
                var l = e.audioCapabilities[h];
                if (l.contentType) {
                  g = !0;
                  var m = l.contentType.split(";")[0];
                  MSMediaKeys.isTypeSupported(this.keySystem, m) && (f.audioCapabilities.push(l), c = !0)
                }
              }
              if (e.videoCapabilities) for (h =
                                              0; h < e.videoCapabilities.length; ++h) l = e.videoCapabilities[h], l.contentType && (g = !0, m = l.contentType.split(";")[0], MSMediaKeys.isTypeSupported(this.keySystem, m) && (f.videoCapabilities.push(l), c = !0));
              g || (c = MSMediaKeys.isTypeSupported(this.keySystem, "video/mp4"));
              "required" == e.persistentState && (c = !1);
              if (c) {
                this.a = f;
                return
              }
            }
            e = Error("Unsupported keySystem");
            e.name = "NotSupportedError";
            e.code = DOMException.NOT_SUPPORTED_ERR;
            throw e;
          }

          fh.prototype.createMediaKeys = function () {
            var a = new gh(this.keySystem);
            return Promise.resolve(a)
          };
          fh.prototype.getConfiguration = function () {
            return this.a
          };

          function hh(a) {
            var b = this.mediaKeys;
            b && b != a && ih(b, null);
            delete this.mediaKeys;
            return (this.mediaKeys = a) ? ih(a, this) : Promise.resolve()
          }

          function gh(a) {
            this.a = new MSMediaKeys(a);
            this.b = new B
          }

          gh.prototype.createSession = function (a) {
            if ("temporary" != (a || "temporary")) throw new TypeError("Session type " + a + " is unsupported on this platform.");
            return new jh(this.a)
          };
          gh.prototype.setServerCertificate = function () {
            return Promise.resolve(!1)
          };

          function ih(a, b) {
            function c() {
              b.msSetMediaKeys(d.a);
              b.removeEventListener("loadedmetadata", c)
            }

            Na(a.b);
            if (!b) return Promise.resolve();
            C(a.b, b, "msneedkey", kh);
            var d = a;
            try {
              return 1 <= b.readyState ? b.msSetMediaKeys(a.a) : b.addEventListener("loadedmetadata", c), Promise.resolve()
            } catch (e) {
              return Promise.reject(e)
            }
          }

          function jh(a) {
            p.call(this);
            this.c = null;
            this.g = a;
            this.b = this.a = null;
            this.f = new B;
            this.sessionId = "";
            this.expiration = NaN;
            this.closed = new y;
            this.keyStatuses = new lh
          }

          ba(jh);
          k = jh.prototype;
          k.generateRequest = function (a, b) {
            this.a = new y;
            try {
              this.c = this.g.createSession("video/mp4", new Uint8Array(b), null), C(this.f, this.c, "mskeymessage", this.yd.bind(this)), C(this.f, this.c, "mskeyadded", this.wd.bind(this)), C(this.f, this.c, "mskeyerror", this.xd.bind(this)), mh(this, "status-pending")
            } catch (c) {
              this.a.reject(c)
            }
            return this.a
          };
          k.load = function () {
            return Promise.reject(Error("MediaKeySession.load not yet supported"))
          };
          k.update = function (a) {
            this.b = new y;
            try {
              this.c.update(new Uint8Array(a))
            } catch (b) {
              this.b.reject(b)
            }
            return this.b
          };
          k.close = function () {
            try {
              this.c.close(), this.closed.resolve(), Na(this.f)
            } catch (a) {
              this.closed.reject(a)
            }
            return this.closed
          };
          k.remove = function () {
            return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"))
          };

          function kh(a) {
            var b = document.createEvent("CustomEvent");
            b.initCustomEvent("encrypted", !1, !1, null);
            b.initDataType = "cenc";
            var c = a.initData;
            if (c) {
              var d = new dh(c);
              if (1 >= d.a.length) a = c; else {
                var e = [];
                for (a = 0; a < d.a.length; a++) e.push(c.subarray(d.a[a].start, d.a[a].end + 1));
                c = Ja(e, nh);
                for (a = d = 0; a < c.length; a++) d += c[a].length;
                d = new Uint8Array(d);
                for (a = e = 0; a < c.length; a++) d.set(c[a], e), e += c[a].length;
                a = d
              }
            } else a = c;
            b.initData = a;
            this.dispatchEvent(b)
          }

          function nh(a, b) {
            return ib(a, b)
          }

          k.yd = function (a) {
            this.a && (this.a.resolve(), this.a = null);
            this.dispatchEvent(new G("message", {
              messageType: void 0 == this.keyStatuses.a ? "licenserequest" : "licenserenewal",
              message: a.message.buffer
            }))
          };
          k.wd = function () {
            this.a ? (mh(this, "usable"), this.a.resolve(), this.a = null) : this.b && (mh(this, "usable"), this.b.resolve(), this.b = null)
          };
          k.xd = function () {
            var a = Error("EME PatchedMediaKeysMs key error");
            a.errorCode = this.c.error;
            if (this.a) this.a.reject(a), this.a = null; else if (this.b) this.b.reject(a), this.b = null; else switch (this.c.error.code) {
              case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:
              case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:
                mh(this, "output-not-allowed");
              default:
                mh(this, "internal-error")
            }
          };

          function mh(a, b) {
            var c = a.keyStatuses;
            c.size = void 0 == b ? 0 : 1;
            c.a = b;
            a.dispatchEvent(new G("keystatuseschange"))
          }

          function lh() {
            this.size = 0;
            this.a = void 0
          }

          var oh;
          k = lh.prototype;
          k.forEach = function (a) {
            this.a && a(this.a, oh)
          };
          k.get = function (a) {
            if (this.has(a)) return this.a
          };
          k.has = function (a) {
            var b = oh;
            return this.a && ib(new Uint8Array(a), new Uint8Array(b)) ? !0 : !1
          };
          k.entries = function () {
          };
          k.keys = function () {
          };
          k.values = function () {
          };

          function ph() {
            return Promise.reject(Error("The key system specified is not supported."))
          }

          function qh(a) {
            return a ? Promise.reject(Error("MediaKeys not supported.")) : Promise.resolve()
          }

          function rh() {
            throw new TypeError("Illegal constructor.");
          }

          rh.prototype.createSession = function () {
          };
          rh.prototype.setServerCertificate = function () {
          };

          function sh() {
            throw new TypeError("Illegal constructor.");
          }

          sh.prototype.getConfiguration = function () {
          };
          sh.prototype.createMediaKeys = function () {
          };
          var th = "";

          function uh(a) {
            th = a;
            vh = (new Uint8Array([0])).buffer;
            navigator.requestMediaKeySystemAccess = wh;
            delete HTMLMediaElement.prototype.mediaKeys;
            HTMLMediaElement.prototype.mediaKeys = null;
            HTMLMediaElement.prototype.setMediaKeys = xh;
            window.MediaKeys = yh;
            window.MediaKeySystemAccess = zh
          }

          function Ah(a) {
            var b = th;
            return b ? b + a.charAt(0).toUpperCase() + a.slice(1) : a
          }

          function wh(a, b) {
            try {
              var c = new zh(a, b);
              return Promise.resolve(c)
            } catch (d) {
              return Promise.reject(d)
            }
          }

          function xh(a) {
            var b = this.mediaKeys;
            b && b != a && Bh(b, null);
            delete this.mediaKeys;
            (this.mediaKeys = a) && Bh(a, this);
            return Promise.resolve()
          }

          function zh(a, b) {
            this.a = this.keySystem = a;
            var c = !1;
            "org.w3.clearkey" == a && (this.a = "webkit-org.w3.clearkey", c = !1);
            var d = !1;
            var e = document.getElementsByTagName("video");
            var f = e.length ? e[0] : document.createElement("video");
            for (var g = 0; g < b.length; ++g) {
              e = b[g];
              var h = {
                audioCapabilities: [],
                videoCapabilities: [],
                persistentState: "optional",
                distinctiveIdentifier: "optional",
                initDataTypes: e.initDataTypes,
                sessionTypes: ["temporary"],
                label: e.label
              }, l = !1;
              if (e.audioCapabilities) for (var m = 0; m < e.audioCapabilities.length; ++m) {
                var q =
                  e.audioCapabilities[m];
                if (q.contentType) {
                  var l = !0, w = q.contentType.split(";")[0];
                  f.canPlayType(w, this.a) && (h.audioCapabilities.push(q), d = !0)
                }
              }
              if (e.videoCapabilities) for (m = 0; m < e.videoCapabilities.length; ++m) q = e.videoCapabilities[m], q.contentType && (l = !0, f.canPlayType(q.contentType, this.a) && (h.videoCapabilities.push(q), d = !0));
              l || (d = f.canPlayType("video/mp4", this.a) || f.canPlayType("video/webm", this.a));
              "required" == e.persistentState && (c ? (h.persistentState = "required", h.sessionTypes = ["persistent-license"]) :
                d = !1);
              if (d) {
                this.b = h;
                return
              }
            }
            c = "Unsupported keySystem";
            if ("org.w3.clearkey" == a || "com.widevine.alpha" == a) c = "None of the requested configurations were supported.";
            c = Error(c);
            c.name = "NotSupportedError";
            c.code = DOMException.NOT_SUPPORTED_ERR;
            throw c;
          }

          zh.prototype.createMediaKeys = function () {
            var a = new yh(this.a);
            return Promise.resolve(a)
          };
          zh.prototype.getConfiguration = function () {
            return this.b
          };

          function yh(a) {
            this.g = a;
            this.b = null;
            this.a = new B;
            this.c = [];
            this.f = {}
          }

          function Bh(a, b) {
            a.b = b;
            Na(a.a);
            var c = th;
            b && (C(a.a, b, c + "needkey", a.Ld.bind(a)), C(a.a, b, c + "keymessage", a.Kd.bind(a)), C(a.a, b, c + "keyadded", a.Id.bind(a)), C(a.a, b, c + "keyerror", a.Jd.bind(a)))
          }

          k = yh.prototype;
          k.createSession = function (a) {
            var b = a || "temporary";
            if ("temporary" != b && "persistent-license" != b) throw new TypeError("Session type " + a + " is unsupported on this platform.");
            a = this.b || document.createElement("video");
            a.src || (a.src = "about:blank");
            b = new Ch(a, this.g, b);
            this.c.push(b);
            return b
          };
          k.setServerCertificate = function () {
            return Promise.resolve(!1)
          };
          k.Ld = function (a) {
            var b = document.createEvent("CustomEvent");
            b.initCustomEvent("encrypted", !1, !1, null);
            b.initDataType = "webm";
            b.initData = a.initData;
            this.b.dispatchEvent(b)
          };
          k.Kd = function (a) {
            var b = Dh(this, a.sessionId);
            b && (a = new G("message", {
              messageType: void 0 == b.keyStatuses.a ? "licenserequest" : "licenserenewal",
              message: a.message
            }), b.b && (b.b.resolve(), b.b = null), b.dispatchEvent(a))
          };
          k.Id = function (a) {
            if (a = Dh(this, a.sessionId)) Eh(a, "usable"), a.a && a.a.resolve(), a.a = null
          };
          k.Jd = function (a) {
            var b = Dh(this, a.sessionId);
            if (b) {
              var c = Error("EME v0.1b key error");
              c.errorCode = a.errorCode;
              c.errorCode.systemCode = a.systemCode;
              !a.sessionId && b.b ? (c.method = "generateRequest", 45 == a.systemCode && (c.message = "Unsupported session type."), b.b.reject(c), b.b = null) : a.sessionId && b.a ? (c.method = "update", b.a.reject(c), b.a = null) : (c = a.systemCode, a.errorCode.code == MediaKeyError.MEDIA_KEYERR_OUTPUT ? Eh(b, "output-restricted") : 1 == c ? Eh(b, "expired") : Eh(b, "internal-error"))
            }
          };

          function Dh(a, b) {
            var c = a.f[b];
            return c ? c : (c = a.c.shift()) ? (c.sessionId = b, a.f[b] = c) : null
          }

          function Ch(a, b, c) {
            p.call(this);
            this.f = a;
            this.h = !1;
            this.a = this.b = null;
            this.c = b;
            this.g = c;
            this.sessionId = "";
            this.expiration = NaN;
            this.closed = new y;
            this.keyStatuses = new Fh
          }

          ba(Ch);

          function Gh(a, b, c) {
            if (a.h) return Promise.reject(Error("The session is already initialized."));
            a.h = !0;
            try {
              if ("persistent-license" == a.g) if (c) var d = new Uint8Array(bb("LOAD_SESSION|" + c)); else {
                var e = bb("PERSISTENT|"), f = new Uint8Array(e.byteLength + b.byteLength);
                f.set(new Uint8Array(e), 0);
                f.set(new Uint8Array(b), e.byteLength);
                d = f
              } else d = new Uint8Array(b)
            } catch (h) {
              return Promise.reject(h)
            }
            a.b = new y;
            var g = Ah("generateKeyRequest");
            try {
              a.f[g](a.c, d)
            } catch (h) {
              if ("InvalidStateError" != h.name) return a.b = null, Promise.reject(h);
              setTimeout(function () {
                try {
                  this.f[g](this.c, d)
                } catch (l) {
                  this.b.reject(l), this.b = null
                }
              }.bind(a), 10)
            }
            return a.b
          }

          k = Ch.prototype;
          k.Rb = function (a, b) {
            if (this.a) this.a.then(this.Rb.bind(this, a, b))["catch"](this.Rb.bind(this, a, b)); else {
              this.a = a;
              if ("webkit-org.w3.clearkey" == this.c) {
                var c = E(b);
                var d = JSON.parse(c);
                "oct" != d.keys[0].kty && (this.a.reject(Error("Response is not a valid JSON Web Key Set.")), this.a = null);
                c = fb(d.keys[0].k);
                d = fb(d.keys[0].kid)
              } else c = new Uint8Array(b), d = null;
              var e = Ah("addKey");
              try {
                this.f[e](this.c, c, d, this.sessionId)
              } catch (f) {
                this.a.reject(f), this.a = null
              }
            }
          };

          function Eh(a, b) {
            var c = a.keyStatuses;
            c.size = void 0 == b ? 0 : 1;
            c.a = b;
            a.dispatchEvent(new G("keystatuseschange"))
          }

          k.generateRequest = function (a, b) {
            return Gh(this, b, null)
          };
          k.load = function (a) {
            return "persistent-license" == this.g ? Gh(this, null, a) : Promise.reject(Error("Not a persistent session."))
          };
          k.update = function (a) {
            var b = new y;
            this.Rb(b, a);
            return b
          };
          k.close = function () {
            if ("persistent-license" != this.g) {
              if (!this.sessionId) return this.closed.reject(Error("The session is not callable.")), this.closed;
              var a = Ah("cancelKeyRequest");
              try {
                this.f[a](this.c, this.sessionId)
              } catch (b) {
              }
            }
            this.closed.resolve();
            return this.closed
          };
          k.remove = function () {
            return "persistent-license" != this.g ? Promise.reject(Error("Not a persistent session.")) : this.close()
          };

          function Fh() {
            this.size = 0;
            this.a = void 0
          }

          var vh;
          k = Fh.prototype;
          k.forEach = function (a) {
            this.a && a(this.a, vh)
          };
          k.get = function (a) {
            if (this.has(a)) return this.a
          };
          k.has = function (a) {
            var b = vh;
            return this.a && ib(new Uint8Array(a), new Uint8Array(b)) ? !0 : !1
          };
          k.entries = function () {
          };
          k.keys = function () {
          };
          k.values = function () {
          };
          $g(function () {
            !window.HTMLVideoElement || navigator.requestMediaKeySystemAccess && MediaKeySystemAccess.prototype.getConfiguration || (HTMLMediaElement.prototype.webkitGenerateKeyRequest ? uh("webkit") : HTMLMediaElement.prototype.generateKeyRequest ? uh("") : window.MSMediaKeys ? (oh = (new Uint8Array([0])).buffer, delete HTMLMediaElement.prototype.mediaKeys, HTMLMediaElement.prototype.mediaKeys = null, HTMLMediaElement.prototype.setMediaKeys = hh, window.MediaKeys = gh, window.MediaKeySystemAccess = fh, navigator.requestMediaKeySystemAccess =
              eh) : (navigator.requestMediaKeySystemAccess = ph, delete HTMLMediaElement.prototype.mediaKeys, HTMLMediaElement.prototype.mediaKeys = null, HTMLMediaElement.prototype.setMediaKeys = qh, window.MediaKeys = rh, window.MediaKeySystemAccess = sh))
          });

          function Hh() {
            var a = MediaSource.prototype.addSourceBuffer;
            MediaSource.prototype.addSourceBuffer = function () {
              var b = a.apply(this, arguments);
              b.abort = function () {
              };
              return b
            }
          }

          function Ih() {
            var a = MediaSource.prototype.endOfStream;
            MediaSource.prototype.endOfStream = function () {
              for (var b, c = 0, f = 0; f < this.sourceBuffers.length; ++f) b = this.sourceBuffers[f], b = b.buffered.end(b.buffered.length - 1), c = Math.max(c, b);
              if (!isNaN(this.duration) && c < this.duration) for (this.dc = !0, f = 0; f < this.sourceBuffers.length; ++f) b = this.sourceBuffers[f], b.Zb = !1;
              return a.apply(this, arguments)
            };
            var b = !1, c = MediaSource.prototype.addSourceBuffer;
            MediaSource.prototype.addSourceBuffer = function () {
              var a = c.apply(this,
                arguments);
              a.mediaSource_ = this;
              a.addEventListener("updateend", Jh, !1);
              b || (this.addEventListener("sourceclose", Kh, !1), b = !0);
              return a
            }
          }

          function Jh(a) {
            var b = a.target, c = b.mediaSource_;
            if (c.dc) {
              a.preventDefault();
              a.stopPropagation();
              a.stopImmediatePropagation();
              b.Zb = !0;
              for (a = 0; a < c.sourceBuffers.length; ++a) if (0 == c.sourceBuffers[a].Zb) return;
              c.dc = !1
            }
          }

          function Kh(a) {
            a = a.target;
            for (var b = 0; b < a.sourceBuffers.length; ++b) a.sourceBuffers[b].removeEventListener("updateend", Jh, !1);
            a.removeEventListener("sourceclose", Kh, !1)
          }

          function Lh() {
            var a = MediaSource.isTypeSupported, b = /^dv(?:he|av)\./;
            MediaSource.isTypeSupported = function (c) {
              for (var d, e, f = c.split(/ *; */), g = f[0], h = {}, l = 1; l < f.length; ++l) d = f[l].split("="), e = d[0], d = d[1].replace(/"(.*)"/, "$1"), h[e] = d;
              d = h.codecs;
              if (!d) return a(c);
              var m = !1, q = !1;
              c = d.split(",").filter(function (a) {
                if (b.test(a)) return q = !0, !1;
                /^(hev|hvc)1\.2/.test(a) && (m = !0);
                return !0
              });
              q && (m = !1);
              h.codecs = c.join(",");
              m && (h.eotf = "smpte2084");
              for (e in h) d = h[e], g += "; " + e + '="' + d + '"';
              return cast.__platform__.canDisplayType(g)
            }
          }

          $g(function () {
            if (window.MediaSource) if (window.cast && cast.__platform__ && cast.__platform__.canDisplayType) Lh(); else if (navigator.vendor && 0 <= navigator.vendor.indexOf("Apple")) {
              var a = navigator.appVersion;
              0 <= a.indexOf("Version/8") ? window.MediaSource = null : 0 <= a.indexOf("Version/9") ? Hh() : 0 <= a.indexOf("Version/10") && (Hh(), Ih())
            }
          });

          function X(a) {
            this.c = [];
            this.b = [];
            this.Aa = Mh;
            if (a) try {
              a(this.ka.bind(this), this.a.bind(this))
            } catch (b) {
              this.a(b)
            }
          }

          var Mh = 0;

          function Nh(a) {
            var b = new X;
            b.ka(void 0);
            return b.then(function () {
              return a
            })
          }

          function Oh(a) {
            var b = new X;
            b.a(a);
            return b
          }

          function Ph(a) {
            function b(a, b, c) {
              a.Aa == Mh && (e[b] = c, d++, d == e.length && a.ka(e))
            }

            var c = new X;
            if (!a.length) return c.ka([]), c;
            for (var d = 0, e = Array(a.length), f = c.a.bind(c), g = 0; g < a.length; ++g) a[g] && a[g].then ? a[g].then(b.bind(null, c, g), f) : b(c, g, a[g]);
            return c
          }

          function Qh(a) {
            for (var b = new X, c = b.ka.bind(b), d = b.a.bind(b), e = 0; e < a.length; ++e) a[e] && a[e].then ? a[e].then(c, d) : c(a[e]);
            return b
          }

          X.prototype.then = function (a, b) {
            var c = new X;
            switch (this.Aa) {
              case 1:
                Rh(this, c, a);
                break;
              case 2:
                Rh(this, c, b);
                break;
              case Mh:
                this.c.push({M: c, vb: a}), this.b.push({M: c, vb: b})
            }
            return c
          };
          X.prototype["catch"] = function (a) {
            return this.then(void 0, a)
          };
          X.prototype.ka = function (a) {
            if (this.Aa == Mh) {
              this.rb = a;
              this.Aa = 1;
              for (a = 0; a < this.c.length; ++a) Rh(this, this.c[a].M, this.c[a].vb);
              this.c = [];
              this.b = []
            }
          };
          X.prototype.a = function (a) {
            if (this.Aa == Mh) {
              this.rb = a;
              this.Aa = 2;
              for (a = 0; a < this.b.length; ++a) Rh(this, this.b[a].M, this.b[a].vb);
              this.c = [];
              this.b = []
            }
          };

          function Rh(a, b, c) {
            Sh.push(function () {
              if (c && "function" == typeof c) {
                try {
                  var a = c(this.rb)
                } catch (f) {
                  b.a(f);
                  return
                }
                try {
                  var e = a && a.then
                } catch (f) {
                  b.a(f);
                  return
                }
                a instanceof X ? a == b ? b.a(new TypeError("Chaining cycle detected")) : a.then(b.ka.bind(b), b.a.bind(b)) : e ? Th(a, e, b) : b.ka(a)
              } else 1 == this.Aa ? b.ka(this.rb) : b.a(this.rb)
            }.bind(a));
            null == Uh && (Uh = Vh(Wh))
          }

          function Th(a, b, c) {
            try {
              var d = !1;
              b.call(a, function (a) {
                if (!d) {
                  d = !0;
                  try {
                    var b = a && a.then
                  } catch (g) {
                    c.a(g);
                    return
                  }
                  b ? Th(a, b, c) : c.ka(a)
                }
              }, c.a.bind(c))
            } catch (e) {
              c.a(e)
            }
          }

          function Wh() {
            for (; Sh.length;) {
              null != Uh && (Xh(Uh), Uh = null);
              var a = Sh;
              Sh = [];
              for (var b = 0; b < a.length; ++b) a[b]()
            }
          }

          function Vh() {
            return 0
          }

          function Xh() {
          }

          var Uh = null, Sh = [];
          $g(function (a) {
            window.setImmediate ? (Vh = function (a) {
              return window.setImmediate(a)
            }, Xh = function (a) {
              return window.clearImmediate(a)
            }) : (Vh = function (a) {
              return window.setTimeout(a, 0)
            }, Xh = function (a) {
              return window.clearTimeout(a)
            });
            if (!window.Promise || a) window.Promise = X, window.Promise.resolve = Nh, window.Promise.reject = Oh, window.Promise.all = Ph, window.Promise.race = Qh, window.Promise.prototype.then = X.prototype.then, window.Promise.prototype["catch"] = X.prototype["catch"]
          });
          $g(function () {
            if (window.HTMLMediaElement) {
              var a = HTMLMediaElement.prototype.play;
              HTMLMediaElement.prototype.play = function () {
                var b = a.apply(this, arguments);
                b && b["catch"](function () {
                });
                return b
              }
            }
          });

          function Yh() {
            return {
              droppedVideoFrames: this.webkitDroppedFrameCount,
              totalVideoFrames: this.webkitDecodedFrameCount,
              corruptedVideoFrames: 0,
              creationTime: NaN,
              totalFrameDelay: 0
            }
          }

          $g(function () {
            if (window.HTMLVideoElement) {
              var a = HTMLVideoElement.prototype;
              !a.getVideoPlaybackQuality && "webkitDroppedFrameCount" in a && (a.getVideoPlaybackQuality = Yh)
            }
          });

          function Zh(a, b, c) {
            return new window.TextTrackCue(a, b, c)
          }

          function $h(a, b, c) {
            return new window.TextTrackCue(a + "-" + b + "-" + c, a, b, c)
          }

          $g(function () {
            if (!window.VTTCue && window.TextTrackCue) {
              var a = TextTrackCue.length;
              if (3 == a) window.VTTCue = Zh; else if (6 == a) window.VTTCue = $h; else {
                try {
                  var b = !!Zh(1, 2, "")
                } catch (c) {
                  b = !1
                }
                b && (window.VTTCue = Zh)
              }
            }
          });

          function Y(a, b, c) {
            this.startTime = a;
            this.endTime = b;
            this.payload = c;
            this.region = {x: 0, y: 0, width: 100, height: 100};
            this.position = null;
            this.positionAlign = ai;
            this.size = 100;
            this.textAlign = bi;
            this.writingDirection = ci;
            this.lineInterpretation = di;
            this.line = null;
            this.lineHeight = "";
            this.lineAlign = ei;
            this.displayAlign = fi;
            this.fontSize = this.backgroundColor = this.color = "";
            this.fontWeight = gi;
            this.fontStyle = hi;
            this.fontFamily = "";
            this.textDecoration = [];
            this.wrapLine = !0;
            this.id = ""
          }

          n("shaka.text.Cue", Y);
          var ai = "auto";
          Y.positionAlign = {LEFT: "line-left", RIGHT: "line-right", CENTER: "center", AUTO: ai};
          var bi = "center", ii = {LEFT: "left", RIGHT: "right", CENTER: bi, START: "start", END: "end"};
          Y.textAlign = ii;
          var fi = "before", ji = {BEFORE: fi, CENTER: "center", AFTER: "after"};
          Y.displayAlign = ji;
          var ci = 0, sg = 2, tg = 3;
          Y.writingDirection = {
            HORIZONTAL_LEFT_TO_RIGHT: ci,
            HORIZONTAL_RIGHT_TO_LEFT: 1,
            VERTICAL_LEFT_TO_RIGHT: sg,
            VERTICAL_RIGHT_TO_LEFT: tg
          };
          var di = 0, ug = 1;
          Y.lineInterpretation = {LINE_NUMBER: di, PERCENTAGE: ug};
          var ei = "center", ki = {CENTER: ei, START: "start", END: "end"};
          Y.lineAlign = ki;
          var gi = 400;
          Y.fontWeight = {NORMAL: gi, BOLD: 700};
          var hi = "normal", li = {NORMAL: hi, ITALIC: "italic", OBLIQUE: "oblique"};
          Y.fontStyle = li;
          Y.textDecoration = {UNDERLINE: "underline", LINE_THROUGH: "lineThrough", OVERLINE: "overline"};

          function mi() {
          }

          mi.prototype.parseInit = function () {
          };
          mi.prototype.parseMedia = function (a, b) {
            var c = E(a), d = [], e = new DOMParser, f = null;
            try {
              f = e.parseFromString(c, "text/xml")
            } catch (Jc) {
              throw new v(2, 2, 2005);
            }
            if (f) {
              var g = f.getElementsByTagName("tt")[0];
              if (g) {
                e = g.getAttribute("ttp:frameRate");
                f = g.getAttribute("ttp:subFrameRate");
                var h = g.getAttribute("ttp:frameRateMultiplier");
                var l = g.getAttribute("ttp:tickRate");
                c = g.getAttribute("xml:space") || "default"
              } else throw new v(2, 2, 2005);
              if ("default" != c && "preserve" != c) throw new v(2, 2, 2005);
              c = "default" == c;
              e = new ni(e,
                f, h, l);
              f = oi(g.getElementsByTagName("styling")[0]);
              h = oi(g.getElementsByTagName("layout")[0]);
              g = oi(g.getElementsByTagName("body")[0]);
              for (l = 0; l < g.length; l++) {
                var m = g[l];
                var q = b.periodStart;
                var w = e, x = f, r = h, u = c;
                if (m.hasAttribute("begin") || m.hasAttribute("end") || !/^\s*$/.test(m.textContent)) {
                  pi(m, u);
                  var u = qi(m.getAttribute("begin"), w), t = qi(m.getAttribute("end"), w),
                    w = qi(m.getAttribute("dur"), w), Fa = m.textContent;
                  null == t && null != w && (t = u + w);
                  if (null == u || null == t) throw new v(2, 2, 2001);
                  q = new Y(u + q, t + q, Fa);
                  u = ri(m,
                    "region", r);
                  r = q;
                  "rtl" == Z(m, u, x, "tts:direction") && (r.writingDirection = 1);
                  t = Z(m, u, x, "tts:writingMode");
                  "tb" == t || "tblr" == t ? r.writingDirection = sg : "tbrl" == t ? r.writingDirection = tg : "rltb" == t || "rl" == t ? r.writingDirection = 1 : t && (r.writingDirection = ci);
                  if (t = Z(m, u, x, "tts:origin")) if (t = si.exec(t)) r.region.x = Number(t[1]), r.region.y = Number(t[2]);
                  if (t = Z(m, u, x, "tts:extent")) if (t = si.exec(t)) r.region.width = Number(t[1]), r.region.height = Number(t[2]);
                  if (t = Z(m, u, x, "tts:textAlign")) r.positionAlign = ti[t], r.lineAlign = ui[t],
                    r.textAlign = ii[t.toUpperCase()];
                  if (t = Z(m, u, x, "tts:displayAlign")) r.displayAlign = ji[t.toUpperCase()];
                  if (t = Z(m, u, x, "tts:color")) r.color = t;
                  if (t = Z(m, u, x, "tts:backgroundColor")) r.backgroundColor = t;
                  if (t = Z(m, u, x, "tts:fontFamily")) r.fontFamily = t;
                  (t = Z(m, u, x, "tts:fontWeight")) && "bold" == t && (r.fontWeight = 700);
                  (t = Z(m, u, x, "tts:wrapOption")) && "noWrap" == t && (r.wrapLine = !1);
                  (t = Z(m, u, x, "tts:lineHeight")) && t.match(vi) && (r.lineHeight = t);
                  (t = Z(m, u, x, "tts:fontSize")) && t.match(vi) && (r.fontSize = t);
                  if (t = Z(m, u, x, "tts:fontStyle")) r.fontStyle =
                    li[t.toUpperCase()];
                  (u = wi(u, x, "tts:textDecoration")) && xi(r, u);
                  (m = yi(m, x, "tts:textDecoration")) && xi(r, m)
                } else q = null;
                q && d.push(q)
              }
            }
            return d
          };
          var zi = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/, Ai = /^(?:(\d{2,}):)?(\d{2}):(\d{2})$/,
            Bi = /^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/, Ci = /^(\d*\.?\d*)f$/, Di = /^(\d*\.?\d*)t$/,
            Ei = /^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/,
            si = /^(\d{1,2}|100)% (\d{1,2}|100)%$/, vi = /^(\d+px|\d+em)$/,
            ui = {left: "start", center: "center", right: "end", start: "start", end: "end"},
            ti = {left: "line-left", center: "center", right: "line-right"};

          function oi(a) {
            var b = [];
            if (!a) return b;
            for (var c = a.childNodes, d = 0; d < c.length; d++) {
              var e = "span" == c[d].nodeName && "p" == a.nodeName;
              c[d].nodeType != Node.ELEMENT_NODE || "br" == c[d].nodeName || e || (e = oi(c[d]), b = b.concat(e))
            }
            b.length || b.push(a);
            return b
          }

          function pi(a, b) {
            for (var c = a.childNodes, d = 0; d < c.length; d++) if ("br" == c[d].nodeName && 0 < d) c[d - 1].textContent += "\n"; else if (0 < c[d].childNodes.length) pi(c[d], b); else if (b) {
              var e = c[d].textContent.trim(), e = e.replace(/\s+/g, " ");
              c[d].textContent = e
            }
          }

          function xi(a, b) {
            for (var c = b.split(" "), d = 0; d < c.length; d++) switch (c[d]) {
              case "underline":
                0 > a.textDecoration.indexOf("underline") && a.textDecoration.push("underline");
                break;
              case "noUnderline":
                0 <= a.textDecoration.indexOf("underline") && La(a.textDecoration, "underline");
                break;
              case "lineThrough":
                0 > a.textDecoration.indexOf("lineThrough") && a.textDecoration.push("lineThrough");
                break;
              case "noLineThrough":
                0 <= a.textDecoration.indexOf("lineThrough") && La(a.textDecoration, "lineThrough");
                break;
              case "overline":
                0 > a.textDecoration.indexOf("overline") &&
                a.textDecoration.push("overline");
                break;
              case "noOverline":
                0 <= a.textDecoration.indexOf("overline") && La(a.textDecoration, "overline")
            }
          }

          function Z(a, b, c, d) {
            return (a = yi(a, c, d)) ? a : wi(b, c, d)
          }

          function wi(a, b, c) {
            for (var d = oi(a), e = 0; e < d.length; e++) {
              var f = d[e].getAttribute(c);
              if (f) return f
            }
            return (a = ri(a, "style", b)) ? a.getAttribute(c) : null
          }

          function yi(a, b, c) {
            return (a = ri(a, "style", b)) ? a.getAttribute(c) : null
          }

          function ri(a, b, c) {
            if (!a || 1 > c.length) return null;
            var d = null, e = a;
            for (a = null; e && !(a = e.getAttribute(b)) && (e = e.parentNode, e instanceof Element);) ;
            if (b = a) for (a = 0; a < c.length; a++) if (c[a].getAttribute("xml:id") == b) {
              d = c[a];
              break
            }
            return d
          }

          function qi(a, b) {
            var c = null;
            if (zi.test(a)) var c = zi.exec(a), d = Number(c[1]), e = Number(c[2]), f = Number(c[3]), g = Number(c[4]),
              g = g + (Number(c[5]) || 0) / b.b, f = f + g / b.frameRate,
              c = f + 60 * e + 3600 * d; else Ai.test(a) ? c = Fi(Ai, a) : Bi.test(a) ? c = Fi(Bi, a) : Ci.test(a) ? (c = Ci.exec(a), c = Number(c[1]) / b.frameRate) : Di.test(a) ? (c = Di.exec(a), c = Number(c[1]) / b.a) : Ei.test(a) && (c = Fi(Ei, a));
            return c
          }

          function Fi(a, b) {
            var c = a.exec(b);
            return c && "" != c[0] ? (Number(c[4]) || 0) / 1E3 + (Number(c[3]) || 0) + 60 * (Number(c[2]) || 0) + 3600 * (Number(c[1]) || 0) : null
          }

          function ni(a, b, c, d) {
            this.frameRate = Number(a) || 30;
            this.b = Number(b) || 1;
            this.a = Number(d);
            this.a || (this.a = a ? this.frameRate * this.b : 1);
            c && (a = /^(\d+) (\d+)$/g.exec(c)) && (this.frameRate *= a[1] / a[2])
          }

          Gb("application/ttml+xml", mi);

          function Gi() {
            this.a = new mi
          }

          Gi.prototype.parseInit = function (a) {
            var b = !1;
            (new N).G("moov", O).G("trak", O).G("mdia", O).G("minf", O).G("stbl", O).aa("stsd", sd).G("stpp", function () {
              b = !0
            }).parse(a);
            if (!b) throw new v(2, 2, 2007);
          };
          Gi.prototype.parseMedia = function (a, b) {
            var c = !1, d = [];
            (new N).G("mdat", td(function (a) {
              c = !0;
              d = d.concat(this.a.parseMedia(a.buffer, b))
            }.bind(this))).parse(a);
            if (!c) throw new v(2, 2, 2007);
            return d
          };
          Gb('application/mp4; codecs="stpp"', Gi);
          Gb('application/mp4; codecs="stpp.TTML.im1t"', Gi);

          function Hi() {
          }

          Hi.prototype.parseInit = function () {
          };
          Hi.prototype.parseMedia = function (a, b) {
            var c = E(a), c = c.replace(/\r\n|\r(?=[^\n]|$)/gm, "\n"), c = c.split(/\n{2,}/m);
            if (!/^WEBVTT($|[ \t\n])/m.test(c[0])) throw new v(2, 2, 2E3);
            var d = b.segmentStart;
            if (0 <= c[0].indexOf("X-TIMESTAMP-MAP")) {
              var e = c[0].match(/LOCAL:((?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3}))/m), f = c[0].match(/MPEGTS:(\d+)/m);
              e && f && (d = Ii(new te(e[1])), d = b.periodStart + (Number(f[1]) / 9E4 - d))
            }
            f = [];
            for (e = 1; e < c.length; e++) {
              var g = c[e].split("\n"), h = d;
              if (1 == g.length && !g[0] || /^NOTE($|[ \t])/.test(g[0])) var l =
                null; else {
                l = null;
                0 > g[0].indexOf("--\x3e") && (l = g[0], g.splice(0, 1));
                var m = new te(g[0]), q = Ii(m), w = ue(m, /[ \t]+--\x3e[ \t]+/g), x = Ii(m);
                if (null == q || !w || null == x) throw new v(2, 2, 2001);
                g = new Y(q + h, x + h, g.slice(1).join("\n").trim());
                ue(m, /[ \t]+/gm);
                for (h = ve(m); h;) Ji(g, h), ue(m, /[ \t]+/gm), h = ve(m);
                null != l && (g.id = l);
                l = g
              }
              l && f.push(l)
            }
            return f
          };

          function Ji(a, b) {
            var c;
            if (c = /^align:(start|middle|center|end|left|right)$/.exec(b)) c = c[1], "middle" == c ? a.textAlign = bi : a.textAlign = ii[c.toUpperCase()]; else if (c = /^vertical:(lr|rl)$/.exec(b)) a.writingDirection = "lr" == c[1] ? sg : tg; else if (c = /^size:([\d\.]+)%$/.exec(b)) a.size = Number(c[1]); else if (c = /^position:([\d\.]+)%(?:,(line-left|line-right|center|start|end))?$/.exec(b)) a.position = Number(c[1]), c[2] && (c = c[2], a.positionAlign = "line-left" == c || "start" == c ? "line-left" : "line-right" == c || "end" == c ? "line-right" :
              "center"); else if (c = /^line:([\d\.]+)%(?:,(start|end|center))?$/.exec(b)) a.lineInterpretation = ug, a.line = Number(c[1]), c[2] && (a.lineAlign = ki[c[2].toUpperCase()]); else if (c = /^line:(-?\d+)(?:,(start|end|center))?$/.exec(b)) a.lineInterpretation = di, a.line = Number(c[1]), c[2] && (a.lineAlign = ki[c[2].toUpperCase()])
          }

          function Ii(a) {
            a = ue(a, /(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3})/g);
            if (!a) return null;
            var b = Number(a[2]), c = Number(a[3]);
            return 59 < b || 59 < c ? null : Number(a[4]) / 1E3 + c + 60 * b + 3600 * (Number(a[1]) || 0)
          }

          Gb("text/vtt", Hi);
          Gb('text/vtt; codecs="vtt"', Hi);

          function Ki() {
            this.a = null
          }

          Ki.prototype.parseInit = function (a) {
            var b = !1;
            (new N).G("moov", O).G("trak", O).G("mdia", O).aa("mdhd", function (a) {
              0 == a.version ? (a.u.I(4), a.u.I(4), this.a = a.u.D(), a.u.I(4)) : (a.u.I(8), a.u.I(8), this.a = a.u.D(), a.u.I(8));
              a.u.I(4)
            }.bind(this)).G("minf", O).G("stbl", O).aa("stsd", sd).G("wvtt", function () {
              b = !0
            }).parse(a);
            if (!this.a) throw new v(2, 2, 2008);
            if (!b) throw new v(2, 2, 2008);
          };
          Ki.prototype.parseMedia = function (a, b) {
            var c = 0, d = [], e = [], f = [], g = !1, h = !1, l = !1, m = null;
            (new N).G("moof", O).G("traf", O).aa("tfdt", function (a) {
              g = !0;
              c = a.version ? a.u.Ta() : a.u.D()
            }).aa("tfhd", function (a) {
              var b = a.ac;
              a = a.u;
              a.I(4);
              b & 1 && a.I(8);
              b & 2 && a.I(4);
              m = b & 8 ? a.D() : null
            }).aa("trun", function (a) {
              h = !0;
              var b = a.version, c = a.ac;
              a = a.u;
              var e = a.D();
              c & 1 && a.I(4);
              c & 4 && a.I(4);
              for (var f = [], g = 0; g < e; g++) {
                var l = {duration: null, Sb: null};
                c & 256 && (l.duration = a.D());
                c & 512 && a.I(4);
                c & 1024 && a.I(4);
                c & 2048 && (l.Sb = b ? a.sc() : a.D());
                f.push(l)
              }
              d =
                f
            }).G("vtte", function () {
              e.push(null)
            }).G("vttc", td(function (a) {
              e.push(a.buffer)
            })).G("mdat", function (a) {
              l = !0;
              O(a)
            }).parse(a);
            if (!l && !g && !h) throw new v(2, 2, 2008);
            for (var q = c, w = 0; w < d.length; w++) {
              var x = d[w], r = e[w], u = x.duration || m;
              u && (x = x.Sb ? c + x.Sb : q, q = x + u, r && f.push(Li(r, b.periodStart + x / this.a, b.periodStart + q / this.a)))
            }
            return f.filter(Da)
          };

          function Li(a, b, c) {
            var d, e, f;
            (new N).G("payl", td(function (a) {
              d = E(a)
            })).G("iden", td(function (a) {
              e = E(a)
            })).G("sttg", td(function (a) {
              f = E(a)
            })).parse(a);
            return d ? Mi(d, e, f, b, c) : null
          }

          function Mi(a, b, c, d, e) {
            a = new Y(d, e, a);
            b && (a.id = b);
            if (c) for (b = new te(c), c = ve(b); c;) Ji(a, c), ue(b, /[ \t]+/gm), c = ve(b);
            return a
          }

          Gb('application/mp4; codecs="wvtt"', Ki);
        }.call(g, this));
        if (typeof(module) != "undefined" && module.exports) module.exports = g.shaka;
        else if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
          return g.shaka
        }.call(exports, __webpack_require__, exports, module),
        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        else this.shaka = g.shaka;
      })();


      /***/
    }),
    /* 342 */
    /***/ (function (module, exports, __webpack_require__) {

      !function (e, t) {
        true ? module.exports = t(__webpack_require__(11)) : "function" == typeof define && define.amd ? define(["playkit-js"], t) : "object" == typeof exports ? exports.PlaykitJsYoubora = t(require("playkit-js")) : e.PlaykitJsYoubora = t(e.Playkit)
      }(this, function (e) {
        return function (e) {
          function t(i) {
            if (r[i]) return r[i].exports;
            var n = r[i] = {i: i, l: !1, exports: {}};
            return e[i].call(n.exports, n, n.exports, t), n.l = !0, n.exports
          }

          var r = {};
          return t.m = e, t.c = r, t.d = function (e, r, i) {
            t.o(e, r) || Object.defineProperty(e, r, {configurable: !1, enumerable: !0, get: i})
          }, t.n = function (e) {
            var r = e && e.__esModule ? function () {
              return e.default
            } : function () {
              return e
            };
            return t.d(r, "a", r), r
          }, t.o = function (e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
          }, t.p = "", t(t.s = 1)
        }([function (t, r) {
          t.exports = e
        }, function (e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", {value: !0}), t.NAME = t.VERSION = void 0;
          var i = r(0), n = r(2), s = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(n);
          t.default = s.default, t.VERSION = "0.3.1", t.NAME = "playkit-js-youbora";
          (0, i.registerPlugin)("youbora", s.default)
        }, function (e, t, r) {
          "use strict";

          function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function n(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
          }

          function s(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var a = function e(t, r, i) {
            null === t && (t = Function.prototype);
            var n = Object.getOwnPropertyDescriptor(t, r);
            if (void 0 === n) {
              var s = Object.getPrototypeOf(t);
              return null === s ? void 0 : e(s, r, i)
            }
            if ("value" in n) return n.value;
            var a = n.get;
            if (void 0 !== a) return a.call(i)
          }, o = function () {
            function e(e, t) {
              for (var r = 0; r < t.length; r++) {
                var i = t[r];
                i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
              }
            }

            return function (t, r, i) {
              return r && e(t.prototype, r), i && e(t, i), t
            }
          }(), u = r(0), d = r(3), h = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(d), p = function (e) {
            function t(e, r, s) {
              i(this, t);
              var a = n(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, r, s));
              return a._youbora = new h.default(a.player, a.config), a._addBindings(), a._setup(), a
            }

            return s(t, e), o(t, null, [{
              key: "isValid", value: function () {
                return !0
              }
            }]), o(t, [{
              key: "updateConfig", value: function (e) {
                a(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "updateConfig", this).call(this, e), this._youbora.setOptions(e.options), this._addPlayerMetadata()
              }
            }, {
              key: "reset", value: function () {
                this._youbora && this._youbora.reset()
              }
            }, {
              key: "_addPlayerMetadata", value: function () {
                this._youbora.setOptions({
                  properties: {
                    kalturaInfo: {
                      entryId: this.config.entryId,
                      sessionId: this.config.sessionId,
                      uiConfId: this.config.uiConfId
                    }
                  }
                })
              }
            }, {
              key: "_addBindings", value: function () {
                h.default.bindLogger(this.logger)
              }
            }, {
              key: "_setup", value: function () {
                this._youbora.registerListeners()
              }
            }, {
              key: "destroy", value: function () {
                this._youbora && this._youbora.endedHandler()
              }
            }]), t
          }(u.BasePlugin);
          p.defaultConfig = {options: {haltOnError: !1}}, t.default = p
        }, function (e, t, r) {
          "use strict";
          var i = r(4), n = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(i), s = r(5), a = function (e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e) for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);
            return t.default = e, t
          }(s);
          /**
 * @license
 * Youbora Plugin JS Kaltura player
 * Copyright NicePopleAtWork & Kaltura
 * @author Jordi Aguilar & Dan Ziv
 */
          n.default.plugins.KalturaV3 = function (e, t) {
            try {
              this.config = t, this.pluginName = this.config.playerName, this.pluginVersion = n.default.version + "-" + a.version + "-" + this.pluginName, this.startMonitoring(e, this.config.options)
            } catch (e) {
              n.default.error(e)
            }
          }, n.default.plugins.KalturaV3.prototype = new n.default.plugins.Generic, n.default.plugins.KalturaV3.bindLogger = function (e) {
            n.default.error = e.error.bind(e), n.default.notice = e.info.bind(e), n.default.noticeRequest = e.info.bind(e), n.default.warn = e.warn.bind(e), n.default.debug = e.debug.bind(e), n.default.verbose = function () {
            }
          }, n.default.plugins.KalturaV3.prototype.reset = function () {
            this.endedHandler(), this.viewManager.comm.view++
          }, n.default.plugins.KalturaV3.prototype.getPlayhead = function () {
            return this.player.currentTime
          }, n.default.plugins.KalturaV3.prototype.getMediaDuration = function () {
            return this.player.duration
          }, n.default.plugins.KalturaV3.prototype.getResource = function () {
            return this.player.src
          }, n.default.plugins.KalturaV3.prototype.getPlayerVersion = function () {
            return this.config.playerName + "-" + this.config.playerVersion
          }, n.default.plugins.KalturaV3.prototype.getBitrate = function () {
            var e = this.player.getActiveTracks().video;
            return e && e.bandwidth ? e.bandwidth : -1
          }, n.default.plugins.KalturaV3.prototype.getTitle = function () {
            return this.config.entryName
          }, n.default.plugins.KalturaV3.prototype.getRendition = function () {
            var e = this.player.getActiveTracks().video;
            if (e) return n.default.utils.buildRenditionString(e.width, e.height, e.bandwidth)
          }, n.default.plugins.KalturaV3.prototype.getIsLive = function () {
            return "Live" === this.config.entryType
          }, n.default.plugins.KalturaV3.prototype.registerListeners = function () {
            var e = this, t = this.player.Event, r = this.player.State;
            this.player.addEventListener(t.PLAY, function () {
              e.playHandler()
            }), this.player.addEventListener(t.ENDED, function () {
              e.endedHandler()
            }), this.player.addEventListener(t.PLAYING, function () {
              e.playingHandler()
            }), this.player.addEventListener(t.PAUSE, function () {
              e.pauseHandler()
            }), this.player.addEventListener(t.ERROR, function () {
              e.errorHandler("PLAY_FAILURE")
            }), this.player.addEventListener(t.SEEKING, function () {
              e.viewManager.isBuffering || e.seekingHandler()
            }), this.player.addEventListener(t.SEEKED, function () {
              e.seekedHandler()
            }), this.player.addEventListener(t.PLAYER_STATE_CHANGED, function (t) {
              var i = t.payload.newState.type, n = t.payload.oldState.type;
              i === r.BUFFERING && e.bufferingHandler(), n === r.BUFFERING && e.bufferedHandler()
            })
          }, e.exports = n.default.plugins.KalturaV3
        }, function (e, t, r) {
          "use strict";
          var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
            return typeof e
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
          }, n = n || {version: "5.4.6", plugins: {}, adnalyzers: {}, utils: {}, managers: {}, comm: {}, data: {}};
          n.comm.Communication = function (e, t) {
            try {
              this.host = e, this.httpSecure = t, this.pingTime = 5, this.prefix = "U", this.code = "", this.view = -1, this.preloaders = [], this._requests = {}, this.addPreloader("FastData")
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype.extraOperationsCallback = null, n.comm.Communication.prototype.getViewCode = function () {
            return this.code ? this.prefix + this.code + "_" + this.view : "nocode"
          }, n.comm.Communication.prototype.nextView = function (e) {
            return this.view++, this.prefix = !0 === e ? "L" : !1 === e ? "V" : "U", this.getViewCode()
          }, n.comm.Communication.prototype.requestData = function (e, t) {
            try {
              e = e || {}, e.outputformat = "jsonp", delete e.code;
              var r = this, i = new n.comm.AjaxRequest(this._parseServiceHost(this.host), "/data", e);
              i.load(function () {
                r.receiveData(i)
              }), i.load(t), i.send(), n.noticeRequest("Request: NQS /data " + e.system)
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype.receiveData = function (e) {
            try {
              var t = e.getXHR(), r = t.response || t.responseText,
                i = JSON.parse(r.slice(r.indexOf("(") + 1, r.lastIndexOf(")"))), s = i.q.h, a = i.q.c, o = i.q.pt,
                u = i.q.b;
              s.length > 0 && a.length > 0 && o.length > 0 && u.length > 0 ? (this.prefix = a.slice(0, 1), this.code = a.slice(1), this.host = s, this.pingTime = o, this.balancerEnabled = u, n.noticeRequest("FastData '" + a + "' is ready."), this._requests.nocode && this._requests.nocode.length > 0 && (this._requests[this.getViewCode()] = this._requests.nocode, delete this._requests.nocode), this.removePreloader("FastData")) : n.error("Error: FastData response is wrong.")
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype.sendRequest = function (e, t, r) {
            try {
              t = t || {}, delete t.code;
              var i = new n.comm.AjaxRequest("", e, t);
              i.load(r), this._registerRequest(i)
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype.sendService = function (e, t, r) {
            try {
              var i = new n.comm.AjaxRequest(this._parseServiceHost(e), "", t);
              i.load(r), this._registerRequest(i)
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype.addPreloader = function (e) {
            try {
              this.preloaders.push(e)
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype.removePreloader = function (e) {
            try {
              var t = this.preloaders.indexOf(e);
              if (-1 !== t) {
                if (this.preloaders.splice(t, 1), 0 === this.preloaders.length) {
                  var r;
                  for (var i in this._requests) for (; r = this._requests[i].shift();) r.setParam("code", i), r.host || (r.host = this._parseServiceHost(this.host)), "function" == typeof this.extraOperationsCallback && this.extraOperationsCallback(r.params), r.send()
                }
              } else n.warn("Warning: trying to remove unexisting preloader '" + e + "'.")
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype._registerRequest = function (e) {
            try {
              return void 0 === this._requests[this.getViewCode()] && (this._requests[this.getViewCode()] = []), e.setParam("timemark", (new Date).getTime()), this._requests[this.getViewCode()].push(e), this._sendRequests(), e
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype._sendRequests = function () {
            try {
              if (0 === this.preloaders.length) {
                var e;
                for (var t in this._requests) for (; e = this._requests[t].shift();) e.setParam("code", t), e.host || (e.host = this._parseServiceHost(this.host)), e.send()
              }
            } catch (e) {
              n.error(e)
            }
          }, n.comm.Communication.prototype._parseServiceHost = function (e) {
            try {
              return 0 === e.indexOf("//") ? e = e.slice(2) : 0 === e.indexOf("http://") ? e = e.slice(7) : 0 === e.indexOf("https://") && (e = e.slice(8)), e = !0 === this.httpSecure ? "https://" + e : 0 === window.location.protocol.indexOf("http") ? "//" + e : "http://" + e
            } catch (e) {
              return n.error(e), "http://localhost"
            }
          }, n.comm.AjaxRequest = function (e, t, r, i) {
            try {
              this.xhr = this.createXHR(), this.host = e, this.service = t || "", this.params = r, this.options = i || {}, this.options.method = this.options.method || n.comm.AjaxRequest.options.method, this.options.maxRetries = this.options.maxRetries || n.comm.AjaxRequest.options.maxRetries, void 0 === this.options.retryAfter && (this.options.retryAfter = n.comm.AjaxRequest.options.retryAfter), this.hasError = !1, this.retries = 1
            } catch (e) {
              n.error(e)
            }
          }, n.comm.AjaxRequest.onEverySuccess = null, n.comm.AjaxRequest.options = {
            method: "GET",
            requestHeaders: {},
            maxRetries: 3,
            retryAfter: 5e3
          }, n.comm.AjaxRequest.prototype.getUrl = function () {
            try {
              return this.host + this.service + this.getParams()
            } catch (e) {
              n.error(e)
            }
          }, n.comm.AjaxRequest.prototype.getParams = function () {
            try {
              switch (i(this.params)) {
                case"object":
                  return "?" + this._parseParams(this.params);
                case"string":
                  return this.params ? "?" + this.params : "";
                default:
                  return ""
              }
            } catch (e) {
              n.error(e)
            }
          }, n.comm.AjaxRequest.prototype.setParam = function (e, t) {
            try {
              switch (i(this.params)) {
                case"string":
                  this.params.length > 0 && (this.params += "&"), this.params += e + "=" + t;
                  break;
                case"object":
                default:
                  this.params[e] = t
              }
              return this
            } catch (e) {
              return n.error(e), this
            }
          }, n.comm.AjaxRequest.prototype.on = function (e, t) {
            try {
              "error" == e && (this.hasError = !0), "function" == typeof t ? this.xhr.addEventListener(e, t, !1) : void 0 !== t && n.warn("Warning: Request '" + this.getUrl() + "' has a callback that is not a function.")
            } catch (e) {
              n.error(e)
            } finally {
              return this
            }
          }, n.comm.AjaxRequest.prototype.load = function (e) {
            return this.on("load", e)
          }, n.comm.AjaxRequest.prototype.error = function (e) {
            return this.on("error", e)
          }, n.comm.AjaxRequest.prototype.send = function () {
            try {
              if (this.xhr.open(this.options.method, this.getUrl(), !0), this.options.requestHeaders) for (var e in this.options.requestHeaders) this.options.requestHeaders.hasOwnProperty(e) && this.xhr.setRequestHeader(e, this.options.requestHeaders[e]);
              if (!this.hasError && this.options.retryAfter > 0 && this.options.maxRetries > 0) {
                var t = this;
                this.error(function () {
                  if (t.retries > t.options.maxRetries) n.error("Error: Aborting failed request. Max retries reached."); else {
                    n.warn("Error: Request " + t.service + " failed. Retry " + t.retries + " of " + t.options.maxRetries + " in " + t.options.retryAfter + "ms.");
                    var e = t;
                    setTimeout(function () {
                      e.retries += 1, e.send()
                    }, t.options.retryAfter)
                  }
                })
              }
              n.debugLevel >= 5 && n.verbose("XHR Req: " + this.getUrl()), "function" == typeof n.comm.AjaxRequest.onEverySuccess && this.load(n.comm.AjaxRequest.onEverySuccess), this.xhr.send()
            } catch (e) {
              n.error(e)
            }
          }, n.comm.AjaxRequest.prototype.createXHR = function () {
            try {
              return window.XMLHttpRequest ? new XMLHttpRequest : new ActiveXObject("Microsoft.XMLHTTP")
            } catch (e) {
              return n.error(e), {}
            }
          }, n.comm.AjaxRequest.prototype.getXHR = function () {
            return this.xhr
          }, n.comm.AjaxRequest.prototype._parseParams = function (e) {
            try {
              if ("string" == typeof e) return e;
              if (null !== e && "object" == (void 0 === e ? "undefined" : i(e))) {
                var t = "";
                for (var r in e) null !== e[r] && "object" == i(e[r]) ? t += encodeURIComponent(r) + "=" + encodeURIComponent(JSON.stringify(e[r])) + "&" : null !== e[r] && void 0 !== e[r] && "" !== e[r] && (t += encodeURIComponent(r) + "=" + encodeURIComponent(e[r]) + "&");
                return t.slice(0, -1)
              }
              return ""
            } catch (e) {
              return n.error(e), ""
            }
          }, n.data.Options = function (e) {
            try {
              this.setOptions(e)
            } catch (e) {
              n.error(e)
            }
          }, n.data.Options.prototype = {
            enableAnalytics: !0,
            disabledRequests: [],
            parseHLS: !1,
            parseCDNNodeHost: !1,
            useCDNFromParser: !1,
            parseCDNNameFrom: "x-cdn-forward",
            haltOnError: !0,
            hashTitle: !0,
            httpSecure: void 0,
            enableNiceBuffer: !0,
            enableNiceSeek: !0,
            accountCode: "nicetest",
            service: "nqs.nice264.com",
            username: void 0,
            transactionCode: void 0,
            network: {ip: void 0, isp: void 0},
            device: {id: void 0},
            media: {
              isLive: void 0,
              resource: void 0,
              title: void 0,
              duration: void 0,
              cdn: void 0,
              isBalanced: 0,
              isResumed: 0
            },
            ads: {expected: !1, resource: void 0, campaign: void 0, title: void 0, position: void 0, duration: void 0},
            properties: {
              contentId: void 0,
              type: void 0,
              transaction_type: void 0,
              genre: void 0,
              language: void 0,
              year: void 0,
              cast: void 0,
              director: void 0,
              owner: void 0,
              parental: void 0,
              price: void 0,
              rating: void 0,
              audioType: void 0,
              audioChannels: void 0,
              device: void 0,
              quality: void 0
            },
            extraParams: {
              param1: void 0,
              param2: void 0,
              param3: void 0,
              param4: void 0,
              param5: void 0,
              param6: void 0,
              param7: void 0,
              param8: void 0,
              param9: void 0,
              param10: void 0,
              param11: void 0,
              param12: void 0,
              param13: void 0,
              param14: void 0,
              param15: void 0,
              param16: void 0,
              param17: void 0,
              param18: void 0,
              param19: void 0,
              param20: void 0
            },
            setOptions: function (e, t) {
              try {
                if (t = t || this, void 0 !== e) for (var r in e) "object" == i(t[r]) && null !== t[r] ? this.setOptions(e[r], t[r]) : t[r] = e[r]
              } catch (e) {
                n.error(e)
              }
            }
          }, n.adnalyzers.Generic = function () {
          }, n.adnalyzers.Generic.prototype = {
            adnalyzerVersion: "5.3.0-GENERIC",
            ads: void 0,
            plugin: void 0
          }, n.adnalyzers.Generic.prototype.startMonitoring = function (e, t) {
            try {
              n.notice("Adnalyzer " + this.adnalyzerVersion + " is ready."), this.plugin = e, this.ads = t
            } catch (e) {
              return n.error(e), null
            }
          }, n.adnalyzers.Generic.prototype.stopMonitoring = function () {
            this.ads = null, this.plugin.viewManager.timer.adPlayheadMonitor.stop()
          }, n.adnalyzers.Generic.prototype.enableAdBufferMonitor = function () {
            this.plugin.infoManager.options.enableNiceBuffer && (this.plugin.viewManager.enableAdBufferMonitor = !0)
          }, n.adnalyzers.Generic.prototype.enableAdSeekMonitor = function () {
            this.plugin.infoManager.options.enableNiceSeek && (this.plugin.viewManager.enableAdSeekMonitor = !0)
          }, n.adnalyzers.Generic.prototype.initAdHandler = function () {
            try {
              this.plugin.viewManager.isAdStartSent || this.plugin.viewManager.isAdInitSent || this.plugin.viewManager.sendAdInit()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.playAdHandler = function () {
            try {
              this.plugin.viewManager.isAdStartSent || this.plugin.viewManager.sendAdStart()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.startJoinAdHandler = function () {
            try {
              this.plugin.viewManager.isAdStartSent || (this.plugin.viewManager.sendAdStart(), this.plugin.viewManager.isBuffering && (this.plugin.viewManager.chrono.joinTime.startTime = this.plugin.viewManager.chrono.buffer.startTime, this.plugin.viewManager.isBuffering = !1), this.plugin.viewManager.sendAdJoin())
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.joinAdHandler = function () {
            try {
              this.plugin.viewManager.sendAdJoin()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.pauseAdHandler = function () {
            try {
              this.plugin.viewManager.sendAdPause()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.pauseToggleAdHandler = function () {
            try {
              this.plugin.viewManager.isAdPaused ? this.plugin.viewManager.sendAdResume() : this.plugin.viewManager.sendAdPause()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.resumeAdHandler = function () {
            try {
              this.plugin.viewManager.sendAdResume()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.endedAdHandler = function () {
            try {
              this.plugin.viewManager.sendAdStop()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.skipAdHandler = function () {
            try {
              this.plugin.viewManager.sendAdStop({skipped: !0})
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.bufferingAdHandler = function () {
            try {
              this.plugin.viewManager.sendAdBufferStart()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.bufferedAdHandler = function () {
            try {
              this.plugin.viewManager.isAdStartSent && (this.plugin.viewManager.isAdJoinSent ? this.plugin.viewManager.isAdBuffering && this.plugin.viewManager.sendAdBufferEnd() : this.plugin.viewManager.sendAdJoin())
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.errorAdHandler = function (e, t) {
            try {
              void 0 === e && (e = 0), t = t || e || "Unknown error", this.plugin.viewManager.sendAdError({
                errorCode: e,
                msg: t
              })
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.noServedAdHandler = function (e, t) {
            try {
              void 0 === e && (e = 0), t = t || e || "Unknown error", this.plugin.viewManager.sendAdError({
                errorCode: e,
                msg: t,
                errorSeverity: "AdsNotServed"
              }), this.plugin.viewManager.sendAdStop()
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.clickAdHandler = function (e) {
            try {
              this.plugin.viewManager.sendAdClick({adUrl: e})
            } catch (e) {
              n.error(e)
            }
          }, n.adnalyzers.Generic.prototype.getAdResource = function () {
            return "unknown"
          }, n.adnalyzers.Generic.prototype.getMediaPlayhead = function () {
            return null
          }, n.adnalyzers.Generic.prototype.getAdPlayhead = function () {
            return 0
          }, n.adnalyzers.Generic.prototype.getAdPosition = function () {
            return this.plugin.viewManager.isJoinSent ? "mid" : "pre"
          }, n.adnalyzers.Generic.prototype.getAdTitle = function () {
            return null
          }, n.adnalyzers.Generic.prototype.getAdDuration = function () {
            return 0
          }, n.adnalyzers.Generic.prototype.getAdBitrate = function () {
            return -1
          }, n.adnalyzers.Generic.prototype.getAdPlayerVersion = function () {
            return null
          }, n.plugins.Generic = function () {
          }, n.plugins.Generic.prototype = {
            pluginName: "GENERIC",
            pluginVersion: "5.1.0-GENERIC",
            playerId: "generic",
            player: null,
            tag: null,
            infoManager: void 0,
            viewManager: void 0,
            adnalyzer: null
          }, n.plugins.Generic.prototype.startMonitoring = function (e, t) {
            try {
              n.notice("Plugin " + this.pluginVersion + " (with YouboraJS " + n.version + ") is ready."), "string" == typeof e ? (this.playerId = e, this.player = document.getElementById(e)) : (this.player = e, e && e.id && (this.playerId = e.id)), this.tag = this.player, void 0 === this.infoManager ? this.infoManager = new n.managers.Info(this, t) : this.infoManager.setOptions(t), this.viewManager = new n.managers.View(this.infoManager)
            } catch (e) {
              return n.error(e), null
            }
          }, n.plugins.Generic.prototype.stopMonitoring = function () {
            this.player = null, this.tag = null, this.viewManager.stopTimers()
          }, n.plugins.Generic.prototype.enableBufferMonitor = function () {
            this.infoManager.options.enableNiceBuffer && (this.viewManager.enableBufferMonitor = !0)
          }, n.plugins.Generic.prototype.enableSeekMonitor = function () {
            this.infoManager.options.enableNiceSeek && (this.viewManager.enableSeekMonitor = !0)
          }, n.plugins.Generic.prototype.setOptions = function (e) {
            try {
              this.infoManager.options.setOptions(e)
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.getOptions = function () {
            try {
              return this.infoManager.options || {}
            } catch (e) {
              return n.error(e), {}
            }
          }, n.plugins.Generic.prototype.playHandler = function () {
            try {
              this.viewManager.sendStart()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.joinHandler = function () {
            try {
              this.viewManager.sendJoin()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.playingHandler = function () {
            try {
              this.viewManager.isStartSent && (this.viewManager.isJoinSent ? this.viewManager.isSeeking && this.viewManager.isPaused ? (this.viewManager.sendSeekEnd(), this.viewManager.sendResume()) : this.viewManager.isSeeking ? this.viewManager.sendSeekEnd() : this.viewManager.isBuffering ? this.viewManager.sendBufferEnd() : this.viewManager.isPaused && this.viewManager.sendResume() : this.viewManager.sendJoin())
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.pauseHandler = function () {
            try {
              this.viewManager.sendPause()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.pauseToggleHandler = function () {
            try {
              this.viewManager.isPaused ? this.viewManager.sendResume() : this.viewManager.sendPause()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.resumeHandler = function () {
            try {
              this.viewManager.sendResume()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.endedHandler = function () {
            try {
              this.viewManager.sendStop()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.errorHandler = function (e, t) {
            try {
              void 0 === e && (e = 0), t = t || e || "Unknown error", this.viewManager.sendError({errorCode: e, msg: t})
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.seekingHandler = function () {
            try {
              this.viewManager.isBuffering ? this.viewManager.convertBufferToSeek() : this.viewManager.sendSeekStart()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.seekedHandler = function () {
            try {
              this.viewManager.sendSeekEnd()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.bufferingHandler = function () {
            try {
              this.viewManager.isSeeking || this.viewManager.sendBufferStart()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.bufferedHandler = function () {
            try {
              this.viewManager.isStartSent && (this.viewManager.isJoinSent ? this.viewManager.isSeeking ? this.viewManager.sendSeekEnd() : this.viewManager.isBuffering && this.viewManager.sendBufferEnd() : this.viewManager.sendJoin())
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.ignoringAdHandler = function () {
            try {
              this.viewManager.sendIgnoreAdStart()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.ignoredAdHandler = function () {
            try {
              this.viewManager.sendIgnoreAdEnd()
            } catch (e) {
              n.error(e)
            }
          }, n.plugins.Generic.prototype.getResource = function () {
            return "unknown"
          }, n.plugins.Generic.prototype.getPlayhead = function () {
            return 0
          }, n.plugins.Generic.prototype.getMediaDuration = function () {
            return 0
          }, n.plugins.Generic.prototype.getIsLive = function () {
            return !1
          }, n.plugins.Generic.prototype.getRendition = function () {
            return null
          }, n.plugins.Generic.prototype.getBitrate = function () {
            return -1
          }, n.plugins.Generic.prototype.getThroughput = function () {
            return -1
          }, n.plugins.Generic.prototype.getPlayerVersion = function () {
            return null
          }, n.plugins.Generic.prototype.getTotalBytes = function () {
            return null
          }, n.plugins.Generic.prototype.getTitle = function () {
            return null
          }, n.managers.Info = function (e, t) {
            this.plugin = e, this.options = new n.data.Options(t), this.lastBitrate = 0, this.lastAdBitrate = 0
          }, n.managers.Info.prototype.getDataParams = function (e) {
            try {
              return e = e || {}, e.system = e.hasOwnProperty("system") ? e.system : this.options.accountCode, e.pluginName = e.hasOwnProperty("pluginName") ? e.pluginName : this.plugin.pluginName, e.pluginVersion = e.hasOwnProperty("pluginVersion") ? e.pluginVersion : this.plugin.pluginVersion, e.live = e.hasOwnProperty("live") ? e.live : this.options.media.isLive, e
            } catch (t) {
              return n.error(t), e
            }
          }, n.managers.Info.prototype.setOptions = function (e) {
            this.options.setOptions(e)
          }, n.managers.Info.prototype.getOptions = function (e) {
            return this.options
          }, n.managers.Info.prototype.getAdPlayhead = function () {
            try {
              return this.plugin.adnalyzer ? n.utils.parseNumber(this.plugin.adnalyzer.getAdPlayhead(), 0) : 0
            } catch (e) {
              return n.warn(e), 0
            }
          }, n.managers.Info.prototype.getAdBitrate = function () {
            try {
              if (this.plugin.adnalyzer) {
                var e = Math.round(this.plugin.adnalyzer.getAdBitrate());
                if (-1 == e && this.plugin.adnalyzer.tag && void 0 !== this.plugin.adnalyzer.tag.webkitVideoDecodedByteCount) {
                  var t = this.plugin.adnalyzer.tag.webkitVideoDecodedByteCount;
                  this.lastAdBitrate && (t = Math.round((this.plugin.adnalyzer.tag.webkitVideoDecodedByteCount - this.lastAdBitrate) / 5 * 8)), this.lastAdBitrate = this.plugin.adnalyzer.tag.webkitVideoDecodedByteCount, e = t
                }
                return n.utils.parseNumber(e, -1)
              }
              return -1
            } catch (e) {
              return n.warn(e), -1
            }
          }, n.managers.Info.prototype.getAdResource = function () {
            try {
              return void 0 !== this.options.ads.resource ? this.options.ads.resource : this.plugin.adnalyzer.getAdResource()
            } catch (e) {
              return n.warn(e), ""
            }
          }, n.managers.Info.prototype.getAdPosition = function () {
            try {
              return void 0 !== this.options.ads.position ? this.options.ads.position : this.plugin.adnalyzer.getAdPosition()
            } catch (e) {
              return n.warn(e), "mid"
            }
          }, n.managers.Info.prototype.getAdTitle = function () {
            try {
              return void 0 !== this.options.ads.title ? this.options.ads.title : this.plugin.adnalyzer.getAdTitle()
            } catch (e) {
              return n.warn(e), ""
            }
          }, n.managers.Info.prototype.getAdDuration = function () {
            try {
              var e = 0;
              return e = void 0 !== this.options.ads.duration ? this.options.ads.duration : Math.round(this.plugin.adnalyzer.getAdDuration()), n.utils.parseNumber(e, 0)
            } catch (e) {
              return n.warn(e), 0
            }
          }, n.managers.Info.prototype.getAdPlayerVersion = function () {
            try {
              return this.plugin.adnalyzer.getAdPlayerVersion()
            } catch (e) {
              return n.warn(e), null
            }
          }, n.managers.Info.prototype.getAdStartParams = function (e, t) {
            try {
              return e = e || {}, e.position = void 0 !== e.position ? e.position : this.getAdPosition(), e.resource = void 0 !== e.resource ? e.resource : this.getAdResource(), e.campaign = void 0 !== e.campaign ? e.campaign : this.options.ads.campaign, e.title = void 0 !== e.title ? e.title : this.getAdTitle(), e.adDuration = void 0 !== e.adDuration ? e.adDuration : this.getAdDuration(), e.playhead = void 0 !== e.playhead ? e.playhead : Math.round(this.getPlayhead()), e.adnalyzerVersion = void 0 !== e.adnalyzerVersion ? e.adnalyzerVersion : this.plugin.adnalyzer.adnalyzerVersion, e.adPlayerVersion = void 0 !== e.adPlayerVersion ? e.adPlayerVersion : this.getAdPlayerVersion(), e
            } catch (t) {
              return n.error(t), e
            }
          }, n.managers.Info.prototype.getAdJoinParams = function (e, t) {
            try {
              return e = e || {}, e.adPlayhead = void 0 !== e.adPlayhead ? e.adPlayhead : this.getAdPlayhead(), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getAdStopParams = function (e, t) {
            try {
              return e = e || {}, e.adPlayhead = void 0 !== e.adPlayhead ? e.adPlayhead : Math.round(this.getAdPlayhead()), e.adBitrate = void 0 !== e.adBitrate ? e.adBitrate : this.getAdBitrate(), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getAdPauseParams = function (e, t) {
            return e || {}
          },n.managers.Info.prototype.getAdResumeParams = function (e, t) {
            return e || {}
          },n.managers.Info.prototype.getAdBufferEndParams = function (e, t) {
            try {
              return e = e || {}, e.adPlayhead = void 0 !== e.adPlayhead ? e.adPlayhead : Math.round(this.getAdPlayhead()), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getAdPingParams = function (e, t) {
            try {
              return e = e || {}, e.adBitrate = void 0 !== e.adBitrate ? e.adBitrate : this.getAdBitrate(), e.adPlayhead = void 0 !== e.adPlayhead ? e.adPlayhead : Math.round(this.getAdPlayhead()), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getAdErrorParams = function (e, t) {
            try {
              return e = e || {}, e.errorCode = e.hasOwnProperty("errorCode") ? e.errorCode : "9000", e.msg = e.hasOwnProperty("msg") ? e.msg : "Unknown Error", e.adPlayhead = void 0 !== e.adPlayhead ? e.adPlayhead : Math.round(this.getAdPlayhead()), e.player = e.hasOwnProperty("player") ? e.player : this.plugin.pluginName, e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getAdClickParams = function (e, t) {
            try {
              return e = e || {}, e.adPlayhead = void 0 !== e.adPlayhead ? e.adPlayhead : Math.round(this.getAdPlayhead()), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getResource = function () {
            try {
              return this.plugin.viewManager.resourceParser && this.plugin.viewManager.resourceParser.realResource ? this.plugin.viewManager.resourceParser.realResource : void 0 !== this.options.media.resource ? this.options.media.resource : this.plugin.getResource()
            } catch (e) {
              return n.warn(e), "unknown"
            }
          },n.managers.Info.prototype.getCDN = function () {
            try {
              return this.plugin.viewManager.resourceParser && this.plugin.viewManager.resourceParser.cdn && this.options.useCDNFromParser ? this.plugin.viewManager.resourceParser.cdn : void 0 !== this.options.media.cdn ? this.options.media.cdn : null
            } catch (e) {
              return n.warn(e), null
            }
          },n.managers.Info.prototype.getMediaDuration = function () {
            try {
              var e = 0;
              return e = void 0 !== this.options.media.duration ? this.options.media.duration : this.plugin.getMediaDuration(), Math.round(n.utils.parseNumber(e, 0))
            } catch (e) {
              return n.warn(e), 0
            }
          },n.managers.Info.prototype.getIsLive = function () {
            try {
              return void 0 !== this.options.media.isLive ? this.options.media.isLive : this.plugin.getIsLive()
            } catch (e) {
              return n.warn(e), !1
            }
          },n.managers.Info.prototype.getPlayerVersion = function () {
            try {
              return this.plugin.getPlayerVersion()
            } catch (e) {
              return n.warn(e), ""
            }
          },n.managers.Info.prototype.getTitle = function () {
            try {
              return void 0 !== this.options.media.title ? this.options.media.title : this.plugin.getTitle()
            } catch (e) {
              return n.warn(e), ""
            }
          },n.managers.Info.prototype.getRendition = function () {
            try {
              return void 0 !== this.options.media.rendition ? this.options.media.rendition : this.plugin.getRendition()
            } catch (e) {
              return n.warn(e), ""
            }
          },n.managers.Info.prototype.getBitrate = function () {
            try {
              var e = Math.round(this.plugin.getBitrate());
              if (-1 == e && this.plugin.tag && void 0 !== this.plugin.tag.webkitVideoDecodedByteCount) {
                var t = this.plugin.tag.webkitVideoDecodedByteCount;
                this.lastBitrate && (t = Math.round((this.plugin.tag.webkitVideoDecodedByteCount - this.lastBitrate) / 5 * 8)), this.lastBitrate = this.plugin.tag.webkitVideoDecodedByteCount, e = 0 != t ? t : -1
              }
              return n.utils.parseNumber(e, -1)
            } catch (e) {
              return n.warn(e), -1
            }
          },n.managers.Info.prototype.getThroughput = function () {
            try {
              return n.utils.parseNumber(Math.round(this.plugin.getThroughput()), -1)
            } catch (e) {
              return n.warn(e), -1
            }
          },n.managers.Info.prototype.getTotalBytes = function () {
            try {
              return n.utils.parseNumber(this.plugin.getTotalBytes(), null)
            } catch (e) {
              return n.warn(e), null
            }
          },n.managers.Info.prototype.getPlayhead = function () {
            try {
              var e = this.plugin.getPlayhead();
              return this.plugin.adnalyzer && null !== this.plugin.adnalyzer.getMediaPlayhead() && (e = this.plugin.adnalyzer.getMediaPlayhead()), n.utils.parseNumber(e, 0)
            } catch (e) {
              return n.warn(e), 0
            }
          },n.managers.Info.prototype.getStartParams = function (e) {
            try {
              if (e = e || {}, e.system = e.hasOwnProperty("system") ? e.system : this.options.accountCode, e.player = e.hasOwnProperty("player") ? e.player : this.plugin.pluginName, e.user = e.hasOwnProperty("user") ? e.user : this.options.username, e.transcode = e.hasOwnProperty("transcode") ? e.transcode : this.options.transactionCode, e.hashTitle = e.hasOwnProperty("hashTitle") ? e.hashTitle : this.options.hashTitle, !e.hasOwnProperty("referer")) {
                e.referer = "";
                try {
                  e.referer = top.window.location.href
                } catch (t) {
                  e.referer = window.location.href
                }
              }
              return e.deviceId = e.hasOwnProperty("deviceId") ? e.deviceid : this.options.device.id, e.pluginVersion = e.hasOwnProperty("pluginVersion") ? e.pluginVersion : this.plugin.pluginVersion, e.playerVersion = e.hasOwnProperty("playerVersion") ? e.playerVersion : this.getPlayerVersion(), e.resource = e.hasOwnProperty("resource") ? e.resource : this.getResource(), e.duration = e.hasOwnProperty("duration") ? e.duration : this.getMediaDuration(), e.live = e.hasOwnProperty("live") ? e.live : this.getIsLive(), e.rendition = e.hasOwnProperty("rendition") ? e.rendition : this.getRendition(), e.title = e.hasOwnProperty("title") ? e.title : this.getTitle(), e.properties = e.hasOwnProperty("properties") ? e.properties : this.options.properties, e.cdn = e.hasOwnProperty("cdn") ? e.cdn : this.getCDN(), e.isp = e.hasOwnProperty("isp") ? e.isp : this.options.network.isp, e.ip = e.hasOwnProperty("ip") ? e.ip : this.options.network.ip, e.param1 = e.hasOwnProperty("param1") ? e.param1 : this.options.extraParams.param1, e.param2 = e.hasOwnProperty("param2") ? e.param2 : this.options.extraParams.param2, e.param3 = e.hasOwnProperty("param3") ? e.param3 : this.options.extraParams.param3, e.param4 = e.hasOwnProperty("param4") ? e.param4 : this.options.extraParams.param4, e.param5 = e.hasOwnProperty("param5") ? e.param5 : this.options.extraParams.param5, e.param6 = e.hasOwnProperty("param6") ? e.param6 : this.options.extraParams.param6, e.param7 = e.hasOwnProperty("param7") ? e.param7 : this.options.extraParams.param7, e.param8 = e.hasOwnProperty("param8") ? e.param8 : this.options.extraParams.param8, e.param9 = e.hasOwnProperty("param9") ? e.param9 : this.options.extraParams.param9, e.param10 = e.hasOwnProperty("param10") ? e.param10 : this.options.extraParams.param10, e.param11 = e.hasOwnProperty("param11") ? e.param11 : this.options.extraParams.param11, e.param12 = e.hasOwnProperty("param12") ? e.param12 : this.options.extraParams.param12, e.param13 = e.hasOwnProperty("param13") ? e.param13 : this.options.extraParams.param13, e.param14 = e.hasOwnProperty("param14") ? e.param14 : this.options.extraParams.param14, e.param15 = e.hasOwnProperty("param15") ? e.param15 : this.options.extraParams.param15, e.param16 = e.hasOwnProperty("param16") ? e.param16 : this.options.extraParams.param16, e.param17 = e.hasOwnProperty("param17") ? e.param17 : this.options.extraParams.param17, e.param18 = e.hasOwnProperty("param18") ? e.param18 : this.options.extraParams.param18, e.param19 = e.hasOwnProperty("param19") ? e.param19 : this.options.extraParams.param19, e.param20 = e.hasOwnProperty("param20") ? e.param20 : this.options.extraParams.param20, e.totalBytes = e.hasOwnProperty("totalBytes") ? e.totalBytes : this.getTotalBytes(), e.adsExpected = e.hasOwnProperty("adsExpected") ? e.adsExpected : this.options.ads.expected, 1 == this.options.isResumed && (e.isResumed = 1), 1 == this.options.isBalanced && (e.isBalanced = 1), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getJoinParams = function (e) {
            try {
              return e = e || {}, e.eventTime = e.hasOwnProperty("eventTime") ? e.eventTime : this.getPlayhead(), e.mediaDuration = e.hasOwnProperty("mediaDuration") ? e.mediaDuration : this.getMediaDuration(), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getStopParams = function (e) {
            return e || {}
          },n.managers.Info.prototype.getPauseParams = function (e) {
            return e || {}
          },n.managers.Info.prototype.getResumeParams = function (e) {
            return e || {}
          },n.managers.Info.prototype.getBufferEndParams = function (e) {
            try {
              return e = e || {}, e.time = e.hasOwnProperty("time") ? e.time : this.getPlayhead(), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getErrorParams = function (e) {
            try {
              return e = e || {}, e.errorCode = e.hasOwnProperty("errorCode") ? e.errorCode : "9000", e.msg = e.hasOwnProperty("msg") ? e.msg : "Unknown Error", e = this.getStartParams(e)
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.Info.prototype.getSeekEndParams = function (e) {
            return this.getBufferEndParams(e)
          },n.managers.Info.prototype.getPingParams = function (e, t) {
            try {
              return e = e || {}, e.time = void 0 !== e.time ? e.time : this.getPlayhead(), e.bitrate = void 0 !== e.bitrate ? e.bitrate : this.getBitrate(), e.throughput = void 0 !== e.throughput ? e.throughput : this.getThroughput(), e.totalBytes = void 0 !== e.totalBytes ? e.totalBytes : this.getTotalBytes(), e
            } catch (t) {
              return n.error(t), e
            }
          },n.managers.View = function (e) {
            this.infoManager = e, this.isStartSent = !1, this.isJoinSent = !1, this.isPaused = !1, this.isSeeking = !1, this.isBuffering = !1, this.isErrorSent = !1, this.isShowingAds = !1, this.isAdStartSent = !1, this.isAdJoinSent = !1, this.isAdPaused = !1, this.isAdBuffering = !1, this.chrono = {
              joinTime: new n.utils.Chrono,
              seek: new n.utils.Chrono,
              pause: new n.utils.Chrono,
              buffer: new n.utils.Chrono,
              adIgnore: new n.utils.Chrono,
              adTotal: new n.utils.Chrono,
              adJoinTime: new n.utils.Chrono,
              adPause: new n.utils.Chrono,
              adBuffer: new n.utils.Chrono
            }, this.adCounter = {pre: 0, mid: 0, post: 0, unknown: 0};
            var t = this;
            this.timer = {
              pinger: new n.utils.Timer(function (e) {
                t.sendPing({diffTime: e})
              }), playheadMonitor: new n.utils.Timer(function (e) {
                t.checkPlayhead()
              }, n.managers.View.monitoringInterval), adPlayheadMonitor: new n.utils.Timer(function (e) {
                t.checkAdPlayhead()
              }, n.managers.View.monitoringInterval)
            }, this.enableBufferMonitor = !1, this.enableSeekMonitor = !1, this.enableAdBufferMonitor = !1, this.enableAdSeekMonitor = !1, this.lastDuration = 0, this.lastPlayhead = 0, this.lastAdPosition = "", this.lastRendition = "", this.lastResume = 0, this.changedEntities = [], this.resourceParser = new n.utils.ResourceParser(this), this.comm = new n.comm.Communication(this.infoManager.options.service, this.infoManager.options.httpSecure), this.comm.requestData(this.infoManager.getDataParams(), function () {
              t.timer.pinger.interval = Math.max(1e3, 1e3 * t.comm.pingTime)
            })
          },n.managers.View.prototype.sendRequest = function (e, t, r) {
            try {
              this.isAllowed(e) && this.comm.sendRequest(e, t, r)
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.isAllowed = function (e) {
            return this.infoManager.options.enableAnalytics && !(e in this.infoManager.options.disabledRequests)
          },n.managers.View.prototype.isHalted = function () {
            return this.infoManager.options.haltOnError && this.isErrorSent
          },n.managers.View.prototype.sendAdInit = function (e, t) {
            try {
              this.isHalted() || this.isAdStartSent || this.isAdInitSent || (this.isShowingAds = !0, this.isAdInitSent = !0, this.chrono.adTotal.start(), this.chrono.adJoinTime.start(), this.sendSeekEnd(), this.sendBufferEnd(), e = this.infoManager.getAdStartParams(e), e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position, !0), this.lastAdPosition = e.position, this.sendRequest("/adInit", e, t), n.noticeRequest("Request: NQS /adInit " + e.position + e.number))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdStart = function (e, t) {
            try {
              this.isHalted() || this.isAdStartSent || (this.isShowingAds = !0, this.isAdStartSent = !0, this.isAdInitSent || (this.chrono.adTotal.start(), this.chrono.adJoinTime.start()), this.sendSeekEnd(), this.sendBufferEnd(), e = this.infoManager.getAdStartParams(e), e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position, !this.isAdInitSent), this.lastAdPosition = e.position, this.sendRequest("/adStart", e, t), n.noticeRequest("Request: NQS /adStart " + e.position + e.number), this.isAdInitSent && (this.sendAdJoin(), this.isAdInitSent = !1))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdJoin = function (e, t) {
            try {
              this.isHalted() || this.isAdStartSent && !this.isAdJoinSent && (this.isAdJoinSent = !0, (this.enableAdBufferMonitor || this.enableAdSeekMonitor) && (this.timer.adPlayheadMonitor.start(), this.lastPlayhead = 0), e = this.infoManager.getAdJoinParams(e), e.duration = void 0 !== e.duration ? e.duration : this.chrono.adJoinTime.getDeltaTime(), e.position = void 0 !== e.position ? e.position : this.lastAdPosition, e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position), this.sendRequest("/adJoinTime", e, t), n.noticeRequest("Request: NQS /adJoinTime " + e.duration + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdStop = function (e, t) {
            try {
              this.isHalted() || (this.isAdStartSent || this.isAdInitSent) && (this.isAdStartSent = !1, this.isAdJoinSent = !1, this.isAdPaused = !1, this.isAdBuffering = !1, this.isShowingAds = !1, this.isAdInitSent = !1, this.timer.adPlayheadMonitor.stop(), e = this.infoManager.getAdStopParams(e), e.totalDuration = void 0 !== e.totalDuration ? e.totalDuration : this.chrono.adTotal.getDeltaTime(), e.position = void 0 !== e.position ? e.position : this.lastAdPosition, e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position), e.adPlayhead || delete e.adPlayhead, this.isJoinSent || (this.chrono.joinTime.startTime += this.chrono.adTotal.getDeltaTime(), this.chrono.joinTime.startTime = Math.min(this.chrono.joinTime.startTime, (new Date).getTime())), this.sendRequest("/adStop", e, t), n.noticeRequest("Request: NQS /adStop " + e.totalDuration + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdPause = function (e, t) {
            try {
              this.isHalted() || this.isAdJoinSent && !this.isAdPaused && (this.isAdPaused = !0, this.chrono.adPause.start(), e = this.infoManager.getAdPauseParams(e), e.position = void 0 !== e.position ? e.position : this.lastAdPosition, e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position), this.sendRequest("/adPause", e, t), n.noticeRequest("Request: NQS /adPause"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdResume = function (e, t) {
            try {
              this.isHalted() || this.isAdJoinSent && this.isAdPaused && (this.isAdPaused = !1, this.chrono.adPause.stop(), e = this.infoManager.getAdResumeParams(e), e.position = void 0 !== e.position ? e.position : this.lastAdPosition, e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position), this.sendRequest("/adResume", e, t), n.noticeRequest("Request: NQS /adResume"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdBufferStart = function () {
            try {
              this.isHalted() || this.isAdJoinSent && !this.isAdBuffering && (this.isAdBuffering = !0, this.chrono.adBuffer.start(), n.noticeRequest("Method: /adBufferStart"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdBufferEnd = function (e, t) {
            try {
              this.isHalted() || this.isAdJoinSent && this.isAdBuffering && (this.isAdBuffering = !1, e = this.infoManager.getAdBufferEndParams(e), e.duration = void 0 !== e.duration ? e.duration : this.chrono.adBuffer.getDeltaTime(), e.position = void 0 !== e.position ? e.position : this.lastAdPosition, e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position), this.sendRequest("/adBufferUnderrun", e, t), n.noticeRequest("Request: NQS /adBufferUnderrun " + e.duration + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdError = function (e, t) {
            try {
              this.isHalted() || (e = this.infoManager.getAdErrorParams(e), void 0 === e.position && (this.isAdStartSent ? e.position = this.lastAdPosition : e.position = this.infoManager.getAdPosition(), e.number = this.getAdNumber(e.position)), this.sendRequest("/adError", e, t), n.noticeRequest("Request: NQS /adError"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendAdClick = function (e, t) {
            try {
              this.isHalted() || (e = this.infoManager.getAdClickParams(e), e.position = void 0 !== e.position ? e.position : this.lastAdPosition, e.number = void 0 !== e.number ? e.number : this.getAdNumber(e.position), this.sendRequest("/adClick", e, t), n.noticeRequest("Request: NQS /adClick"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.getAdNumber = function (e, t) {
            var r = 0;
            switch (e) {
              case"pre":
                r = t ? ++this.adCounter.pre : this.adCounter.pre;
                break;
              case"mid":
                r = t ? ++this.adCounter.mid : this.adCounter.mid;
                break;
              case"post":
                r = t ? ++this.adCounter.post : this.adCounter.post;
                break;
              default:
                r = t ? ++this.adCounter.unknown : this.adCounter.unknown
            }
            return r > 0 ? r : 1
          },n.managers.View.prototype.resetAdNumbers = function () {
            this.adCounter = {pre: 0, mid: 0, post: 0, unknown: 0}
          },n.managers.View.prototype.sendIgnoreAdStart = function () {
            try {
              this.isHalted() || this.isStartSent && !this.isShowingAds && (this.isShowingAds = !0, this.chrono.adIgnore.start(), this.sendBufferEnd(), this.sendSeekEnd(), n.noticeRequest("Method: /genericAdStart"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendIgnoreAdEnd = function () {
            try {
              this.isHalted() || this.isStartSent && this.isShowingAds && (this.isShowingAds = !1, this.chrono.adIgnore.stop(), this.isJoinSent || (this.chrono.joinTime.startTime += this.chrono.adIgnore.getDeltaTime(), this.chrono.joinTime.startTime = Math.min(this.chrono.joinTime.startTime, (new Date).getTime())), n.noticeRequest("Method: /genericAdEnd " + this.chrono.adIgnore.getDeltaTime() + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendStart = function (e, t) {
            try {
              this.isHalted() || this.isStartSent || ((this.infoManager.options.parseCDNNodeHost || this.infoManager.options.parseHLS) && this.resourceParser.init(), this.isStartSent = !0, this.chrono.joinTime.start(), n.noticeRequest("Sending pings every " + this.comm.pingTime + "s."), this.timer.pinger.interval = Math.max(1e3, 1e3 * this.comm.pingTime), this.timer.pinger.start(), e = this.infoManager.getStartParams(e), e.pingTime = void 0 !== e.pingTime ? e.pingTime : this.comm.pingTime, this.infoManager.options.parseCDNNodeHost && (e.nodeHost = void 0 !== e.nodeHost ? e.nodeHost : void 0 !== this.resourceParser.nodeHost ? this.resourceParser.nodeHost : "", e.nodeType = void 0 !== e.nodeType ? e.nodeType : void 0 !== this.resourceParser.nodeType ? this.resourceParser.nodeType : ""), this.comm.nextView(e.live), this.sendRequest("/start", e, t), n.noticeRequest("Request: NQS /start " + e.resource), this.lastDuration = e.duration, this.lastRendition = e.rendition)
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendJoin = function (e, t) {
            try {
              this.isHalted() || !this.isStartSent || this.isJoinSent || this.isShowingAds || (this.isJoinSent = !0, (this.enableBufferMonitor || this.enableSeekMonitor) && (this.timer.playheadMonitor.start(), this.lastPlayhead = 0), e = this.infoManager.getJoinParams(e), e.time = void 0 !== e.time ? e.time : this.chrono.joinTime.getDeltaTime(), e.mediaDuration === this.lastDuration && delete e.mediaDuration, this.sendRequest("/joinTime", e, t), n.noticeRequest("Request: NQS /joinTime " + e.time + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendStop = function (e, t) {
            try {
              this.isHalted() || this.isStartSent && (this.isStartSent = !1, this.isPaused = !1, this.isJoinSent = !1, this.isSeeking = !1, this.isBuffering = !1, this.isErrorSent = !1, this.resourceParser.clear(), this.resetAdNumbers(), this.stopTimers(), e = this.infoManager.getStopParams(e), e.diffTime = void 0 !== e.diffTime ? e.diffTime : this.timer.pinger.chrono.getDeltaTime(), this.sendRequest("/stop", e, t), n.noticeRequest("Request: NQS /stop"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendPause = function (e, t) {
            try {
              this.isHalted() || this.isJoinSent && !this.isPaused && (this.isPaused = !0, this.chrono.pause.start(), e = this.infoManager.getPauseParams(e), this.sendRequest("/pause", e, t), n.noticeRequest("Request: NQS /pause"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendResume = function (e, t) {
            try {
              this.isHalted() || this.isJoinSent && this.isPaused && (this.isPaused = !1, this.chrono.pause.stop(), this.lastResume = (new Date).getTime(), e = this.infoManager.getResumeParams(e), this.sendRequest("/resume", e, t), n.noticeRequest("Request: NQS /resume"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendBufferStart = function () {
            try {
              this.isHalted() || this.isJoinSent && !this.isBuffering && (this.isBuffering = !0, this.chrono.buffer.start(), n.noticeRequest("Method: /bufferStart"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendBufferEnd = function (e, t) {
            try {
              this.isHalted() || this.isJoinSent && this.isBuffering && (this.isBuffering = !1, this.lastResume = (new Date).getTime(), e = this.infoManager.getBufferEndParams(e), e.duration = void 0 !== e.duration ? e.duration : this.chrono.buffer.getDeltaTime(), this.sendRequest("/bufferUnderrun", e, t), n.noticeRequest("Request: NQS /bufferUnderrun " + e.duration + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendSeekStart = function () {
            try {
              this.isHalted() || this.isJoinSent && !this.isSeeking && (this.isSeeking = !0, this.chrono.seek.start(), n.noticeRequest("Method: /seekStart"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendSeekEnd = function (e, t) {
            try {
              this.isHalted() || this.isJoinSent && this.isSeeking && (this.isSeeking = !1, this.lastResume = (new Date).getTime(), e = this.infoManager.getSeekEndParams(e), e.duration = void 0 !== e.duration ? e.duration : this.chrono.seek.getDeltaTime(), this.sendRequest("/seek", e, t), n.noticeRequest("Request: NQS /seek " + e.duration + "ms"))
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendError = function (e, t) {
            try {
              this.isErrorSent = !0, !this.infoManager.options.parseCDNNodeHost && !this.infoManager.options.parseHLS || this.resourceParser.realResource || this.resourceParser.init(), this.infoManager.options.haltOnError && this.stopTimers(), e = this.infoManager.getErrorParams(e), e.pingTime = void 0 !== e.pingTime ? e.pingTime : this.comm.pingTime, this.infoManager.options.parseCDNNodeHost && (e.nodeHost = void 0 !== e.nodeHost ? e.nodeHost : void 0 !== this.resourceParser.nodeHost ? this.resourceParser.nodeHost : "", e.nodeType = void 0 !== e.nodeType ? e.nodeType : void 0 !== this.resourceParser.nodeType ? this.resourceParser.nodeType : ""), this.sendRequest("/error", e, t), n.noticeRequest("Request: NQS /error " + e.msg)
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.convertBufferToSeek = function () {
            try {
              n.noticeRequest("Converting buffer to seek"), this.chrono.seek.startTime = this.chrono.buffer.startTime, this.chrono.seek.lastTime = 0, this.chrono.buffer.stop(), this.isBuffering = !1, this.isSeeking = !0
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.monitoringInterval = 800,n.managers.View.prototype.jumpNextTick = !1,n.managers.View.prototype.checkPlayhead = function () {
            if (this.isJoinSent && !this.isShowingAds) {
              var e = 2 * n.managers.View.monitoringInterval, t = n.managers.View.monitoringInterval / 2,
                r = 1.1 * n.managers.View.monitoringInterval, i = this.infoManager.getPlayhead(),
                s = 1e3 * Math.abs(this.lastPlayhead - i);
              if (s < t) {
                var a = this.lastResume ? Math.abs((new Date).getTime() - this.lastResume) : 0;
                this.enableBufferMonitor && (0 == a || a > n.managers.View.monitoringInterval) && this.lastPlayhead > 0 && !this.isBuffering && !this.isPaused && !this.isSeeking && this.sendBufferStart()
              } else s > e ? this.enableSeekMonitor && this.lastPlayhead > 0 && !this.isSeeking && (this.isBuffering ? this.convertBufferToSeek() : this.sendSeekStart()) : this.isSeeking && this.enableSeekMonitor ? this.sendSeekEnd() : this.isBuffering && this.enableBufferMonitor && this.chrono.buffer.getDeltaTime(!1) > r && this.sendBufferEnd();
              this.lastPlayhead = i
            }
          },n.managers.View.prototype.checkAdPlayhead = function () {
            if (this.isAdJoinSent) {
              var e = n.managers.View.monitoringInterval / 2, t = 1.1 * n.managers.View.monitoringInterval,
                r = this.infoManager.getAdPlayhead();
              1e3 * Math.abs(this.lastPlayhead - r) < e ? this.enableAdBufferMonitor && this.lastPlayhead > 0 && !this.isAdBuffering && !this.isAdPaused && this.sendAdBufferStart() : this.isAdBuffering && this.chrono.adBuffer.getDeltaTime(!1) > t && this.sendAdBufferEnd(), this.lastPlayhead = r
            }
          },n.managers.View.prototype.stopTimers = function () {
            this.timer.pinger.stop(), this.timer.playheadMonitor.stop(), this.timer.adPlayheadMonitor.stop()
          },n.managers.View.prototype.sendPing = function (e, t) {
            try {
              e = this.infoManager.getPingParams(e), this.isShowingAds && (e = this.infoManager.getAdPingParams(e)), e.pingTime = void 0 !== e.pingTime ? e.pingTime : this.comm.pingTime, this.isSeeking && (e.seekDuration = void 0 !== e.seekDuration ? e.seekDuration : this.chrono.seek.getDeltaTime(!1)), this.isBuffering && (e.bufferDuration = void 0 !== e.bufferDuration ? e.bufferDuration : this.chrono.buffer.getDeltaTime(!1)), this.isAdBuffering && (e.adBufferDuration = void 0 !== e.adBufferDuration ? e.adBufferDuration : this.chrono.adBuffer.getDeltaTime(!1));
              var r = this.infoManager.getRendition();
              if (r && this.lastRendition != r && (this.sendChangedEntity("rendition", r), this.lastRendition = r), 1 == this.changedEntities.length) {
                var i = this.changedEntities.shift();
                e.entityType = i.key, e.entityValue = i.value
              } else if (this.changedEntities.length > 1) {
                e.entityType = null, e.entityValue = null, e.entities = {};
                for (var s = 0; s < this.changedEntities.length; s++) e.entities[this.changedEntities[s].key] = this.changedEntities[s].value;
                this.changedEntities = []
              }
              this.sendRequest("/ping", e, t)
            } catch (e) {
              n.error(e)
            }
          },n.managers.View.prototype.sendChangedEntity = function (e, t) {
            try {
              this.changedEntities.push({key: e, value: t})
            } catch (e) {
              n.error(e)
            }
          },n.utils.Chrono = function () {
            try {
              this.startTime = 0, this.lastTime = 0
            } catch (e) {
              n.error(e)
            }
          },n.utils.Chrono.prototype.getDeltaTime = function (e) {
            try {
              return this.startTime ? 0 === this.lastTime ? !1 !== e ? this.stop() : (new Date).getTime() - this.startTime : this.lastTime - this.startTime : -1
            } catch (e) {
              n.error(e)
            }
          },n.utils.Chrono.prototype.start = function () {
            try {
              this.startTime = (new Date).getTime(), this.lastTime = 0
            } catch (e) {
              n.error(e)
            }
          },n.utils.Chrono.prototype.stop = function () {
            try {
              return this.lastTime = (new Date).getTime(), this.getDeltaTime()
            } catch (e) {
              n.error(e)
            }
          },n.utils.parseNumber = function (e, t) {
            return !isNaN(e) && e >= 0 && e != 1 / 0 && null !== e && void 0 !== e ? e : t
          },n.utils.listenAllEvents = function (e, t, r) {
            try {
              if (n.debugLevel >= 4) {
                r = r || function (e) {
                  var t = "";
                  void 0 !== e.target && void 0 !== e.target.id && (t = e.target.id), n.debug("Event: " + t + " > " + e.type)
                };
                var i = ["canplay", "buffering", "waiting", "ended", "play", "playing", "pause", "resume", "error", "abort", "seek", "seeking", "seeked", "stalled", "dispose", "loadeddata", "loadstart"];
                t && (null === t[0] ? (t.shift(), i = t) : i = i.concat(t));
                for (var s = 0; s < i.length; s++) "function" == typeof e ? e.call(window, i[s], r) : e.on ? e.on(i[s], r) : e.addEventListener && e.addEventListener(i[s], r)
              }
            } catch (e) {
              n.error(e)
            }
          },n.utils.buildRenditionString = function (e, t, r) {
            1 == arguments.length && (r = e, e = null, t = null);
            var i = "";
            return e && t && (i = e + "x" + t, r > 0 && (i += "@")), r < 1 ? i : (r < 1e3 ? i += Math.round(r) + "bps" : r < 1e6 ? (r = Math.round(r / 1e3), i += r + "Kbps") : (r = Math.round(r / 1e4) / 100, i += r + "Mbps"), i)
          },n.debugLevel = 2,n.messageLevels = {
            1: "e",
            2: "w",
            3: "n",
            4: "d",
            5: "v"
          },n.plainConsole = !1,n.report = function (e, t, r) {
            if (console && console.log) {
              t = t || 4, r = r || "darkcyan";
              var i = n.messageLevels[t], s = n.getCurrentTime() + "[Youbora] " + i + ":";
              if (void 0 !== n.remoteLog && !0 === n.remoteLog.enabled && n.remoteLog(s + e), n.debugLevel >= t) if (n.plainConsole || document.documentMode) n.plainReport(e, s); else {
                var a = console.log;
                1 == t && console.error ? a = console.error : 2 == t && console.warn ? a = console.warn : t >= 4 && console.debug && (a = console.debug), s = "%c" + s, e instanceof Array ? (e.splice(0, 0, s, "color: " + r), a.apply(console, e)) : a.call(console, s, "color: " + r, e)
              }
            }
          },n.getCurrentTime = function (e) {
            var t = new Date;
            return "[" + ("0" + t.getDate()).slice(-2) + ":" + ("0" + t.getMinutes()).slice(-2) + ":" + ("0" + t.getSeconds()).slice(-2) + "." + ("00" + t.getMilliseconds()).slice(-3) + "]"
          },n.plainReport = function (e, t) {
            if (e instanceof Array) for (var r in e) n.plainReport(e[r], t); else "string" == typeof e ? console.log(t + " " + e) : (console.log(t + " <next line>"), console.log(e))
          },n.error = function () {
            n.report([].slice.call(arguments), 1, "darkred")
          },n.warn = function () {
            n.report([].slice.call(arguments), 2, "darkorange")
          },n.notice = function () {
            n.report([].slice.call(arguments), 3, "darkcyan")
          },n.noticeRequest = function () {
            n.report([].slice.call(arguments), 3, "darkgreen")
          },n.debug = function () {
            n.report([].slice.call(arguments), 4, "indigo")
          },n.verbose = function () {
            n.report([].slice.call(arguments), 5, "navy")
          },function () {
            function e(e) {
              switch (e) {
                case"plain":
                  n.plainConsole = !0;
                  break;
                case"remote":
                  n.remoteLog.forced = !0;
                  break;
                case"plain+remote":
                case"remote+plain":
                  n.remoteLog.forced = !0, n.plainConsole = !0
              }
            }

            try {
              if ("undefined" != typeof window) {
                var t = document.getElementsByTagName("script");
                for (var r in t) if (t[r].getAttribute) {
                  var i = t[r].getAttribute("youbora-debug");
                  i && (n.debugLevel = i), (i = t[r].getAttribute("youbora-console")) && e(i)
                }
                var s = /\?.*\&*youbora-debug=(.+)/i.exec(window.location.search);
                null !== s && (n.debugLevel = s[1]), null !== (s = /\?.*\&*youbora-console=(.+)/i.exec(window.location.search)) && e(s[1])
              }
            } catch (e) {
              n.error(e)
            }
          }(),n.utils.ResourceParser = function (e) {
            try {
              this.viewManager = e, this.parseTimeout = null, this.realResource = "", this.nodeHost = void 0, this.nodeType = void 0, this.cdn, this.cdnRequests = {}, this.cdns = n.utils.ResourceParser.cdnsEnabled.slice()
            } catch (e) {
              n.error(e)
            }
          },n.utils.ResourceParser.prototype.init = function () {
            try {
              this.realResource && this.clear(), this.viewManager.comm.addPreloader("ResourceParser");
              var e = this;
              this.viewManager.comm.extraOperationsCallback = function (t) {
                void 0 !== t.resource && e.realResource && (t.resource = e.realResource), void 0 !== t.nodeHost && e.nodeHost && (t.nodeHost = e.nodeHost, t.nodeType = e.nodeType), !t.cdn && e.viewManager.infoManager.options.useCDNFromParser && (t.cdn = e.cdn)
              }, this.parseTimeout = setTimeout(function () {
                "ResourceParser" in e.viewManager.comm.preloaders && (e.realResource = e.viewManager.infoManager.getResource(), e.viewManager.comm.removePreloader("ResourceParser"), n.warn("ResourceParser has exceded the maximum execution time (3s) and will be aborted."))
              }, 3e3), this.realResource = this.viewManager.infoManager.getResource(), this.viewManager.infoManager.options.parseHLS ? this._parseRealResourceAsync(this.realResource) : this._parseCDNAsync()
            } catch (e) {
              n.error(e)
            }
          },n.utils.ResourceParser.prototype.clear = function () {
            this.realResource = "", this.nodeHost = void 0, this.nodeType = void 0, this.cdnRequests = {}, this.cdns = n.utils.ResourceParser.cdnsEnabled.slice()
          },n.utils.ResourceParser.prototype._parseRealResourceAsync = function (e, t) {
            try {
              var r = /(\S*?(\.m3u8|\.m3u|\.ts|\.mp4)(\?\S*|\n|\r|$))/i.exec(e);
              if (null !== r) {
                var i = r[1].trim();
                if (0 !== i.indexOf("http") && 0 !== i.indexOf("//") && (i = t.slice(0, t.lastIndexOf("/")) + "/" + i), ".m3u8" == r[2] || ".m3u" == r[2]) {
                  var s = this;
                  new n.comm.AjaxRequest(i).load(function () {
                    s._parseRealResourceAsync(this.responseText, i)
                  }).error(function () {
                    s._parseCDNAsync()
                  }).send()
                } else this.realResource = i, this._parseCDNAsync()
              } else this._parseCDNAsync()
            } catch (e) {
              n.error(e), this._parseCDNAsync()
            }
          },n.utils.ResourceParser.cdnsEnabled = ["Level3", "Akamai", "Highwinds", "Fastly"],n.utils.ResourceParser.cdnsAvailable = {
            Level3: {
              code: "LEVEL3",
              parsers: [{type: "host+type", name: "X-WR-DIAG", regex: /Host:(.+)\sType:(.+)/}],
              headers: {"X-WR-DIAG": "host"}
            },
            Akamai: {
              code: "AKAMAI",
              parsers: [{type: "host+type", name: "X-Cache", regex: /(.+)\sfrom\s.+\(.+\/(.+)\).+/}]
            },
            Highwinds: {code: "HIGHNEGR", parsers: [{type: "host+type", name: "X-HW", regex: /.+,[0-9]+\.(.+)\.(.+)/}]},
            Fastly: {
              code: "FASTLY",
              parsers: [{type: "host", name: "X-Served-By", regex: /([^,\s]+)$/}, {
                type: "type",
                name: "X-Cache",
                regex: /([^,\s]+)$/
              }]
            },
            Telefonica: {code: "TELEFO", parsers: [{type: "host+type", name: "X-TCDN", regex: /Host:(.+)\sType:(.+)/}]},
            CustomCDN: {code: null, parsers: [{type: "name", regex: /(.+)/}]}
          },n.utils.ResourceParser.prototype._parseCDNAsync = function () {
            try {
              if (this.viewManager.infoManager.options.parseCDNNodeHost) if (this.cdns.length > 0 && !this.nodeHost) {
                var e = this.cdns.shift();
                if (void 0 !== n.utils.ResourceParser.cdnsAvailable[e]) {
                  var t = n.utils.ResourceParser.cdnsAvailable[e], r = JSON.stringify(t.headers);
                  if (this.cdnRequests.hasOwnProperty(r)) this._parseNode(t, this.cdnRequests[r]); else {
                    var i = this, s = new n.comm.AjaxRequest(this.realResource, "", "", {
                      method: "HEAD",
                      maxRetries: 0,
                      requestHeaders: t.headers
                    });
                    s.load(function () {
                      i.cdnRequests[r] = s.getXHR(), i._parseNode(t, s.getXHR())
                    }), s.error(function () {
                      i._parseCDNAsync()
                    }), s.send()
                  }
                } else this._parseCDNAsync()
              } else this.viewManager.comm.removePreloader("ResourceParser"); else this.viewManager.comm.removePreloader("ResourceParser")
            } catch (e) {
              n.error(e)
            }
          },n.utils.ResourceParser.prototype._parseNode = function (e, t) {
            try {
              var r = e.parsers;
              for (var i in r) {
                "name" == r[i].type && (r[i].name = this.viewManager.infoManager.options.parseCDNNameFrom);
                var s = t.getResponseHeader(r[i].name);
                if (null === s) return void this._parseCDNAsync();
                var a = r[i].regex.exec(s);
                if (null === a) return void this._parseCDNAsync();
                switch (r[i].type) {
                  case"host":
                    this.nodeHost = a[1];
                    break;
                  case"type":
                    this.nodeType = this._parseNodeType(a[1]);
                    break;
                  case"host+type":
                    this.nodeHost = a[1], this.nodeType = this._parseNodeType(a[2]);
                    break;
                  case"type+host":
                    this.nodeType = this._parseNodeType(a[1]), this.nodeHost = a[2];
                    break;
                  case"name":
                    this.cdn = a[1].toUpperCase()
                }
                e.code && (this.cdn = e.code)
              }
              this._parseCDNAsync()
            } catch (e) {
              n.error(e), this._parseCDNAsync()
            }
          },n.utils.ResourceParser.prototype._parseNodeType = function (e) {
            try {
              switch (e) {
                case"TCP_HIT":
                case"HIT":
                case"c":
                  return 1;
                case"TCP_MISS":
                case"MISS":
                case"p":
                case"i":
                case"m":
                  return 2;
                case"TCP_MEM_HIT":
                  return 3;
                case"TCP_IMS_HIT":
                  return 4;
                default:
                  return 0
              }
            } catch (e) {
              return n.error(e), 0
            }
          },n.utils.Timer = function (e, t) {
            try {
              this.callback = e, this.interval = t || 5e3, this.isRunning = !1, this.timer = null, this.chrono = new n.utils.Chrono
            } catch (e) {
              n.error(e)
            }
          },n.utils.Timer.prototype.start = function () {
            try {
              this.isRunning = !0, this._setPing()
            } catch (e) {
              n.error(e)
            }
          },n.utils.Timer.prototype.stop = function () {
            try {
              this.isRunning = !1, clearTimeout(this.timer)
            } catch (e) {
              n.error(e)
            }
          },n.utils.Timer.prototype._setPing = function () {
            try {
              if (this.isRunning) {
                this.chrono.start();
                var e = this;
                this.timer = setTimeout(function () {
                  e.callback(e.chrono.stop()), e._setPing()
                }, this.interval)
              }
            } catch (e) {
              n.error(e)
            }
          },void 0 !== e && e.exports ? e.exports = n : window.$YB = n
        }, function (e, t) {
          e.exports = {
            name: "playkit-js-youbora",
            version: "0.3.1",
            main: "dist/playkit-youbora.js",
            scripts: {
              clean: "rm -rf ./dist",
              prebuild: "npm run clean",
              build: "NODE_ENV=production webpack",
              dev: "webpack-dev-server",
              watch: "webpack --progress --colors --watch",
              test: "NODE_ENV=test karma start --color",
              release: "standard-version",
              publish: "git push --follow-tags --no-verify origin master",
              eslint: "eslint . --color",
              flow: "flow check",
              "commit:dist": "git add --force --all dist && (git commit -m 'chore: update dist' || exit 0)"
            },
            "standard-version": {scripts: {postbump: "yarn run build && npm run commit:dist"}},
            devDependencies: {
              "babel-cli": "^6.18.0",
              "babel-core": "^6.18.2",
              "babel-eslint": "^7.1.1",
              "babel-loader": "^6.2.7",
              "babel-plugin-istanbul": "^4.0.0",
              "babel-plugin-transform-class-properties": "^6.22.0",
              "babel-plugin-transform-flow-strip-types": "^6.22.0",
              "babel-preset-es2015": "^6.18.0",
              "babel-register": "^6.23.0",
              chai: "^3.5.0",
              "cross-env": "^3.1.4",
              "css-loader": "^0.28.4",
              eslint: "^3.10.0",
              "eslint-loader": "^1.6.1",
              "eslint-plugin-flowtype": "^2.30.0",
              "eslint-plugin-import": "^2.2.0",
              "eslint-plugin-mocha-no-only": "^0.0.5",
              "flow-bin": "latest",
              istanbul: "^0.4.5",
              karma: "^1.5.0",
              "karma-chai": "^0.1.0",
              "karma-chrome-launcher": "^2.0.0",
              "karma-cli": "^1.0.1",
              "karma-coverage": "^1.1.1",
              "karma-firefox-launcher": "^1.0.1",
              "karma-ie-launcher": "^1.0.0",
              "karma-mocha": "^1.3.0",
              "karma-safari-launcher": "^1.0.0",
              "karma-sourcemap-loader": "^0.3.7",
              "karma-webpack": "^2.0.2",
              mocha: "^3.2.0",
              "mocha-cli": "^1.0.1",
              "playkit-js": "https://github.com/kaltura/playkit-js.git#v0.19.1",
              "pre-push": "^0.1.1",
              sinon: "^2.0.0",
              "sinon-chai": "^2.8.0",
              "standard-version": "^4.2.0",
              "style-loader": "^0.18.2",
              "uglifyjs-webpack-plugin": "^0.4.3",
              webpack: "latest",
              "webpack-dev-server": "latest"
            },
            peerDependencies: {"playkit-js": "https://github.com/kaltura/playkit-js.git#v0.19.1"},
            keywords: [],
            license: "AGPL-3.0",
            repository: {type: "git", url: "git+https://github.com/kaltura/playkit-js-youbora.git"},
            bugs: {url: "https://github.com/kaltura/playkit-js-youbora/issues"},
            homepage: "https://github.com/kaltura/playkit-js-youbora#readme"
          }
        }])
      });


      /***/
    }),
    /* 343 */
    /***/ (function (module, exports, __webpack_require__) {

      !function (e, t) {
        true ? module.exports = t(__webpack_require__(11)) : "function" == typeof define && define.amd ? define(["playkit-js"], t) : "object" == typeof exports ? exports.PlaykitJsIma = t(require("playkit-js")) : e.PlaykitJsIma = t(e.Playkit)
      }(this, function (e) {
        return function (e) {
          function t(i) {
            if (n[i]) return n[i].exports;
            var s = n[i] = {i: i, l: !1, exports: {}};
            return e[i].call(s.exports, s, s.exports, t), s.l = !0, s.exports
          }

          var n = {};
          return t.m = e, t.c = n, t.d = function (e, n, i) {
            t.o(e, n) || Object.defineProperty(e, n, {configurable: !1, enumerable: !0, get: i})
          }, t.n = function (e) {
            var n = e && e.__esModule ? function () {
              return e.default
            } : function () {
              return e
            };
            return t.d(n, "a", n), n
          }, t.o = function (e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
          }, t.p = "", t(t.s = 3)
        }([function (t, n) {
          t.exports = e
        }, function (e, t, n) {
          "use strict";
          Object.defineProperty(t, "__esModule", {value: !0});
          var i = {
            LOADING: "loading",
            LOADED: "loaded",
            PLAYING: "playing",
            PAUSED: "paused",
            IDLE: "idle",
            DONE: "done"
          };
          t.default = i
        }, function (e, t, n) {
          "use strict";

          function i(e) {
            return e && e.__esModule ? e : {default: e}
          }

          function s(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function r(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
          }

          function a(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var o = function () {
            function e(e, t) {
              for (var n = 0; n < t.length; n++) {
                var i = t[n];
                i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
              }
            }

            return function (t, n, i) {
              return n && e(t.prototype, n), i && e(t, i), t
            }
          }(), d = n(4), u = i(d), l = n(5), c = i(l), h = n(1), f = i(h), p = n(0);
          n(8);
          var g = function (e) {
            function t(e, n, i) {
              s(this, t);
              var a = r(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, n, i));
              return a._stateMachine = new c.default(a), a._initMembers(), a._addBindings(), a._init(), a
            }

            return a(t, e), o(t, null, [{
              key: "isValid", value: function () {
                return !0
              }
            }]), o(t, [{
              key: "playAdNow", value: function (e) {
                this.logger.warn("playAdNow API is not implemented yet", e)
              }
            }, {
              key: "skipAd", value: function () {
                this.logger.debug("Skip ad"), this._adsManager && (this._adsManager.getAdSkippableState() ? this._adsManager.skip() : this.config.skipSupport && this._adsManager.stop())
              }
            }, {
              key: "resumeAd", value: function () {
                return this.logger.debug("Resume ad"), this._nextPromise = p.Utils.Object.defer(), this._adsManager.resume(), this._nextPromise
              }
            }, {
              key: "pauseAd", value: function () {
                return this.logger.debug("Pause ad"), this._nextPromise = p.Utils.Object.defer(), this._adsManager.pause(), this._nextPromise
              }
            }, {
              key: "getStateMachine", value: function () {
                return this._stateMachine
              }
            }, {
              key: "getMiddlewareImpl", value: function () {
                return new u.default(this)
              }
            }, {
              key: "reset", value: function () {
                this.logger.debug("reset"), this.eventManager.removeAll(), this._stopAdInterval(), this._hideAdsContainer(), this._adsManager && this._adsManager.destroy(), this._adsLoader && !this._contentComplete && this._adsLoader.contentComplete(), this._initMembers(), this._addBindings(), this._adsLoader || this._initAdsLoader(), this._requestAds(), this.config.adTagUrl ? this._stateMachine.loaded() : this._stateMachine.goto(f.default.DONE)
              }
            }, {
              key: "destroy", value: function () {
                this.logger.debug("destroy"), this.eventManager.destroy(), this._stopAdInterval(), this._hideAdsContainer(), this._adsManager && this._adsManager.destroy(), this._adsLoader && !this._contentComplete && this._adsLoader.contentComplete(), this._adsLoader = null, this._initMembers()
              }
            }, {
              key: "initialUserAction", value: function () {
                try {
                  this.logger.debug("Initial user action"), this._nextPromise = p.Utils.Object.defer(), this._adDisplayContainer.initialize(), this._hasUserAction = !0, this._isAdsManagerLoaded && (this.logger.debug("User action occurred after ads manager loaded"), this._startAdsManager())
                } catch (e) {
                  this.logger.error(e), this.destroy()
                }
                return this._nextPromise
              }
            }, {
              key: "_startAdsManager", value: function () {
                var e = this;
                this.logger.debug("Start ads manager"), (this._adsManager.isCustomPlaybackUsed() ? this.player.ready() : Promise.resolve()).then(function () {
                  e._adsManager.init(e.player.dimensions.width, e.player.dimensions.height, e._sdk.ViewMode.NORMAL), e._adsManager.start()
                })
              }
            }, {
              key: "_addBindings", value: function () {
                var e = this;
                ["fullscreenchange", "mozfullscreenchange", "webkitfullscreenchange"].forEach(function (t) {
                  return e.eventManager.listen(document, t, e._resizeAd.bind(e))
                }), this.eventManager.listen(window, "resize", this._resizeAd.bind(this)), this.eventManager.listen(this.player, this.player.Event.MUTE_CHANGE, this._syncPlayerVolume.bind(this)), this.eventManager.listen(this.player, this.player.Event.VOLUME_CHANGE, this._syncPlayerVolume.bind(this)), this.eventManager.listen(this.player, this.player.Event.SOURCE_SELECTED, function (t) {
                  var n = t.payload.selectedSource;
                  n && n.length > 0 && (e._contentSrc = n[0].url)
                })
              }
            }, {
              key: "_initMembers", value: function () {
                this._setTogglePlayPauseOnAdsContainerEnabled(!1), this._setContentPlayheadTrackerEventsEnabled(!1), this._setVideoEndedCallbackEnabled(!1), this._nextPromise = null, this._currentAd = null, this._adsManager = null, this._contentComplete = !1, this._isAdsManagerLoaded = !1, this._intervalTimer = null, this._videoLastCurrentTime = null, this._contentPlayheadTracker = {
                  currentTime: 0,
                  previousTime: 0,
                  seeking: !1,
                  duration: 0
                }, this._hasUserAction = !1, this._togglePlayPauseOnAdsContainerCallback = null
              }
            }, {
              key: "_init", value: function () {
                var e = this;
                this.loadPromise = p.Utils.Object.defer(), (this._isImaSDKLibLoaded() ? Promise.resolve() : p.Utils.Dom.loadScriptAsync(this.config.debug ? t.IMA_SDK_DEBUG_LIB_URL : t.IMA_SDK_LIB_URL)).then(function () {
                  e._sdk = window.google.ima, e.logger.debug("IMA SDK version: " + e._sdk.VERSION), e._initImaSettings(), e._initAdsContainer(), e._initAdsLoader(), e._requestAds(), e._stateMachine.loaded(), e.loadPromise.resolve()
                }).catch(function (t) {
                  e.loadPromise.reject(t)
                })
              }
            }, {
              key: "_isImaSDKLibLoaded", value: function () {
                return window.google && window.google.ima && window.google.ima.VERSION
              }
            }, {
              key: "_initImaSettings", value: function () {
                this._sdk.settings.setPlayerType(this.config.playerName), this._sdk.settings.setPlayerVersion(this.config.playerVersion), this._sdk.settings.setVpaidAllowed(!0), this._sdk.settings.setVpaidMode(this._sdk.ImaSdkSettings.VpaidMode.ENABLED), "boolean" === this.config.setDisableCustomPlaybackForIOS10Plus ? this._sdk.settings.setDisableCustomPlaybackForIOS10Plus(this.config.setDisableCustomPlaybackForIOS10Plus) : this._sdk.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playback.playsinline)
              }
            }, {
              key: "_initAdsContainer", value: function () {
                var e = this;
                this.logger.debug("Init ads container");
                var t = this.player.getView();
                this._adsContainerDiv = p.Utils.Dom.createElement("div"), this._adsContainerDiv.id = "playkit-ads-container" + t.id, this._adsContainerDiv.className = "playkit-ads-container", this._adsCoverDiv = p.Utils.Dom.createElement("div"), this._adsCoverDiv.id = "playkit-ads-cover" + t.id, this._adsCoverDiv.className = "playkit-ads-cover", this._adsCoverDiv.onclick = function () {
                  return e.resumeAd()
                }, p.Utils.Dom.appendChild(t, this._adsContainerDiv), this._adDisplayContainer = new this._sdk.AdDisplayContainer(this._adsContainerDiv, this.player.getVideoElement())
              }
            }, {
              key: "_initAdsLoader", value: function () {
                var e = this;
                this.logger.debug("Init ads loader"), this._adsLoader = new this._sdk.AdsLoader(this._adDisplayContainer), this._adsLoader.addEventListener(this._sdk.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this._onAdsManagerLoaded.bind(this)), this._adsLoader.addEventListener(this._sdk.AdErrorEvent.Type.AD_ERROR, function (t) {
                  return e._stateMachine.aderror(t)
                })
              }
            }, {
              key: "_requestAds", value: function () {
                if (this.config.adTagUrl || this.config.adsResponse) {
                  this.logger.debug("Request ads");
                  var e = new this._sdk.AdsRequest;
                  this.config.adTagUrl ? e.adTagUrl = this.config.adTagUrl : e.adsResponse = this.config.adsResponse, e.linearAdSlotWidth = this.player.dimensions.width, e.linearAdSlotHeight = this.player.dimensions.height, e.nonLinearAdSlotWidth = this.player.dimensions.width, e.nonLinearAdSlotHeight = this.player.dimensions.height / 3, this._adsLoader.requestAds(e)
                } else this.logger.warn("Missing ad tag url: create plugin without requesting ads")
              }
            }, {
              key: "_resizeAd", value: function () {
                if (this._sdk && this._adsManager) {
                  var e = this.player.isFullscreen() ? this._sdk.ViewMode.FULLSCREEN : this._sdk.ViewMode.NORMAL;
                  this._adsManager.resize(this.player.dimensions.width, this.player.dimensions.height, e)
                }
              }
            }, {
              key: "_onLoadedMetadata", value: function () {
                this._contentPlayheadTracker.duration = this.player.duration
              }
            }, {
              key: "_onMediaTimeUpdate", value: function () {
                this._contentPlayheadTracker.seeking || (this._contentPlayheadTracker.previousTime = this._contentPlayheadTracker.currentTime, this._contentPlayheadTracker.currentTime = this.player.currentTime)
              }
            }, {
              key: "_setContentPlayheadTrackerEventsEnabled", value: function (e) {
                e ? (this.eventManager.listen(this.player, this.player.Event.LOADED_METADATA, this._onLoadedMetadata.bind(this)), this.eventManager.listen(this.player, this.player.Event.TIME_UPDATE, this._onMediaTimeUpdate.bind(this)), this.eventManager.listen(this.player, this.player.Event.SEEKING, this._onMediaSeeking.bind(this)), this.eventManager.listen(this.player, this.player.Event.SEEKED, this._onMediaSeeked.bind(this))) : (this.eventManager.unlisten(this.player, this.player.Event.LOADED_METADATA), this.eventManager.unlisten(this.player, this.player.Event.TIME_UPDATE), this.eventManager.unlisten(this.player, this.player.Event.SEEKING), this.eventManager.unlisten(this.player, this.player.Event.SEEKED))
              }
            }, {
              key: "_onMediaSeeking", value: function () {
                this._contentPlayheadTracker.seeking = !0
              }
            }, {
              key: "_onMediaSeeked", value: function () {
                this._contentPlayheadTracker.seeking = !1
              }
            }, {
              key: "_setVideoEndedCallbackEnabled", value: function (e) {
                e ? this.eventManager.listen(this.player, this.player.Event.ENDED, this._onMediaEnded.bind(this)) : this.eventManager.unlisten(this.player, this.player.Event.ENDED)
              }
            }, {
              key: "_maybeSaveVideoCurrentTime", value: function () {
                this._adsManager.isCustomPlaybackUsed() && this.player.currentTime && this.player.currentTime > 0 && (this.logger.debug("Custom playback used: save current time before ads", this.player.currentTime), this._videoLastCurrentTime = this.player.currentTime)
              }
            }, {
              key: "_maybeSetVideoCurrentTime", value: function () {
                this._videoLastCurrentTime && (this.logger.debug("Custom playback used: set current time after ads", this._videoLastCurrentTime), this.player.currentTime = this._videoLastCurrentTime, this._videoLastCurrentTime = null)
              }
            }, {
              key: "_onMediaEnded", value: function () {
                this.logger.debug("Media ended"), this._adsLoader.contentComplete(), this._contentComplete = !0, this._currentAd.isLinear() || this.destroy()
              }
            }, {
              key: "_showAdsContainer", value: function () {
                this._adsContainerDiv && (this._adsContainerDiv.style.display = "")
              }
            }, {
              key: "_hideAdsContainer", value: function () {
                this._adsContainerDiv && (this._adsContainerDiv.style.display = "none")
              }
            }, {
              key: "_onAdsManagerLoaded", value: function (e) {
                var t = this;
                this.logger.debug("Ads manager loaded");
                var n = new this._sdk.AdsRenderingSettings;
                Object.keys(this.config.adsRenderingSettings).forEach(function (e) {
                  null != n[e] && (n[e] = t.config.adsRenderingSettings[e])
                }), this._adsManager = e.getAdsManager(this._contentPlayheadTracker, n), this._isAdsManagerLoaded = !0, this._attachAdsManagerListeners(), this._syncPlayerVolume(), this._hasUserAction && (this.logger.debug("User action occurred before ads manager loaded"), this._startAdsManager())
              }
            }, {
              key: "_attachAdsManagerListeners", value: function () {
                var e = this;
                this._adsManager.addEventListener(this._sdk.AdEvent.Type.CONTENT_PAUSE_REQUESTED, function (t) {
                  return e._stateMachine.adbreakstart(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.LOADED, function (t) {
                  return e._stateMachine.adloaded(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.STARTED, function (t) {
                  return e._stateMachine.adstarted(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.PAUSED, function (t) {
                  return e._stateMachine.adpaused(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.RESUMED, function (t) {
                  return e._stateMachine.adresumed(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.FIRST_QUARTILE, function (t) {
                  return e._stateMachine.adfirstquartile(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.MIDPOINT, function (t) {
                  return e._stateMachine.admidpoint(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.THIRD_QUARTILE, function (t) {
                  return e._stateMachine.adthirdquartile(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.CLICK, function (t) {
                  return e._stateMachine.adclicked(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.SKIPPED, function (t) {
                  return e._stateMachine.adskipped(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.COMPLETE, function (t) {
                  return e._stateMachine.adcompleted(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.CONTENT_RESUME_REQUESTED, function (t) {
                  return e._stateMachine.adbreakend(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.ALL_ADS_COMPLETED, function (t) {
                  return e._stateMachine.alladscompleted(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.USER_CLOSE, function (t) {
                  return e._stateMachine.userclosedad(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.VOLUME_CHANGED, function (t) {
                  return e._stateMachine.advolumechanged(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.VOLUME_MUTED, function (t) {
                  return e._stateMachine.admuted(t)
                }), this._adsManager.addEventListener(this._sdk.AdEvent.Type.LOG, function (t) {
                  return e._stateMachine.aderror(t)
                }), this._adsManager.addEventListener(this._sdk.AdErrorEvent.Type.AD_ERROR, function (t) {
                  return e._stateMachine.aderror(t)
                })
              }
            }, {
              key: "_syncPlayerVolume", value: function () {
                this._adsManager && (this.player.muted ? this._adsManager.setVolume(0) : this._adsManager && "number" == typeof this.player.volume && this.player.volume !== this._adsManager.getVolume() && this._adsManager.setVolume(this.player.volume))
              }
            }, {
              key: "_startAdInterval", value: function () {
                var e = this;
                this._stopAdInterval(), this._intervalTimer = setInterval(function () {
                  if (e._stateMachine.is(f.default.PLAYING)) {
                    var t = e._adsManager.getRemainingTime(), n = e._adsManager.getCurrentAd().getDuration(), i = n - t;
                    p.Utils.Number.isNumber(n) && p.Utils.Number.isNumber(i) && e.dispatchEvent(e.player.Event.AD_PROGRESS, {
                      adProgress: {
                        currentTime: i,
                        duration: n
                      }
                    })
                  }
                }, 300)
              }
            }, {
              key: "_stopAdInterval", value: function () {
                this._intervalTimer && (clearInterval(this._intervalTimer), this._intervalTimer = null)
              }
            }, {
              key: "_resolveNextPromise", value: function () {
                this._nextPromise && (this._nextPromise.resolve(), this._nextPromise = null)
              }
            }, {
              key: "_setToggleAdsCover", value: function (e) {
                e ? this._adsManager.isCustomPlaybackUsed() || (this._adsContainerDiv.appendChild(this._adsCoverDiv), this._isAdsCoverActive = !0) : this._isAdsCoverActive && (this._adsContainerDiv.removeChild(this._adsCoverDiv), this._isAdsCoverActive = !1)
              }
            }, {
              key: "_setTogglePlayPauseOnAdsContainerEnabled", value: function (e) {
                this._adsContainerDiv && this._togglePlayPauseOnAdsContainerCallback && (e ? this._adsContainerDiv.addEventListener("click", this._togglePlayPauseOnAdsContainerCallback) : this._adsContainerDiv.removeEventListener("click", this._togglePlayPauseOnAdsContainerCallback))
              }
            }, {
              key: "_onAdsContainerClicked", value: function () {
                this.player.paused ? this.player.play() : this.player.pause()
              }
            }, {
              key: "_maybeDisplayCompanionAds", value: function () {
                if (this.config.companions && this.config.companions.ads && !window.googletag) {
                  var e = new this._sdk.CompanionAdSelectionSettings;
                  e.resourceType = this._sdk.CompanionAdSelectionSettings.ResourceType.ALL, e.creativeType = this._sdk.CompanionAdSelectionSettings.CreativeType.ALL;
                  var t = this.config.companions.sizeCriteria;
                  e.sizeCriteria = this._sdk.CompanionAdSelectionSettings.SizeCriteria[t] || this._sdk.CompanionAdSelectionSettings.SizeCriteria.SELECT_EXACT_MATCH;
                  for (var n = Object.keys(this.config.companions.ads), i = 0; i < n.length; i++) {
                    var s = n[i], r = this.config.companions.ads[s], a = r.width, o = r.height,
                      d = this._currentAd.getCompanionAds(a, o, e);
                    if (d.length > 0) {
                      var u = d[0], l = u.getContent(), c = p.Utils.Dom.getElementById(s);
                      c && (c.innerHTML = l)
                    }
                  }
                }
              }
            }]), t
          }(p.BasePlugin);
          g.defaultConfig = {
            debug: !1,
            setDisableCustomPlaybackForIOS10Plus: null,
            adsRenderingSettings: {
              restoreCustomPlaybackStateOnAdBreakComplete: !0,
              enablePreloading: !1,
              useStyledLinearAds: !1,
              useStyledNonLinearAds: !0,
              bitrate: -1,
              autoAlign: !0
            },
            companions: {ads: null, sizeCriteria: "SELECT_EXACT_MATCH"}
          }, g.IMA_SDK_LIB_URL = "//imasdk.googleapis.com/js/sdkloader/ima3.js", g.IMA_SDK_DEBUG_LIB_URL = "//imasdk.googleapis.com/js/sdkloader/ima3_debug.js", t.default = g
        }, function (e, t, n) {
          "use strict";
          Object.defineProperty(t, "__esModule", {value: !0}), t.NAME = t.VERSION = void 0;
          var i = n(0), s = n(2), r = function (e) {
            return e && e.__esModule ? e : {default: e}
          }(s);
          t.default = r.default, t.VERSION = "0.3.2", t.NAME = "playkit-js-ima";
          (0, i.registerPlugin)("ima", r.default)
        }, function (e, t, n) {
          "use strict";

          function i(e) {
            return e && e.__esModule ? e : {default: e}
          }

          function s(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function r(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
          }

          function a(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var o = function () {
            function e(e, t) {
              for (var n = 0; n < t.length; n++) {
                var i = t[n];
                i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
              }
            }

            return function (t, n, i) {
              return n && e(t.prototype, n), i && e(t, i), t
            }
          }(), d = n(0), u = n(2), l = (i(u), n(1)), c = i(l), h = function (e) {
            function t(e) {
              s(this, t);
              var n = r(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
              return n.id = "ImaMiddleware", n._context = e, e.player.addEventListener(e.player.Event.CHANGE_SOURCE_STARTED, function () {
                return n._isPlayerLoaded = !1
              }), n
            }

            return a(t, e), o(t, [{
              key: "play", value: function (e) {
                var t = this;
                this._isPlayerLoaded || (this._context.player.load(), this._isPlayerLoaded = !0, this._context.logger.debug("Player loaded")), this._context.loadPromise.then(function () {
                  switch (t._context.getStateMachine().state) {
                    case c.default.LOADED:
                      var n = t._context.initialUserAction();
                      if (n) return n.then(function () {
                        t.callNext(e)
                      });
                      t.callNext(e);
                      break;
                    case c.default.PAUSED:
                      var i = t._context.resumeAd();
                      if (i) return i.then(function () {
                        t.callNext(e)
                      });
                      t.callNext(e);
                      break;
                    default:
                      t.callNext(e)
                  }
                }).catch(function (n) {
                  t._context.destroy(), t._context.logger.error(n), t.callNext(e)
                })
              }
            }, {
              key: "pause", value: function (e) {
                switch (this._context.getStateMachine().state) {
                  case c.default.PLAYING:
                    this._context.pauseAd();
                    break;
                  default:
                    this.callNext(e)
                }
              }
            }]), t
          }(d.BaseMiddleware);
          t.default = h
        }, function (e, t, n) {
          "use strict";

          function i(e) {
            return e && e.__esModule ? e : {default: e}
          }

          function s(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
          }

          function r(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._adsManager.isCustomPlaybackUsed() && this.player.hideTextTrack(), this.dispatchEvent(e.transition, y(t))
          }

          function a(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._currentAd = t.getAd(), this._resizeAd(), this._showAdsContainer(), this._maybeDisplayCompanionAds(), this._currentAd.isLinear() ? (this._setContentPlayheadTrackerEventsEnabled(!1), this._startAdInterval()) : (this._setContentPlayheadTrackerEventsEnabled(!0), this._setVideoEndedCallbackEnabled(!0), this._togglePlayPauseOnAdsContainerCallback = this._onAdsContainerClicked.bind(this), this._setTogglePlayPauseOnAdsContainerEnabled(!0), this._nextPromise ? this._resolveNextPromise() : this.player.play()), this.dispatchEvent(e.transition)
          }

          function o(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._currentAd.isLinear() ? this._stateMachine.is(k.default.PLAYING) && (this.pauseAd(), this._setToggleAdsCover(!0)) : this.player.paused || this.player.pause(), this.dispatchEvent(e.transition)
          }

          function d(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._setToggleAdsCover(!1), this.dispatchEvent(e.transition)
          }

          function u(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._currentAd.isLinear() && this._stopAdInterval(), this._currentAd = null, this.dispatchEvent(e.transition)
          }

          function l(e, t) {
            this.logger.debug(t.type.toUpperCase()), h.call(this, e, t), this._adsManager.isCustomPlaybackUsed() && this._contentComplete && (this.player.getVideoElement().src = this._contentSrc), this.destroy()
          }

          function c(e, t) {
            this.logger.debug(t.type.toUpperCase()), this.player.pause(), this._setVideoEndedCallbackEnabled(!1), this._maybeSaveVideoCurrentTime(), this.dispatchEvent(e.transition)
          }

          function h(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._setVideoEndedCallbackEnabled(!0), this._setContentPlayheadTrackerEventsEnabled(!0), this._contentComplete || (this._hideAdsContainer(), this._maybeSetVideoCurrentTime(), this._nextPromise ? this._resolveNextPromise() : this.player.play()), this.dispatchEvent(e.transition)
          }

          function f(e, t) {
            if ("adError" === t.type) {
              this.logger.debug(t.type.toUpperCase());
              var n = t.getError();
              this.loadPromise && this.loadPromise.reject(n), this._nextPromise && this._nextPromise.reject(n), this.dispatchEvent(e.transition, v(n, !0))
            } else {
              this.logger.debug(t.type.toUpperCase());
              var i = t.getAdData(), s = i.adError;
              i.adError && (this.logger.error("Non-fatal error occurred: " + s.getMessage()), this.dispatchEvent(this.player.Event.AD_ERROR, v(s, !1)))
            }
          }

          function p(e, t) {
            this.logger.debug(t.type.toUpperCase()), this._stopAdInterval(), this.dispatchEvent(e.transition)
          }

          function g(e, t) {
            this.logger.debug(t.type.toUpperCase()), this.dispatchEvent(e.transition)
          }

          function _(e) {
            e.from !== e.to && this.logger.debug("Change state: " + e.from + " => " + e.to)
          }

          function v(e, t) {
            return {fatal: t, error: {code: e.getErrorCode(), message: e.getMessage()}}
          }

          function y(e) {
            return {ad: e.getAd(), extraAdData: e.getAdData()}
          }

          Object.defineProperty(t, "__esModule", {value: !0});
          var m = n(6), E = i(m), A = n(7), b = i(A), L = n(1), k = i(L), M = function e(t) {
            return s(this, e), new E.default({
              init: k.default.LOADING,
              transitions: [{
                name: "loaded",
                from: [k.default.LOADING, k.default.LOADED, k.default.IDLE, k.default.PAUSED, k.default.PLAYING, k.default.DONE],
                to: k.default.LOADED
              }, {
                name: t.player.Event.AD_STARTED,
                from: [k.default.LOADED, k.default.IDLE, k.default.PAUSED],
                to: function (e) {
                  return e.getAd().isLinear() ? k.default.PLAYING : k.default.IDLE
                }
              }, {
                name: t.player.Event.AD_RESUMED,
                from: k.default.PAUSED,
                to: k.default.PLAYING
              }, {
                name: t.player.Event.AD_PAUSED,
                from: k.default.PLAYING,
                to: k.default.PAUSED
              }, {
                name: t.player.Event.AD_SKIPPED,
                from: [k.default.PLAYING, k.default.PAUSED],
                to: k.default.IDLE
              }, {
                name: t.player.Event.AD_COMPLETED,
                from: k.default.PLAYING,
                to: k.default.IDLE
              }, {
                name: t.player.Event.ALL_ADS_COMPLETED,
                from: k.default.IDLE,
                to: k.default.DONE
              }, {
                name: t.player.Event.AD_BREAK_END,
                from: [k.default.IDLE, k.default.LOADED],
                to: k.default.IDLE
              }, {
                name: t.player.Event.AD_ERROR,
                from: [k.default.LOADED, k.default.PLAYING, k.default.PAUSED, k.default.LOADING],
                to: k.default.IDLE
              }, {
                name: t.player.Event.AD_LOADED,
                from: [k.default.IDLE, k.default.LOADED]
              }, {
                name: t.player.Event.AD_FIRST_QUARTILE,
                from: k.default.PLAYING
              }, {
                name: t.player.Event.AD_BREAK_START,
                from: [k.default.IDLE, k.default.LOADED]
              }, {name: t.player.Event.AD_MIDPOINT, from: k.default.PLAYING}, {
                name: t.player.Event.AD_THIRD_QUARTILE,
                from: k.default.PLAYING
              }, {
                name: t.player.Event.USER_CLOSED_AD,
                from: [k.default.IDLE, k.default.PLAYING, k.default.PAUSED]
              }, {
                name: t.player.Event.AD_VOLUME_CHANGED,
                from: [k.default.PLAYING, k.default.PAUSED, k.default.LOADED]
              }, {
                name: t.player.Event.AD_MUTED,
                from: [k.default.PLAYING, k.default.PAUSED, k.default.LOADED]
              }, {
                name: t.player.Event.AD_CLICKED,
                from: [k.default.PLAYING, k.default.PAUSED, k.default.IDLE]
              }, {
                name: "goto", from: "*", to: function (e) {
                  return e
                }
              }],
              methods: {
                onAdloaded: r.bind(t),
                onAdstarted: a.bind(t),
                onAdpaused: g.bind(t),
                onAdresumed: d.bind(t),
                onAdclicked: o.bind(t),
                onAdskipped: p.bind(t),
                onAdcompleted: u.bind(t),
                onAlladscompleted: l.bind(t),
                onAdbreakstart: c.bind(t),
                onAdbreakend: h.bind(t),
                onAdfirstquartile: g.bind(t),
                onAdmidpoint: g.bind(t),
                onAdthirdquartile: g.bind(t),
                onAderror: f.bind(t),
                onUserclosedad: g.bind(t),
                onAdvolumechanged: g.bind(t),
                onAdmuted: g.bind(t),
                onEnterState: _.bind(t)
              },
              plugins: [new b.default]
            })
          };
          t.default = M
        }, function (e, t, n) {
          !function (t, n) {
            e.exports = n()
          }(0, function () {
            return function (e) {
              function t(i) {
                if (n[i]) return n[i].exports;
                var s = n[i] = {i: i, l: !1, exports: {}};
                return e[i].call(s.exports, s, s.exports, t), s.l = !0, s.exports
              }

              var n = {};
              return t.m = e, t.c = n, t.i = function (e) {
                return e
              }, t.d = function (e, n, i) {
                t.o(e, n) || Object.defineProperty(e, n, {configurable: !1, enumerable: !0, get: i})
              }, t.n = function (e) {
                var n = e && e.__esModule ? function () {
                  return e.default
                } : function () {
                  return e
                };
                return t.d(n, "a", n), n
              }, t.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t)
              }, t.p = "", t(t.s = 5)
            }([function (e, t, n) {
              "use strict";
              e.exports = function (e, t) {
                var n, i, s;
                for (n = 1; n < arguments.length; n++) {
                  i = arguments[n];
                  for (s in i) i.hasOwnProperty(s) && (e[s] = i[s])
                }
                return e
              }
            }, function (e, t, n) {
              "use strict";
              var i = n(0);
              e.exports = {
                build: function (e, t) {
                  var n, s, r, a = t.plugins;
                  for (n = 0, s = a.length; n < s; n++) r = a[n], r.methods && i(e, r.methods), r.properties && Object.defineProperties(e, r.properties)
                }, hook: function (e, t, n) {
                  var i, s, r, a, o = e.config.plugins, d = [e.context];
                  for (n && (d = d.concat(n)), i = 0, s = o.length; i < s; i++) a = o[i], (r = o[i][t]) && r.apply(a, d)
                }
              }
            }, function (e, t, n) {
              "use strict";

              function i(e) {
                if (0 === e.length) return e;
                var t, n, i = e.split(/[_-]/);
                if (1 === i.length && i[0][0].toLowerCase() === i[0][0]) return e;
                for (n = i[0].toLowerCase(), t = 1; t < i.length; t++) n = n + i[t].charAt(0).toUpperCase() + i[t].substring(1).toLowerCase();
                return n
              }

              i.prepended = function (e, t) {
                return t = i(t), e + t[0].toUpperCase() + t.substring(1)
              }, e.exports = i
            }, function (e, t, n) {
              "use strict";

              function i(e, t) {
                e = e || {}, this.options = e, this.defaults = t.defaults, this.states = [], this.transitions = [], this.map = {}, this.lifecycle = this.configureLifecycle(), this.init = this.configureInitTransition(e.init), this.data = this.configureData(e.data), this.methods = this.configureMethods(e.methods), this.map[this.defaults.wildcard] = {}, this.configureTransitions(e.transitions || []), this.plugins = this.configurePlugins(e.plugins, t.plugin)
              }

              var s = n(0), r = n(2);
              s(i.prototype, {
                addState: function (e) {
                  this.map[e] || (this.states.push(e), this.addStateLifecycleNames(e), this.map[e] = {})
                }, addStateLifecycleNames: function (e) {
                  this.lifecycle.onEnter[e] = r.prepended("onEnter", e), this.lifecycle.onLeave[e] = r.prepended("onLeave", e), this.lifecycle.on[e] = r.prepended("on", e)
                }, addTransition: function (e) {
                  this.transitions.indexOf(e) < 0 && (this.transitions.push(e), this.addTransitionLifecycleNames(e))
                }, addTransitionLifecycleNames: function (e) {
                  this.lifecycle.onBefore[e] = r.prepended("onBefore", e), this.lifecycle.onAfter[e] = r.prepended("onAfter", e), this.lifecycle.on[e] = r.prepended("on", e)
                }, mapTransition: function (e) {
                  var t = e.name, n = e.from, i = e.to;
                  return this.addState(n), "function" != typeof i && this.addState(i), this.addTransition(t), this.map[n][t] = e, e
                }, configureLifecycle: function () {
                  return {
                    onBefore: {transition: "onBeforeTransition"},
                    onAfter: {transition: "onAfterTransition"},
                    onEnter: {state: "onEnterState"},
                    onLeave: {state: "onLeaveState"},
                    on: {transition: "onTransition"}
                  }
                }, configureInitTransition: function (e) {
                  return "string" == typeof e ? this.mapTransition(s({}, this.defaults.init, {
                    to: e,
                    active: !0
                  })) : "object" == typeof e ? this.mapTransition(s({}, this.defaults.init, e, {active: !0})) : (this.addState(this.defaults.init.from), this.defaults.init)
                }, configureData: function (e) {
                  return "function" == typeof e ? e : "object" == typeof e ? function () {
                    return e
                  } : function () {
                    return {}
                  }
                }, configureMethods: function (e) {
                  return e || {}
                }, configurePlugins: function (e, t) {
                  e = e || [];
                  var n, i, s;
                  for (n = 0, i = e.length; n < i; n++) s = e[n], "function" == typeof s && (e[n] = s = s()), s.configure && s.configure(this);
                  return e
                }, configureTransitions: function (e) {
                  var t, n, i, s, r, a = this.defaults.wildcard;
                  for (n = 0; n < e.length; n++) for (i = e[n], s = Array.isArray(i.from) ? i.from : [i.from || a], r = i.to || a, t = 0; t < s.length; t++) this.mapTransition({
                    name: i.name,
                    from: s[t],
                    to: r
                  })
                }, transitionFor: function (e, t) {
                  var n = this.defaults.wildcard;
                  return this.map[e][t] || this.map[n][t]
                }, transitionsFor: function (e) {
                  var t = this.defaults.wildcard;
                  return Object.keys(this.map[e]).concat(Object.keys(this.map[t]))
                }, allStates: function () {
                  return this.states
                }, allTransitions: function () {
                  return this.transitions
                }
              }), e.exports = i
            }, function (e, t, n) {
              function i(e, t) {
                this.context = e, this.config = t, this.state = t.init.from, this.observers = [e]
              }

              var s = n(0), r = n(6), a = n(1), o = [null, []];
              s(i.prototype, {
                init: function (e) {
                  if (s(this.context, this.config.data.apply(this.context, e)), a.hook(this, "init"), this.config.init.active) return this.fire(this.config.init.name, [])
                }, is: function (e) {
                  return Array.isArray(e) ? e.indexOf(this.state) >= 0 : this.state === e
                }, isPending: function () {
                  return this.pending
                }, can: function (e) {
                  return !this.isPending() && !!this.seek(e)
                }, cannot: function (e) {
                  return !this.can(e)
                }, allStates: function () {
                  return this.config.allStates()
                }, allTransitions: function () {
                  return this.config.allTransitions()
                }, transitions: function () {
                  return this.config.transitionsFor(this.state)
                }, seek: function (e, t) {
                  var n = this.config.defaults.wildcard, i = this.config.transitionFor(this.state, e), s = i && i.to;
                  return "function" == typeof s ? s.apply(this.context, t) : s === n ? this.state : s
                }, fire: function (e, t) {
                  return this.transit(e, this.state, this.seek(e, t), t)
                }, transit: function (e, t, n, i) {
                  var s = this.config.lifecycle, r = this.config.options.observeUnchangedState || t !== n;
                  return n ? this.isPending() ? this.context.onPendingTransition(e, t, n) : (this.config.addState(n), this.beginTransit(), i.unshift({
                    transition: e,
                    from: t,
                    to: n,
                    fsm: this.context
                  }), this.observeEvents([this.observersForEvent(s.onBefore.transition), this.observersForEvent(s.onBefore[e]), r ? this.observersForEvent(s.onLeave.state) : o, r ? this.observersForEvent(s.onLeave[t]) : o, this.observersForEvent(s.on.transition), r ? ["doTransit", [this]] : o, r ? this.observersForEvent(s.onEnter.state) : o, r ? this.observersForEvent(s.onEnter[n]) : o, r ? this.observersForEvent(s.on[n]) : o, this.observersForEvent(s.onAfter.transition), this.observersForEvent(s.onAfter[e]), this.observersForEvent(s.on[e])], i)) : this.context.onInvalidTransition(e, t, n)
                }, beginTransit: function () {
                  this.pending = !0
                }, endTransit: function (e) {
                  return this.pending = !1, e
                }, failTransit: function (e) {
                  throw this.pending = !1, e
                }, doTransit: function (e) {
                  this.state = e.to
                }, observe: function (e) {
                  if (2 === e.length) {
                    var t = {};
                    t[e[0]] = e[1], this.observers.push(t)
                  } else this.observers.push(e[0])
                }, observersForEvent: function (e) {
                  for (var t, n = 0, i = this.observers.length, s = []; n < i; n++) t = this.observers[n], t[e] && s.push(t);
                  return [e, s, !0]
                }, observeEvents: function (e, t, n, i) {
                  if (0 === e.length) return this.endTransit(void 0 === i || i);
                  var s = e[0][0], r = e[0][1], o = e[0][2];
                  if (t[0].event = s, s && o && s !== n && a.hook(this, "lifecycle", t), 0 === r.length) return e.shift(), this.observeEvents(e, t, s, i);
                  var d = r.shift(), u = d[s].apply(d, t);
                  return u && "function" == typeof u.then ? u.then(this.observeEvents.bind(this, e, t, s)).catch(this.failTransit.bind(this)) : !1 === u ? this.endTransit(!1) : this.observeEvents(e, t, s, u)
                }, onInvalidTransition: function (e, t, n) {
                  throw new r("transition is invalid in current state", e, t, n, this.state)
                }, onPendingTransition: function (e, t, n) {
                  throw new r("transition is invalid while previous transition is still in progress", e, t, n, this.state)
                }
              }), e.exports = i
            }, function (e, t, n) {
              "use strict";

              function i(e) {
                return r(this || {}, e)
              }

              function s() {
                var e, t;
                "function" == typeof arguments[0] ? (e = arguments[0], t = arguments[1] || {}) : (e = function () {
                  this._fsm.apply(this, arguments)
                }, t = arguments[0] || {});
                var n = new l(t, i);
                return a(e.prototype, n), e.prototype._fsm.config = n, e
              }

              function r(e, t) {
                return a(e, new l(t, i)), e._fsm(), e
              }

              function a(e, t) {
                if ("object" != typeof e || Array.isArray(e)) throw Error("StateMachine can only be applied to objects");
                u.build(e, t), Object.defineProperties(e, f), o(e, h), o(e, t.methods), t.allTransitions().forEach(function (t) {
                  e[d(t)] = function () {
                    return this._fsm.fire(t, [].slice.call(arguments))
                  }
                }), e._fsm = function () {
                  this._fsm = new c(this, t), this._fsm.init(arguments)
                }
              }

              var o = n(0), d = n(2), u = n(1), l = n(3), c = n(4), h = {
                is: function (e) {
                  return this._fsm.is(e)
                }, can: function (e) {
                  return this._fsm.can(e)
                }, cannot: function (e) {
                  return this._fsm.cannot(e)
                }, observe: function () {
                  return this._fsm.observe(arguments)
                }, transitions: function () {
                  return this._fsm.transitions()
                }, allTransitions: function () {
                  return this._fsm.allTransitions()
                }, allStates: function () {
                  return this._fsm.allStates()
                }, onInvalidTransition: function (e, t, n) {
                  return this._fsm.onInvalidTransition(e, t, n)
                }, onPendingTransition: function (e, t, n) {
                  return this._fsm.onPendingTransition(e, t, n)
                }
              }, f = {
                state: {
                  configurable: !1, enumerable: !0, get: function () {
                    return this._fsm.state
                  }, set: function (e) {
                    throw Error("use transitions to change state")
                  }
                }
              };
              i.version = "3.0.1", i.factory = s, i.apply = r, i.defaults = {
                wildcard: "*",
                init: {name: "init", from: "none"}
              }, e.exports = i
            }, function (e, t, n) {
              "use strict";
              e.exports = function (e, t, n, i, s) {
                this.message = e, this.transition = t, this.from = n, this.to = i, this.current = s
              }
            }])
          })
        }, function (e, t, n) {
          !function (t, n) {
            e.exports = n()
          }(0, function () {
            return function (e) {
              function t(i) {
                if (n[i]) return n[i].exports;
                var s = n[i] = {i: i, l: !1, exports: {}};
                return e[i].call(s.exports, s, s.exports, t), s.l = !0, s.exports
              }

              var n = {};
              return t.m = e, t.c = n, t.i = function (e) {
                return e
              }, t.d = function (e, n, i) {
                t.o(e, n) || Object.defineProperty(e, n, {configurable: !1, enumerable: !0, get: i})
              }, t.n = function (e) {
                var n = e && e.__esModule ? function () {
                  return e.default
                } : function () {
                  return e
                };
                return t.d(n, "a", n), n
              }, t.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t)
              }, t.p = "", t(t.s = 1)
            }([function (e, t, n) {
              "use strict";

              function i(e) {
                if (0 === e.length) return e;
                var t, n, i = e.split(/[_-]/);
                if (1 === i.length && i[0][0].toLowerCase() === i[0][0]) return e;
                for (n = i[0].toLowerCase(), t = 1; t < i.length; t++) n = n + i[t].charAt(0).toUpperCase() + i[t].substring(1).toLowerCase();
                return n
              }

              i.prepended = function (e, t) {
                return t = i(t), e + t[0].toUpperCase() + t.substring(1)
              }, e.exports = i
            }, function (e, t, n) {
              "use strict";
              var i = n(0);
              e.exports = function (e) {
                e = e || {};
                var t = i(e.name || e.past || "history"), n = i(e.future || "future"), s = i.prepended("clear", t),
                  r = i.prepended(t, "back"), a = i.prepended(t, "forward"), o = i.prepended("can", r),
                  d = i.prepended("can", a), u = e.max, l = {
                    configure: function (e) {
                      e.addTransitionLifecycleNames(r), e.addTransitionLifecycleNames(a)
                    }, init: function (e) {
                      e[t] = [], e[n] = []
                    }, lifecycle: function (e, i) {
                      "onEnterState" === i.event && (e[t].push(i.to), u && e[t].length > u && e[t].shift(), i.transition !== r && i.transition !== a && (e[n].length = 0))
                    }, methods: {}, properties: {}
                  };
                return l.methods[s] = function () {
                  this[t].length = 0, this[n].length = 0
                }, l.properties[o] = {
                  get: function () {
                    return this[t].length > 1
                  }
                }, l.properties[d] = {
                  get: function () {
                    return this[n].length > 0
                  }
                }, l.methods[r] = function () {
                  if (!this[o]) throw Error("no history");
                  var e = this[t].pop(), i = this[t].pop();
                  this[n].push(e), this._fsm.transit(r, e, i, [])
                }, l.methods[a] = function () {
                  if (!this[d]) throw Error("no history");
                  var e = this.state, t = this[n].pop();
                  this._fsm.transit(a, e, t, [])
                }, l
              }
            }])
          })
        }, function (e, t, n) {
          var i = n(9);
          "string" == typeof i && (i = [[e.i, i, ""]]);
          var s = {};
          s.transform = void 0;
          n(11)(i, s);
          i.locals && (e.exports = i.locals)
        }, function (e, t, n) {
          t = e.exports = n(10)(void 0), t.push([e.i, ".playkit-ads-cover {\n  position: fixed;\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.playkit-ads-container {\n  position: absolute;\n  top: 0;\n}\n", ""])
        }, function (e, t) {
          function n(e, t) {
            var n = e[1] || "", s = e[3];
            if (!s) return n;
            if (t && "function" == typeof btoa) {
              var r = i(s);
              return [n].concat(s.sources.map(function (e) {
                return "/*# sourceURL=" + s.sourceRoot + e + " */"
              })).concat([r]).join("\n")
            }
            return [n].join("\n")
          }

          function i(e) {
            return "/*# sourceMappingURL=data:application/json;charset=utf-8;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(e)))) + " */"
          }

          e.exports = function (e) {
            var t = [];
            return t.toString = function () {
              return this.map(function (t) {
                var i = n(t, e);
                return t[2] ? "@media " + t[2] + "{" + i + "}" : i
              }).join("")
            }, t.i = function (e, n) {
              "string" == typeof e && (e = [[null, e, ""]]);
              for (var i = {}, s = 0; s < this.length; s++) {
                var r = this[s][0];
                "number" == typeof r && (i[r] = !0)
              }
              for (s = 0; s < e.length; s++) {
                var a = e[s];
                "number" == typeof a[0] && i[a[0]] || (n && !a[2] ? a[2] = n : n && (a[2] = "(" + a[2] + ") and (" + n + ")"), t.push(a))
              }
            }, t
          }
        }, function (e, t, n) {
          function i(e, t) {
            for (var n = 0; n < e.length; n++) {
              var i = e[n], s = p[i.id];
              if (s) {
                s.refs++;
                for (var r = 0; r < s.parts.length; r++) s.parts[r](i.parts[r]);
                for (; r < i.parts.length; r++) s.parts.push(l(i.parts[r], t))
              } else {
                for (var a = [], r = 0; r < i.parts.length; r++) a.push(l(i.parts[r], t));
                p[i.id] = {id: i.id, refs: 1, parts: a}
              }
            }
          }

          function s(e, t) {
            for (var n = [], i = {}, s = 0; s < e.length; s++) {
              var r = e[s], a = t.base ? r[0] + t.base : r[0], o = r[1], d = r[2], u = r[3],
                l = {css: o, media: d, sourceMap: u};
              i[a] ? i[a].parts.push(l) : n.push(i[a] = {id: a, parts: [l]})
            }
            return n
          }

          function r(e, t) {
            var n = _(e.insertInto);
            if (!n) throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
            var i = m[m.length - 1];
            if ("top" === e.insertAt) i ? i.nextSibling ? n.insertBefore(t, i.nextSibling) : n.appendChild(t) : n.insertBefore(t, n.firstChild), m.push(t); else {
              if ("bottom" !== e.insertAt) throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
              n.appendChild(t)
            }
          }

          function a(e) {
            if (null === e.parentNode) return !1;
            e.parentNode.removeChild(e);
            var t = m.indexOf(e);
            t >= 0 && m.splice(t, 1)
          }

          function o(e) {
            var t = document.createElement("style");
            return e.attrs.type = "text/css", u(t, e.attrs), r(e, t), t
          }

          function d(e) {
            var t = document.createElement("link");
            return e.attrs.type = "text/css", e.attrs.rel = "stylesheet", u(t, e.attrs), r(e, t), t
          }

          function u(e, t) {
            Object.keys(t).forEach(function (n) {
              e.setAttribute(n, t[n])
            })
          }

          function l(e, t) {
            var n, i, s, r;
            if (t.transform && e.css) {
              if (!(r = t.transform(e.css))) return function () {
              };
              e.css = r
            }
            if (t.singleton) {
              var u = y++;
              n = v || (v = o(t)), i = c.bind(null, n, u, !1), s = c.bind(null, n, u, !0)
            } else e.sourceMap && "function" == typeof URL && "function" == typeof URL.createObjectURL && "function" == typeof URL.revokeObjectURL && "function" == typeof Blob && "function" == typeof btoa ? (n = d(t), i = f.bind(null, n, t), s = function () {
              a(n), n.href && URL.revokeObjectURL(n.href)
            }) : (n = o(t), i = h.bind(null, n), s = function () {
              a(n)
            });
            return i(e), function (t) {
              if (t) {
                if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;
                i(e = t)
              } else s()
            }
          }

          function c(e, t, n, i) {
            var s = n ? "" : i.css;
            if (e.styleSheet) e.styleSheet.cssText = A(t, s); else {
              var r = document.createTextNode(s), a = e.childNodes;
              a[t] && e.removeChild(a[t]), a.length ? e.insertBefore(r, a[t]) : e.appendChild(r)
            }
          }

          function h(e, t) {
            var n = t.css, i = t.media;
            if (i && e.setAttribute("media", i), e.styleSheet) e.styleSheet.cssText = n; else {
              for (; e.firstChild;) e.removeChild(e.firstChild);
              e.appendChild(document.createTextNode(n))
            }
          }

          function f(e, t, n) {
            var i = n.css, s = n.sourceMap, r = void 0 === t.convertToAbsoluteUrls && s;
            (t.convertToAbsoluteUrls || r) && (i = E(i)), s && (i += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(s)))) + " */");
            var a = new Blob([i], {type: "text/css"}), o = e.href;
            e.href = URL.createObjectURL(a), o && URL.revokeObjectURL(o)
          }

          var p = {}, g = function (e) {
            var t;
            return function () {
              return void 0 === t && (t = e.apply(this, arguments)), t
            }
          }(function () {
            return window && document && document.all && !window.atob
          }), _ = function (e) {
            var t = {};
            return function (n) {
              return void 0 === t[n] && (t[n] = e.call(this, n)), t[n]
            }
          }(function (e) {
            return document.querySelector(e)
          }), v = null, y = 0, m = [], E = n(12);
          e.exports = function (e, t) {
            if ("undefined" != typeof DEBUG && DEBUG && "object" != typeof document) throw new Error("The style-loader cannot be used in a non-browser environment");
            t = t || {}, t.attrs = "object" == typeof t.attrs ? t.attrs : {}, t.singleton || (t.singleton = g()), t.insertInto || (t.insertInto = "head"), t.insertAt || (t.insertAt = "bottom");
            var n = s(e, t);
            return i(n, t), function (e) {
              for (var r = [], a = 0; a < n.length; a++) {
                var o = n[a], d = p[o.id];
                d.refs--, r.push(d)
              }
              if (e) {
                i(s(e, t), t)
              }
              for (var a = 0; a < r.length; a++) {
                var d = r[a];
                if (0 === d.refs) {
                  for (var u = 0; u < d.parts.length; u++) d.parts[u]();
                  delete p[d.id]
                }
              }
            }
          };
          var A = function () {
            var e = [];
            return function (t, n) {
              return e[t] = n, e.filter(Boolean).join("\n")
            }
          }()
        }, function (e, t) {
          e.exports = function (e) {
            var t = "undefined" != typeof window && window.location;
            if (!t) throw new Error("fixUrls requires window.location");
            if (!e || "string" != typeof e) return e;
            var n = t.protocol + "//" + t.host, i = n + t.pathname.replace(/\/[^\/]*$/, "/");
            return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (e, t) {
              var s = t.trim().replace(/^"(.*)"$/, function (e, t) {
                return t
              }).replace(/^'(.*)'$/, function (e, t) {
                return t
              });
              if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(s)) return e;
              var r;
              return r = 0 === s.indexOf("//") ? s : 0 === s.indexOf("/") ? n + s : i + s.replace(/^\.\//, ""), "url(" + JSON.stringify(r) + ")"
            })
          }
        }])
      });


      /***/
    }),
    /* 344 */
    /***/ (function (module, exports, __webpack_require__) {

      (function webpackUniversalModuleDefinition(root, factory) {
        if (true)
          module.exports = factory(__webpack_require__(11));
        else if (typeof define === 'function' && define.amd)
          define(["playkit-js"], factory);
        else if (typeof exports === 'object')
          exports["PlaykitJsKAnalytics"] = factory(require("playkit-js"));
        else
          root["PlaykitJsKAnalytics"] = factory(root["Playkit"]);
      })(this, function (__WEBPACK_EXTERNAL_MODULE_0__) {
        return /******/ (function (modules) { // webpackBootstrap
          /******/ 	// The module cache
          /******/
          var installedModules = {};
          /******/
          /******/ 	// The require function
          /******/
          function __webpack_require__(moduleId) {
            /******/
            /******/ 		// Check if module is in cache
            /******/
            if (installedModules[moduleId]) {
              /******/
              return installedModules[moduleId].exports;
              /******/
            }
            /******/ 		// Create a new module (and put it into the cache)
            /******/
            var module = installedModules[moduleId] = {
              /******/      i: moduleId,
              /******/      l: false,
              /******/      exports: {}
              /******/
            };
            /******/
            /******/ 		// Execute the module function
            /******/
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ 		// Flag the module as loaded
            /******/
            module.l = true;
            /******/
            /******/ 		// Return the exports of the module
            /******/
            return module.exports;
            /******/
          }

          /******/
          /******/
          /******/ 	// expose the modules object (__webpack_modules__)
          /******/
          __webpack_require__.m = modules;
          /******/
          /******/ 	// expose the module cache
          /******/
          __webpack_require__.c = installedModules;
          /******/
          /******/ 	// define getter function for harmony exports
          /******/
          __webpack_require__.d = function (exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
              /******/
              Object.defineProperty(exports, name, {
                /******/        configurable: false,
                /******/        enumerable: true,
                /******/        get: getter
                /******/
              });
              /******/
            }
            /******/
          };
          /******/
          /******/ 	// getDefaultExport function for compatibility with non-harmony modules
          /******/
          __webpack_require__.n = function (module) {
            /******/
            var getter = module && module.__esModule ?
              /******/      function getDefault() {
                return module['default'];
              } :
              /******/      function getModuleExports() {
                return module;
              };
            /******/
            __webpack_require__.d(getter, 'a', getter);
            /******/
            return getter;
            /******/
          };
          /******/
          /******/ 	// Object.prototype.hasOwnProperty.call
          /******/
          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/
          /******/ 	// __webpack_public_path__
          /******/
          __webpack_require__.p = "";
          /******/
          /******/ 	// Load entry module and return exports
          /******/
          return __webpack_require__(__webpack_require__.s = 1);
          /******/
        })
        /************************************************************************/
        /******/([
          /* 0 */
          /***/ (function (module, exports) {

            module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

            /***/
          }),
          /* 1 */
          /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            exports.NAME = exports.VERSION = undefined;

            var _playkitJs = __webpack_require__(0);

            var _kanalytics = __webpack_require__(2);

            var _kanalytics2 = _interopRequireDefault(_kanalytics);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            exports.default = _kanalytics2.default;
            exports.VERSION = "0.7.0";
            exports.NAME = "playkit-js-kanalytics";


            var pluginName = "kanalytics";
            /**
             * Register the plugin in the playkit-js plugin framework.
             */
            (0, _playkitJs.registerPlugin)(pluginName, _kanalytics2.default);

            /***/
          }),
          /* 2 */
          /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
              value: true
            });

            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            var _playkitJs = __webpack_require__(0);

            var _statsService = __webpack_require__(3);

            var _statsService2 = _interopRequireDefault(_statsService);

            var _eventTypes = __webpack_require__(4);

            var _eventTypes2 = _interopRequireDefault(_eventTypes);

            var _event = __webpack_require__(5);

            var _event2 = _interopRequireDefault(_event);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {default: obj};
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var SEEK_OFFSET = 2000;
            var LIVE = 'Live';

            /**
             * @classdesc
             */

            var KAnalytics = function (_BasePlugin) {
              _inherits(KAnalytics, _BasePlugin);

              _createClass(KAnalytics, null, [{
                key: 'isValid',


                /**
                 * @static
                 * @public
                 * @returns {boolean} - Whether the plugin is valid.
                 */
                value: function isValid() {
                  return true;
                }

                /**
                 * The time of the last seek event
                 * @private
                 */

                /**
                 * @static
                 */

                /**
                 * Whether seeking occurred
                 * @private
                 */

                /**
                 * The ended flag
                 * @private
                 */

                /**
                 * The Kaltura session
                 * @private
                 */

                /**
                 * Indicate whether time percent event already sent
                 * @private
                 */

                /**
                 * Indicate whether widget loaded event already sent
                 * @private
                 */

              }]);

              /**
               * @constructor
               * @param {string} name - The plugin name.
               * @param {Player} player - The player reference.
               * @param {Object} config - The plugin configuration.
               */
              function KAnalytics(name, player, config) {
                _classCallCheck(this, KAnalytics);

                var _this = _possibleConstructorReturn(this, (KAnalytics.__proto__ || Object.getPrototypeOf(KAnalytics)).call(this, name, player, config));

                _this._lastSeekEvent = 0;
                _this._hasSeeked = false;
                _this._ended = false;
                _this._ks = "";
                _this._timePercentEvent = {};
                _this._widgetLoadedEventSent = false;

                _this._registerListeners();
                return _this;
              }

              /**
               * Reset the plugin flags
               * @return {void}
               */


              _createClass(KAnalytics, [{
                key: 'reset',
                value: function reset() {
                  this._hasSeeked = false;
                  this._ended = false;
                  this._ks = "";
                  this._timePercentEvent = {};
                }

                /**
                 * @public
                 * @return {void}
                 */

              }, {
                key: 'destroy',
                value: function destroy() {
                  this.eventManager.destroy();
                }

                /**
                 * Register the player event listeners
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_registerListeners',
                value: function _registerListeners() {
                  var PlayerEvent = this.player.Event;
                  this.eventManager.listen(this.player, PlayerEvent.SOURCE_SELECTED, this._onSourceSelected.bind(this));
                  this.eventManager.listen(this.player, PlayerEvent.FIRST_PLAY, this._sendAnalytics.bind(this, _eventTypes2.default.PLAY));
                  this.eventManager.listen(this.player, PlayerEvent.PLAY, this._onPlay.bind(this));
                  this.eventManager.listen(this.player, PlayerEvent.ENDED, this._onEnded.bind(this));
                  this.eventManager.listen(this.player, PlayerEvent.SEEKED, this._sendSeekAnalytic.bind(this));
                  this.eventManager.listen(this.player, PlayerEvent.TIME_UPDATE, this._sendTimePercentAnalytic.bind(this));
                  this.eventManager.listen(this.player, PlayerEvent.PLAYER_STATE_CHANGED, this._onPlayerStateChanged.bind(this));
                }

                /**
                 * The source selected event listener
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_onSourceSelected',
                value: function _onSourceSelected() {
                  var _this2 = this;

                  this.player.ready().then(function () {
                    if (!_this2._widgetLoadedEventSent) {
                      _this2._sendAnalytics(_eventTypes2.default.WIDGET_LOADED);
                      _this2._widgetLoadedEventSent = true;
                    }
                    _this2._sendAnalytics(_eventTypes2.default.MEDIA_LOADED);
                  });
                }

                /**
                 * The play event listener
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_onPlay',
                value: function _onPlay() {
                  if (this._ended) {
                    this._ended = false;
                    this._sendAnalytics(_eventTypes2.default.REPLAY);
                  }
                }

                /**
                 * The ended event listener
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_onEnded',
                value: function _onEnded() {
                  this._ended = true;
                }

                /**
                 * The player state changed event listener
                 * @param {any} event - the event
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_onPlayerStateChanged',
                value: function _onPlayerStateChanged(event) {
                  if (event.payload.newState.type === this.player.State.BUFFERING) {
                    this._sendAnalytics(_eventTypes2.default.BUFFER_START);
                  }
                  if (event.payload.oldState.type === this.player.State.BUFFERING) {
                    this._sendAnalytics(_eventTypes2.default.BUFFER_END);
                  }
                }

                /**
                 * Send seek analytic
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_sendSeekAnalytic',
                value: function _sendSeekAnalytic() {
                  var now = new Date().getTime();
                  if (this._lastSeekEvent + SEEK_OFFSET < now && (this.player.config.type !== LIVE || this.player.config.dvr)) {
                    // avoid sending lots of seeking while scrubbing
                    this._sendAnalytics(_eventTypes2.default.SEEK);
                    this._hasSeeked = true;
                  }
                  this._lastSeekEvent = now;
                }

                /**
                 * Send time percent analytic
                 * @private
                 * @return {void}
                 */

              }, {
                key: '_sendTimePercentAnalytic',
                value: function _sendTimePercentAnalytic() {
                  if (this.player.config.type !== LIVE) {
                    var percent = this.player.currentTime / this.player.duration;
                    if (!this._timePercentEvent.PLAY_REACHED_25 && percent >= .25) {
                      this._timePercentEvent.PLAY_REACHED_25 = true;
                      this._sendAnalytics(_eventTypes2.default.PLAY_REACHED_25);
                    }
                    if (!this._timePercentEvent.PLAY_REACHED_50 && percent >= .50) {
                      this._timePercentEvent.PLAY_REACHED_50 = true;
                      this._sendAnalytics(_eventTypes2.default.PLAY_REACHED_50);
                    }
                    if (!this._timePercentEvent.PLAY_REACHED_75 && percent >= .75) {
                      this._timePercentEvent.PLAY_REACHED_75 = true;
                      this._sendAnalytics(_eventTypes2.default.PLAY_REACHED_75);
                    }
                    if (!this._timePercentEvent.PLAY_REACHED_100 && percent >= .98) {
                      this._timePercentEvent.PLAY_REACHED_100 = true;
                      this._sendAnalytics(_eventTypes2.default.PLAY_REACHED_100);
                    }
                  }
                }

                /**
                 * Get the player params which relevant to analytics request
                 * @private
                 * @return {Object} - The player params
                 */

              }, {
                key: '_sendAnalytics',


                /**
                 * Register the player event listeners
                 * @param {number} eventType - The event type
                 * @private
                 * @return {void}
                 */
                value: function _sendAnalytics(eventType) {
                  var _this3 = this;

                  var statsEvent = new _event2.default(eventType);
                  statsEvent.currentPoint = this.player.currentTime;
                  statsEvent.duration = this.player.duration;
                  statsEvent.seek = this._hasSeeked;
                  statsEvent.hasKanalony = this.config.hasKanalony;
                  Object.assign(statsEvent, this._playerParams);

                  var request = _statsService2.default.collect(this.config.playerVersion, this._ks, {"event": statsEvent}, this.config.baseUrl);
                  request.doHttpRequest().then(function () {
                    _this3.logger.debug('Analytics event sent ', statsEvent);
                  }, function (err) {
                    _this3.logger.error('Failed to send analytics event ', statsEvent, err);
                  });
                }
              }, {
                key: '_playerParams',
                get: function get() {
                  this._ks = this.config.ks;
                  return {
                    clientVer: this.config.playerVersion,
                    entryId: this.config.entryId,
                    sessionId: this.config.sessionId,
                    uiConfId: this.config.uiConfId || 0,
                    partnerId: this.config.partnerId,
                    widgetId: this.config.partnerId ? "_" + this.config.partnerId : "",
                    referrer: document.referrer || document.URL
                  };
                }
              }]);

              return KAnalytics;
            }(_playkitJs.BasePlugin);

            KAnalytics.defaultConfig = {
              baseUrl: '//stats.kaltura.com/api_v3/index.php',
              hasKanalony: false
            };
            exports.default = KAnalytics;

            /***/
          }),
          /* 3 */
          /***/ (function (module, exports, __webpack_require__) {

            (function webpackUniversalModuleDefinition(root, factory) {
              if (true)
                module.exports = factory();
              else if (typeof define === 'function' && define.amd)
                define([], factory);
              else if (typeof exports === 'object')
                exports["PlaykitJsProviders"] = factory();
              else
                root["PlaykitJsProviders"] = factory();
            })(this, function () {
              return /******/ (function (modules) { // webpackBootstrap
                /******/ 	// The module cache
                /******/
                var installedModules = {};
                /******/
                /******/ 	// The require function
                /******/
                function __webpack_require__(moduleId) {
                  /******/
                  /******/ 		// Check if module is in cache
                  /******/
                  if (installedModules[moduleId]) {
                    /******/
                    return installedModules[moduleId].exports;
                    /******/
                  }
                  /******/ 		// Create a new module (and put it into the cache)
                  /******/
                  var module = installedModules[moduleId] = {
                    /******/      i: moduleId,
                    /******/      l: false,
                    /******/      exports: {}
                    /******/
                  };
                  /******/
                  /******/ 		// Execute the module function
                  /******/
                  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                  /******/
                  /******/ 		// Flag the module as loaded
                  /******/
                  module.l = true;
                  /******/
                  /******/ 		// Return the exports of the module
                  /******/
                  return module.exports;
                  /******/
                }

                /******/
                /******/
                /******/ 	// expose the modules object (__webpack_modules__)
                /******/
                __webpack_require__.m = modules;
                /******/
                /******/ 	// expose the module cache
                /******/
                __webpack_require__.c = installedModules;
                /******/
                /******/ 	// identity function for calling harmony imports with the correct context
                /******/
                __webpack_require__.i = function (value) {
                  return value;
                };
                /******/
                /******/ 	// define getter function for harmony exports
                /******/
                __webpack_require__.d = function (exports, name, getter) {
                  /******/
                  if (!__webpack_require__.o(exports, name)) {
                    /******/
                    Object.defineProperty(exports, name, {
                      /******/        configurable: false,
                      /******/        enumerable: true,
                      /******/        get: getter
                      /******/
                    });
                    /******/
                  }
                  /******/
                };
                /******/
                /******/ 	// getDefaultExport function for compatibility with non-harmony modules
                /******/
                __webpack_require__.n = function (module) {
                  /******/
                  var getter = module && module.__esModule ?
                    /******/      function getDefault() {
                      return module['default'];
                    } :
                    /******/      function getModuleExports() {
                      return module;
                    };
                  /******/
                  __webpack_require__.d(getter, 'a', getter);
                  /******/
                  return getter;
                  /******/
                };
                /******/
                /******/ 	// Object.prototype.hasOwnProperty.call
                /******/
                __webpack_require__.o = function (object, property) {
                  return Object.prototype.hasOwnProperty.call(object, property);
                };
                /******/
                /******/ 	// __webpack_public_path__
                /******/
                __webpack_require__.p = "";
                /******/
                /******/ 	// Load entry module and return exports
                /******/
                return __webpack_require__(__webpack_require__.s = 36);
                /******/
              })
              /************************************************************************/
              /******/({

                /***/ 0:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });

                  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                    return typeof obj;
                  } : function (obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };

                  var _createClass = function () {
                    function defineProperties(target, props) {
                      for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                      }
                    }

                    return function (Constructor, protoProps, staticProps) {
                      if (protoProps) defineProperties(Constructor.prototype, protoProps);
                      if (staticProps) defineProperties(Constructor, staticProps);
                      return Constructor;
                    };
                  }();

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  /**
                   * Request builder
                   * @classdesc
                   */
                  var RequestBuilder = function () {

                    /**
                     * @constructor
                     * @param {Map<string, string>} headers The request headers
                     */

                    /**
                     * @member - Service method (POST,GET,DELETE etc..)
                     * @type {string}
                     */

                    /**
                     * @member - Service headers
                     * @type {Map<string, string>}
                     */

                    /**
                     * @member - Service action
                     * @type {string}
                     */
                    function RequestBuilder() {
                      var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();

                      _classCallCheck(this, RequestBuilder);

                      this.headers = headers;
                    }

                    /**
                     * Builds restful service URL
                     * @function getUrl
                     * @param {string} baseUrl - The service base URL
                     * @returns {string} The service URL
                     */

                    /**
                     * @member - Service tag
                     * @type {string}
                     */

                    /**
                     * @member - Service URL
                     * @type {string}
                     */

                    /**
                     * @member - Service params
                     * @type {any}
                     */


                    /**
                     * @member - Service name
                     * @type {string}
                     */


                    _createClass(RequestBuilder, [{
                      key: 'getUrl',
                      value: function getUrl(baseUrl) {
                        return baseUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');
                      }

                      /**
                       * Executes service
                       * @function doHttpRequest
                       * @returns {Promise.<any>} Service response as promise
                       */

                    }, {
                      key: 'doHttpRequest',
                      value: function doHttpRequest() {
                        var _this = this;

                        if (!this.url) {
                          throw new Error("baseUrl is mandatory for request builder");
                        }
                        var request = new XMLHttpRequest();
                        return new Promise(function (resolve, reject) {
                          request.onreadystatechange = function () {
                            if (request.readyState === 4) {
                              if (request.status === 200) {
                                var jsonResponse = JSON.parse(request.responseText);
                                if (jsonResponse && (typeof jsonResponse === 'undefined' ? 'undefined' : _typeof(jsonResponse)) === 'object' && jsonResponse.code && jsonResponse.message) reject(jsonResponse); else resolve(jsonResponse);
                              } else {
                                reject(request.responseText);
                              }
                            }
                          };
                          request.open(_this.method, _this.url);
                          _this.headers.forEach(function (value, key) {
                            request.setRequestHeader(key, value);
                          });
                          request.send(_this.params);
                        });
                      }
                    }]);

                    return RequestBuilder;
                  }();

                  exports.default = RequestBuilder;

                  /***/
                }),

                /***/ 1:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });

                  var _createClass = function () {
                    function defineProperties(target, props) {
                      for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                      }
                    }

                    return function (Constructor, protoProps, staticProps) {
                      if (protoProps) defineProperties(Constructor.prototype, protoProps);
                      if (staticProps) defineProperties(Constructor, staticProps);
                      return Constructor;
                    };
                  }();

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  var defaultConfig = {
                    beUrl: "//www.kaltura.com/api_v3",
                    baseUrl: "//cdnapisec.kaltura.com",
                    serviceParams: {
                      apiVersion: '3.3.0',
                      format: 1
                    }
                  };

                  var Configuration = function () {
                    function Configuration() {
                      _classCallCheck(this, Configuration);
                    }

                    _createClass(Configuration, null, [{
                      key: "set",
                      value: function set(clientConfig) {
                        if (clientConfig) {
                          Object.assign(defaultConfig, clientConfig);
                        }
                      }
                    }, {
                      key: "get",
                      value: function get() {
                        return defaultConfig;
                      }
                    }]);

                    return Configuration;
                  }();

                  exports.default = Configuration;
                  exports.Configuration = Configuration;

                  /***/
                }),

                /***/ 2:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });

                  var _createClass = function () {
                    function defineProperties(target, props) {
                      for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                      }
                    }

                    return function (Constructor, protoProps, staticProps) {
                      if (protoProps) defineProperties(Constructor.prototype, protoProps);
                      if (staticProps) defineProperties(Constructor, staticProps);
                      return Constructor;
                    };
                  }();

                  var _multiRequestBuilder = __webpack_require__(5);

                  var _multiRequestBuilder2 = _interopRequireDefault(_multiRequestBuilder);

                  var _config = __webpack_require__(1);

                  var _config2 = _interopRequireDefault(_config);

                  function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {default: obj};
                  }

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  var config = _config2.default.get();
                  var SERVICE_NAME = "multirequest";

                  /**
                   * Base for all ovp services
                   * @classdesc
                   */

                  var OvpService = function () {
                    function OvpService() {
                      _classCallCheck(this, OvpService);
                    }

                    _createClass(OvpService, null, [{
                      key: 'getMultirequest',

                      /**
                       * Gets a new instance of MultiRequestBuilder with ovp params
                       * @function getMultirequest
                       * @param {string} pVersion The player version
                       * @param {string} ks The ks
                       * @param {string} partnerId The partner ID
                       * @returns {MultiRequestBuilder} The multi request builder
                       * @static
                       */
                      value: function getMultirequest(pVersion, ks, partnerId) {
                        var ovpParams = config.serviceParams;
                        Object.assign(ovpParams, {ks: ks, clientTag: 'html5:v' + pVersion});
                        if (partnerId) {
                          Object.assign(ovpParams, {partnerId: partnerId});
                        }
                        var headers = new Map();
                        headers.set("Content-Type", "application/json");
                        var multiReq = new _multiRequestBuilder2.default(headers);
                        multiReq.method = "POST";
                        multiReq.service = SERVICE_NAME;
                        multiReq.url = multiReq.getUrl(config.beUrl);
                        multiReq.params = ovpParams;
                        return multiReq;
                      }
                    }]);

                    return OvpService;
                  }();

                  exports.default = OvpService;

                  /***/
                }),

                /***/ 20:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });

                  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                    return typeof obj;
                  } : function (obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };

                  var param = function param(a) {
                    var s = [],
                      rbracket = /\[\]$/,
                      isArray = function isArray(obj) {
                        return Object.prototype.toString.call(obj) === '[object Array]';
                      },
                      add = function add(k, v) {
                        v = typeof v === 'function' ? v() : v === null ? '' : v === undefined ? '' : v;
                        s[s.length] = encodeURIComponent(k) + '=' + encodeURIComponent(v);
                      },
                      buildParams = function buildParams(prefix, obj) {
                        var i = void 0,
                          len = void 0,
                          key = void 0;

                        if (prefix) {
                          if (isArray(obj)) {
                            for (i = 0, len = obj.length; i < len; i++) {
                              if (rbracket.test(prefix)) {
                                add(prefix, obj[i]);
                              } else {
                                buildParams(prefix + ':' + (_typeof(obj[i]) === 'object' ? i : ''), obj[i]);
                              }
                            }
                          } else if (obj && String(obj) === '[object Object]') {
                            for (key in obj) {
                              buildParams(prefix + ':' + key, obj[key]);
                            }
                          } else {
                            add(prefix, obj);
                          }
                        } else if (isArray(obj)) {
                          for (i = 0, len = obj.length; i < len; i++) {
                            add(obj[i].name, obj[i].value);
                          }
                        } else {
                          for (key in obj) {
                            buildParams(key, obj[key]);
                          }
                        }
                        return s;
                      };

                    return buildParams('', a).join('&').replace(/%20/g, '+');
                  };

                  exports.param = param;

                  /***/
                }),

                /***/ 3:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  /**
                   * Base service result
                   * @classdesc
                   */
                  var ServiceResult =

                      /**
                       * @constructor
                       * @param {Object} response - Service response
                       */

                      /**
                       * @member - The service error
                       * @type {ServiceError}
                       */

                      /**
                       * @member - The service result data
                       * @type {Object}
                       */
                      function ServiceResult(response) {
                        _classCallCheck(this, ServiceResult);

                        this.hasError = false;

                        if (response.objectType === "KalturaAPIException") {
                          this.hasError = true;
                          this.error = new ServiceError(response.code, response.message);
                        } else {
                          this.data = response;
                        }
                      }

                    /**
                     * @member - Is service returned an error
                     * @type {boolean}
                     */
                  ;

                  /**
                   * Service error
                   * @classdesc
                   */


                  exports.default = ServiceResult;

                  var ServiceError =

                      /**
                       * @constructor
                       * @param {string} code - The result code
                       * @param {string} message - The result message
                       */

                      /**
                       * @member - The error code
                       * @type {string}
                       */
                      function ServiceError(code, message) {
                        _classCallCheck(this, ServiceError);

                        this.code = code;
                        this.message = message;
                      }
                    /**
                     * @member - The error message
                     * @type {string}
                     */
                  ;

                  /***/
                }),

                /***/ 36:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });
                  exports.NAME = exports.VERSION = exports.RequestBuilder = exports.Configuration = exports.StatsService = undefined;

                  var _createClass = function () {
                    function defineProperties(target, props) {
                      for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                      }
                    }

                    return function (Constructor, protoProps, staticProps) {
                      if (protoProps) defineProperties(Constructor.prototype, protoProps);
                      if (staticProps) defineProperties(Constructor, staticProps);
                      return Constructor;
                    };
                  }();

                  var _ovpService = __webpack_require__(2);

                  var _ovpService2 = _interopRequireDefault(_ovpService);

                  var _requestBuilder = __webpack_require__(0);

                  var _requestBuilder2 = _interopRequireDefault(_requestBuilder);

                  var _config = __webpack_require__(1);

                  var _config2 = _interopRequireDefault(_config);

                  var _param = __webpack_require__(20);

                  function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {default: obj};
                  }

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  function _possibleConstructorReturn(self, call) {
                    if (!self) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return call && (typeof call === "object" || typeof call === "function") ? call : self;
                  }

                  function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    });
                    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
                  }

                  var SERVICE_NAME = "stats";
                  /**
                   * Ovp stats service methods
                   * @classdesc
                   */

                  var StatsService = function (_OvpService) {
                    _inherits(StatsService, _OvpService);

                    function StatsService() {
                      _classCallCheck(this, StatsService);

                      return _possibleConstructorReturn(this, (StatsService.__proto__ || Object.getPrototypeOf(StatsService)).apply(this, arguments));
                    }

                    _createClass(StatsService, null, [{
                      key: 'collect',


                      /**
                       * Creates an instance of RequestBuilder for stats.collect
                       * @function collect
                       * @param {string} pVersion The player version
                       * @param {string} ks - The ks
                       * @param {Object} event - The event data
                       * @param {string} baseUrl - The service base URL
                       * @returns {RequestBuilder} - The request builder
                       * @static
                       */
                      value: function collect(pVersion, ks, event, baseUrl) {
                        var ovpParams = _config2.default.get();
                        var serviceParams = {};
                        Object.assign(serviceParams, ovpParams.serviceParams, {
                          ks: ks,
                          clientTag: 'html5:v' + pVersion
                        }, event);
                        var request = new _requestBuilder2.default();
                        request.service = SERVICE_NAME;
                        request.action = "collect";
                        request.method = "GET";
                        request.tag = "stats-collect";
                        request.params = serviceParams;
                        request.url = baseUrl + '?service=' + request.service + '&action=' + request.action + '&' + (0, _param.param)(request.params);
                        return request;
                      }
                    }]);

                    return StatsService;
                  }(_ovpService2.default);

                  exports.default = StatsService;
                  exports.StatsService = StatsService;
                  exports.Configuration = _config2.default;
                  exports.RequestBuilder = _requestBuilder2.default;

                  var packageName = "playkit-js-providers" + "-stats-service";
                  exports.VERSION = "1.4.0";
                  exports.NAME = packageName;

                  /***/
                }),

                /***/ 4:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });
                  exports.setLogLevel = exports.getLogLevel = exports.LogLevel = undefined;

                  var _jsLogger = __webpack_require__(8);

                  var JsLogger = _interopRequireWildcard(_jsLogger);

                  function _interopRequireWildcard(obj) {
                    if (obj && obj.__esModule) {
                      return obj;
                    } else {
                      var newObj = {};
                      if (obj != null) {
                        for (var key in obj) {
                          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                      }
                      newObj.default = obj;
                      return newObj;
                    }
                  }

                  var LogLevel = {
                    "DEBUG": JsLogger.DEBUG,
                    "INFO": JsLogger.INFO,
                    "TIME": JsLogger.TIME,
                    "WARN": JsLogger.WARN,
                    "ERROR": JsLogger.ERROR,
                    "OFF": JsLogger.OFF
                  };


                  JsLogger.useDefaults({defaultLevel: JsLogger.ERROR});

                  /**
                   * get a logger
                   * @param {?string} name - the logger name
                   * @returns {Object} - the logger class
                   */
                  function getLogger(name) {
                    if (!name) {
                      return JsLogger;
                    }
                    return JsLogger.get(name);
                  }

                  /**
                   * get the log level
                   * @param {?string} name - the logger name
                   * @returns {Object} - the log level
                   */
                  function getLogLevel(name) {
                    return getLogger(name).getLevel();
                  }

                  "";

                  /**
                   * sets the logger level
                   * @param {Object} level - the log level
                   * @param {?string} name - the logger name
                   * @returns {void}
                   */
                  function setLogLevel(level, name) {

                    getLogger(name).setLevel(level);
                  }

                  exports.default = getLogger;
                  exports.LogLevel = LogLevel;
                  exports.getLogLevel = getLogLevel;
                  exports.setLogLevel = setLogLevel;

                  /***/
                }),

                /***/ 5:
                /***/ (function (module, exports, __webpack_require__) {

                  "use strict";


                  Object.defineProperty(exports, "__esModule", {
                    value: true
                  });
                  exports.MultiRequestResult = undefined;

                  var _createClass = function () {
                    function defineProperties(target, props) {
                      for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                      }
                    }

                    return function (Constructor, protoProps, staticProps) {
                      if (protoProps) defineProperties(Constructor.prototype, protoProps);
                      if (staticProps) defineProperties(Constructor, staticProps);
                      return Constructor;
                    };
                  }();

                  var _requestBuilder = __webpack_require__(0);

                  var _requestBuilder2 = _interopRequireDefault(_requestBuilder);

                  var _baseServiceResult = __webpack_require__(3);

                  var _baseServiceResult2 = _interopRequireDefault(_baseServiceResult);

                  var _logger = __webpack_require__(4);

                  var _logger2 = _interopRequireDefault(_logger);

                  function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {default: obj};
                  }

                  function _defineProperty(obj, key, value) {
                    if (key in obj) {
                      Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                      });
                    } else {
                      obj[key] = value;
                    }
                    return obj;
                  }

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  function _possibleConstructorReturn(self, call) {
                    if (!self) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return call && (typeof call === "object" || typeof call === "function") ? call : self;
                  }

                  function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    });
                    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
                  }

                  /**
                   * @constant
                   */
                  var logger = (0, _logger2.default)("OvpProvider");

                  /**
                   * Multi Request builder
                   * @classdesc
                   */

                  var MultiRequestBuilder = function (_RequestBuilder) {
                    _inherits(MultiRequestBuilder, _RequestBuilder);

                    function MultiRequestBuilder() {
                      var _ref;

                      var _temp, _this, _ret;

                      _classCallCheck(this, MultiRequestBuilder);

                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }

                      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MultiRequestBuilder.__proto__ || Object.getPrototypeOf(MultiRequestBuilder)).call.apply(_ref, [this].concat(args))), _this), _this.requests = [], _temp), _possibleConstructorReturn(_this, _ret);
                    }

                    /**
                     * @member - Array of requests
                     * @type {Array<RequestBuilder>}
                     */


                    _createClass(MultiRequestBuilder, [{
                      key: 'add',


                      /**
                       * Adds request to requests array
                       * @function add
                       * @param {RequestBuilder} request The request
                       * @returns {MultiRequestBuilder} The multiRequest
                       */
                      value: function add(request) {
                        this.requests.push(request);
                        var requestParams = {};
                        var serviceDef = {service: request.service, action: request.action};
                        Object.assign(requestParams, _defineProperty({}, this.requests.length, Object.assign(serviceDef, request.params)));
                        Object.assign(requestParams, this.params);
                        this.params = requestParams;
                        return this;
                      }

                      /**
                       * Executes a multi request
                       * @function execute
                       * @returns {Promise} The multirequest execution promisie
                       */

                    }, {
                      key: 'execute',
                      value: function execute() {
                        var _this2 = this;

                        try {
                          this.params = JSON.stringify(this.params);
                        } catch (err) {
                          logger.error('' + err.message);
                        }
                        return new Promise(function (resolve, reject) {
                          _this2.doHttpRequest().then(function (data) {
                            resolve(new MultiRequestResult(data));
                          }, function (err) {
                            var errorText = 'Error on multiRequest execution, error <' + err + '>.';
                            reject(errorText);
                          });
                        });
                      }
                    }]);

                    return MultiRequestBuilder;
                  }(_requestBuilder2.default);

                  /**
                   * Multi Request result object
                   * @classdesc
                   */


                  exports.default = MultiRequestBuilder;

                  var MultiRequestResult =

                      /**
                       * @constructor
                       * @param {Object}  response data
                       */


                      /**
                       * @member - Is success
                       * @type {boolean}
                       */
                      exports.MultiRequestResult = function MultiRequestResult(response) {
                        var _this3 = this;

                        _classCallCheck(this, MultiRequestResult);

                        this.results = [];

                        this.success = true;
                        response.forEach(function (result) {
                          var serviceResult = new _baseServiceResult2.default(result);
                          _this3.results.push(serviceResult);
                          if (serviceResult.hasError) {
                            logger.error('Service returned an error with error code: ' + serviceResult.error.code + ' and message: ' + serviceResult.error.message + '.');
                            _this3.success = false;
                            return;
                          }
                        });
                      }
                    /**
                     * @member - Multi request response data
                     * @type {Object}
                     */
                  ;

                  /***/
                }),

                /***/ 8:
                /***/ (function (module, exports, __webpack_require__) {

                  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
                  /*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */
                  (function (global) {
                    "use strict";

                    // Top level module for the global, static logger instance.
                    var Logger = {};

                    // For those that are at home that are keeping score.
                    Logger.VERSION = "1.4.1";

                    // Function which handles all incoming log messages.
                    var logHandler;

                    // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
                    var contextualLoggersByNameMap = {};

                    // Polyfill for ES5's Function.bind.
                    var bind = function (scope, func) {
                      return function () {
                        return func.apply(scope, arguments);
                      };
                    };

                    // Super exciting object merger-matron 9000 adding another 100 bytes to your download.
                    var merge = function () {
                      var args = arguments, target = args[0], key, i;
                      for (i = 1; i < args.length; i++) {
                        for (key in args[i]) {
                          if (!(key in target) && args[i].hasOwnProperty(key)) {
                            target[key] = args[i][key];
                          }
                        }
                      }
                      return target;
                    };

                    // Helper to define a logging level object; helps with optimisation.
                    var defineLogLevel = function (value, name) {
                      return {value: value, name: name};
                    };

                    // Predefined logging levels.
                    Logger.DEBUG = defineLogLevel(1, 'DEBUG');
                    Logger.INFO = defineLogLevel(2, 'INFO');
                    Logger.TIME = defineLogLevel(3, 'TIME');
                    Logger.WARN = defineLogLevel(4, 'WARN');
                    Logger.ERROR = defineLogLevel(8, 'ERROR');
                    Logger.OFF = defineLogLevel(99, 'OFF');

                    // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
                    // of each other.
                    var ContextualLogger = function (defaultContext) {
                      this.context = defaultContext;
                      this.setLevel(defaultContext.filterLevel);
                      this.log = this.info;  // Convenience alias.
                    };

                    ContextualLogger.prototype = {
                      // Changes the current logging level for the logging instance.
                      setLevel: function (newLevel) {
                        // Ensure the supplied Level object looks valid.
                        if (newLevel && "value" in newLevel) {
                          this.context.filterLevel = newLevel;
                        }
                      },

                      // Gets the current logging level for the logging instance
                      getLevel: function () {
                        return this.context.filterLevel;
                      },

                      // Is the logger configured to output messages at the supplied level?
                      enabledFor: function (lvl) {
                        var filterLevel = this.context.filterLevel;
                        return lvl.value >= filterLevel.value;
                      },

                      debug: function () {
                        this.invoke(Logger.DEBUG, arguments);
                      },

                      info: function () {
                        this.invoke(Logger.INFO, arguments);
                      },

                      warn: function () {
                        this.invoke(Logger.WARN, arguments);
                      },

                      error: function () {
                        this.invoke(Logger.ERROR, arguments);
                      },

                      time: function (label) {
                        if (typeof label === 'string' && label.length > 0) {
                          this.invoke(Logger.TIME, [label, 'start']);
                        }
                      },

                      timeEnd: function (label) {
                        if (typeof label === 'string' && label.length > 0) {
                          this.invoke(Logger.TIME, [label, 'end']);
                        }
                      },

                      // Invokes the logger callback if it's not being filtered.
                      invoke: function (level, msgArgs) {
                        if (logHandler && this.enabledFor(level)) {
                          logHandler(msgArgs, merge({level: level}, this.context));
                        }
                      }
                    };

                    // Protected instance which all calls to the to level `Logger` module will be routed through.
                    var globalLogger = new ContextualLogger({filterLevel: Logger.OFF});

                    // Configure the global Logger instance.
                    (function () {
                      // Shortcut for optimisers.
                      var L = Logger;

                      L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
                      L.debug = bind(globalLogger, globalLogger.debug);
                      L.time = bind(globalLogger, globalLogger.time);
                      L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
                      L.info = bind(globalLogger, globalLogger.info);
                      L.warn = bind(globalLogger, globalLogger.warn);
                      L.error = bind(globalLogger, globalLogger.error);

                      // Don't forget the convenience alias!
                      L.log = L.info;
                    }());

                    // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
                    // object with the supplied log messages and the second being a context object which contains a hash of stateful
                    // parameters which the logging function can consume.
                    Logger.setHandler = function (func) {
                      logHandler = func;
                    };

                    // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
                    // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
                    Logger.setLevel = function (level) {
                      // Set the globalLogger's level.
                      globalLogger.setLevel(level);

                      // Apply this level to all registered contextual loggers.
                      for (var key in contextualLoggersByNameMap) {
                        if (contextualLoggersByNameMap.hasOwnProperty(key)) {
                          contextualLoggersByNameMap[key].setLevel(level);
                        }
                      }
                    };

                    // Gets the global logging filter level
                    Logger.getLevel = function () {
                      return globalLogger.getLevel();
                    };

                    // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
                    // default context and log handler.
                    Logger.get = function (name) {
                      // All logger instances are cached so they can be configured ahead of use.
                      return contextualLoggersByNameMap[name] ||
                        (contextualLoggersByNameMap[name] = new ContextualLogger(merge({name: name}, globalLogger.context)));
                    };

                    // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
                    // write to the window's console object (if present); the optional options object can be used to customise the
                    // formatter used to format each log message.
                    Logger.createDefaultHandler = function (options) {
                      options = options || {};

                      options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
                        // Prepend the logger's name to the log message for easy identification.
                        if (context.name) {
                          messages.unshift("[" + context.name + "]");
                        }
                      };

                      // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
                      // that don't offer a native console method.
                      var timerStartTimeByLabelMap = {};

                      // Support for IE8+ (and other, slightly more sane environments)
                      var invokeConsoleMethod = function (hdlr, messages) {
                        Function.prototype.apply.call(hdlr, console, messages);
                      };

                      // Check for the presence of a logger.
                      if (typeof console === "undefined") {
                        return function () { /* no console */
                        };
                      }

                      return function (messages, context) {
                        // Convert arguments object to Array.
                        messages = Array.prototype.slice.call(messages);

                        var hdlr = console.log;
                        var timerLabel;

                        if (context.level === Logger.TIME) {
                          timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];

                          if (messages[1] === 'start') {
                            if (console.time) {
                              console.time(timerLabel);
                            }
                            else {
                              timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
                            }
                          }
                          else {
                            if (console.timeEnd) {
                              console.timeEnd(timerLabel);
                            }
                            else {
                              invokeConsoleMethod(hdlr, [timerLabel + ': ' +
                              (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
                            }
                          }
                        }
                        else {
                          // Delegate through to custom warn/error loggers if present on the console.
                          if (context.level === Logger.WARN && console.warn) {
                            hdlr = console.warn;
                          } else if (context.level === Logger.ERROR && console.error) {
                            hdlr = console.error;
                          } else if (context.level === Logger.INFO && console.info) {
                            hdlr = console.info;
                          } else if (context.level === Logger.DEBUG && console.debug) {
                            hdlr = console.debug;
                          }

                          options.formatter(messages, context);
                          invokeConsoleMethod(hdlr, messages);
                        }
                      };
                    };

                    // Configure and example a Default implementation which writes to the `window.console` (if present).  The
                    // `options` hash can be used to configure the default logLevel and provide a custom message formatter.
                    Logger.useDefaults = function (options) {
                      Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
                      Logger.setHandler(Logger.createDefaultHandler(options));
                    };

                    // Export to popular environments boilerplate.
                    if (true) {
                      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (Logger),
                        __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                          (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
                          __WEBPACK_AMD_DEFINE_FACTORY__),
                      __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    }
                    else if (typeof module !== 'undefined' && module.exports) {
                      module.exports = Logger;
                    }
                    else {
                      Logger._prevLogger = global.Logger;

                      Logger.noConflict = function () {
                        global.Logger = Logger._prevLogger;
                        return Logger;
                      };

                      global.Logger = Logger;
                    }
                  }(this));


                  /***/
                })

                /******/
              });
            });
//# sourceMappingURL=statsService.js.map

            /***/
          }),
          /* 4 */
          /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            var EVENT_TYPES = {
              WIDGET_LOADED: 1,
              MEDIA_LOADED: 2,
              PLAY: 3,
              PLAY_REACHED_25: 4,
              PLAY_REACHED_50: 5,
              PLAY_REACHED_75: 6,
              PLAY_REACHED_100: 7,
              OPEN_EDIT: 8,
              OPEN_VIRAL: 9,
              OPEN_DOWNLOAD: 10,
              OPEN_REPORT: 11,
              BUFFER_START: 12,
              BUFFER_END: 13,
              OPEN_FULL_SCREEN: 14,
              CLOSE_FULL_SCREEN: 15,
              REPLAY: 16,
              SEEK: 17,
              OPEN_UPLOAD: 18,
              SAVE_PUBLISH: 19,
              CLOSE_EDITOR: 20,
              PRE_BUMPER_PLAYED: 21,
              POST_BUMPER_PLAYED: 22,
              BUMPER_CLICKED: 23,
              PREROLL_STARTED: 24,
              MIDROLL_STARTED: 25,
              POSTROLL_STARTED: 26,
              OVERLAY_STARTED: 27,
              PREROLL_CLICKED: 28,
              MIDROLL_CLICKED: 29,
              POSTROLL_CLICKED: 30,
              OVERLAY_CLICKED: 31,
              PREROLL_25: 32,
              PREROLL_50: 33,
              PREROLL_75: 34,
              MIDROLL_25: 35,
              MIDROLL_50: 36,
              MIDROLL_75: 37,
              POSTROLL_25: 38,
              POSTROLL_50: 39,
              POSTROLL_75: 40
            };

            exports.default = EVENT_TYPES;

            /***/
          }),
          /* 5 */
          /***/ (function (module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
              value: true
            });

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            var Event =

                /**
                 * @constructor
                 * @param {number} eventType - The event type
                 */

                /**
                 * The feature type
                 */

                /**
                 * The kaltura application name
                 */

                /**
                 * The referrer of the client
                 */

                /**
                 * The duration of the video in milliseconds
                 */

                /**
                 * The partner's user id
                 */

                /**
                 * The widget id
                 */

                /**
                 * The partner id
                 */

                /**
                 * The client's timestamp of this event
                 */

                /**
                 * The client version
                 */
                function Event(eventType) {
                  _classCallCheck(this, Event);

                  this.eventType = eventType;
                  this.isFirstInSession = false;
                  this.eventTimestamp = new Date().getTime();
                }
              /**
               * Whether kanalony plugin is enabled
               */

              /**
               * The context id
               */

              /**
               * Whether the event is thrown for the first video in the session
               */

              /**
               * Whether the user ever used seek in this session
               */

              /**
               * The timestamp along the video when the event happened
               */

              /**
               * The uiconf id
               */

              /**
               * The entry id
               */

              /**
               * The session id. A unique string generated by the client that will represent the client-side session
               * */

              /**
               * The event type
               */
            ;

            exports.default = Event;

            /***/
          })
          /******/]);
      });


      /***/
    }),
    /* 345 */
    /***/ (function (module, exports, __webpack_require__) {

      "use strict";
// //
// import {loadPlayer} from 'playkit-js'
// import KalturaPlayer from './kaltura-player'
// import {evaluatePluginsConfig} from './plugins/plugins-config'
// import {
//   extractPlayerConfig,
//   extractProvidersConfig,
//   createKalturaPlayerContainer,
//   validateTargetId,
//   validateProvidersConfig,
//   setDefaultPlayerConfig,
//   setStorageConfig,
//   applyStorageSupport,
//   setStorageTextStyle,
//   setLogLevel
// } from "./utils/setup-helpers"
//
// /**
//  * @param {string} targetId - target id
//  * @param {Object} options - options
//  * @returns {Player} - Player
//  */
// function setup(targetId: string, options: Object = {}): KalturaPlayer {
//   setLogLevel(options);
//   validateTargetId(targetId);
//   validateProvidersConfig(options);
//   const playerConfig = extractPlayerConfig(options);
//   const providersConfig = extractProvidersConfig(options);
//   const containerId = createKalturaPlayerContainer(targetId);
//   setDefaultPlayerConfig(playerConfig);
//   evaluatePluginsConfig(playerConfig);
//   setStorageConfig(playerConfig);
//   const player = loadPlayer(playerConfig);
//   const kalturaPlayerApi = new KalturaPlayer(player, containerId, playerConfig, providersConfig);
//   const kalturaPlayer = Object.assign(player, kalturaPlayerApi);
//   setStorageTextStyle(kalturaPlayer);
//   applyStorageSupport(kalturaPlayer);
//   return kalturaPlayer;
// }
//
// export {setup};


      /***/
    })
    /******/]);
});
//# sourceMappingURL=kaltura-player.js.map
